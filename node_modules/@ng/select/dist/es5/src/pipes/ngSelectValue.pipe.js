/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { isBlank } from '@asseco/common';
/**
 * Pipe to transform ng select selected option into
 * @template TValue
 */
var NgSelectValuePipe = /** @class */ (function () {
    function NgSelectValuePipe() {
    }
    //######################### public methods #########################
    /**
     * Transforms selected option into string
     * @param options Selected options to be transformed into text
     * @param nothingSelectedText Text displayed if nothing is selected
     */
    //######################### public methods #########################
    /**
     * Transforms selected option into string
     * @param {?} options Selected options to be transformed into text
     * @param {?} nothingSelectedText Text displayed if nothing is selected
     * @return {?}
     */
    NgSelectValuePipe.prototype.transform = 
    //######################### public methods #########################
    /**
     * Transforms selected option into string
     * @param {?} options Selected options to be transformed into text
     * @param {?} nothingSelectedText Text displayed if nothing is selected
     * @return {?}
     */
    function (options, nothingSelectedText) {
        if (isBlank(options) || (Array.isArray(options) && !options.length)) {
            return nothingSelectedText;
        }
        if (Array.isArray(options)) {
            return options.map((/**
             * @param {?} option
             * @return {?}
             */
            function (option) { return option.text; })).join(', ');
        }
        return options.text;
    };
    NgSelectValuePipe.decorators = [
        { type: Pipe, args: [{ name: 'ngSelectValue' },] }
    ];
    return NgSelectValuePipe;
}());
export { NgSelectValuePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdTZWxlY3RWYWx1ZS5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3BpcGVzL25nU2VsZWN0VmFsdWUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7OztBQU92QztJQUFBO0lBd0JBLENBQUM7SUFyQkcsb0VBQW9FO0lBRXBFOzs7O09BSUc7Ozs7Ozs7O0lBQ0kscUNBQVM7Ozs7Ozs7O0lBQWhCLFVBQWlCLE9BQTZELEVBQUUsbUJBQTJCO1FBRXZHLElBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFDbEU7WUFDSSxPQUFPLG1CQUFtQixDQUFDO1NBQzlCO1FBRUQsSUFBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUN6QjtZQUNJLE9BQU8sT0FBTyxDQUFDLEdBQUc7Ozs7WUFBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxJQUFJLEVBQVgsQ0FBVyxFQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3hEO1FBRUQsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQ3hCLENBQUM7O2dCQXZCSixJQUFJLFNBQUMsRUFBQyxJQUFJLEVBQUUsZUFBZSxFQUFDOztJQXdCN0Isd0JBQUM7Q0FBQSxBQXhCRCxJQXdCQztTQXZCWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1BpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge2lzQmxhbmt9IGZyb20gJ0Bhc3NlY28vY29tbW9uJztcclxuXHJcbmltcG9ydCB7TmdTZWxlY3RPcHRpb259IGZyb20gJy4uL2NvbXBvbmVudHMvb3B0aW9uJztcclxuXHJcbi8qKlxyXG4gKiBQaXBlIHRvIHRyYW5zZm9ybSBuZyBzZWxlY3Qgc2VsZWN0ZWQgb3B0aW9uIGludG9cclxuICovXHJcbkBQaXBlKHtuYW1lOiAnbmdTZWxlY3RWYWx1ZSd9KVxyXG5leHBvcnQgY2xhc3MgTmdTZWxlY3RWYWx1ZVBpcGU8VFZhbHVlPiBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm1cclxue1xyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHB1YmxpYyBtZXRob2RzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFuc2Zvcm1zIHNlbGVjdGVkIG9wdGlvbiBpbnRvIHN0cmluZ1xyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgU2VsZWN0ZWQgb3B0aW9ucyB0byBiZSB0cmFuc2Zvcm1lZCBpbnRvIHRleHRcclxuICAgICAqIEBwYXJhbSBub3RoaW5nU2VsZWN0ZWRUZXh0IFRleHQgZGlzcGxheWVkIGlmIG5vdGhpbmcgaXMgc2VsZWN0ZWRcclxuICAgICAqLyAgIFxyXG4gICAgcHVibGljIHRyYW5zZm9ybShvcHRpb25zOiBOZ1NlbGVjdE9wdGlvbjxUVmFsdWU+fEFycmF5PE5nU2VsZWN0T3B0aW9uPFRWYWx1ZT4+LCBub3RoaW5nU2VsZWN0ZWRUZXh0OiBzdHJpbmcpOiBzdHJpbmdcclxuICAgIHtcclxuICAgICAgICBpZihpc0JsYW5rKG9wdGlvbnMpIHx8IChBcnJheS5pc0FycmF5KG9wdGlvbnMpICYmICFvcHRpb25zLmxlbmd0aCkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gbm90aGluZ1NlbGVjdGVkVGV4dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKEFycmF5LmlzQXJyYXkob3B0aW9ucykpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5tYXAob3B0aW9uID0+IG9wdGlvbi50ZXh0KS5qb2luKCcsICcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMudGV4dDtcclxuICAgIH1cclxufVxyXG5cclxuIl19