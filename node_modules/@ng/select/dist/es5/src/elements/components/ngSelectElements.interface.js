/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Public API for NgSelect WebComponent
 * @record
 * @template TValue
 */
export function NgSelectWebComponent() { }
if (false) {
    /**
     * Occurs every time when NgSelect is initialized or reinitialized, if value is false NgSelect was not initialized yet
     * @type {?}
     */
    NgSelectWebComponent.prototype.initializedWC;
    /**
     * Gets current state of initialization
     * @type {?}
     */
    NgSelectWebComponent.prototype.isInitializedWC;
    /**
     * Gets or sets NgSelect options
     * @type {?}
     */
    NgSelectWebComponent.prototype.selectOptionsWC;
    /**
     * Initialize component, automatically called once if not blocked by options
     * @return {?}
     */
    NgSelectWebComponent.prototype.initializeWC = function () { };
    /**
     * Initialize options, automaticaly called during init phase, but can be used to reinitialize NgSelectOptions
     * @return {?}
     */
    NgSelectWebComponent.prototype.initOptionsWC = function () { };
    /**
     * Gets instance of plugin by its id
     * @template PluginType
     * @param {?} pluginId Id of plugin, use constants
     * @return {?}
     */
    NgSelectWebComponent.prototype.getPluginWC = function (pluginId) { };
    /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    NgSelectWebComponent.prototype.invalidateVisualsWC = function () { };
    /**
     * Executes actions on NgSelect
     * @param {...?} actions Array of actions that are executed over NgSelect
     * @return {?}
     */
    NgSelectWebComponent.prototype.executeWC = function (actions) { };
    /**
     * Executes function on NgSelect and returns result
     * @template TResult
     * @param {?} func Function that is executed and its result is returned
     * @return {?}
     */
    NgSelectWebComponent.prototype.executeAndReturnWC = function (func) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdTZWxlY3RFbGVtZW50cy5pbnRlcmZhY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZWxlbWVudHMvY29tcG9uZW50cy9uZ1NlbGVjdEVsZW1lbnRzLmludGVyZmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFNQSwwQ0FpREM7Ozs7OztJQTVDRyw2Q0FBNEM7Ozs7O0lBSzVDLCtDQUFrQzs7Ozs7SUFLbEMsK0NBQXlDOzs7OztJQUt6Qyw4REFBZTs7Ozs7SUFLZiwrREFBZ0I7Ozs7Ozs7SUFNaEIscUVBQTZFOzs7OztJQUs3RSxxRUFBNEI7Ozs7OztJQU01QixrRUFBZ0Q7Ozs7Ozs7SUFNaEQsd0VBQThFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtOZ1NlbGVjdE9wdGlvbnMsIE5nU2VsZWN0UGx1Z2luLCBOZ1NlbGVjdEFjdGlvbiwgTmdTZWxlY3RGdW5jdGlvbn0gZnJvbSBcIkBuZy9zZWxlY3RcIjtcclxuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tIFwicnhqc1wiO1xyXG5cclxuLyoqXHJcbiAqIFB1YmxpYyBBUEkgZm9yIE5nU2VsZWN0IFdlYkNvbXBvbmVudFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBOZ1NlbGVjdFdlYkNvbXBvbmVudDxUVmFsdWU+XHJcbntcclxuICAgIC8qKlxyXG4gICAgICogT2NjdXJzIGV2ZXJ5IHRpbWUgd2hlbiBOZ1NlbGVjdCBpcyBpbml0aWFsaXplZCBvciByZWluaXRpYWxpemVkLCBpZiB2YWx1ZSBpcyBmYWxzZSBOZ1NlbGVjdCB3YXMgbm90IGluaXRpYWxpemVkIHlldFxyXG4gICAgICovXHJcbiAgICByZWFkb25seSBpbml0aWFsaXplZFdDOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBjdXJyZW50IHN0YXRlIG9mIGluaXRpYWxpemF0aW9uXHJcbiAgICAgKi9cclxuICAgIHJlYWRvbmx5IGlzSW5pdGlhbGl6ZWRXQzogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBOZ1NlbGVjdCBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIHNlbGVjdE9wdGlvbnNXQzogTmdTZWxlY3RPcHRpb25zPFRWYWx1ZT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplIGNvbXBvbmVudCwgYXV0b21hdGljYWxseSBjYWxsZWQgb25jZSBpZiBub3QgYmxvY2tlZCBieSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGluaXRpYWxpemVXQygpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZSBvcHRpb25zLCBhdXRvbWF0aWNhbHkgY2FsbGVkIGR1cmluZyBpbml0IHBoYXNlLCBidXQgY2FuIGJlIHVzZWQgdG8gcmVpbml0aWFsaXplIE5nU2VsZWN0T3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBpbml0T3B0aW9uc1dDKCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGluc3RhbmNlIG9mIHBsdWdpbiBieSBpdHMgaWRcclxuICAgICAqIEBwYXJhbSBwbHVnaW5JZCBJZCBvZiBwbHVnaW4sIHVzZSBjb25zdGFudHNcclxuICAgICAqL1xyXG4gICAgZ2V0UGx1Z2luV0M8UGx1Z2luVHlwZSBleHRlbmRzIE5nU2VsZWN0UGx1Z2luPihwbHVnaW5JZDogc3RyaW5nKTogUGx1Z2luVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEV4cGxpY2l0bHkgcnVucyBpbnZhbGlkYXRpb24gb2YgY29udGVudCAoY2hhbmdlIGRldGVjdGlvbilcclxuICAgICAqL1xyXG4gICAgaW52YWxpZGF0ZVZpc3VhbHNXQygpOiB2b2lkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXhlY3V0ZXMgYWN0aW9ucyBvbiBOZ1NlbGVjdFxyXG4gICAgICogQHBhcmFtIGFjdGlvbnMgQXJyYXkgb2YgYWN0aW9ucyB0aGF0IGFyZSBleGVjdXRlZCBvdmVyIE5nU2VsZWN0XHJcbiAgICAgKi9cclxuICAgIGV4ZWN1dGVXQyguLi5hY3Rpb25zOiBOZ1NlbGVjdEFjdGlvbjxUVmFsdWU+W10pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXhlY3V0ZXMgZnVuY3Rpb24gb24gTmdTZWxlY3QgYW5kIHJldHVybnMgcmVzdWx0XHJcbiAgICAgKiBAcGFyYW0gZnVuYyBGdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIGFuZCBpdHMgcmVzdWx0IGlzIHJldHVybmVkXHJcbiAgICAgKi9cclxuICAgIGV4ZWN1dGVBbmRSZXR1cm5XQzxUUmVzdWx0PihmdW5jOiBOZ1NlbGVjdEZ1bmN0aW9uPFRSZXN1bHQsIFRWYWx1ZT4pOiBUUmVzdWx0O1xyXG59Il19