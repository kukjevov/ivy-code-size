var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, Input, ChangeDetectorRef, ElementRef, Inject, Attribute } from "@angular/core";
import { isString } from '@asseco/common';
import { NgSelectComponent, NG_SELECT_PLUGIN_INSTANCES, ngSelectPluginInstancesFactory, CodeOptionsGatherer } from "@ng/select";
import { Observable } from "rxjs";
/** @type {?} */
var NG_OPTION = "NG-OPTION";
var Éµ0 = ngSelectPluginInstancesFactory;
/**
 * Component that represents WebComponent implementation of NgSelect
 * @template TValue
 */
var NgSelectElementsComponent = /** @class */ (function (_super) {
    __extends(NgSelectElementsComponent, _super);
    //######################### constructors #########################
    function NgSelectElementsComponent(changeDetector, element, pluginInstances, readonly, disabled, multiple) {
        var _this = _super.call(this, changeDetector, element, pluginInstances, null, null, null, null, null, null, null, null, null, readonly, disabled, multiple) || this;
        _this.pluginInstances = pluginInstances;
        /**
         * Options gatherer used for NgSelect WebComponent
         */
        _this._codeOptionsGatherer = new CodeOptionsGatherer();
        //######################### public methods #########################
        /**
         * Initialize component, automatically called once if not blocked by options
         */
        _this.initializeWC = (/**
         * @return {?}
         */
        function () { return _this.initialize(); });
        /**
         * Initialize options, automaticaly called during init phase, but can be used to reinitialize NgSelectOptions
         */
        _this.initOptionsWC = (/**
         * @return {?}
         */
        function () { return _this.initOptions(); });
        /**
         * Gets instance of plugin by its id
         * @param pluginId Id of plugin, use constants
         */
        _this.getPluginWC = (/**
         * @template PluginType
         * @param {?} pluginId
         * @return {?}
         */
        function (pluginId) { return _this.getPlugin(pluginId); });
        /**
         * Explicitly runs invalidation of content (change detection)
         */
        _this.invalidateVisualsWC = (/**
         * @return {?}
         */
        function () { return _this.invalidateVisuals(); });
        /**
         * Executes actions on NgSelect
         * @param actions Array of actions that are executed over NgSelect
         */
        _this.executeWC = (/**
         * @param {...?} actions
         * @return {?}
         */
        function () {
            var actions = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                actions[_i] = arguments[_i];
            }
            return _this.execute.apply(_this, actions);
        });
        /**
         * Executes function on NgSelect and returns result
         * @param func Function that is executed and its result is returned
         */
        _this.executeAndReturnWC = (/**
         * @template TResult
         * @param {?} func
         * @return {?}
         */
        function (func) { return _this.executeAndReturn(func); });
        _this._selectOptions.optionsGatherer = _this._codeOptionsGatherer;
        _this._optionsObserver = new MutationObserver((/**
         * @param {?} mutationsList
         * @return {?}
         */
        function (mutationsList) {
            /** @type {?} */
            var added = false;
            /** @type {?} */
            var removed = false;
            console.log('mutations', mutationsList);
            mutationsList.forEach((/**
             * @param {?} itm
             * @return {?}
             */
            function (itm) {
                itm.addedNodes.forEach((/**
                 * @param {?} node
                 * @return {?}
                 */
                function (node) {
                    if (node.nodeName == NG_OPTION) {
                        added = true;
                    }
                }));
                itm.removedNodes.forEach((/**
                 * @param {?} node
                 * @return {?}
                 */
                function (node) {
                    if (node.nodeName == NG_OPTION) {
                        removed = true;
                    }
                }));
                if (added || removed) {
                    /** @type {?} */
                    var options = [];
                    for (var x = 0; x < element.nativeElement.children.length; x++) {
                        /** @type {?} */
                        var itm_1 = (/** @type {?} */ (element.nativeElement.children.item(x)));
                        if (itm_1.nodeName == NG_OPTION) {
                            options.push(itm_1);
                        }
                    }
                    _this._codeOptionsGatherer.options = options;
                    _this._codeOptionsGatherer.optionsChange.emit();
                    _this._codeOptionsGatherer.availableOptionsChange.emit();
                }
            }));
        }));
        _this._optionsObserver.observe(element.nativeElement, {
            childList: true
        });
        return _this;
    }
    Object.defineProperty(NgSelectElementsComponent.prototype, "initializedWC", {
        //######################### public properties #########################
        /**
         * Occurs every time when NgSelect is initialized or reinitialized, if value is false NgSelect was not initialized yet
         */
        get: 
        //######################### public properties #########################
        /**
         * Occurs every time when NgSelect is initialized or reinitialized, if value is false NgSelect was not initialized yet
         * @return {?}
         */
        function () {
            return this.initialized;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgSelectElementsComponent.prototype, "isInitializedWC", {
        /**
         * Gets current state of initialization
         */
        get: /**
         * Gets current state of initialization
         * @return {?}
         */
        function () {
            return this.isInitialized;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgSelectElementsComponent.prototype, "selectOptionsWC", {
        get: /**
         * @return {?}
         */
        function () {
            return this.selectOptions;
        },
        /**
         * Gets or sets NgSelect options
         */
        set: /**
         * Gets or sets NgSelect options
         * @param {?} options
         * @return {?}
         */
        function (options) {
            if (isString(options)) {
                try {
                    options = JSON.parse(options);
                }
                catch (e) {
                    console.log(e);
                    options = {};
                }
            }
            this.selectOptions = options;
        },
        enumerable: true,
        configurable: true
    });
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     */
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    NgSelectElementsComponent.prototype.ngOnDestroy = 
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    function () {
        if (this._optionsObserver) {
            this._optionsObserver.disconnect();
            this._optionsObserver = null;
        }
        _super.prototype.ngOnDestroy.call(this);
    };
    NgSelectElementsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-select-web-component',
                    template: "<ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.textsLocator?.type\" (ngComponentOutletExCreated)=\"setTextsLocatorComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.liveSearch?.type\" (ngComponentOutletExCreated)=\"setLiveSearchComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.positioner?.type\" (ngComponentOutletExCreated)=\"setPositionerComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.keyboardHandler?.type\" (ngComponentOutletExCreated)=\"setKeyboardHandlerComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.valueHandler?.type\" (ngComponentOutletExCreated)=\"setValueHandlerComponent($event)\"></ng-template>\r\n\r\n<div>\r\n    <ng-template [ngIf]=\"!selectOptions?.readonly\">\r\n        <ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.normalState?.type\" (ngComponentOutletExCreated)=\"setNormalStateComponent($event)\" [ngComponentOutletExContent]=\"liveSearchElement\"></ng-template>\r\n    </ng-template>\r\n\r\n    <ng-template [ngIf]=\"selectOptions?.readonly\">\r\n        <ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.readonlyState?.type\" (ngComponentOutletExCreated)=\"setReadonlyStateComponent($event)\"></ng-template>\r\n    </ng-template>\r\n\r\n    <ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.popup?.type\" (ngComponentOutletExCreated)=\"setPopupComponent($event)\" [ngComponentOutletExContent]=\"liveSearchElement\"></ng-template>\r\n</div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        (/** @type {?} */ ({
                            provide: NG_SELECT_PLUGIN_INSTANCES,
                            useFactory: Éµ0
                        }))
                    ],
                    styles: [":host\n        {\n            display: block;\n            position: relative;\n        }"]
                }] }
    ];
    /** @nocollapse */
    NgSelectElementsComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Inject, args: [NG_SELECT_PLUGIN_INSTANCES,] }] },
        { type: String, decorators: [{ type: Attribute, args: ['readonly',] }] },
        { type: String, decorators: [{ type: Attribute, args: ['disabled',] }] },
        { type: String, decorators: [{ type: Attribute, args: ['multiple',] }] }
    ]; };
    NgSelectElementsComponent.propDecorators = {
        initializedWC: [{ type: Input }],
        isInitializedWC: [{ type: Input }],
        selectOptionsWC: [{ type: Input, args: ['selectOptions',] }],
        initializeWC: [{ type: Input }],
        initOptionsWC: [{ type: Input }],
        getPluginWC: [{ type: Input }],
        invalidateVisualsWC: [{ type: Input }],
        executeWC: [{ type: Input }],
        executeAndReturnWC: [{ type: Input }]
    };
    return NgSelectElementsComponent;
}(NgSelectComponent));
export { NgSelectElementsComponent };
if (false) {
    /**
     * Mutation observer, that observes ng-options
     * @type {?}
     * @protected
     */
    NgSelectElementsComponent.prototype._optionsObserver;
    /**
     * Options gatherer used for NgSelect WebComponent
     * @type {?}
     * @protected
     */
    NgSelectElementsComponent.prototype._codeOptionsGatherer;
    /**
     * Initialize component, automatically called once if not blocked by options
     * @type {?}
     */
    NgSelectElementsComponent.prototype.initializeWC;
    /**
     * Initialize options, automaticaly called during init phase, but can be used to reinitialize NgSelectOptions
     * @type {?}
     */
    NgSelectElementsComponent.prototype.initOptionsWC;
    /**
     * Gets instance of plugin by its id
     * \@param pluginId Id of plugin, use constants
     * @type {?}
     */
    NgSelectElementsComponent.prototype.getPluginWC;
    /**
     * Explicitly runs invalidation of content (change detection)
     * @type {?}
     */
    NgSelectElementsComponent.prototype.invalidateVisualsWC;
    /**
     * Executes actions on NgSelect
     * \@param actions Array of actions that are executed over NgSelect
     * @type {?}
     */
    NgSelectElementsComponent.prototype.executeWC;
    /**
     * Executes function on NgSelect and returns result
     * \@param func Function that is executed and its result is returned
     * @type {?}
     */
    NgSelectElementsComponent.prototype.executeAndReturnWC;
    /**
     * @type {?}
     * @protected
     */
    NgSelectElementsComponent.prototype.pluginInstances;
}
export { Éµ0 };
//# sourceMappingURL=data:application/json;base64,