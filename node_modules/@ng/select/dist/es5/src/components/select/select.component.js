/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, Input, Inject, ChangeDetectorRef, Optional, Type, ContentChildren, QueryList, EventEmitter, forwardRef, resolveForwardRef, ElementRef, Attribute, TemplateRef, ContentChild } from "@angular/core";
import { extend, nameof, isBoolean, isPresent } from "@asseco/common";
import { BehaviorSubject } from "rxjs";
import { NG_SELECT_OPTIONS, KEYBOARD_HANDLER_TYPE, NORMAL_STATE_TYPE, POPUP_TYPE, POSITIONER_TYPE, READONLY_STATE_TYPE, VALUE_HANDLER_TYPE, LIVE_SEARCH_TYPE } from "../../misc/types";
import { NG_SELECT_PLUGIN_INSTANCES } from "./types";
import { BasicKeyboardHandlerComponent } from "../../plugins/keyboardHandler/components";
import { KEYBOARD_HANDLER } from "../../plugins/keyboardHandler/types";
import { NORMAL_STATE } from "../../plugins/normalState/types";
import { BasicNormalStateComponent } from "../../plugins/normalState/components";
import { POPUP } from "../../plugins/popup/types";
import { BasicPopupComponent } from "../../plugins/popup/component";
import { POSITIONER } from "../../plugins/positioner/types";
import { BasicPositionerComponent } from "../../plugins/positioner/components";
import { READONLY_STATE } from "../../plugins/readonlyState/types";
import { VALUE_HANDLER } from "../../plugins/valueHandler/types";
import { BasicValueHandlerComponent } from "../../plugins/valueHandler/components";
import { LIVE_SEARCH } from "../../plugins/liveSearch/types";
import { NoLiveSearchComponent } from "../../plugins/liveSearch/components";
import { TEXTS_LOCATOR } from "../../plugins/textsLocator/types";
import { NoTextsLocatorComponent } from "../../plugins/textsLocator/components";
import { OptionComponent } from "../option/option.component";
import { OptGroupComponent } from "../option/optgroup.component";
var ɵ0 = /**
 * @param {?} source
 * @param {?} target
 * @return {?}
 */
function (source, target) {
    return source == target;
}, ɵ1 = /**
 * @param {?} query
 * @return {?}
 */
function (query) {
    return (/**
     * @param {?} itm
     * @return {?}
     */
    function (itm) { return itm.text.indexOf(query) >= 0; });
};
/**
 * Default 'NgSelectOptions'
 * \@internal
 * @type {?}
 */
var defaultOptions = {
    autoInitialize: true,
    valueComparer: (ɵ0),
    liveSearchFilter: (ɵ1),
    cssClasses: {},
    plugins: {
        normalState: (/** @type {?} */ ({
            type: forwardRef((/**
             * @return {?}
             */
            function () { return BasicNormalStateComponent; }))
        })),
        textsLocator: (/** @type {?} */ ({
            type: forwardRef((/**
             * @return {?}
             */
            function () { return NoTextsLocatorComponent; }))
        })),
        liveSearch: (/** @type {?} */ ({
            type: forwardRef((/**
             * @return {?}
             */
            function () { return NoLiveSearchComponent; }))
        })),
        popup: (/** @type {?} */ ({
            type: forwardRef((/**
             * @return {?}
             */
            function () { return BasicPopupComponent; }))
        })),
        positioner: (/** @type {?} */ ({
            type: forwardRef((/**
             * @return {?}
             */
            function () { return BasicPositionerComponent; }))
        })),
        keyboardHandler: (/** @type {?} */ ({
            type: forwardRef((/**
             * @return {?}
             */
            function () { return BasicKeyboardHandlerComponent; }))
        })),
        readonlyState: (/** @type {?} */ ({
            type: forwardRef((/**
             * @return {?}
             */
            function () { return BasicNormalStateComponent; }))
        })),
        valueHandler: (/** @type {?} */ ({
            type: forwardRef((/**
             * @return {?}
             */
            function () { return BasicValueHandlerComponent; }))
        }))
    }
};
/**
 * NgSelect plugin instances factory method
 * \@internal
 * @return {?}
 */
export function ngSelectPluginInstancesFactory() {
    return {};
}
/**
 * Component that represents NgSelect itself, allows selection of value from options
 * @template TValue
 */
var NgSelectComponent = /** @class */ (function () {
    //######################### constructors #########################
    function NgSelectComponent(_changeDetector, _element, _pluginInstances, options, normalStateType, keyboardHandlerType, popupType, positionerType, readonlyStateType, valueHandlerType, liveSearchType, textsLocatorType, readonly, disabled, multiple) {
        this._changeDetector = _changeDetector;
        this._element = _element;
        this._pluginInstances = _pluginInstances;
        /**
         * Subject used for indication that NgSelect was initialized
         */
        this._initializedSubject = new BehaviorSubject(false);
        /**
         * Occurs when array of provided options has changed
         */
        this._optionsChange = new EventEmitter();
        /**
         * Occurs when array of visible, displayed options has changed
         */
        this._availableOptionsChange = new EventEmitter();
        /**
         * Array of available options to be displayed
         */
        this._availableOptions = [];
        /**
         * Gets current state of initialization
         */
        this.isInitialized = false;
        //at least on of following is present (value is not important)
        /** @type {?} */
        var readonlyDefault = isPresent(readonly) || isPresent(disabled);
        /** @type {?} */
        var multipleDefault = isPresent(multiple);
        /** @type {?} */
        var opts = extend(true, {}, options);
        if (!opts.plugins) {
            opts.plugins = {};
        }
        if (keyboardHandlerType) {
            if (!opts.plugins.keyboardHandler) {
                opts.plugins.keyboardHandler = {};
            }
            opts.plugins.keyboardHandler.type = keyboardHandlerType;
        }
        if (normalStateType) {
            if (!opts.plugins.normalState) {
                opts.plugins.normalState = {};
            }
            opts.plugins.normalState.type = normalStateType;
        }
        if (popupType) {
            if (!opts.plugins.popup) {
                opts.plugins.popup = {};
            }
            opts.plugins.popup.type = popupType;
        }
        if (positionerType) {
            if (!opts.plugins.positioner) {
                opts.plugins.positioner = {};
            }
            opts.plugins.positioner.type = positionerType;
        }
        if (readonlyStateType) {
            if (!opts.plugins.readonlyState) {
                opts.plugins.readonlyState = {};
            }
            opts.plugins.readonlyState.type = readonlyStateType;
        }
        if (valueHandlerType) {
            if (!opts.plugins.valueHandler) {
                opts.plugins.valueHandler = {};
            }
            opts.plugins.valueHandler.type = valueHandlerType;
        }
        if (liveSearchType) {
            if (!opts.plugins.liveSearch) {
                opts.plugins.liveSearch = {};
            }
            opts.plugins.liveSearch.type = liveSearchType;
        }
        if (textsLocatorType) {
            if (!opts.plugins.textsLocator) {
                opts.plugins.textsLocator = {};
            }
            opts.plugins.textsLocator.type = textsLocatorType;
        }
        this._selectOptions = extend(true, (/** @type {?} */ ({
            optionsGatherer: this,
            templateGatherer: this,
            readonly: readonlyDefault,
            plugins: {
                popup: {
                    options: (/** @type {?} */ ({
                        multiple: multipleDefault
                    }))
                },
                valueHandler: {
                    options: (/** @type {?} */ ({
                        multiple: multipleDefault
                    }))
                }
            }
        })), defaultOptions, opts);
    }
    Object.defineProperty(NgSelectComponent.prototype, "selectOptions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectOptions;
        },
        //######################### public properties - inputs #########################
        /**
         * Gets or sets NgSelect options
         */
        set: 
        //######################### public properties - inputs #########################
        /**
         * Gets or sets NgSelect options
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this._selectOptions = extend(true, this._selectOptions, options);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgSelectComponent.prototype, "initialized", {
        //######################### public properties - implementation of NgSelect #########################
        /**
         * Occurs every time when NgSelect is initialized or reinitialized, if value is false NgSelect was not initialized yet
         */
        get: 
        //######################### public properties - implementation of NgSelect #########################
        /**
         * Occurs every time when NgSelect is initialized or reinitialized, if value is false NgSelect was not initialized yet
         * @return {?}
         */
        function () {
            return this._initializedSubject.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgSelectComponent.prototype, "options", {
        //######################### public properties - implementation of OptionsGatherer #########################
        /**
         * Array of provided options for select
         * @internal
         */
        get: 
        //######################### public properties - implementation of OptionsGatherer #########################
        /**
         * Array of provided options for select
         * \@internal
         * @return {?}
         */
        function () {
            return this.optionsChildren.toArray();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgSelectComponent.prototype, "optionsChange", {
        /**
         * Occurs when array of provided options has changed
         * @internal
         */
        get: /**
         * Occurs when array of provided options has changed
         * \@internal
         * @return {?}
         */
        function () {
            return this._optionsChange;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgSelectComponent.prototype, "availableOptions", {
        /**
         * Array of visible, displayed options for select
         * @internal
         */
        get: /**
         * Array of visible, displayed options for select
         * \@internal
         * @return {?}
         */
        function () {
            return this._availableOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgSelectComponent.prototype, "availableOptionsChange", {
        /**
         * Occurs when array of visible, displayed options has changed
         * @internal
         */
        get: /**
         * Occurs when array of visible, displayed options has changed
         * \@internal
         * @return {?}
         */
        function () {
            return this._availableOptionsChange;
        },
        enumerable: true,
        configurable: true
    });
    //######################### public methods - implementation of OnChanges #########################
    /**
     * Called when input value changes
     */
    //######################### public methods - implementation of OnChanges #########################
    /**
     * Called when input value changes
     * @param {?} changes
     * @return {?}
     */
    NgSelectComponent.prototype.ngOnChanges = 
    //######################### public methods - implementation of OnChanges #########################
    /**
     * Called when input value changes
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        /** @type {?} */
        var updateReadonly = (/**
         * @param {?} state
         * @param {?} firstChange
         * @return {?}
         */
        function (state, firstChange) {
            //update options
            _this.selectOptions.readonly = state;
            if (!firstChange) {
                _this.initOptions();
                _this.initialize();
            }
        });
        if (nameof('disabled') in changes && isBoolean(this.disabled)) {
            updateReadonly(this.disabled, changes[nameof('disabled')].firstChange);
        }
        if (nameof('readonly') in changes && isBoolean(this.readonly)) {
            updateReadonly(this.readonly, changes[nameof('readonly')].firstChange);
        }
    };
    //######################### public methods - implementation of OnInit #########################
    /**
     * Initialize component
     */
    //######################### public methods - implementation of OnInit #########################
    /**
     * Initialize component
     * @return {?}
     */
    NgSelectComponent.prototype.ngOnInit = 
    //######################### public methods - implementation of OnInit #########################
    /**
     * Initialize component
     * @return {?}
     */
    function () {
        this.initOptions();
    };
    //######################### public methods - implementation of AfterViewInit #########################
    /**
     * Called when view was initialized
     */
    //######################### public methods - implementation of AfterViewInit #########################
    /**
     * Called when view was initialized
     * @return {?}
     */
    NgSelectComponent.prototype.ngAfterViewInit = 
    //######################### public methods - implementation of AfterViewInit #########################
    /**
     * Called when view was initialized
     * @return {?}
     */
    function () {
        var _this = this;
        this._availableOptions = this.options;
        this.optionsChildren.changes.subscribe((/**
         * @return {?}
         */
        function () {
            _this._availableOptions = _this.options;
            _this._optionsChange.emit();
            _this._availableOptionsChange.emit();
        }));
        if (this._selectOptions.autoInitialize) {
            this.initialize();
        }
    };
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     */
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    NgSelectComponent.prototype.ngOnDestroy = 
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    function () {
        if (this._searchValueChangeSubscription) {
            this._searchValueChangeSubscription.unsubscribe();
            this._searchValueChangeSubscription = null;
        }
        if (this.selectOptions.optionsGatherer) {
            this.selectOptions.optionsGatherer.destroyGatherer();
        }
    };
    //######################### public methods - implementation of OptionsGatherer #########################
    /**
     * Initialize gatherer during initialization phase
     * @internal
     */
    //######################### public methods - implementation of OptionsGatherer #########################
    /**
     * Initialize gatherer during initialization phase
     * \@internal
     * @return {?}
     */
    NgSelectComponent.prototype.initializeGatherer = 
    //######################### public methods - implementation of OptionsGatherer #########################
    /**
     * Initialize gatherer during initialization phase
     * \@internal
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var liveSearch = (/** @type {?} */ (this._pluginInstances[LIVE_SEARCH]));
        if (this._liveSearch && this._liveSearch != liveSearch) {
            this._searchValueChangeSubscription.unsubscribe();
            this._searchValueChangeSubscription = null;
            this._liveSearch = null;
        }
        if (!this._liveSearch) {
            this._liveSearch = liveSearch;
            this._searchValueChangeSubscription = this._liveSearch.searchValueChange.subscribe((/**
             * @return {?}
             */
            function () {
                if (!_this._liveSearch.searchValue) {
                    _this._availableOptions = _this.options;
                    _this._availableOptionsChange.emit();
                    return;
                }
                _this._availableOptions = _this.options.filter(_this.selectOptions.liveSearchFilter(_this._liveSearch.searchValue));
                _this._availableOptionsChange.emit();
            }));
        }
    };
    /**
     * Called when gatherer needs to be destroyed
     * @internal
     */
    /**
     * Called when gatherer needs to be destroyed
     * \@internal
     * @return {?}
     */
    NgSelectComponent.prototype.destroyGatherer = /**
     * Called when gatherer needs to be destroyed
     * \@internal
     * @return {?}
     */
    function () {
    };
    //######################### public methods - template bindings #########################
    /**
     * Sets normal state component
     * @param normalState Created normal state that is rendered
     * @internal
     */
    //######################### public methods - template bindings #########################
    /**
     * Sets normal state component
     * \@internal
     * @param {?} normalState Created normal state that is rendered
     * @return {?}
     */
    NgSelectComponent.prototype.setNormalStateComponent = 
    //######################### public methods - template bindings #########################
    /**
     * Sets normal state component
     * \@internal
     * @param {?} normalState Created normal state that is rendered
     * @return {?}
     */
    function (normalState) {
        if (!normalState) {
            return;
        }
        this._pluginInstances[NORMAL_STATE] = normalState;
        if (this._selectOptions.plugins && this._selectOptions.plugins.normalState && this._selectOptions.plugins.normalState.options) {
            normalState.options = this._selectOptions.plugins.normalState.options;
        }
        normalState.templateGatherer = this.selectOptions.templateGatherer;
        normalState.initOptions();
        if (this._selectOptions.plugins && this._selectOptions.plugins.normalState && this._selectOptions.plugins.normalState.instanceCallback) {
            this._selectOptions.plugins.normalState.instanceCallback(normalState);
        }
    };
    /**
     * Sets keyboard handler component
     * @param keyboardHandler Created keyboard handler that is rendered
     * @internal
     */
    /**
     * Sets keyboard handler component
     * \@internal
     * @param {?} keyboardHandler Created keyboard handler that is rendered
     * @return {?}
     */
    NgSelectComponent.prototype.setKeyboardHandlerComponent = /**
     * Sets keyboard handler component
     * \@internal
     * @param {?} keyboardHandler Created keyboard handler that is rendered
     * @return {?}
     */
    function (keyboardHandler) {
        if (!keyboardHandler) {
            return;
        }
        this._pluginInstances[KEYBOARD_HANDLER] = keyboardHandler;
        if (this._selectOptions.plugins && this._selectOptions.plugins.keyboardHandler && this._selectOptions.plugins.keyboardHandler.options) {
            keyboardHandler.options = this._selectOptions.plugins.keyboardHandler.options;
        }
        keyboardHandler.selectElement = this._element.nativeElement;
        keyboardHandler.optionsGatherer = this.selectOptions.optionsGatherer;
        keyboardHandler.initOptions();
        if (this._selectOptions.plugins && this._selectOptions.plugins.keyboardHandler && this._selectOptions.plugins.keyboardHandler.instanceCallback) {
            this._selectOptions.plugins.keyboardHandler.instanceCallback(keyboardHandler);
        }
    };
    /**
     * Sets popup component
     * @param popup Created popup that is rendered
     * @internal
     */
    /**
     * Sets popup component
     * \@internal
     * @param {?} popup Created popup that is rendered
     * @return {?}
     */
    NgSelectComponent.prototype.setPopupComponent = /**
     * Sets popup component
     * \@internal
     * @param {?} popup Created popup that is rendered
     * @return {?}
     */
    function (popup) {
        if (!popup) {
            return;
        }
        this._pluginInstances[POPUP] = popup;
        if (this._selectOptions.plugins && this._selectOptions.plugins.popup && this._selectOptions.plugins.popup.options) {
            popup.options = this._selectOptions.plugins.popup.options;
        }
        popup.selectElement = this._element.nativeElement;
        popup.optionsGatherer = this.selectOptions.optionsGatherer;
        popup.templateGatherer = this.selectOptions.templateGatherer;
        popup.initOptions();
        if (this._selectOptions.plugins && this._selectOptions.plugins.popup && this._selectOptions.plugins.popup.instanceCallback) {
            this._selectOptions.plugins.popup.instanceCallback(popup);
        }
    };
    /**
     * Sets positioner component
     * @param positioner Created positioner that is rendered
     * @internal
     */
    /**
     * Sets positioner component
     * \@internal
     * @param {?} positioner Created positioner that is rendered
     * @return {?}
     */
    NgSelectComponent.prototype.setPositionerComponent = /**
     * Sets positioner component
     * \@internal
     * @param {?} positioner Created positioner that is rendered
     * @return {?}
     */
    function (positioner) {
        if (!positioner) {
            return;
        }
        this._pluginInstances[POSITIONER] = positioner;
        if (this._selectOptions.plugins && this._selectOptions.plugins.positioner && this._selectOptions.plugins.positioner.options) {
            positioner.options = this._selectOptions.plugins.positioner.options;
        }
        positioner.selectElement = this._element.nativeElement;
        positioner.optionsGatherer = this.selectOptions.optionsGatherer;
        positioner.initOptions();
        if (this._selectOptions.plugins && this._selectOptions.plugins.positioner && this._selectOptions.plugins.positioner.instanceCallback) {
            this._selectOptions.plugins.positioner.instanceCallback(positioner);
        }
    };
    /**
     * Sets texts locator component
     * @param textsLocator Created texts locator that is rendered
     * @internal
     */
    /**
     * Sets texts locator component
     * \@internal
     * @param {?} textsLocator Created texts locator that is rendered
     * @return {?}
     */
    NgSelectComponent.prototype.setTextsLocatorComponent = /**
     * Sets texts locator component
     * \@internal
     * @param {?} textsLocator Created texts locator that is rendered
     * @return {?}
     */
    function (textsLocator) {
        if (!textsLocator) {
            return;
        }
        this._pluginInstances[TEXTS_LOCATOR] = textsLocator;
        if (this._selectOptions.plugins && this._selectOptions.plugins.textsLocator && this._selectOptions.plugins.textsLocator.options) {
            textsLocator.options = this._selectOptions.plugins.textsLocator.options;
        }
        textsLocator.initOptions();
        if (this._selectOptions.plugins && this._selectOptions.plugins.textsLocator && this._selectOptions.plugins.textsLocator.instanceCallback) {
            this._selectOptions.plugins.textsLocator.instanceCallback(textsLocator);
        }
    };
    /**
     * Sets readonly state component
     * @param readonlyState Created readonly state that is rendered
     * @internal
     */
    /**
     * Sets readonly state component
     * \@internal
     * @param {?} readonlyState Created readonly state that is rendered
     * @return {?}
     */
    NgSelectComponent.prototype.setReadonlyStateComponent = /**
     * Sets readonly state component
     * \@internal
     * @param {?} readonlyState Created readonly state that is rendered
     * @return {?}
     */
    function (readonlyState) {
        if (!readonlyState) {
            this._pluginInstances[READONLY_STATE] = null;
            return;
        }
        this._pluginInstances[READONLY_STATE] = readonlyState;
        this._pluginInstances[NORMAL_STATE] = readonlyState;
        if (this._selectOptions.plugins && this._selectOptions.plugins.readonlyState && this._selectOptions.plugins.readonlyState.options) {
            readonlyState.options = this._selectOptions.plugins.readonlyState.options;
        }
        /** @type {?} */
        var options = (/** @type {?} */ (readonlyState.options));
        options.readonly = true;
        readonlyState.initOptions();
        if (this._selectOptions.plugins && this._selectOptions.plugins.readonlyState && this._selectOptions.plugins.readonlyState.instanceCallback) {
            this._selectOptions.plugins.readonlyState.instanceCallback(readonlyState);
        }
    };
    /**
     * Sets value handler component
     * @param valueHandler Created value handler that is rendered
     * @internal
     */
    /**
     * Sets value handler component
     * \@internal
     * @param {?} valueHandler Created value handler that is rendered
     * @return {?}
     */
    NgSelectComponent.prototype.setValueHandlerComponent = /**
     * Sets value handler component
     * \@internal
     * @param {?} valueHandler Created value handler that is rendered
     * @return {?}
     */
    function (valueHandler) {
        if (!valueHandler) {
            return;
        }
        this._pluginInstances[VALUE_HANDLER] = valueHandler;
        if (this._selectOptions.plugins && this._selectOptions.plugins.valueHandler && this._selectOptions.plugins.valueHandler.options) {
            valueHandler.options = this._selectOptions.plugins.valueHandler.options;
        }
        valueHandler.valueComparer = this.selectOptions.valueComparer;
        valueHandler.optionsGatherer = this.selectOptions.optionsGatherer;
        valueHandler.initOptions();
        if (this._selectOptions.plugins && this._selectOptions.plugins.valueHandler && this._selectOptions.plugins.valueHandler.instanceCallback) {
            this._selectOptions.plugins.valueHandler.instanceCallback(valueHandler);
        }
    };
    /**
     * Sets live search component
     * @param liveSearch Created live search that is rendered
     * @internal
     */
    /**
     * Sets live search component
     * \@internal
     * @param {?} liveSearch Created live search that is rendered
     * @return {?}
     */
    NgSelectComponent.prototype.setLiveSearchComponent = /**
     * Sets live search component
     * \@internal
     * @param {?} liveSearch Created live search that is rendered
     * @return {?}
     */
    function (liveSearch) {
        if (!liveSearch) {
            return;
        }
        this._pluginInstances[LIVE_SEARCH] = liveSearch;
        if (this._selectOptions.plugins && this._selectOptions.plugins.liveSearch && this._selectOptions.plugins.liveSearch.options) {
            liveSearch.options = this._selectOptions.plugins.liveSearch.options;
        }
        liveSearch.initOptions();
        if (this._selectOptions.plugins && this._selectOptions.plugins.liveSearch && this._selectOptions.plugins.liveSearch.instanceCallback) {
            this._selectOptions.plugins.liveSearch.instanceCallback(liveSearch);
        }
    };
    //######################### public methods #########################
    /**
     * Initialize component, automatically called once if not blocked by options
     */
    //######################### public methods #########################
    /**
     * Initialize component, automatically called once if not blocked by options
     * @return {?}
     */
    NgSelectComponent.prototype.initialize = 
    //######################### public methods #########################
    /**
     * Initialize component, automatically called once if not blocked by options
     * @return {?}
     */
    function () {
        /** @type {?} */
        var liveSearchPlugin = (/** @type {?} */ (this._pluginInstances[LIVE_SEARCH]));
        this.liveSearchElement = [[liveSearchPlugin.liveSearchElement]];
        this._changeDetector.detectChanges();
        this.selectOptions.optionsGatherer.initializeGatherer();
        this._pluginInstances[LIVE_SEARCH].initialize();
        this._pluginInstances[TEXTS_LOCATOR].initialize();
        this._pluginInstances[KEYBOARD_HANDLER].initialize();
        this._pluginInstances[VALUE_HANDLER].initialize();
        this._pluginInstances[NORMAL_STATE].initialize();
        this._pluginInstances[POPUP].initialize();
        this._pluginInstances[POSITIONER].initialize();
        this.isInitialized = true;
        this._initializedSubject.next(true);
    };
    /**
     * Initialize options, automaticaly called during init phase, but can be used to reinitialize NgSelectOptions
     */
    /**
     * Initialize options, automaticaly called during init phase, but can be used to reinitialize NgSelectOptions
     * @return {?}
     */
    NgSelectComponent.prototype.initOptions = /**
     * Initialize options, automaticaly called during init phase, but can be used to reinitialize NgSelectOptions
     * @return {?}
     */
    function () {
        this.selectOptions.optionsGatherer.ngSelectPlugins = this._pluginInstances;
        if (this._selectOptions.plugins) {
            if (this._selectOptions.plugins.normalState) {
                this._selectOptions.plugins.normalState.type = resolveForwardRef(this._selectOptions.plugins.normalState.type);
                if (this._pluginInstances[NORMAL_STATE]) {
                    if (this._selectOptions.plugins && this._selectOptions.plugins.normalState && this._selectOptions.plugins.normalState.options) {
                        this._pluginInstances[NORMAL_STATE].options = this._selectOptions.plugins.normalState.options;
                    }
                    /** @type {?} */
                    var normalState = (/** @type {?} */ (this._pluginInstances[NORMAL_STATE]));
                    normalState.templateGatherer = this.selectOptions.templateGatherer;
                    this._pluginInstances[NORMAL_STATE].initOptions();
                }
            }
            if (this._selectOptions.plugins.textsLocator) {
                this._selectOptions.plugins.textsLocator.type = resolveForwardRef(this._selectOptions.plugins.textsLocator.type);
                if (this._pluginInstances[TEXTS_LOCATOR]) {
                    if (this._selectOptions.plugins && this._selectOptions.plugins.textsLocator && this._selectOptions.plugins.textsLocator.options) {
                        this._pluginInstances[TEXTS_LOCATOR].options = this._selectOptions.plugins.textsLocator.options;
                    }
                    this._pluginInstances[TEXTS_LOCATOR].initOptions();
                }
            }
            if (this._selectOptions.plugins.keyboardHandler) {
                this._selectOptions.plugins.keyboardHandler.type = resolveForwardRef(this._selectOptions.plugins.keyboardHandler.type);
                if (this._pluginInstances[KEYBOARD_HANDLER]) {
                    if (this._selectOptions.plugins && this._selectOptions.plugins.keyboardHandler && this._selectOptions.plugins.keyboardHandler.options) {
                        this._pluginInstances[KEYBOARD_HANDLER].options = this._selectOptions.plugins.keyboardHandler.options;
                    }
                    /** @type {?} */
                    var keyboardHandler = (/** @type {?} */ (this._pluginInstances[KEYBOARD_HANDLER]));
                    keyboardHandler.selectElement = this._element.nativeElement;
                    keyboardHandler.optionsGatherer = this.selectOptions.optionsGatherer;
                    this._pluginInstances[KEYBOARD_HANDLER].initOptions();
                }
            }
            if (this._selectOptions.plugins.popup) {
                this._selectOptions.plugins.popup.type = resolveForwardRef(this._selectOptions.plugins.popup.type);
                if (this._pluginInstances[POPUP]) {
                    if (this._selectOptions.plugins && this._selectOptions.plugins.popup && this._selectOptions.plugins.popup.options) {
                        this._pluginInstances[POPUP].options = this._selectOptions.plugins.popup.options;
                    }
                    /** @type {?} */
                    var popup = (/** @type {?} */ (this._pluginInstances[POPUP]));
                    popup.selectElement = this._element.nativeElement;
                    popup.optionsGatherer = this.selectOptions.optionsGatherer;
                    popup.templateGatherer = this.selectOptions.templateGatherer;
                    this._pluginInstances[POPUP].initOptions();
                }
            }
            if (this._selectOptions.plugins.positioner) {
                this._selectOptions.plugins.positioner.type = resolveForwardRef(this._selectOptions.plugins.positioner.type);
                if (this._pluginInstances[POSITIONER]) {
                    if (this._selectOptions.plugins && this._selectOptions.plugins.positioner && this._selectOptions.plugins.positioner.options) {
                        this._pluginInstances[POSITIONER].options = this._selectOptions.plugins.positioner.options;
                    }
                    /** @type {?} */
                    var positioner = (/** @type {?} */ (this._pluginInstances[POSITIONER]));
                    positioner.selectElement = this._element.nativeElement;
                    positioner.optionsGatherer = this.selectOptions.optionsGatherer;
                    this._pluginInstances[POSITIONER].initOptions();
                }
            }
            if (this._selectOptions.plugins.readonlyState) {
                this._selectOptions.plugins.readonlyState.type = resolveForwardRef(this._selectOptions.plugins.readonlyState.type);
                if (this._pluginInstances[READONLY_STATE]) {
                    if (this._selectOptions.plugins && this._selectOptions.plugins.readonlyState && this._selectOptions.plugins.readonlyState.options) {
                        this._pluginInstances[READONLY_STATE].options = this._selectOptions.plugins.readonlyState.options;
                    }
                    /** @type {?} */
                    var options = (/** @type {?} */ (this._pluginInstances[READONLY_STATE].options));
                    options.readonly = true;
                    this._pluginInstances[READONLY_STATE].initOptions();
                }
            }
            if (this._selectOptions.plugins.valueHandler) {
                this._selectOptions.plugins.valueHandler.type = resolveForwardRef(this._selectOptions.plugins.valueHandler.type);
                if (this._pluginInstances[VALUE_HANDLER]) {
                    if (this._selectOptions.plugins && this._selectOptions.plugins.valueHandler && this._selectOptions.plugins.valueHandler.options) {
                        this._pluginInstances[VALUE_HANDLER].options = this._selectOptions.plugins.valueHandler.options;
                    }
                    /** @type {?} */
                    var valueHandler = (/** @type {?} */ (this._pluginInstances[VALUE_HANDLER]));
                    valueHandler.valueComparer = this.selectOptions.valueComparer;
                    valueHandler.optionsGatherer = this.selectOptions.optionsGatherer;
                    this._pluginInstances[VALUE_HANDLER].initOptions();
                }
            }
            if (this._selectOptions.plugins.liveSearch) {
                this._selectOptions.plugins.liveSearch.type = resolveForwardRef(this._selectOptions.plugins.liveSearch.type);
                if (this._pluginInstances[LIVE_SEARCH]) {
                    if (this._selectOptions.plugins && this._selectOptions.plugins.liveSearch && this._selectOptions.plugins.liveSearch.options) {
                        this._pluginInstances[LIVE_SEARCH].options = this._selectOptions.plugins.liveSearch.options;
                    }
                    this._pluginInstances[LIVE_SEARCH].initOptions();
                }
            }
        }
    };
    /**
     * Explicitly runs invalidation of content (change detection)
     */
    /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    NgSelectComponent.prototype.invalidateVisuals = /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    function () {
        this._changeDetector.detectChanges();
    };
    /**
     * Gets instance of plugin by its id
     * @param pluginId Id of plugin, use constants
     */
    /**
     * Gets instance of plugin by its id
     * @template PluginType
     * @param {?} pluginId Id of plugin, use constants
     * @return {?}
     */
    NgSelectComponent.prototype.getPlugin = /**
     * Gets instance of plugin by its id
     * @template PluginType
     * @param {?} pluginId Id of plugin, use constants
     * @return {?}
     */
    function (pluginId) {
        return (/** @type {?} */ (this._pluginInstances[pluginId]));
    };
    /**
     * Executes actions on NgSelect
     * @param actions Array of actions that are executed over NgSelect
     */
    /**
     * Executes actions on NgSelect
     * @param {...?} actions Array of actions that are executed over NgSelect
     * @return {?}
     */
    NgSelectComponent.prototype.execute = /**
     * Executes actions on NgSelect
     * @param {...?} actions Array of actions that are executed over NgSelect
     * @return {?}
     */
    function () {
        var _this = this;
        var actions = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            actions[_i] = arguments[_i];
        }
        if (!actions) {
            return;
        }
        actions.forEach((/**
         * @param {?} action
         * @return {?}
         */
        function (action) { return action(_this); }));
    };
    /**
     * Executes function on NgSelect and returns result
     * @param func Function that is executed and its result is returned
     */
    /**
     * Executes function on NgSelect and returns result
     * @template TResult
     * @param {?} func Function that is executed and its result is returned
     * @return {?}
     */
    NgSelectComponent.prototype.executeAndReturn = /**
     * Executes function on NgSelect and returns result
     * @template TResult
     * @param {?} func Function that is executed and its result is returned
     * @return {?}
     */
    function (func) {
        if (!func) {
            return null;
        }
        return func(this);
    };
    NgSelectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-select',
                    template: "<ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.textsLocator?.type\" (ngComponentOutletExCreated)=\"setTextsLocatorComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.liveSearch?.type\" (ngComponentOutletExCreated)=\"setLiveSearchComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.positioner?.type\" (ngComponentOutletExCreated)=\"setPositionerComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.keyboardHandler?.type\" (ngComponentOutletExCreated)=\"setKeyboardHandlerComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.valueHandler?.type\" (ngComponentOutletExCreated)=\"setValueHandlerComponent($event)\"></ng-template>\r\n\r\n<div>\r\n    <ng-template [ngIf]=\"!selectOptions?.readonly\">\r\n        <ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.normalState?.type\" (ngComponentOutletExCreated)=\"setNormalStateComponent($event)\" [ngComponentOutletExContent]=\"liveSearchElement\"></ng-template>\r\n    </ng-template>\r\n\r\n    <ng-template [ngIf]=\"selectOptions?.readonly\">\r\n        <ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.readonlyState?.type\" (ngComponentOutletExCreated)=\"setReadonlyStateComponent($event)\"></ng-template>\r\n    </ng-template>\r\n\r\n    <ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.popup?.type\" (ngComponentOutletExCreated)=\"setPopupComponent($event)\" [ngComponentOutletExContent]=\"liveSearchElement\"></ng-template>\r\n</div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        (/** @type {?} */ ({
                            provide: NG_SELECT_PLUGIN_INSTANCES,
                            useFactory: ngSelectPluginInstancesFactory
                        }))
                    ],
                    styles: [":host\n        {\n            display: block;\n            position: relative;\n        }"]
                }] }
    ];
    /** @nocollapse */
    NgSelectComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Inject, args: [NG_SELECT_PLUGIN_INSTANCES,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [NG_SELECT_OPTIONS,] }, { type: Optional }] },
        { type: Type, decorators: [{ type: Inject, args: [NORMAL_STATE_TYPE,] }, { type: Optional }] },
        { type: Type, decorators: [{ type: Inject, args: [KEYBOARD_HANDLER_TYPE,] }, { type: Optional }] },
        { type: Type, decorators: [{ type: Inject, args: [POPUP_TYPE,] }, { type: Optional }] },
        { type: Type, decorators: [{ type: Inject, args: [POSITIONER_TYPE,] }, { type: Optional }] },
        { type: Type, decorators: [{ type: Inject, args: [READONLY_STATE_TYPE,] }, { type: Optional }] },
        { type: Type, decorators: [{ type: Inject, args: [VALUE_HANDLER_TYPE,] }, { type: Optional }] },
        { type: Type, decorators: [{ type: Inject, args: [LIVE_SEARCH_TYPE,] }, { type: Optional }] },
        { type: Type, decorators: [{ type: Inject, args: [TEXTS_LOCATOR,] }, { type: Optional }] },
        { type: String, decorators: [{ type: Attribute, args: ['readonly',] }] },
        { type: String, decorators: [{ type: Attribute, args: ['disabled',] }] },
        { type: String, decorators: [{ type: Attribute, args: ['multiple',] }] }
    ]; };
    NgSelectComponent.propDecorators = {
        selectOptions: [{ type: Input }],
        disabled: [{ type: Input }],
        readonly: [{ type: Input }],
        normalStateTemplate: [{ type: ContentChild, args: ['normalStateTemplate',] }],
        optionTemplate: [{ type: ContentChild, args: ['optionTemplate',] }],
        optionsChildren: [{ type: ContentChildren, args: [OptionComponent,] }],
        optGroupsChildren: [{ type: ContentChildren, args: [OptGroupComponent,] }]
    };
    return NgSelectComponent;
}());
export { NgSelectComponent };
if (false) {
    /**
     * NgSelect options
     * @type {?}
     * @protected
     */
    NgSelectComponent.prototype._selectOptions;
    /**
     * Subject used for indication that NgSelect was initialized
     * @type {?}
     * @protected
     */
    NgSelectComponent.prototype._initializedSubject;
    /**
     * Occurs when array of provided options has changed
     * @type {?}
     * @protected
     */
    NgSelectComponent.prototype._optionsChange;
    /**
     * Occurs when array of visible, displayed options has changed
     * @type {?}
     * @protected
     */
    NgSelectComponent.prototype._availableOptionsChange;
    /**
     * Array of available options to be displayed
     * @type {?}
     * @protected
     */
    NgSelectComponent.prototype._availableOptions;
    /**
     * Live search plugin currently used in NgSelect
     * @type {?}
     * @protected
     */
    NgSelectComponent.prototype._liveSearch;
    /**
     * Subscription for changes of live search value
     * @type {?}
     * @protected
     */
    NgSelectComponent.prototype._searchValueChangeSubscription;
    /**
     * Indication whether should be NgSelect disabled or not
     * @type {?}
     */
    NgSelectComponent.prototype.disabled;
    /**
     * Indication whether should be NgSelect readonly or not
     * @type {?}
     */
    NgSelectComponent.prototype.readonly;
    /**
     * Gets current state of initialization
     * @type {?}
     */
    NgSelectComponent.prototype.isInitialized;
    /**
     * Template used within normal state
     * \@internal
     * @type {?}
     */
    NgSelectComponent.prototype.normalStateTemplate;
    /**
     * Template that is used within Popup as option
     * \@internal
     * @type {?}
     */
    NgSelectComponent.prototype.optionTemplate;
    /**
     * NgSelect plugin instances available for gatherer
     * \@internal
     * @type {?}
     */
    NgSelectComponent.prototype.ngSelectPlugins;
    /**
     * Element used for live search
     * \@internal
     * @type {?}
     */
    NgSelectComponent.prototype.liveSearchElement;
    /**
     * Options children found inside ng-select
     * \@internal
     * @type {?}
     */
    NgSelectComponent.prototype.optionsChildren;
    /**
     * Options groups children found inside ng-select
     * \@internal
     * @type {?}
     */
    NgSelectComponent.prototype.optGroupsChildren;
    /**
     * @type {?}
     * @protected
     */
    NgSelectComponent.prototype._changeDetector;
    /**
     * @type {?}
     * @protected
     */
    NgSelectComponent.prototype._element;
    /**
     * @type {?}
     * @protected
     */
    NgSelectComponent.prototype._pluginInstances;
}
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,