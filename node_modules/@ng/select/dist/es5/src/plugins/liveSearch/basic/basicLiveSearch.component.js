/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, ChangeDetectorRef, Inject, Optional, ElementRef, ViewChild, EventEmitter } from '@angular/core';
import { extend } from '@asseco/common';
import { NG_SELECT_PLUGIN_INSTANCES } from '../../../components/select/types';
import { LIVE_SEARCH_OPTIONS } from '../types';
import { TEXTS_LOCATOR } from '../../textsLocator/types';
import { POPUP } from '../../popup/types';
/**
 * Default options for live search
 * \@internal
 * @type {?}
 */
var defaultOptions = {
    cssClasses: {
        wrapperDiv: 'wrapper-div',
        input: 'form-control'
    },
    texts: {
        inputPlaceholder: 'Filter options'
    },
    keepSearchValue: false
};
/**
 * Component used for obtaining basic live search html element
 */
var BasicLiveSearchComponent = /** @class */ (function () {
    //######################### constructor #########################
    function BasicLiveSearchComponent(ngSelectPlugins, pluginElement, _changeDetector, options) {
        this.ngSelectPlugins = ngSelectPlugins;
        this.pluginElement = pluginElement;
        this._changeDetector = _changeDetector;
        /**
         * Current value of live search
         */
        this.searchValue = null;
        /**
         * Occurs when current value of live search changes
         */
        this.searchValueChange = new EventEmitter();
        //######################### public properties - template bindings #########################
        /**
         * Object containing available texts
         * \@internal
         */
        this.texts = {};
        this._options = extend(true, {}, defaultOptions, options);
    }
    Object.defineProperty(BasicLiveSearchComponent.prototype, "options", {
        //######################### public properties - implementation of BasicLiveSearch #########################
        /**
         * Options for NgSelect plugin
         */
        get: 
        //######################### public properties - implementation of BasicLiveSearch #########################
        /**
         * Options for NgSelect plugin
         * @return {?}
         */
        function () {
            return this._options;
        },
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this._options = extend(true, this._options, options);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BasicLiveSearchComponent.prototype, "liveSearchElement", {
        /**
         * HTML element that represents live search
         */
        get: /**
         * HTML element that represents live search
         * @return {?}
         */
        function () {
            return this.liveSearchElementChild.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     */
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    BasicLiveSearchComponent.prototype.ngOnDestroy = 
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    function () {
        if (this._visibilityChangeSubscription) {
            this._visibilityChangeSubscription.unsubscribe();
            this._visibilityChangeSubscription = null;
        }
        if (this._textsChangedSubscription) {
            this._textsChangedSubscription.unsubscribe();
            this._textsChangedSubscription = null;
        }
    };
    //######################### public methods - implementation of BasicLiveSearch #########################
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     */
    //######################### public methods - implementation of BasicLiveSearch #########################
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     * @return {?}
     */
    BasicLiveSearchComponent.prototype.initialize = 
    //######################### public methods - implementation of BasicLiveSearch #########################
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var textsLocator = (/** @type {?} */ (this.ngSelectPlugins[TEXTS_LOCATOR]));
        if (this._textsLocator && this._textsLocator != textsLocator) {
            this._textsChangedSubscription.unsubscribe();
            this._textsChangedSubscription = null;
            this._textsLocator = null;
        }
        if (!this._textsLocator) {
            this._textsLocator = textsLocator;
            this._textsChangedSubscription = this._textsLocator.textsChange.subscribe((/**
             * @return {?}
             */
            function () { return _this._initTexts(); }));
        }
        /** @type {?} */
        var popup = (/** @type {?} */ (this.ngSelectPlugins[POPUP]));
        if (this._popup && this._popup != popup) {
            this._visibilityChangeSubscription.unsubscribe();
            this._visibilityChangeSubscription = null;
            this._popup = null;
        }
        if (!this._popup) {
            this._popup = popup;
            this._visibilityChangeSubscription = this._popup.visibilityChange.subscribe((/**
             * @return {?}
             */
            function () {
                if (!_this.options.keepSearchValue) {
                    _this.searchValue = '';
                    _this.searchValueChange.emit();
                    _this._changeDetector.detectChanges();
                }
            }));
        }
        this._initTexts();
    };
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     */
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     * @return {?}
     */
    BasicLiveSearchComponent.prototype.initOptions = /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     * @return {?}
     */
    function () {
    };
    /**
     * Explicitly runs invalidation of content (change detection)
     */
    /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    BasicLiveSearchComponent.prototype.invalidateVisuals = /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    function () {
        this._changeDetector.detectChanges();
    };
    //######################### public methods - template bindings #########################
    /**
     * Handle input value
     * @param value Value of input
     * @internal
     */
    //######################### public methods - template bindings #########################
    /**
     * Handle input value
     * \@internal
     * @param {?} value Value of input
     * @return {?}
     */
    BasicLiveSearchComponent.prototype.handleInput = 
    //######################### public methods - template bindings #########################
    /**
     * Handle input value
     * \@internal
     * @param {?} value Value of input
     * @return {?}
     */
    function (value) {
        this.searchValue = value;
        this.searchValueChange.emit();
    };
    //######################### protected methods #########################
    /**
     * Initialize texts
     */
    //######################### protected methods #########################
    /**
     * Initialize texts
     * @protected
     * @return {?}
     */
    BasicLiveSearchComponent.prototype._initTexts = 
    //######################### protected methods #########################
    /**
     * Initialize texts
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        Object.keys(this.options.texts).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            _this.texts[key] = _this._textsLocator.getText(_this.options.texts[key]);
        }));
        this._changeDetector.detectChanges();
    };
    BasicLiveSearchComponent.decorators = [
        { type: Component, args: [{
                    selector: "ng-basic-live-search",
                    template: "<div style=\"display: none;\">\r\n    <div #liveSearchElement [ngClass]=\"options?.cssClasses?.wrapperDiv\">\r\n        <input [ngClass]=\"options?.cssClasses?.input\" type=\"text\" (input)=\"handleInput($event.target.value)\" [value]=\"searchValue\" placeholder=\"{{texts?.inputPlaceholder}}\">\r\n    </div>\r\n</div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".wrapper-div\n        {\n            padding: 4px;\n            border-bottom: 1px solid #666;\n            margin-bottom: 2px;\n        }\n        \n        .form-control\n        {\n            width: 100%;\n        }"]
                }] }
    ];
    /** @nocollapse */
    BasicLiveSearchComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NG_SELECT_PLUGIN_INSTANCES,] }, { type: Optional }] },
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Inject, args: [LIVE_SEARCH_OPTIONS,] }, { type: Optional }] }
    ]; };
    BasicLiveSearchComponent.propDecorators = {
        liveSearchElementChild: [{ type: ViewChild, args: ['liveSearchElement',] }]
    };
    return BasicLiveSearchComponent;
}());
export { BasicLiveSearchComponent };
if (false) {
    /**
     * Texts locator used for handling texts
     * @type {?}
     * @protected
     */
    BasicLiveSearchComponent.prototype._textsLocator;
    /**
     * Popup used in NgSelect
     * @type {?}
     * @protected
     */
    BasicLiveSearchComponent.prototype._popup;
    /**
     * Subscription for changes in texts
     * @type {?}
     * @protected
     */
    BasicLiveSearchComponent.prototype._textsChangedSubscription;
    /**
     * Subscription for changes of popup visibility
     * @type {?}
     * @protected
     */
    BasicLiveSearchComponent.prototype._visibilityChangeSubscription;
    /**
     * Options for NgSelect plugin
     * @type {?}
     * @protected
     */
    BasicLiveSearchComponent.prototype._options;
    /**
     * Current value of live search
     * @type {?}
     */
    BasicLiveSearchComponent.prototype.searchValue;
    /**
     * Occurs when current value of live search changes
     * @type {?}
     */
    BasicLiveSearchComponent.prototype.searchValueChange;
    /**
     * Object containing available texts
     * \@internal
     * @type {?}
     */
    BasicLiveSearchComponent.prototype.texts;
    /**
     * View child that represents live search element
     * \@internal
     * @type {?}
     */
    BasicLiveSearchComponent.prototype.liveSearchElementChild;
    /** @type {?} */
    BasicLiveSearchComponent.prototype.ngSelectPlugins;
    /** @type {?} */
    BasicLiveSearchComponent.prototype.pluginElement;
    /**
     * @type {?}
     * @protected
     */
    BasicLiveSearchComponent.prototype._changeDetector;
}
//# sourceMappingURL=data:application/json;base64,