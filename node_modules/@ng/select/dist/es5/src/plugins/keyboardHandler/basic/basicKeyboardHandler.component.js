/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, Inject, Optional, ElementRef, EventEmitter } from '@angular/core';
import { extend } from '@asseco/common';
import { NG_SELECT_PLUGIN_INSTANCES } from '../../../components/select/types';
import { KEYBOARD_HANDLER_OPTIONS } from '../types';
import { POPUP } from '../../popup/types';
/**
 * Default options for keyboard handler
 * \@internal
 * @type {?}
 */
var defaultOptions = {};
/**
 * Component used for obtaining basic keyboard handler html element
 */
var BasicKeyboardHandlerComponent = /** @class */ (function () {
    //######################### constructor #########################
    function BasicKeyboardHandlerComponent(ngSelectPlugins, pluginElement, options) {
        var _this = this;
        this.ngSelectPlugins = ngSelectPlugins;
        this.pluginElement = pluginElement;
        /**
         * Occurs when there is requested for change of visibility of popup using keyboard
         */
        this.popupVisibilityRequest = new EventEmitter();
        /**
         * Occurs when option was selected using keyboard
         */
        this.optionSelect = new EventEmitter();
        //######################### protected methods #########################
        /**
         * Handles keyboard event
         * @param event Keyboard event that occured
         */
        this._handleKeyboard = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event.key == "ArrowDown" || event.key == "ArrowUp") {
                _this.popupVisibilityRequest.emit(true);
                /** @type {?} */
                var activeOption = _this.availableOptions.find((/**
                 * @param {?} itm
                 * @return {?}
                 */
                function (itm) { return itm.active; }));
                if (activeOption) {
                    /** @type {?} */
                    var index = _this.availableOptions.indexOf(activeOption);
                    activeOption.active = false;
                    //move down cursor
                    if (event.key == "ArrowDown") {
                        index += 1;
                    }
                    //move up cursor
                    else {
                        index -= 1;
                    }
                    if (index < 0) {
                        index = _this.availableOptions.length - 1;
                    }
                    index = index % _this.availableOptions.length;
                    _this.availableOptions[index].active = true;
                }
                //none active before
                else if (_this.availableOptions.length) {
                    _this.availableOptions[0].active = true;
                }
                _this._popup.invalidateVisuals();
                event.preventDefault();
            }
            if (event.key == "Enter") {
                /** @type {?} */
                var activeOption = _this.availableOptions.find((/**
                 * @param {?} itm
                 * @return {?}
                 */
                function (itm) { return itm.active; }));
                if (activeOption) {
                    _this.optionSelect.emit(activeOption);
                }
                event.preventDefault();
            }
            if (event.key == "Tab" || event.key == "Escape") {
                _this.popupVisibilityRequest.emit(false);
            }
        });
        this._options = extend(true, {}, defaultOptions, options);
    }
    Object.defineProperty(BasicKeyboardHandlerComponent.prototype, "availableOptions", {
        //######################### protected properties #########################
        /**
         * Gets currently available options
         */
        get: 
        //######################### protected properties #########################
        /**
         * Gets currently available options
         * @protected
         * @return {?}
         */
        function () {
            return this.optionsGatherer.availableOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BasicKeyboardHandlerComponent.prototype, "options", {
        //######################### public properties - implementation of BasicKeyboardHandler #########################
        /**
         * Options for NgSelect plugin
         */
        get: 
        //######################### public properties - implementation of BasicKeyboardHandler #########################
        /**
         * Options for NgSelect plugin
         * @return {?}
         */
        function () {
            return this._options;
        },
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this._options = extend(true, this._options, options);
        },
        enumerable: true,
        configurable: true
    });
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     */
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    BasicKeyboardHandlerComponent.prototype.ngOnDestroy = 
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    function () {
        if (this.selectElement) {
            this.selectElement.removeEventListener('keydown', this._handleKeyboard);
        }
    };
    //######################### public methods - implementation of BasicKeyboardHandler #########################
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     */
    //######################### public methods - implementation of BasicKeyboardHandler #########################
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     * @return {?}
     */
    BasicKeyboardHandlerComponent.prototype.initialize = 
    //######################### public methods - implementation of BasicKeyboardHandler #########################
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     * @return {?}
     */
    function () {
        if (this.selectElement) {
            this.selectElement.addEventListener('keydown', this._handleKeyboard);
        }
        /** @type {?} */
        var popup = (/** @type {?} */ (this.ngSelectPlugins[POPUP]));
        if (this._popup && this._popup != popup) {
            this._popup = null;
        }
        if (!this._popup) {
            this._popup = popup;
        }
    };
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     */
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     * @return {?}
     */
    BasicKeyboardHandlerComponent.prototype.initOptions = /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     * @return {?}
     */
    function () {
    };
    /**
     * Explicitly runs invalidation of content (change detection)
     */
    /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    BasicKeyboardHandlerComponent.prototype.invalidateVisuals = /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    function () {
    };
    BasicKeyboardHandlerComponent.decorators = [
        { type: Component, args: [{
                    selector: "ng-basic-keyboard-handler",
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    BasicKeyboardHandlerComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NG_SELECT_PLUGIN_INSTANCES,] }, { type: Optional }] },
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Inject, args: [KEYBOARD_HANDLER_OPTIONS,] }, { type: Optional }] }
    ]; };
    return BasicKeyboardHandlerComponent;
}());
export { BasicKeyboardHandlerComponent };
if (false) {
    /**
     * Options for NgSelect plugin
     * @type {?}
     * @protected
     */
    BasicKeyboardHandlerComponent.prototype._options;
    /**
     * Popup that is displayed
     * @type {?}
     * @protected
     */
    BasicKeyboardHandlerComponent.prototype._popup;
    /**
     * HTML element that represents select itself
     * @type {?}
     */
    BasicKeyboardHandlerComponent.prototype.selectElement;
    /**
     * Instance of options gatherer, that is used for obtaining available options
     * @type {?}
     */
    BasicKeyboardHandlerComponent.prototype.optionsGatherer;
    /**
     * Occurs when there is requested for change of visibility of popup using keyboard
     * @type {?}
     */
    BasicKeyboardHandlerComponent.prototype.popupVisibilityRequest;
    /**
     * Occurs when option was selected using keyboard
     * @type {?}
     */
    BasicKeyboardHandlerComponent.prototype.optionSelect;
    /**
     * Handles keyboard event
     * \@param event Keyboard event that occured
     * @type {?}
     * @protected
     */
    BasicKeyboardHandlerComponent.prototype._handleKeyboard;
    /** @type {?} */
    BasicKeyboardHandlerComponent.prototype.ngSelectPlugins;
    /** @type {?} */
    BasicKeyboardHandlerComponent.prototype.pluginElement;
}
//# sourceMappingURL=data:application/json;base64,