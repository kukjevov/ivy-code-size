var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, Inject, Optional, ElementRef } from '@angular/core';
import { extend, isBlank } from '@asseco/common';
import { NG_SELECT_PLUGIN_INSTANCES } from '../../../components/select/types';
import { VALUE_HANDLER_OPTIONS } from '../types';
import { ValueHandlerBase } from '../valueHandlerBase';
/**
 * Default options for value handler
 * \@internal
 * @type {?}
 */
var defaultOptions = {};
/**
 * Component used for handling current value of NgSelect
 * @template TValue
 */
var BasicValueHandlerComponent = /** @class */ (function (_super) {
    __extends(BasicValueHandlerComponent, _super);
    //######################### constructor #########################
    function BasicValueHandlerComponent(ngSelectPlugins, pluginElement, options) {
        var _this = _super.call(this, ngSelectPlugins, pluginElement) || this;
        //######################### protected methods #########################
        /**
         * Sets value
         */
        _this._setValue = (/**
         * @param {?} option
         * @return {?}
         */
        function (option) {
            //multiple values are allowed
            if (_this.options.multiple) {
                if (!Array.isArray(_this.selectedOptions)) {
                    _this.selectedOptions = [];
                }
                if (Array.isArray(_this.selectedOptions)) {
                    /** @type {?} */
                    var index = void 0;
                    //value exists, removing from list
                    if ((index = _this.selectedOptions.indexOf(option)) >= 0) {
                        _this.selectedOptions.splice(index, 1);
                    }
                    //adding value
                    else {
                        _this.selectedOptions.push(option);
                    }
                    _this.selectedOptions = _this.selectedOptions.slice();
                }
            }
            else 
            //only signle value allowed
            {
                _this.selectedOptions = option;
            }
            _this._clearSelected();
            _this._markValueAsSelected();
            _this._normalState.invalidateVisuals();
            _this.valueChange.emit();
            //close popup if not multiple
            if (!_this.options.multiple) {
                _this.popupVisibilityRequest.emit(false);
            }
            else {
                _this._popup.invalidateVisuals();
            }
        });
        _this._options = extend(true, {}, defaultOptions, options);
        return _this;
    }
    Object.defineProperty(BasicValueHandlerComponent.prototype, "options", {
        //######################### public properties - implementation of BasicValueHandler #########################
        /**
         * Options for NgSelect plugin
         */
        get: 
        //######################### public properties - implementation of BasicValueHandler #########################
        /**
         * Options for NgSelect plugin
         * @return {?}
         */
        function () {
            return this._options;
        },
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this._options = extend(true, this._options, options);
        },
        enumerable: true,
        configurable: true
    });
    //######################### public methods - implementation of BasicValueHandler #########################
    /**
     * Sets value for NgSelect
     * @param value Value to be set
     */
    //######################### public methods - implementation of BasicValueHandler #########################
    /**
     * Sets value for NgSelect
     * @param {?} value Value to be set
     * @return {?}
     */
    BasicValueHandlerComponent.prototype.setValue = 
    //######################### public methods - implementation of BasicValueHandler #########################
    /**
     * Sets value for NgSelect
     * @param {?} value Value to be set
     * @return {?}
     */
    function (value) {
        this._useOptionsAsValue(value);
    };
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     */
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     * @return {?}
     */
    BasicValueHandlerComponent.prototype.initOptions = /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     * @return {?}
     */
    function () {
    };
    /**
     * Explicitly runs invalidation of content (change detection)
     */
    /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    BasicValueHandlerComponent.prototype.invalidateVisuals = /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    function () {
    };
    /**
     * Loads options
     */
    /**
     * Loads options
     * @protected
     * @return {?}
     */
    BasicValueHandlerComponent.prototype._loadOptions = /**
     * Loads options
     * @protected
     * @return {?}
     */
    function () {
        this._useOptionsAsValue(isBlank(this._unmappedValue) ? this.value : this._unmappedValue);
    };
    /**
     * Converts value to options
     * @param value Value to be changed to options
     */
    /**
     * Converts value to options
     * @protected
     * @param {?} value Value to be changed to options
     * @return {?}
     */
    BasicValueHandlerComponent.prototype._useOptionsAsValue = /**
     * Converts value to options
     * @protected
     * @param {?} value Value to be changed to options
     * @return {?}
     */
    function (value) {
        var _this = this;
        //set empty value
        if (isBlank(value) || (Array.isArray(value) && !value.length)) {
            this.selectedOptions = value;
            this._clearSelected();
            this._unmappedValue = null;
            this._normalState.invalidateVisuals();
            this.valueChange.emit();
            return;
        }
        //no options available yet
        if (!this.optionsGatherer.options || !this.optionsGatherer.options.length) {
            this._unmappedValue = value;
            return;
        }
        if (this.options.multiple) {
            if (Array.isArray(value)) {
                /** @type {?} */
                var items_1 = value;
                this.selectedOptions = this.optionsGatherer.options.filter((/**
                 * @param {?} itm
                 * @return {?}
                 */
                function (itm) { return !!items_1.find((/**
                 * @param {?} it
                 * @return {?}
                 */
                function (it) { return _this.valueComparer(it, itm.value); })); }));
            }
            else {
                throw new Error('Don`t you have redundant "multiple"?');
            }
        }
        else {
            if (Array.isArray(value)) {
                throw new Error('Are you missing attribute "multiple"?');
            }
            else {
                /** @type {?} */
                var item_1 = value;
                this.selectedOptions = this.optionsGatherer.options.find((/**
                 * @param {?} itm
                 * @return {?}
                 */
                function (itm) { return _this.valueComparer(itm.value, item_1); }));
            }
        }
        this._clearSelected();
        this._markValueAsSelected();
        this._unmappedValue = null;
        this._normalState.invalidateVisuals();
        this.valueChange.emit();
    };
    BasicValueHandlerComponent.decorators = [
        { type: Component, args: [{
                    selector: "ng-basic-value-handler",
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    BasicValueHandlerComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NG_SELECT_PLUGIN_INSTANCES,] }, { type: Optional }] },
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Inject, args: [VALUE_HANDLER_OPTIONS,] }, { type: Optional }] }
    ]; };
    return BasicValueHandlerComponent;
}(ValueHandlerBase));
export { BasicValueHandlerComponent };
if (false) {
    /**
     * Backed up unmapped value that was set before options were obtained
     * @type {?}
     * @protected
     */
    BasicValueHandlerComponent.prototype._unmappedValue;
    /**
     * Sets value
     * @type {?}
     * @protected
     */
    BasicValueHandlerComponent.prototype._setValue;
}
//# sourceMappingURL=data:application/json;base64,