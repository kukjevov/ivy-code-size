/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter } from '@angular/core';
import { KEYBOARD_HANDLER } from '../keyboardHandler/types';
import { POPUP } from '../popup/types';
import { NORMAL_STATE } from '../normalState/types';
/**
 * Base class for value handlers
 * @abstract
 * @template TValue, TOptions
 */
var /**
 * Base class for value handlers
 * @abstract
 * @template TValue, TOptions
 */
ValueHandlerBase = /** @class */ (function () {
    //######################### constructor #########################
    function ValueHandlerBase(ngSelectPlugins, pluginElement) {
        var _this = this;
        this.ngSelectPlugins = ngSelectPlugins;
        this.pluginElement = pluginElement;
        /**
         * Occurs when value of NgSelect changes
         */
        this.valueChange = new EventEmitter();
        /**
         * Occurs when there is requested for change of visibility of popup using keyboard
         */
        this.popupVisibilityRequest = new EventEmitter();
        /**
         * Cancels, removes option from selected options
         * @param option Option to be canceled
         */
        this._cancelValue = (/**
         * @param {?} option
         * @return {?}
         */
        function (option) {
            if (Array.isArray(_this.selectedOptions)) {
                /** @type {?} */
                var index = _this.selectedOptions.indexOf(option);
                if (index >= 0) {
                    _this.selectedOptions.splice(index, 1);
                }
            }
            else {
                if (_this.selectedOptions == option) {
                    _this.selectedOptions = null;
                }
            }
            _this._clearSelected();
            _this._markValueAsSelected();
            _this._normalState.invalidateVisuals();
            _this.valueChange.emit();
        });
    }
    Object.defineProperty(ValueHandlerBase.prototype, "value", {
        /**
         * Current selected value of NgSelect
         */
        get: /**
         * Current selected value of NgSelect
         * @return {?}
         */
        function () {
            if (this.selectedOptions) {
                if (Array.isArray(this.selectedOptions)) {
                    return this.selectedOptions.map((/**
                     * @param {?} opt
                     * @return {?}
                     */
                    function (opt) { return opt.value; }));
                }
                else {
                    return this.selectedOptions.value;
                }
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     */
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    ValueHandlerBase.prototype.ngOnDestroy = 
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    function () {
        if (this._optionSelectSubscription) {
            this._optionSelectSubscription.unsubscribe();
            this._optionSelectSubscription = null;
        }
        if (this._optionClickSubscription) {
            this._optionClickSubscription.unsubscribe();
            this._optionClickSubscription = null;
        }
        if (this._optionsChangeSubscription) {
            this._optionsChangeSubscription.unsubscribe();
            this._optionsChangeSubscription = null;
        }
        if (this._cancelOptionSubscription) {
            this._cancelOptionSubscription.unsubscribe();
            this._cancelOptionSubscription = null;
        }
    };
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     */
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     * @return {?}
     */
    ValueHandlerBase.prototype.initialize = /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._optionsGatherer && this._optionsGatherer != this.optionsGatherer) {
            this._optionsChangeSubscription.unsubscribe();
            this._optionsChangeSubscription = null;
            this._optionsGatherer = null;
        }
        if (!this._optionsGatherer) {
            this._optionsGatherer = this.optionsGatherer;
            this._optionsChangeSubscription = this._optionsGatherer.optionsChange.subscribe((/**
             * @return {?}
             */
            function () { return _this._loadOptions(); }));
        }
        /** @type {?} */
        var keyboardHandler = (/** @type {?} */ (this.ngSelectPlugins[KEYBOARD_HANDLER]));
        if (this._keyboardHandler && this._keyboardHandler != keyboardHandler) {
            this._optionSelectSubscription.unsubscribe();
            this._optionSelectSubscription = null;
            this._keyboardHandler = null;
        }
        if (!this._keyboardHandler) {
            this._keyboardHandler = keyboardHandler;
            this._optionSelectSubscription = this._keyboardHandler.optionSelect.subscribe(this._setValue);
        }
        /** @type {?} */
        var popup = (/** @type {?} */ (this.ngSelectPlugins[POPUP]));
        if (this._popup && this._popup != popup) {
            this._optionClickSubscription.unsubscribe();
            this._optionClickSubscription = null;
            this._popup = null;
        }
        if (!this._popup) {
            this._popup = popup;
            this._optionClickSubscription = this._popup.optionClick.subscribe(this._setValue);
        }
        /** @type {?} */
        var normalState = (/** @type {?} */ (this.ngSelectPlugins[NORMAL_STATE]));
        if (this._normalState && this._normalState != normalState) {
            this._cancelOptionSubscription.unsubscribe();
            this._cancelOptionSubscription = null;
            this._normalState = null;
        }
        if (!this._normalState) {
            this._normalState = normalState;
            this._cancelOptionSubscription = this._normalState.cancelOption.subscribe(this._cancelValue);
        }
        this._loadOptions();
    };
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     */
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     * @return {?}
     */
    ValueHandlerBase.prototype.initOptions = /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     * @return {?}
     */
    function () {
    };
    /**
     * Explicitly runs invalidation of content (change detection)
     */
    /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    ValueHandlerBase.prototype.invalidateVisuals = /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    function () {
    };
    /**
     * Clears all selected values
     */
    /**
     * Clears all selected values
     * @protected
     * @return {?}
     */
    ValueHandlerBase.prototype._clearSelected = /**
     * Clears all selected values
     * @protected
     * @return {?}
     */
    function () {
        this._optionsGatherer.options.forEach((/**
         * @param {?} option
         * @return {?}
         */
        function (option) { return option.selected = false; }));
    };
    /**
     * Marks current value as selected
     */
    /**
     * Marks current value as selected
     * @protected
     * @return {?}
     */
    ValueHandlerBase.prototype._markValueAsSelected = /**
     * Marks current value as selected
     * @protected
     * @return {?}
     */
    function () {
        if (this.selectedOptions) {
            if (Array.isArray(this.selectedOptions)) {
                this.selectedOptions.forEach((/**
                 * @param {?} option
                 * @return {?}
                 */
                function (option) { return option.selected = true; }));
            }
            else {
                ((/** @type {?} */ (this.selectedOptions))).selected = true;
            }
        }
    };
    return ValueHandlerBase;
}());
/**
 * Base class for value handlers
 * @abstract
 * @template TValue, TOptions
 */
export { ValueHandlerBase };
if (false) {
    /**
     * Options for NgSelect plugin
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._options;
    /**
     * Keyboard handler that is used
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._keyboardHandler;
    /**
     * Popup that is used
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._popup;
    /**
     * Normal state that is used
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._normalState;
    /**
     * Subscription for option selection using keyboard
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._optionSelectSubscription;
    /**
     * Subscription for option selection using mouse
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._optionClickSubscription;
    /**
     * Subscription for changes of options in options gatherer
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._optionsChangeSubscription;
    /**
     * Subscription for canceling an option
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._cancelOptionSubscription;
    /**
     * Instance of previous options gatherer, that is used for obtaining available options
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._optionsGatherer;
    /**
     * Options for NgSelect plugin
     * @type {?}
     */
    ValueHandlerBase.prototype.options;
    /**
     * Occurs when value of NgSelect changes
     * @type {?}
     */
    ValueHandlerBase.prototype.valueChange;
    /**
     * Instance of options gatherer, that is used for obtaining available options
     * @type {?}
     */
    ValueHandlerBase.prototype.optionsGatherer;
    /**
     * Function of value comparer that is used for comparison of values
     * @type {?}
     */
    ValueHandlerBase.prototype.valueComparer;
    /**
     * Occurs when there is requested for change of visibility of popup using keyboard
     * @type {?}
     */
    ValueHandlerBase.prototype.popupVisibilityRequest;
    /**
     * Current value of NgSelect
     * @type {?}
     */
    ValueHandlerBase.prototype.selectedOptions;
    /**
     * Sets value
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._setValue;
    /**
     * Cancels, removes option from selected options
     * \@param option Option to be canceled
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._cancelValue;
    /** @type {?} */
    ValueHandlerBase.prototype.ngSelectPlugins;
    /** @type {?} */
    ValueHandlerBase.prototype.pluginElement;
    /**
     * Sets value for NgSelect
     * @abstract
     * @param {?} value Value to be set
     * @return {?}
     */
    ValueHandlerBase.prototype.setValue = function (value) { };
    /**
     * Loads options
     * @abstract
     * @protected
     * @return {?}
     */
    ValueHandlerBase.prototype._loadOptions = function () { };
}
//# sourceMappingURL=data:application/json;base64,