/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, ChangeDetectorRef, Inject, Optional, ElementRef, EventEmitter, ViewChildren, QueryList } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { extend, isDescendant } from '@asseco/common';
import { NG_SELECT_PLUGIN_INSTANCES } from '../../../components/select/types';
import { POPUP_OPTIONS } from '../types';
import { NORMAL_STATE } from '../../normalState/types';
import { KEYBOARD_HANDLER } from '../../keyboardHandler/types';
import { VALUE_HANDLER } from '../../valueHandler/types';
/**
 * Default options for popup
 * \@internal
 * @type {?}
 */
var defaultOptions = {
    cssClasses: {
        optionChecked: 'fa fa-check',
        optionItemDiv: 'option-item',
        optionItemTextDiv: 'option-item-text',
        popupDiv: 'popup-div'
    },
    visible: false
};
/**
 * Component used for rendering basic popup with options
 */
var BasicPopupComponent = /** @class */ (function () {
    //######################### constructor #########################
    function BasicPopupComponent(ngSelectPlugins, pluginElement, _changeDetector, options, _document) {
        var _this = this;
        this.ngSelectPlugins = ngSelectPlugins;
        this.pluginElement = pluginElement;
        this._changeDetector = _changeDetector;
        this._document = _document;
        /**
         * Indication whether is popup visible
         */
        this._popupVisible = false;
        /**
         * Occurs when user clicks on option, clicked options is passed as argument
         */
        this.optionClick = new EventEmitter();
        /**
         * Occurs when visibility of popup has changed
         */
        this.visibilityChange = new EventEmitter();
        /**
         * Handles click outside of select element
         * @param event Mouse event object
         */
        this._handleClickOutside = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (_this.selectElement != event.target && !isDescendant(_this.selectElement, (/** @type {?} */ (event.target)))) {
                _this.togglePopup();
            }
        });
        /**
         * Handles visibility change
         */
        this._handleVisibilityChange = (/**
         * @param {?} visible
         * @return {?}
         */
        function (visible) {
            if (_this.options.visible != visible) {
                _this.options.visible = visible;
                _this._changeDetector.detectChanges();
            }
        });
        this._options = extend(true, {}, defaultOptions, options);
    }
    Object.defineProperty(BasicPopupComponent.prototype, "options", {
        //######################### public properties - implementation of BasicPopup #########################
        /**
         * Options for NgSelect plugin
         */
        get: 
        //######################### public properties - implementation of BasicPopup #########################
        /**
         * Options for NgSelect plugin
         * @return {?}
         */
        function () {
            return this._options;
        },
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this._options = extend(true, this._options, options);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BasicPopupComponent.prototype, "popupElement", {
        /**
         * Html element that represents popup itself
         */
        get: /**
         * Html element that represents popup itself
         * @return {?}
         */
        function () {
            /** @type {?} */
            var ref = this.popupElementChildren.first;
            if (!ref) {
                return null;
            }
            return ref.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    //######################### public methods - implementation of AfterViewInit #########################
    /**
     * Called when view was initialized
     */
    //######################### public methods - implementation of AfterViewInit #########################
    /**
     * Called when view was initialized
     * @return {?}
     */
    BasicPopupComponent.prototype.ngAfterViewInit = 
    //######################### public methods - implementation of AfterViewInit #########################
    /**
     * Called when view was initialized
     * @return {?}
     */
    function () {
        var _this = this;
        this.popupElementChildren.changes.subscribe((/**
         * @return {?}
         */
        function () {
            if (!!_this.popupElementChildren.first == _this._popupVisible) {
                return;
            }
            //handle click outside
            if (_this.popupElementChildren.first) {
                _this._document.addEventListener('mouseup', _this._handleClickOutside);
            }
            //unregister handle click outside
            else {
                _this._document.removeEventListener('mouseup', _this._handleClickOutside);
            }
            _this._popupVisible = !!_this.popupElementChildren.first;
            _this.visibilityChange.emit();
        }));
    };
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     */
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    BasicPopupComponent.prototype.ngOnDestroy = 
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    function () {
        if (this._optionsChangeSubscription) {
            this._optionsChangeSubscription.unsubscribe();
            this._optionsChangeSubscription = null;
        }
        if (this._clickSubscription) {
            this._clickSubscription.unsubscribe();
            this._clickSubscription = null;
        }
        if (this._khPopupVisibilityRequestSubscription) {
            this._khPopupVisibilityRequestSubscription.unsubscribe();
            this._khPopupVisibilityRequestSubscription = null;
        }
        if (this._vhPopupVisibilityRequestSubscription) {
            this._vhPopupVisibilityRequestSubscription.unsubscribe();
            this._vhPopupVisibilityRequestSubscription = null;
        }
        this._document.removeEventListener('mouseup', this._handleClickOutside);
    };
    //######################### public methods - implementation of BasicPopup #########################
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     */
    //######################### public methods - implementation of BasicPopup #########################
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     * @return {?}
     */
    BasicPopupComponent.prototype.initialize = 
    //######################### public methods - implementation of BasicPopup #########################
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._optionsGatherer && this._optionsGatherer != this.optionsGatherer) {
            this._optionsChangeSubscription.unsubscribe();
            this._optionsChangeSubscription = null;
            this._optionsGatherer = null;
        }
        if (!this._optionsGatherer) {
            this._optionsGatherer = this.optionsGatherer;
            this._optionsChangeSubscription = this._optionsGatherer.availableOptionsChange.subscribe((/**
             * @return {?}
             */
            function () { return _this.loadOptions(); }));
        }
        /** @type {?} */
        var normalState = (/** @type {?} */ (this.ngSelectPlugins[NORMAL_STATE]));
        if (this._normalState && this._normalState != normalState) {
            this._clickSubscription.unsubscribe();
            this._clickSubscription = null;
            this._normalState = null;
        }
        if (!this._normalState) {
            this._normalState = normalState;
            this._clickSubscription = this._normalState.click.subscribe((/**
             * @return {?}
             */
            function () { return _this.togglePopup(); }));
        }
        /** @type {?} */
        var keyboardHandler = (/** @type {?} */ (this.ngSelectPlugins[KEYBOARD_HANDLER]));
        if (this._keyboardHandler && this._keyboardHandler != keyboardHandler) {
            this._khPopupVisibilityRequestSubscription.unsubscribe();
            this._khPopupVisibilityRequestSubscription = null;
            this._keyboardHandler = null;
        }
        if (!this._keyboardHandler) {
            this._keyboardHandler = keyboardHandler;
            this._khPopupVisibilityRequestSubscription = this._keyboardHandler.popupVisibilityRequest.subscribe(this._handleVisibilityChange);
        }
        /** @type {?} */
        var valueHandler = (/** @type {?} */ (this.ngSelectPlugins[VALUE_HANDLER]));
        if (this._valueHandler && this._valueHandler != valueHandler) {
            this._vhPopupVisibilityRequestSubscription.unsubscribe();
            this._vhPopupVisibilityRequestSubscription = null;
            this._valueHandler = null;
        }
        if (!this._valueHandler) {
            this._valueHandler = valueHandler;
            this._vhPopupVisibilityRequestSubscription = this._valueHandler.popupVisibilityRequest.subscribe(this._handleVisibilityChange);
        }
        this.loadOptions();
    };
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     */
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     * @return {?}
     */
    BasicPopupComponent.prototype.initOptions = /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     * @return {?}
     */
    function () {
    };
    /**
     * Explicitly runs invalidation of content (change detection)
     */
    /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    BasicPopupComponent.prototype.invalidateVisuals = /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    function () {
        this._changeDetector.detectChanges();
    };
    //######################### protected methods #########################
    /**
     * Loads options
     */
    //######################### protected methods #########################
    /**
     * Loads options
     * @protected
     * @return {?}
     */
    BasicPopupComponent.prototype.loadOptions = 
    //######################### protected methods #########################
    /**
     * Loads options
     * @protected
     * @return {?}
     */
    function () {
        this.selectOptions = this._optionsGatherer.availableOptions;
        this._changeDetector.detectChanges();
    };
    /**
     * Toggles popup visibility
     */
    /**
     * Toggles popup visibility
     * @protected
     * @return {?}
     */
    BasicPopupComponent.prototype.togglePopup = /**
     * Toggles popup visibility
     * @protected
     * @return {?}
     */
    function () {
        this.options.visible = !this.options.visible;
        this._changeDetector.detectChanges();
    };
    BasicPopupComponent.decorators = [
        { type: Component, args: [{
                    selector: "div.ng-select-popup",
                    template: "<ng-template #defaultOptionTextLook let-option>{{option?.text}}</ng-template>\r\n\r\n<div #popupDiv \r\n     *ngIf=\"options?.visible\"\r\n     [ngClass]=\"options?.cssClasses?.popupDiv\">\r\n    <ng-content></ng-content>\r\n\r\n    <div *ngFor=\"let option of selectOptions\"\r\n         [ngClass]=\"options?.cssClasses?.optionItemDiv\"\r\n         [class.selected]=\"option?.selected\"\r\n         [class.active]=\"option?.active\"\r\n         (click)=\"optionClick?.emit(option)\">\r\n        <div [ngClass]=\"options?.cssClasses?.optionItemTextDiv\">\r\n            <ng-container *ngTemplateOutlet=\"templateGatherer?.optionTemplate || defaultOptionTextLook; context: {$implicit: option, popup: this}\"></ng-container>\r\n        </div>\r\n\r\n        <div *ngIf=\"option?.selected && options?.multiple\" [ngClass]=\"options?.cssClasses?.optionChecked\"></div>\r\n    </div>\r\n</div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".popup-div\n        {\n            position: absolute;\n            z-index: 250;\n            background-color: #FFFFFF;\n            border-radius: 4px;\n            border: 1px solid #BBBBBB;\n            overflow: auto;\n            min-width: 100%;\n            padding: 5px 0;\n            box-shadow: 0 6px 12px rgba(0,0,0,.175);\n            scrollbar-width: thin;\n        }\n\n        .popup-div::-webkit-scrollbar-thumb \n        {\n            background-color: #cdcdcd;\n        }\n        \n        .popup-div::-webkit-scrollbar \n        {\n            width: 6px;\n            background-color: #f0f0f0;\n        }\n\n        .option-item\n        {\n            padding: 3px 12px;\n            display: flex;\n            align-items: center;\n        }\n\n        .option-item .option-item-text\n        {\n            min-width: 0;\n            flex: 1;\n            white-space: nowrap;\n        }\n\n        .option-item .option-item-text:hover\n        {\n            cursor: pointer;\n        }\n\n        .option-item .fa-check\n        {\n            margin-left: 8px;\n        }\n\n        .option-item.selected,\n        .option-item.active\n        {\n            background-color: #E8E8E8;\n            background-image: linear-gradient(to bottom,#F5F5F5 0,#E8E8E8 100%);\n        }\n\n        .option-item:hover\n        {\n            background-color: #E8E8E8;\n            background-image: linear-gradient(to bottom,#F5F5F5 0,#E8E8E8 100%);\n            cursor: pointer;\n        }"]
                }] }
    ];
    /** @nocollapse */
    BasicPopupComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NG_SELECT_PLUGIN_INSTANCES,] }, { type: Optional }] },
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Inject, args: [POPUP_OPTIONS,] }, { type: Optional }] },
        { type: HTMLDocument, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    BasicPopupComponent.propDecorators = {
        popupElementChildren: [{ type: ViewChildren, args: ['popupDiv',] }]
    };
    return BasicPopupComponent;
}());
export { BasicPopupComponent };
if (false) {
    /**
     * Options for NgSelect plugin
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._options;
    /**
     * Instance of previous options gatherer, that is used for obtaining available options
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._optionsGatherer;
    /**
     * Subscription for changes of options in options gatherer
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._optionsChangeSubscription;
    /**
     * Subscription for click event on normal state
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._clickSubscription;
    /**
     * Subscription for popup visibility request from keyboard handler
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._khPopupVisibilityRequestSubscription;
    /**
     * Subscription for popup visibility request from value handler
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._vhPopupVisibilityRequestSubscription;
    /**
     * Normal state that is displayed
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._normalState;
    /**
     * Keyboard handler that is used
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._keyboardHandler;
    /**
     * Value handler that is used
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._valueHandler;
    /**
     * Indication whether is popup visible
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._popupVisible;
    /**
     * Instance of options gatherer, that is used for obtaining available options
     * @type {?}
     */
    BasicPopupComponent.prototype.optionsGatherer;
    /**
     * Gatherer used for obtaining custom templates
     * @type {?}
     */
    BasicPopupComponent.prototype.templateGatherer;
    /**
     * HTML element that represents select itself
     * @type {?}
     */
    BasicPopupComponent.prototype.selectElement;
    /**
     * Occurs when user clicks on option, clicked options is passed as argument
     * @type {?}
     */
    BasicPopupComponent.prototype.optionClick;
    /**
     * Occurs when visibility of popup has changed
     * @type {?}
     */
    BasicPopupComponent.prototype.visibilityChange;
    /**
     * Array of select options available
     * \@internal
     * @type {?}
     */
    BasicPopupComponent.prototype.selectOptions;
    /**
     * Watch for visibility of popup div element
     * \@internal
     * @type {?}
     */
    BasicPopupComponent.prototype.popupElementChildren;
    /**
     * Handles click outside of select element
     * \@param event Mouse event object
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._handleClickOutside;
    /**
     * Handles visibility change
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._handleVisibilityChange;
    /** @type {?} */
    BasicPopupComponent.prototype.ngSelectPlugins;
    /** @type {?} */
    BasicPopupComponent.prototype.pluginElement;
    /**
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._changeDetector;
    /**
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._document;
}
//# sourceMappingURL=data:application/json;base64,