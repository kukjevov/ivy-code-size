/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Options for popup plugin
 * @record
 * @template TCssClasses
 */
export function PopupOptions() { }
if (false) {
    /**
     * Indication whether are popup options visible, or not
     * @type {?|undefined}
     */
    PopupOptions.prototype.visible;
    /**
     * Indication that multiple values can be selected
     * @type {?|undefined}
     */
    PopupOptions.prototype.multiple;
}
/**
 * Popup plugin interface
 * @record
 */
export function Popup() { }
if (false) {
    /**
     * Instance of options gatherer, that is used for obtaining available options
     * @type {?}
     */
    Popup.prototype.optionsGatherer;
    /**
     * Gatherer used for obtaining custom templates
     * @type {?}
     */
    Popup.prototype.templateGatherer;
    /**
     * HTML element that represents select itself
     * @type {?}
     */
    Popup.prototype.selectElement;
    /**
     * Occurs when user clicks on option, clicked options is passed as argument
     * @type {?}
     */
    Popup.prototype.optionClick;
    /**
     * Occurs when visibility of popup has changed
     * @type {?}
     */
    Popup.prototype.visibilityChange;
    /**
     * Html element that represents popup itself
     * @type {?}
     */
    Popup.prototype.popupElement;
}
/**
 * Context for template that is used within popup plugin
 * @record
 */
export function PopupContext() { }
if (false) {
    /**
     * Instance of plugin itself
     * @type {?}
     */
    PopupContext.prototype.$implicit;
    /**
     * Instance of plugin itself
     * @type {?}
     */
    PopupContext.prototype.popup;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wdXAuaW50ZXJmYWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BsdWdpbnMvcG9wdXAvcG9wdXAuaW50ZXJmYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVFBLGtDQVdDOzs7Ozs7SUFORywrQkFBa0I7Ozs7O0lBS2xCLGdDQUFtQjs7Ozs7O0FBTXZCLDJCQStCQzs7Ozs7O0lBMUJHLGdDQUFzQzs7Ozs7SUFLdEMsaUNBQW1DOzs7OztJQUtuQyw4QkFBMkI7Ozs7O0lBSzNCLDRCQUF3RDs7Ozs7SUFLeEQsaUNBQThDOzs7OztJQUs5Qyw2QkFBbUM7Ozs7OztBQU12QyxrQ0FXQzs7Ozs7O0lBTkcsaUNBQStCOzs7OztJQUsvQiw2QkFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RXZlbnRFbWl0dGVyfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5cclxuaW1wb3J0IHtOZ1NlbGVjdFBsdWdpbiwgVmlzdWFsUGx1Z2luT3B0aW9ucywgT3B0aW9uc0dhdGhlcmVyLCBUZW1wbGF0ZUdhdGhlcmVyfSBmcm9tIFwiLi4vLi4vbWlzY1wiO1xyXG5pbXBvcnQge05nU2VsZWN0T3B0aW9ufSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9vcHRpb25cIjtcclxuXHJcbi8qKlxyXG4gKiBPcHRpb25zIGZvciBwb3B1cCBwbHVnaW5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUG9wdXBPcHRpb25zPFRDc3NDbGFzc2VzPiBleHRlbmRzIFZpc3VhbFBsdWdpbk9wdGlvbnM8VENzc0NsYXNzZXM+XHJcbntcclxuICAgIC8qKlxyXG4gICAgICogSW5kaWNhdGlvbiB3aGV0aGVyIGFyZSBwb3B1cCBvcHRpb25zIHZpc2libGUsIG9yIG5vdFxyXG4gICAgICovXHJcbiAgICB2aXNpYmxlPzogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEluZGljYXRpb24gdGhhdCBtdWx0aXBsZSB2YWx1ZXMgY2FuIGJlIHNlbGVjdGVkXHJcbiAgICAgKi9cclxuICAgIG11bHRpcGxlPzogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFBvcHVwIHBsdWdpbiBpbnRlcmZhY2VcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUG9wdXAgZXh0ZW5kcyBOZ1NlbGVjdFBsdWdpblxyXG57XHJcbiAgICAvKipcclxuICAgICAqIEluc3RhbmNlIG9mIG9wdGlvbnMgZ2F0aGVyZXIsIHRoYXQgaXMgdXNlZCBmb3Igb2J0YWluaW5nIGF2YWlsYWJsZSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIG9wdGlvbnNHYXRoZXJlcjogT3B0aW9uc0dhdGhlcmVyPGFueT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHYXRoZXJlciB1c2VkIGZvciBvYnRhaW5pbmcgY3VzdG9tIHRlbXBsYXRlc1xyXG4gICAgICovXHJcbiAgICB0ZW1wbGF0ZUdhdGhlcmVyOiBUZW1wbGF0ZUdhdGhlcmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSFRNTCBlbGVtZW50IHRoYXQgcmVwcmVzZW50cyBzZWxlY3QgaXRzZWxmXHJcbiAgICAgKi9cclxuICAgIHNlbGVjdEVsZW1lbnQ6IEhUTUxFbGVtZW50O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogT2NjdXJzIHdoZW4gdXNlciBjbGlja3Mgb24gb3B0aW9uLCBjbGlja2VkIG9wdGlvbnMgaXMgcGFzc2VkIGFzIGFyZ3VtZW50XHJcbiAgICAgKi9cclxuICAgIHJlYWRvbmx5IG9wdGlvbkNsaWNrOiBFdmVudEVtaXR0ZXI8TmdTZWxlY3RPcHRpb248YW55Pj47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPY2N1cnMgd2hlbiB2aXNpYmlsaXR5IG9mIHBvcHVwIGhhcyBjaGFuZ2VkXHJcbiAgICAgKi9cclxuICAgIHJlYWRvbmx5IHZpc2liaWxpdHlDaGFuZ2U6IEV2ZW50RW1pdHRlcjx2b2lkPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEh0bWwgZWxlbWVudCB0aGF0IHJlcHJlc2VudHMgcG9wdXAgaXRzZWxmXHJcbiAgICAgKi9cclxuICAgIHJlYWRvbmx5IHBvcHVwRWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb250ZXh0IGZvciB0ZW1wbGF0ZSB0aGF0IGlzIHVzZWQgd2l0aGluIHBvcHVwIHBsdWdpblxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBQb3B1cENvbnRleHRcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbnN0YW5jZSBvZiBwbHVnaW4gaXRzZWxmXHJcbiAgICAgKi9cclxuICAgICRpbXBsaWNpdDogTmdTZWxlY3RPcHRpb248YW55PjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEluc3RhbmNlIG9mIHBsdWdpbiBpdHNlbGZcclxuICAgICAqL1xyXG4gICAgcG9wdXA6IFBvcHVwO1xyXG59Il19