/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, ChangeDetectorRef, Inject, Optional, ElementRef, EventEmitter } from '@angular/core';
import { extend } from '@asseco/common';
import { NG_SELECT_PLUGIN_INSTANCES } from '../../../components/select/types';
import { NORMAL_STATE_OPTIONS } from '../types';
import { TEXTS_LOCATOR } from '../../textsLocator/types';
import { VALUE_HANDLER } from '../../valueHandler/types';
/**
 * Default options for normal state
 * \@internal
 * @type {?}
 */
var defaultOptions = {
    cssClasses: {
        normalStateElement: 'btn btn-select',
        selectedCarret: 'selected-caret fa fa-caret-down',
        selectedValue: 'selected-value'
    },
    texts: {
        nothingSelected: 'Nothing selected'
    },
    readonly: false
};
/**
 * Component used for rendering basic simple normal state of select
 */
var BasicNormalStateComponent = /** @class */ (function () {
    //######################### constructor #########################
    function BasicNormalStateComponent(ngSelectPlugins, pluginElement, _changeDetector, options) {
        this.ngSelectPlugins = ngSelectPlugins;
        this.pluginElement = pluginElement;
        this._changeDetector = _changeDetector;
        /**
         * Occurs when user clicks on normal state
         */
        this.click = new EventEmitter();
        /**
         * Occurs when normal state gains focus
         */
        this.focus = new EventEmitter();
        /**
         * Occurs when user tries to cancel one of selected values
         */
        this.cancelOption = new EventEmitter();
        //######################### public properties - template bindings #########################
        /**
         * Object containing available texts
         * \@internal
         */
        this.texts = {};
        this._options = extend(true, {}, defaultOptions, options);
    }
    Object.defineProperty(BasicNormalStateComponent.prototype, "options", {
        //######################### public properties - implementation of BasicNormalState #########################
        /**
         * Options for NgSelect plugin
         */
        get: 
        //######################### public properties - implementation of BasicNormalState #########################
        /**
         * Options for NgSelect plugin
         * @return {?}
         */
        function () {
            return this._options;
        },
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this._options = extend(true, this._options, options);
        },
        enumerable: true,
        configurable: true
    });
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     */
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    BasicNormalStateComponent.prototype.ngOnDestroy = 
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    function () {
        if (this._textsChangedSubscription) {
            this._textsChangedSubscription.unsubscribe();
            this._textsChangedSubscription = null;
        }
    };
    //######################### public methods - implementation of BasicNormalState #########################
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     */
    //######################### public methods - implementation of BasicNormalState #########################
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     * @return {?}
     */
    BasicNormalStateComponent.prototype.initialize = 
    //######################### public methods - implementation of BasicNormalState #########################
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var textsLocator = (/** @type {?} */ (this.ngSelectPlugins[TEXTS_LOCATOR]));
        if (this._textsLocator && this._textsLocator != textsLocator) {
            this._textsChangedSubscription.unsubscribe();
            this._textsChangedSubscription = null;
            this._textsLocator = null;
        }
        if (!this._textsLocator) {
            this._textsLocator = textsLocator;
            this._textsChangedSubscription = this._textsLocator.textsChange.subscribe((/**
             * @return {?}
             */
            function () { return _this._initTexts(); }));
        }
        /** @type {?} */
        var valueHandler = (/** @type {?} */ (this.ngSelectPlugins[VALUE_HANDLER]));
        if (this.valueHandler && this.valueHandler != valueHandler) {
            this.valueHandler = null;
        }
        if (!this.valueHandler) {
            this.valueHandler = valueHandler;
        }
        this._initTexts();
    };
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     */
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     * @return {?}
     */
    BasicNormalStateComponent.prototype.initOptions = /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     * @return {?}
     */
    function () {
    };
    /**
     * Explicitly runs invalidation of content (change detection)
     */
    /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    BasicNormalStateComponent.prototype.invalidateVisuals = /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    function () {
        this._changeDetector.detectChanges();
    };
    //######################### protected methods #########################
    /**
     * Initialize texts
     */
    //######################### protected methods #########################
    /**
     * Initialize texts
     * @protected
     * @return {?}
     */
    BasicNormalStateComponent.prototype._initTexts = 
    //######################### protected methods #########################
    /**
     * Initialize texts
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        Object.keys(this.options.texts).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            _this.texts[key] = _this._textsLocator.getText(_this.options.texts[key]);
        }));
        this._changeDetector.detectChanges();
    };
    BasicNormalStateComponent.decorators = [
        { type: Component, args: [{
                    selector: "div.normal-state",
                    template: "<ng-template #defaultLook>{{valueHandler?.selectedOptions | ngSelectValue: texts?.nothingSelected}}</ng-template>\r\n\r\n<button [ngClass]=\"options?.cssClasses?.normalStateElement\" (click)=\"click.emit()\" (focus)=\"focus?.emit()\" [disabled]=\"!!options?.readonly\" type=\"button\" [title]=\"valueHandler?.selectedOptions | ngSelectValue: texts?.nothingSelected\">\r\n    <span [ngClass]=\"options?.cssClasses?.selectedValue\"><ng-container *ngTemplateOutlet=\"templateGatherer?.normalStateTemplate || defaultLook; context: {$implicit: this}\"></ng-container></span>\r\n    <span [ngClass]=\"options?.cssClasses?.selectedCarret\"></span>\r\n</button>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["button.btn-select\n         {\n             display: flex;\n             width: 100%;\n             padding: 5px 0px 4px 6px;\n             background-color: #ffffff;\n             background-image: none;\n             border: 1px solid #cccccc;\n             border-radius: 4px;\n             box-shadow: 0 1px 1px rgba(0, 0, 0, 0.075) inset;\n             height: 28px;\n             overflow: hidden;\n         }\n\n         button.btn-select:hover\n         {\n             background-color: #F2F2F2;\n         }\n\n         button.btn-select:active\n         {\n             box-shadow: 0 0 5px -1px #888888 inset;\n         }\n       \n         button.btn-select .selected-value\n         {\n             flex: 1;\n             text-align: left;\n             min-width: 0;\n         }\n       \n         button.btn-select .selected-caret\n         {\n             flex: 0 0 20px;\n             align-self: center;\n         }"]
                }] }
    ];
    /** @nocollapse */
    BasicNormalStateComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NG_SELECT_PLUGIN_INSTANCES,] }, { type: Optional }] },
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Inject, args: [NORMAL_STATE_OPTIONS,] }, { type: Optional }] }
    ]; };
    return BasicNormalStateComponent;
}());
export { BasicNormalStateComponent };
if (false) {
    /**
     * Texts locator used for handling texts
     * @type {?}
     * @protected
     */
    BasicNormalStateComponent.prototype._textsLocator;
    /**
     * Subscription for changes in texts
     * @type {?}
     * @protected
     */
    BasicNormalStateComponent.prototype._textsChangedSubscription;
    /**
     * Options for NgSelect plugin
     * @type {?}
     * @protected
     */
    BasicNormalStateComponent.prototype._options;
    /**
     * Occurs when user clicks on normal state
     * @type {?}
     */
    BasicNormalStateComponent.prototype.click;
    /**
     * Occurs when normal state gains focus
     * @type {?}
     */
    BasicNormalStateComponent.prototype.focus;
    /**
     * Occurs when user tries to cancel one of selected values
     * @type {?}
     */
    BasicNormalStateComponent.prototype.cancelOption;
    /**
     * Gatherer used for obtaining custom templates
     * @type {?}
     */
    BasicNormalStateComponent.prototype.templateGatherer;
    /**
     * Object containing available texts
     * \@internal
     * @type {?}
     */
    BasicNormalStateComponent.prototype.texts;
    /**
     * Value handler used in NgSelect
     * \@internal
     * @type {?}
     */
    BasicNormalStateComponent.prototype.valueHandler;
    /** @type {?} */
    BasicNormalStateComponent.prototype.ngSelectPlugins;
    /** @type {?} */
    BasicNormalStateComponent.prototype.pluginElement;
    /**
     * @type {?}
     * @protected
     */
    BasicNormalStateComponent.prototype._changeDetector;
}
//# sourceMappingURL=data:application/json;base64,