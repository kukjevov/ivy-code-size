/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter } from "@angular/core";
import { isBlank } from "@asseco/common";
import { LIVE_SEARCH } from "../../plugins/liveSearch/types";
/**
 * Options gatherer used for static options gathering from code
 * @template TValue
 */
var /**
 * Options gatherer used for static options gathering from code
 * @template TValue
 */
CodeOptionsGatherer = /** @class */ (function () {
    //######################### constructor #########################
    function CodeOptionsGatherer(_liveSearchFilter) {
        this._liveSearchFilter = _liveSearchFilter;
        //######################### private fields #########################
        /**
         * Array of visible, displayed options for select
         */
        this._availableOptions = [];
        /**
         * Array of provided options for select
         */
        this._options = [];
        /**
         * Occurs when array of visible, displayed options has changed
         */
        this._availableOptionsChange = new EventEmitter();
        /**
         * Occurs when array of provided options has changed
         */
        this.optionsChange = new EventEmitter();
        if (isBlank(this._liveSearchFilter)) {
            this._liveSearchFilter = (/**
             * @param {?} query
             * @return {?}
             */
            function (query) {
                return (/**
                 * @param {?} itm
                 * @return {?}
                 */
                function (itm) { return itm.text.indexOf(query) >= 0; });
            });
        }
    }
    Object.defineProperty(CodeOptionsGatherer.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        //######################### public properties - implementation of OptionsGatherer #########################
        /**
         * Array of provided options for select
         */
        set: 
        //######################### public properties - implementation of OptionsGatherer #########################
        /**
         * Array of provided options for select
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._options = value;
            this._availableOptions = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CodeOptionsGatherer.prototype, "availableOptions", {
        /**
         * Array of visible, displayed options for select
         */
        get: /**
         * Array of visible, displayed options for select
         * @return {?}
         */
        function () {
            return this._availableOptions;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(CodeOptionsGatherer.prototype, "availableOptionsChange", {
        /**
         * Occurs when array of visible, displayed options has changed
         */
        get: /**
         * Occurs when array of visible, displayed options has changed
         * @return {?}
         */
        function () {
            return this._availableOptionsChange;
        },
        enumerable: true,
        configurable: true
    });
    //######################### public methods - implmentation of OptionsGatherer #########################
    /**
     * Initialize gatherer during initialization phase
     */
    //######################### public methods - implmentation of OptionsGatherer #########################
    /**
     * Initialize gatherer during initialization phase
     * @return {?}
     */
    CodeOptionsGatherer.prototype.initializeGatherer = 
    //######################### public methods - implmentation of OptionsGatherer #########################
    /**
     * Initialize gatherer during initialization phase
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var liveSearch = (/** @type {?} */ (this.ngSelectPlugins[LIVE_SEARCH]));
        if (this._liveSearch && this._liveSearch != liveSearch) {
            this._searchValueChangeSubscription.unsubscribe();
            this._searchValueChangeSubscription = null;
            this._liveSearch = null;
        }
        if (!this._liveSearch) {
            this._liveSearch = liveSearch;
            this._searchValueChangeSubscription = this._liveSearch.searchValueChange.subscribe((/**
             * @return {?}
             */
            function () {
                if (!_this._liveSearch.searchValue) {
                    _this._availableOptions = _this.options;
                    _this._availableOptionsChange.emit();
                    return;
                }
                _this._availableOptions = _this.options.filter(_this._liveSearchFilter(_this._liveSearch.searchValue));
                _this._availableOptionsChange.emit();
            }));
        }
    };
    /**
     * Called when gatherer needs to be destroyed
     */
    /**
     * Called when gatherer needs to be destroyed
     * @return {?}
     */
    CodeOptionsGatherer.prototype.destroyGatherer = /**
     * Called when gatherer needs to be destroyed
     * @return {?}
     */
    function () {
        if (this._searchValueChangeSubscription) {
            this._searchValueChangeSubscription.unsubscribe();
            this._searchValueChangeSubscription = null;
        }
    };
    return CodeOptionsGatherer;
}());
/**
 * Options gatherer used for static options gathering from code
 * @template TValue
 */
export { CodeOptionsGatherer };
if (false) {
    /**
     * Array of visible, displayed options for select
     * @type {?}
     * @private
     */
    CodeOptionsGatherer.prototype._availableOptions;
    /**
     * Array of provided options for select
     * @type {?}
     * @private
     */
    CodeOptionsGatherer.prototype._options;
    /**
     * Occurs when array of visible, displayed options has changed
     * @type {?}
     * @private
     */
    CodeOptionsGatherer.prototype._availableOptionsChange;
    /**
     * Live search plugin currently used in NgSelect
     * @type {?}
     * @protected
     */
    CodeOptionsGatherer.prototype._liveSearch;
    /**
     * Subscription for changes of live search value
     * @type {?}
     * @protected
     */
    CodeOptionsGatherer.prototype._searchValueChangeSubscription;
    /**
     * Occurs when array of provided options has changed
     * @type {?}
     */
    CodeOptionsGatherer.prototype.optionsChange;
    /**
     * NgSelect plugin instances available for gatherer
     * @type {?}
     */
    CodeOptionsGatherer.prototype.ngSelectPlugins;
    /**
     * @type {?}
     * @private
     */
    CodeOptionsGatherer.prototype._liveSearchFilter;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,