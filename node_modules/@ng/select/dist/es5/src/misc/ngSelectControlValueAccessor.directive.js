/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { forwardRef, Directive } from '@angular/core';
import { NgSelectComponent } from '../components/select/select.component';
import { valueChange, setValue, onFocus, setReadonly, getValue } from '../extensions';
/**
 * Provider for control value accessor
 * \@internal
 * @type {?}
 */
export var NG_SELECT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return NgSelectControlValueAccessor; })),
    multi: true
};
/**
 * Control value accessor for NgSelectComponent
 * @template TValue
 */
var NgSelectControlValueAccessor = /** @class */ (function () {
    //######################### constructor #########################
    function NgSelectControlValueAccessor(_select) {
        this._select = _select;
        /**
         * Subscription that looks for changes of select
         */
        this._changeSubscription = null;
        /**
         * Subscription that looks for changes of select
         */
        this._focusSubscription = null;
    }
    //######################### public methods - implementation of ControlValueAccessor #########################
    /**
     * Sets value to select
     */
    //######################### public methods - implementation of ControlValueAccessor #########################
    /**
     * Sets value to select
     * @param {?} value
     * @return {?}
     */
    NgSelectControlValueAccessor.prototype.writeValue = 
    //######################### public methods - implementation of ControlValueAccessor #########################
    /**
     * Sets value to select
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        this._value = value;
        if (this._select.isInitialized) {
            this._select.execute(setValue(value));
            return;
        }
        if (this._initializedSubscription) {
            this._initializedSubscription.unsubscribe();
            this._initializedSubscription = null;
        }
        this._initializedSubscription = this._select.initialized.subscribe((/**
         * @param {?} initialized
         * @return {?}
         */
        function (initialized) {
            if (initialized) {
                _this._initializedSubscription.unsubscribe();
                _this._initializedSubscription = null;
                _this._select.execute(setValue(value));
            }
        }));
    };
    /**
     * Registers callback that is called when value of select changes
     */
    /**
     * Registers callback that is called when value of select changes
     * @param {?} fn
     * @return {?}
     */
    NgSelectControlValueAccessor.prototype.registerOnChange = /**
     * Registers callback that is called when value of select changes
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var _this = this;
        this._changeInitializedSubscription = this._select.initialized.subscribe((/**
         * @param {?} initialized
         * @return {?}
         */
        function (initialized) {
            if (initialized) {
                if (_this._changeSubscription) {
                    _this._changeSubscription.unsubscribe();
                    _this._changeSubscription = null;
                }
                _this._changeSubscription = _this._select.executeAndReturn(valueChange(fn));
                /** @type {?} */
                var value = _this._select.executeAndReturn(getValue());
                if (_this._value != value) {
                    _this._value = value;
                    fn(value);
                }
            }
        }));
    };
    /**
     * Registers callback that is called when select is closed
     */
    /**
     * Registers callback that is called when select is closed
     * @param {?} fn
     * @return {?}
     */
    NgSelectControlValueAccessor.prototype.registerOnTouched = /**
     * Registers callback that is called when select is closed
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var _this = this;
        this._touchInitializedSubscription = this._select.initialized.subscribe((/**
         * @param {?} initialized
         * @return {?}
         */
        function (initialized) {
            if (initialized) {
                if (_this._focusSubscription) {
                    _this._focusSubscription.unsubscribe();
                    _this._focusSubscription = null;
                }
                _this._focusSubscription = _this._select.executeAndReturn(onFocus(fn));
            }
        }));
    };
    /**
     * Sets NgSelect as disabled/readonly
     * @param isDisabled Indication whether is control disabled or not
     */
    /**
     * Sets NgSelect as disabled/readonly
     * @param {?} isDisabled Indication whether is control disabled or not
     * @return {?}
     */
    NgSelectControlValueAccessor.prototype.setDisabledState = /**
     * Sets NgSelect as disabled/readonly
     * @param {?} isDisabled Indication whether is control disabled or not
     * @return {?}
     */
    function (isDisabled) {
        var _this = this;
        if (this._select.isInitialized) {
            this._select.execute(setReadonly(isDisabled));
            return;
        }
        if (this._disabledInitializedSubscription) {
            this._disabledInitializedSubscription.unsubscribe();
            this._disabledInitializedSubscription = null;
        }
        this._disabledInitializedSubscription = this._select.initialized.subscribe((/**
         * @param {?} initialized
         * @return {?}
         */
        function (initialized) {
            if (initialized) {
                _this._disabledInitializedSubscription.unsubscribe();
                _this._disabledInitializedSubscription = null;
                _this._select.execute(setReadonly(isDisabled));
            }
        }));
    };
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     */
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    NgSelectControlValueAccessor.prototype.ngOnDestroy = 
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    function () {
        if (this._changeSubscription) {
            this._changeSubscription.unsubscribe();
            this._changeSubscription = null;
        }
        if (this._initializedSubscription) {
            this._initializedSubscription.unsubscribe();
            this._initializedSubscription = null;
        }
        if (this._changeInitializedSubscription) {
            this._changeInitializedSubscription.unsubscribe();
            this._changeInitializedSubscription = null;
        }
        if (this._touchInitializedSubscription) {
            this._touchInitializedSubscription.unsubscribe();
            this._touchInitializedSubscription = null;
        }
        if (this._focusSubscription) {
            this._focusSubscription.unsubscribe();
            this._focusSubscription = null;
        }
        if (this._disabledInitializedSubscription) {
            this._disabledInitializedSubscription.unsubscribe();
            this._disabledInitializedSubscription = null;
        }
    };
    NgSelectControlValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: 'ng-select[formControlName],ng-select[formControl],ng-select[ngModel]',
                    providers: [NG_SELECT_VALUE_ACCESSOR]
                },] }
    ];
    /** @nocollapse */
    NgSelectControlValueAccessor.ctorParameters = function () { return [
        { type: NgSelectComponent }
    ]; };
    return NgSelectControlValueAccessor;
}());
export { NgSelectControlValueAccessor };
if (false) {
    /**
     * Subscription for initialized status of NgSelect, used for writeValue
     * @type {?}
     * @private
     */
    NgSelectControlValueAccessor.prototype._initializedSubscription;
    /**
     * Subscription for initialized status of NgSelect, used for registerOnChange
     * @type {?}
     * @private
     */
    NgSelectControlValueAccessor.prototype._changeInitializedSubscription;
    /**
     * Subscription for initialized status of NgSelect, used for registerOnTouched
     * @type {?}
     * @private
     */
    NgSelectControlValueAccessor.prototype._touchInitializedSubscription;
    /**
     * Subscription for initialized status of NgSelect, used for setDisabledState
     * @type {?}
     * @private
     */
    NgSelectControlValueAccessor.prototype._disabledInitializedSubscription;
    /**
     * Subscription that looks for changes of select
     * @type {?}
     * @private
     */
    NgSelectControlValueAccessor.prototype._changeSubscription;
    /**
     * Subscription that looks for changes of select
     * @type {?}
     * @private
     */
    NgSelectControlValueAccessor.prototype._focusSubscription;
    /**
     * Last set value to this control
     * @type {?}
     * @private
     */
    NgSelectControlValueAccessor.prototype._value;
    /**
     * @type {?}
     * @private
     */
    NgSelectControlValueAccessor.prototype._select;
}
//# sourceMappingURL=data:application/json;base64,