/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Function used for comparing two values
 * @record
 * @template TValue
 */
export function CompareValueFunc() { }
/**
 * Describes select options used for NgSelect
 * @record
 * @template TValue
 */
export function NgSelectOptions() { }
if (false) {
    /**
     * Indication whether NgSelect should be initialized automaticaly during 'NgOnInit' phase
     * @type {?|undefined}
     */
    NgSelectOptions.prototype.autoInitialize;
    /**
     * Css classes applied to ng select component, possible to override only part of classes
     * @type {?|undefined}
     */
    NgSelectOptions.prototype.cssClasses;
    /**
     * Object defining overrides for default plugins, default plugins can be also specified using DI
     * @type {?|undefined}
     */
    NgSelectOptions.prototype.plugins;
    /**
     * Instance of options gatherer that is used for obtaining options
     * @type {?|undefined}
     */
    NgSelectOptions.prototype.optionsGatherer;
    /**
     * Instance of template gatherer used for obtaining custom templates
     * @type {?|undefined}
     */
    NgSelectOptions.prototype.templateGatherer;
    /**
     * Indication whether is NgSelect readonly or not
     * @type {?|undefined}
     */
    NgSelectOptions.prototype.readonly;
    /**
     * Function of value comparer that is used for comparison of values
     * @type {?|undefined}
     */
    NgSelectOptions.prototype.valueComparer;
    /**
     * Method that is used for filtering when live search is running on static data
     * @type {?|undefined}
     */
    NgSelectOptions.prototype.liveSearchFilter;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdTZWxlY3RPcHRpb25zLmludGVyZmFjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9taXNjL25nU2VsZWN0T3B0aW9ucy5pbnRlcmZhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBUUEsc0NBUUM7Ozs7OztBQUtELHFDQXlDQzs7Ozs7O0lBcENHLHlDQUF5Qjs7Ozs7SUFLekIscUNBQWdCOzs7OztJQUtoQixrQ0FBOEI7Ozs7O0lBSzlCLDBDQUEwQzs7Ozs7SUFLMUMsMkNBQW9DOzs7OztJQUtwQyxtQ0FBbUI7Ozs7O0lBS25CLHdDQUF5Qzs7Ozs7SUFLekMsMkNBQTRDIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCB7TmdTZWxlY3RQbHVnaW5UeXBlc30gZnJvbSBcIi4vcGx1Z2luLmludGVyZmFjZVwiO1xyXG5pbXBvcnQge09wdGlvbnNHYXRoZXJlciwgTGl2ZVNlYXJjaEZpbHRlcn0gZnJvbSBcIi4vb3B0aW9uc0dhdGhlcmVyL29wdGlvbnNHYXRoZXJlci5pbnRlcmZhY2VcIjtcclxuaW1wb3J0IHtUZW1wbGF0ZUdhdGhlcmVyfSBmcm9tIFwiLi90ZW1wbGF0ZUdhdGhlcmVyLmludGVyZmFjZVwiO1xyXG5cclxuLyoqXHJcbiAqIEZ1bmN0aW9uIHVzZWQgZm9yIGNvbXBhcmluZyB0d28gdmFsdWVzXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENvbXBhcmVWYWx1ZUZ1bmM8VFZhbHVlPlxyXG57XHJcbiAgICAvKipcclxuICAgICAqIENvbXBhcmVzIHR3byB2YWx1ZXMgYW5kIHJldHVybnMgdHJ1ZSBpZiBvYmplY3RzIGFyZSBlcXVhbCwgb3RoZXJ3aXNlIGZhbHNlXHJcbiAgICAgKiBAcGFyYW0gc291cmNlIEZpcnN0IHZhbHVlIHRvIGJlIGNvbXBhcmVkXHJcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IFNlY29uZCB2YWx1ZSB0byBiZSBjb21wYXJlZFxyXG4gICAgICovXHJcbiAgICAoc291cmNlOiBUVmFsdWUsIHRhcmdldDogVFZhbHVlKTogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIERlc2NyaWJlcyBzZWxlY3Qgb3B0aW9ucyB1c2VkIGZvciBOZ1NlbGVjdFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBOZ1NlbGVjdE9wdGlvbnM8VFZhbHVlPlxyXG57XHJcbiAgICAvKipcclxuICAgICAqIEluZGljYXRpb24gd2hldGhlciBOZ1NlbGVjdCBzaG91bGQgYmUgaW5pdGlhbGl6ZWQgYXV0b21hdGljYWx5IGR1cmluZyAnTmdPbkluaXQnIHBoYXNlXHJcbiAgICAgKi9cclxuICAgIGF1dG9Jbml0aWFsaXplPzogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENzcyBjbGFzc2VzIGFwcGxpZWQgdG8gbmcgc2VsZWN0IGNvbXBvbmVudCwgcG9zc2libGUgdG8gb3ZlcnJpZGUgb25seSBwYXJ0IG9mIGNsYXNzZXNcclxuICAgICAqL1xyXG4gICAgY3NzQ2xhc3Nlcz86IHt9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogT2JqZWN0IGRlZmluaW5nIG92ZXJyaWRlcyBmb3IgZGVmYXVsdCBwbHVnaW5zLCBkZWZhdWx0IHBsdWdpbnMgY2FuIGJlIGFsc28gc3BlY2lmaWVkIHVzaW5nIERJXHJcbiAgICAgKi9cclxuICAgIHBsdWdpbnM/OiBOZ1NlbGVjdFBsdWdpblR5cGVzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5zdGFuY2Ugb2Ygb3B0aW9ucyBnYXRoZXJlciB0aGF0IGlzIHVzZWQgZm9yIG9idGFpbmluZyBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIG9wdGlvbnNHYXRoZXJlcj86IE9wdGlvbnNHYXRoZXJlcjxUVmFsdWU+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5zdGFuY2Ugb2YgdGVtcGxhdGUgZ2F0aGVyZXIgdXNlZCBmb3Igb2J0YWluaW5nIGN1c3RvbSB0ZW1wbGF0ZXNcclxuICAgICAqL1xyXG4gICAgdGVtcGxhdGVHYXRoZXJlcj86IFRlbXBsYXRlR2F0aGVyZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbmRpY2F0aW9uIHdoZXRoZXIgaXMgTmdTZWxlY3QgcmVhZG9ubHkgb3Igbm90XHJcbiAgICAgKi9cclxuICAgIHJlYWRvbmx5PzogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIG9mIHZhbHVlIGNvbXBhcmVyIHRoYXQgaXMgdXNlZCBmb3IgY29tcGFyaXNvbiBvZiB2YWx1ZXNcclxuICAgICAqL1xyXG4gICAgdmFsdWVDb21wYXJlcj86IENvbXBhcmVWYWx1ZUZ1bmM8VFZhbHVlPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ldGhvZCB0aGF0IGlzIHVzZWQgZm9yIGZpbHRlcmluZyB3aGVuIGxpdmUgc2VhcmNoIGlzIHJ1bm5pbmcgb24gc3RhdGljIGRhdGFcclxuICAgICAqL1xyXG4gICAgbGl2ZVNlYXJjaEZpbHRlcj86IExpdmVTZWFyY2hGaWx0ZXI8VFZhbHVlPjtcclxufSJdfQ==