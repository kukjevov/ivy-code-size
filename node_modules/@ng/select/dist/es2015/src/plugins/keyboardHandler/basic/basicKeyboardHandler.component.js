/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, Inject, Optional, ElementRef, EventEmitter } from '@angular/core';
import { extend } from '@asseco/common';
import { NG_SELECT_PLUGIN_INSTANCES } from '../../../components/select/types';
import { KEYBOARD_HANDLER_OPTIONS } from '../types';
import { POPUP } from '../../popup/types';
/**
 * Default options for keyboard handler
 * \@internal
 * @type {?}
 */
const defaultOptions = {};
/**
 * Component used for obtaining basic keyboard handler html element
 */
export class BasicKeyboardHandlerComponent {
    //######################### constructor #########################
    /**
     * @param {?} ngSelectPlugins
     * @param {?} pluginElement
     * @param {?=} options
     */
    constructor(ngSelectPlugins, pluginElement, options) {
        this.ngSelectPlugins = ngSelectPlugins;
        this.pluginElement = pluginElement;
        /**
         * Occurs when there is requested for change of visibility of popup using keyboard
         */
        this.popupVisibilityRequest = new EventEmitter();
        /**
         * Occurs when option was selected using keyboard
         */
        this.optionSelect = new EventEmitter();
        //######################### protected methods #########################
        /**
         * Handles keyboard event
         * @param event Keyboard event that occured
         */
        this._handleKeyboard = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (event.key == "ArrowDown" || event.key == "ArrowUp") {
                this.popupVisibilityRequest.emit(true);
                /** @type {?} */
                let activeOption = this.availableOptions.find((/**
                 * @param {?} itm
                 * @return {?}
                 */
                itm => itm.active));
                if (activeOption) {
                    /** @type {?} */
                    let index = this.availableOptions.indexOf(activeOption);
                    activeOption.active = false;
                    //move down cursor
                    if (event.key == "ArrowDown") {
                        index += 1;
                    }
                    //move up cursor
                    else {
                        index -= 1;
                    }
                    if (index < 0) {
                        index = this.availableOptions.length - 1;
                    }
                    index = index % this.availableOptions.length;
                    this.availableOptions[index].active = true;
                }
                //none active before
                else if (this.availableOptions.length) {
                    this.availableOptions[0].active = true;
                }
                this._popup.invalidateVisuals();
                event.preventDefault();
            }
            if (event.key == "Enter") {
                /** @type {?} */
                let activeOption = this.availableOptions.find((/**
                 * @param {?} itm
                 * @return {?}
                 */
                itm => itm.active));
                if (activeOption) {
                    this.optionSelect.emit(activeOption);
                }
                event.preventDefault();
            }
            if (event.key == "Tab" || event.key == "Escape") {
                this.popupVisibilityRequest.emit(false);
            }
        });
        this._options = extend(true, {}, defaultOptions, options);
    }
    //######################### protected properties #########################
    /**
     * Gets currently available options
     * @protected
     * @return {?}
     */
    get availableOptions() {
        return this.optionsGatherer.availableOptions;
    }
    //######################### public properties - implementation of BasicKeyboardHandler #########################
    /**
     * Options for NgSelect plugin
     * @return {?}
     */
    get options() {
        return this._options;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this._options = extend(true, this._options, options);
    }
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    ngOnDestroy() {
        if (this.selectElement) {
            this.selectElement.removeEventListener('keydown', this._handleKeyboard);
        }
    }
    //######################### public methods - implementation of BasicKeyboardHandler #########################
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     * @return {?}
     */
    initialize() {
        if (this.selectElement) {
            this.selectElement.addEventListener('keydown', this._handleKeyboard);
        }
        /** @type {?} */
        let popup = (/** @type {?} */ (this.ngSelectPlugins[POPUP]));
        if (this._popup && this._popup != popup) {
            this._popup = null;
        }
        if (!this._popup) {
            this._popup = popup;
        }
    }
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     * @return {?}
     */
    initOptions() {
    }
    /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    invalidateVisuals() {
    }
}
BasicKeyboardHandlerComponent.decorators = [
    { type: Component, args: [{
                selector: "ng-basic-keyboard-handler",
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
BasicKeyboardHandlerComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NG_SELECT_PLUGIN_INSTANCES,] }, { type: Optional }] },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [KEYBOARD_HANDLER_OPTIONS,] }, { type: Optional }] }
];
if (false) {
    /**
     * Options for NgSelect plugin
     * @type {?}
     * @protected
     */
    BasicKeyboardHandlerComponent.prototype._options;
    /**
     * Popup that is displayed
     * @type {?}
     * @protected
     */
    BasicKeyboardHandlerComponent.prototype._popup;
    /**
     * HTML element that represents select itself
     * @type {?}
     */
    BasicKeyboardHandlerComponent.prototype.selectElement;
    /**
     * Instance of options gatherer, that is used for obtaining available options
     * @type {?}
     */
    BasicKeyboardHandlerComponent.prototype.optionsGatherer;
    /**
     * Occurs when there is requested for change of visibility of popup using keyboard
     * @type {?}
     */
    BasicKeyboardHandlerComponent.prototype.popupVisibilityRequest;
    /**
     * Occurs when option was selected using keyboard
     * @type {?}
     */
    BasicKeyboardHandlerComponent.prototype.optionSelect;
    /**
     * Handles keyboard event
     * \@param event Keyboard event that occured
     * @type {?}
     * @protected
     */
    BasicKeyboardHandlerComponent.prototype._handleKeyboard;
    /** @type {?} */
    BasicKeyboardHandlerComponent.prototype.ngSelectPlugins;
    /** @type {?} */
    BasicKeyboardHandlerComponent.prototype.pluginElement;
}
//# sourceMappingURL=data:application/json;base64,