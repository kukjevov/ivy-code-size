/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, ChangeDetectorRef, Inject, Optional, ElementRef, ViewChild, EventEmitter } from '@angular/core';
import { extend } from '@asseco/common';
import { NG_SELECT_PLUGIN_INSTANCES } from '../../../components/select/types';
import { LIVE_SEARCH_OPTIONS } from '../types';
import { TEXTS_LOCATOR } from '../../textsLocator/types';
import { POPUP } from '../../popup/types';
/**
 * Default options for live search
 * \@internal
 * @type {?}
 */
const defaultOptions = {
    cssClasses: {
        wrapperDiv: 'wrapper-div',
        input: 'form-control'
    },
    texts: {
        inputPlaceholder: 'Filter options'
    },
    keepSearchValue: false
};
/**
 * Component used for obtaining basic live search html element
 */
export class BasicLiveSearchComponent {
    //######################### constructor #########################
    /**
     * @param {?} ngSelectPlugins
     * @param {?} pluginElement
     * @param {?} _changeDetector
     * @param {?=} options
     */
    constructor(ngSelectPlugins, pluginElement, _changeDetector, options) {
        this.ngSelectPlugins = ngSelectPlugins;
        this.pluginElement = pluginElement;
        this._changeDetector = _changeDetector;
        /**
         * Current value of live search
         */
        this.searchValue = null;
        /**
         * Occurs when current value of live search changes
         */
        this.searchValueChange = new EventEmitter();
        //######################### public properties - template bindings #########################
        /**
         * Object containing available texts
         * \@internal
         */
        this.texts = {};
        this._options = extend(true, {}, defaultOptions, options);
    }
    //######################### public properties - implementation of BasicLiveSearch #########################
    /**
     * Options for NgSelect plugin
     * @return {?}
     */
    get options() {
        return this._options;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this._options = extend(true, this._options, options);
    }
    /**
     * HTML element that represents live search
     * @return {?}
     */
    get liveSearchElement() {
        return this.liveSearchElementChild.nativeElement;
    }
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    ngOnDestroy() {
        if (this._visibilityChangeSubscription) {
            this._visibilityChangeSubscription.unsubscribe();
            this._visibilityChangeSubscription = null;
        }
        if (this._textsChangedSubscription) {
            this._textsChangedSubscription.unsubscribe();
            this._textsChangedSubscription = null;
        }
    }
    //######################### public methods - implementation of BasicLiveSearch #########################
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     * @return {?}
     */
    initialize() {
        /** @type {?} */
        let textsLocator = (/** @type {?} */ (this.ngSelectPlugins[TEXTS_LOCATOR]));
        if (this._textsLocator && this._textsLocator != textsLocator) {
            this._textsChangedSubscription.unsubscribe();
            this._textsChangedSubscription = null;
            this._textsLocator = null;
        }
        if (!this._textsLocator) {
            this._textsLocator = textsLocator;
            this._textsChangedSubscription = this._textsLocator.textsChange.subscribe((/**
             * @return {?}
             */
            () => this._initTexts()));
        }
        /** @type {?} */
        let popup = (/** @type {?} */ (this.ngSelectPlugins[POPUP]));
        if (this._popup && this._popup != popup) {
            this._visibilityChangeSubscription.unsubscribe();
            this._visibilityChangeSubscription = null;
            this._popup = null;
        }
        if (!this._popup) {
            this._popup = popup;
            this._visibilityChangeSubscription = this._popup.visibilityChange.subscribe((/**
             * @return {?}
             */
            () => {
                if (!this.options.keepSearchValue) {
                    this.searchValue = '';
                    this.searchValueChange.emit();
                    this._changeDetector.detectChanges();
                }
            }));
        }
        this._initTexts();
    }
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     * @return {?}
     */
    initOptions() {
    }
    /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    invalidateVisuals() {
        this._changeDetector.detectChanges();
    }
    //######################### public methods - template bindings #########################
    /**
     * Handle input value
     * \@internal
     * @param {?} value Value of input
     * @return {?}
     */
    handleInput(value) {
        this.searchValue = value;
        this.searchValueChange.emit();
    }
    //######################### protected methods #########################
    /**
     * Initialize texts
     * @protected
     * @return {?}
     */
    _initTexts() {
        Object.keys(this.options.texts).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            this.texts[key] = this._textsLocator.getText(this.options.texts[key]);
        }));
        this._changeDetector.detectChanges();
    }
}
BasicLiveSearchComponent.decorators = [
    { type: Component, args: [{
                selector: "ng-basic-live-search",
                template: "<div style=\"display: none;\">\r\n    <div #liveSearchElement [ngClass]=\"options?.cssClasses?.wrapperDiv\">\r\n        <input [ngClass]=\"options?.cssClasses?.input\" type=\"text\" (input)=\"handleInput($event.target.value)\" [value]=\"searchValue\" placeholder=\"{{texts?.inputPlaceholder}}\">\r\n    </div>\r\n</div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [`.wrapper-div
        {
            padding: 4px;
            border-bottom: 1px solid #666;
            margin-bottom: 2px;
        }
        
        .form-control
        {
            width: 100%;
        }`]
            }] }
];
/** @nocollapse */
BasicLiveSearchComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NG_SELECT_PLUGIN_INSTANCES,] }, { type: Optional }] },
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Inject, args: [LIVE_SEARCH_OPTIONS,] }, { type: Optional }] }
];
BasicLiveSearchComponent.propDecorators = {
    liveSearchElementChild: [{ type: ViewChild, args: ['liveSearchElement',] }]
};
if (false) {
    /**
     * Texts locator used for handling texts
     * @type {?}
     * @protected
     */
    BasicLiveSearchComponent.prototype._textsLocator;
    /**
     * Popup used in NgSelect
     * @type {?}
     * @protected
     */
    BasicLiveSearchComponent.prototype._popup;
    /**
     * Subscription for changes in texts
     * @type {?}
     * @protected
     */
    BasicLiveSearchComponent.prototype._textsChangedSubscription;
    /**
     * Subscription for changes of popup visibility
     * @type {?}
     * @protected
     */
    BasicLiveSearchComponent.prototype._visibilityChangeSubscription;
    /**
     * Options for NgSelect plugin
     * @type {?}
     * @protected
     */
    BasicLiveSearchComponent.prototype._options;
    /**
     * Current value of live search
     * @type {?}
     */
    BasicLiveSearchComponent.prototype.searchValue;
    /**
     * Occurs when current value of live search changes
     * @type {?}
     */
    BasicLiveSearchComponent.prototype.searchValueChange;
    /**
     * Object containing available texts
     * \@internal
     * @type {?}
     */
    BasicLiveSearchComponent.prototype.texts;
    /**
     * View child that represents live search element
     * \@internal
     * @type {?}
     */
    BasicLiveSearchComponent.prototype.liveSearchElementChild;
    /** @type {?} */
    BasicLiveSearchComponent.prototype.ngSelectPlugins;
    /** @type {?} */
    BasicLiveSearchComponent.prototype.pluginElement;
    /**
     * @type {?}
     * @protected
     */
    BasicLiveSearchComponent.prototype._changeDetector;
}
//# sourceMappingURL=data:application/json;base64,