/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, Inject, Optional, ElementRef, ViewChild, EventEmitter } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { NG_SELECT_PLUGIN_INSTANCES } from '../../../components/select/types';
/**
 * Component used for no live search
 */
export class NoLiveSearchComponent {
    //######################### constructor #########################
    /**
     * @param {?} ngSelectPlugins
     * @param {?} pluginElement
     * @param {?} _document
     */
    constructor(ngSelectPlugins, pluginElement, _document) {
        this.ngSelectPlugins = ngSelectPlugins;
        this.pluginElement = pluginElement;
        this._document = _document;
        /**
         * Current value of live search
         */
        this.searchValue = null;
        /**
         * Occurs when current value of live search changes
         */
        this.searchValueChange = new EventEmitter();
    }
    /**
     * HTML element that represents live search
     * @return {?}
     */
    get liveSearchElement() {
        return this._document.createElement("span");
    }
    //######################### public methods - implementation of NoLiveSearch #########################
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     * @return {?}
     */
    initialize() {
    }
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     * @return {?}
     */
    initOptions() {
    }
    /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    invalidateVisuals() {
    }
}
NoLiveSearchComponent.decorators = [
    { type: Component, args: [{
                selector: "ng-no-live-search",
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
NoLiveSearchComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NG_SELECT_PLUGIN_INSTANCES,] }, { type: Optional }] },
    { type: ElementRef },
    { type: HTMLDocument, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
NoLiveSearchComponent.propDecorators = {
    liveSearchElementChild: [{ type: ViewChild, args: ['liveSearchElement',] }]
};
if (false) {
    /**
     * Options for NgSelect plugin
     * @type {?}
     * @protected
     */
    NoLiveSearchComponent.prototype._options;
    /**
     * Options for NgSelect plugin
     * @type {?}
     */
    NoLiveSearchComponent.prototype.options;
    /**
     * Current value of live search
     * @type {?}
     */
    NoLiveSearchComponent.prototype.searchValue;
    /**
     * Occurs when current value of live search changes
     * @type {?}
     */
    NoLiveSearchComponent.prototype.searchValueChange;
    /**
     * View child that represents live search element
     * \@internal
     * @type {?}
     */
    NoLiveSearchComponent.prototype.liveSearchElementChild;
    /** @type {?} */
    NoLiveSearchComponent.prototype.ngSelectPlugins;
    /** @type {?} */
    NoLiveSearchComponent.prototype.pluginElement;
    /**
     * @type {?}
     * @private
     */
    NoLiveSearchComponent.prototype._document;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9MaXZlU2VhcmNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9wbHVnaW5zL2xpdmVTZWFyY2gvbm8vbm9MaXZlU2VhcmNoLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hILE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUt6QyxPQUFPLEVBQUMsMEJBQTBCLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQzs7OztBQVc1RSxNQUFNLE9BQU8scUJBQXFCOzs7Ozs7O0lBNEM5QixZQUFtRSxlQUF3QyxFQUN4RixhQUF5QixFQUNOLFNBQXVCO1FBRk0sb0JBQWUsR0FBZixlQUFlLENBQXlCO1FBQ3hGLGtCQUFhLEdBQWIsYUFBYSxDQUFZO1FBQ04sY0FBUyxHQUFULFNBQVMsQ0FBYzs7OztRQW5CdEQsZ0JBQVcsR0FBVyxJQUFJLENBQUM7Ozs7UUFLM0Isc0JBQWlCLEdBQXVCLElBQUksWUFBWSxFQUFRLENBQUM7SUFnQnhFLENBQUM7Ozs7O0lBN0JELElBQVcsaUJBQWlCO1FBRXhCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEQsQ0FBQzs7Ozs7O0lBaUNNLFVBQVU7SUFFakIsQ0FBQzs7Ozs7SUFLTSxXQUFXO0lBRWxCLENBQUM7Ozs7O0lBS00saUJBQWlCO0lBRXhCLENBQUM7OztZQTdFSixTQUFTLFNBQ1Y7Z0JBQ0ksUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsUUFBUSxFQUFFLEVBQUU7Z0JBQ1osZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDbEQ7Ozs7NENBNkNnQixNQUFNLFNBQUMsMEJBQTBCLGNBQUcsUUFBUTtZQTdEQyxVQUFVO1lBK0RuQixZQUFZLHVCQUFoRCxNQUFNLFNBQUMsUUFBUTs7O3FDQU4zQixTQUFTLFNBQUMsbUJBQW1COzs7Ozs7OztJQWpDOUIseUNBQXdDOzs7OztJQU94Qyx3Q0FBb0M7Ozs7O0lBYXBDLDRDQUFrQzs7Ozs7SUFLbEMsa0RBQXdFOzs7Ozs7SUFReEUsdURBQ3VEOztJQUczQyxnREFBK0Y7O0lBQy9GLDhDQUFnQzs7Ozs7SUFDaEMsMENBQWlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBJbmplY3QsIE9wdGlvbmFsLCBFbGVtZW50UmVmLCBWaWV3Q2hpbGQsIEV2ZW50RW1pdHRlcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7RE9DVU1FTlR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcblxyXG5pbXBvcnQge05vTGl2ZVNlYXJjaE9wdGlvbnMsIE5vTGl2ZVNlYXJjaH0gZnJvbSAnLi9ub0xpdmVTZWFyY2guaW50ZXJmYWNlJztcclxuaW1wb3J0IHtOZ1NlbGVjdFBsdWdpbkdlbmVyaWN9IGZyb20gJy4uLy4uLy4uL21pc2MnO1xyXG5pbXBvcnQge05nU2VsZWN0UGx1Z2luSW5zdGFuY2VzfSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnRzL3NlbGVjdCc7XHJcbmltcG9ydCB7TkdfU0VMRUNUX1BMVUdJTl9JTlNUQU5DRVN9IGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudHMvc2VsZWN0L3R5cGVzJztcclxuXHJcbi8qKlxyXG4gKiBDb21wb25lbnQgdXNlZCBmb3Igbm8gbGl2ZSBzZWFyY2hcclxuICovXHJcbkBDb21wb25lbnQoXHJcbntcclxuICAgIHNlbGVjdG9yOiBcIm5nLW5vLWxpdmUtc2VhcmNoXCIsXHJcbiAgICB0ZW1wbGF0ZTogJycsXHJcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTm9MaXZlU2VhcmNoQ29tcG9uZW50IGltcGxlbWVudHMgTm9MaXZlU2VhcmNoLCBOZ1NlbGVjdFBsdWdpbkdlbmVyaWM8Tm9MaXZlU2VhcmNoT3B0aW9ucz5cclxue1xyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHByb3RlY3RlZCBmaWVsZHMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogT3B0aW9ucyBmb3IgTmdTZWxlY3QgcGx1Z2luXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBfb3B0aW9uczogTm9MaXZlU2VhcmNoT3B0aW9ucztcclxuXHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIHByb3BlcnRpZXMgLSBpbXBsZW1lbnRhdGlvbiBvZiBOb0xpdmVTZWFyY2ggIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogT3B0aW9ucyBmb3IgTmdTZWxlY3QgcGx1Z2luXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvcHRpb25zOiBOb0xpdmVTZWFyY2hPcHRpb25zO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSFRNTCBlbGVtZW50IHRoYXQgcmVwcmVzZW50cyBsaXZlIHNlYXJjaFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGxpdmVTZWFyY2hFbGVtZW50KCk6IEhUTUxFbGVtZW50XHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3VycmVudCB2YWx1ZSBvZiBsaXZlIHNlYXJjaFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2VhcmNoVmFsdWU6IHN0cmluZyA9IG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPY2N1cnMgd2hlbiBjdXJyZW50IHZhbHVlIG9mIGxpdmUgc2VhcmNoIGNoYW5nZXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNlYXJjaFZhbHVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XHJcblxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHB1YmxpYyBwcm9wZXJ0aWVzIC0gY2hpbGRyZW4gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVmlldyBjaGlsZCB0aGF0IHJlcHJlc2VudHMgbGl2ZSBzZWFyY2ggZWxlbWVudFxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIEBWaWV3Q2hpbGQoJ2xpdmVTZWFyY2hFbGVtZW50JylcclxuICAgIHB1YmxpYyBsaXZlU2VhcmNoRWxlbWVudENoaWxkOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PjtcclxuXHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgY29uc3RydWN0b3IgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG4gICAgY29uc3RydWN0b3IoQEluamVjdChOR19TRUxFQ1RfUExVR0lOX0lOU1RBTkNFUykgQE9wdGlvbmFsKCkgcHVibGljIG5nU2VsZWN0UGx1Z2luczogTmdTZWxlY3RQbHVnaW5JbnN0YW5jZXMsXHJcbiAgICAgICAgICAgICAgICBwdWJsaWMgcGx1Z2luRWxlbWVudDogRWxlbWVudFJlZixcclxuICAgICAgICAgICAgICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgX2RvY3VtZW50OiBIVE1MRG9jdW1lbnQpXHJcbiAgICB7XHJcbiAgICB9XHJcblxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHB1YmxpYyBtZXRob2RzIC0gaW1wbGVtZW50YXRpb24gb2YgTm9MaXZlU2VhcmNoICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemUgcGx1Z2luLCB0byBiZSByZWFkeSB0byB1c2UsIGluaXRpYWxpemUgY29tbXVuaWNhdGlvbiB3aXRoIG90aGVyIHBsdWdpbnNcclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaXRpYWxpemUoKVxyXG4gICAge1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZSBwbHVnaW4gb3B0aW9ucywgYWxsIG9wZXJhdGlvbnMgcmVxdWlyZWQgdG8gYmUgZG9uZSB3aXRoIHBsdWdpbiBvcHRpb25zIGFyZSBoYW5kbGVkIGhlcmVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaXRPcHRpb25zKClcclxuICAgIHtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEV4cGxpY2l0bHkgcnVucyBpbnZhbGlkYXRpb24gb2YgY29udGVudCAoY2hhbmdlIGRldGVjdGlvbilcclxuICAgICAqL1xyXG4gICAgcHVibGljIGludmFsaWRhdGVWaXN1YWxzKCk6IHZvaWRcclxuICAgIHtcclxuICAgIH1cclxufSJdfQ==