/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, ChangeDetectorRef, Inject, Optional, ElementRef, EventEmitter, ViewChildren, QueryList } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { extend, isDescendant } from '@asseco/common';
import { NG_SELECT_PLUGIN_INSTANCES } from '../../../components/select/types';
import { POPUP_OPTIONS } from '../types';
import { NORMAL_STATE } from '../../normalState/types';
import { KEYBOARD_HANDLER } from '../../keyboardHandler/types';
import { VALUE_HANDLER } from '../../valueHandler/types';
/**
 * Default options for popup
 * \@internal
 * @type {?}
 */
const defaultOptions = {
    cssClasses: {
        optionChecked: 'fa fa-check',
        optionItemDiv: 'option-item',
        optionItemTextDiv: 'option-item-text',
        popupDiv: 'popup-div'
    },
    visible: false
};
/**
 * Component used for rendering basic popup with options
 */
export class BasicPopupComponent {
    //######################### constructor #########################
    /**
     * @param {?} ngSelectPlugins
     * @param {?} pluginElement
     * @param {?} _changeDetector
     * @param {?=} options
     * @param {?=} _document
     */
    constructor(ngSelectPlugins, pluginElement, _changeDetector, options, _document) {
        this.ngSelectPlugins = ngSelectPlugins;
        this.pluginElement = pluginElement;
        this._changeDetector = _changeDetector;
        this._document = _document;
        /**
         * Indication whether is popup visible
         */
        this._popupVisible = false;
        /**
         * Occurs when user clicks on option, clicked options is passed as argument
         */
        this.optionClick = new EventEmitter();
        /**
         * Occurs when visibility of popup has changed
         */
        this.visibilityChange = new EventEmitter();
        /**
         * Handles click outside of select element
         * @param event Mouse event object
         */
        this._handleClickOutside = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (this.selectElement != event.target && !isDescendant(this.selectElement, (/** @type {?} */ (event.target)))) {
                this.togglePopup();
            }
        });
        /**
         * Handles visibility change
         */
        this._handleVisibilityChange = (/**
         * @param {?} visible
         * @return {?}
         */
        (visible) => {
            if (this.options.visible != visible) {
                this.options.visible = visible;
                this._changeDetector.detectChanges();
            }
        });
        this._options = extend(true, {}, defaultOptions, options);
    }
    //######################### public properties - implementation of BasicPopup #########################
    /**
     * Options for NgSelect plugin
     * @return {?}
     */
    get options() {
        return this._options;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this._options = extend(true, this._options, options);
    }
    /**
     * Html element that represents popup itself
     * @return {?}
     */
    get popupElement() {
        /** @type {?} */
        let ref = this.popupElementChildren.first;
        if (!ref) {
            return null;
        }
        return ref.nativeElement;
    }
    //######################### public methods - implementation of AfterViewInit #########################
    /**
     * Called when view was initialized
     * @return {?}
     */
    ngAfterViewInit() {
        this.popupElementChildren.changes.subscribe((/**
         * @return {?}
         */
        () => {
            if (!!this.popupElementChildren.first == this._popupVisible) {
                return;
            }
            //handle click outside
            if (this.popupElementChildren.first) {
                this._document.addEventListener('mouseup', this._handleClickOutside);
            }
            //unregister handle click outside
            else {
                this._document.removeEventListener('mouseup', this._handleClickOutside);
            }
            this._popupVisible = !!this.popupElementChildren.first;
            this.visibilityChange.emit();
        }));
    }
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    ngOnDestroy() {
        if (this._optionsChangeSubscription) {
            this._optionsChangeSubscription.unsubscribe();
            this._optionsChangeSubscription = null;
        }
        if (this._clickSubscription) {
            this._clickSubscription.unsubscribe();
            this._clickSubscription = null;
        }
        if (this._khPopupVisibilityRequestSubscription) {
            this._khPopupVisibilityRequestSubscription.unsubscribe();
            this._khPopupVisibilityRequestSubscription = null;
        }
        if (this._vhPopupVisibilityRequestSubscription) {
            this._vhPopupVisibilityRequestSubscription.unsubscribe();
            this._vhPopupVisibilityRequestSubscription = null;
        }
        this._document.removeEventListener('mouseup', this._handleClickOutside);
    }
    //######################### public methods - implementation of BasicPopup #########################
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     * @return {?}
     */
    initialize() {
        if (this._optionsGatherer && this._optionsGatherer != this.optionsGatherer) {
            this._optionsChangeSubscription.unsubscribe();
            this._optionsChangeSubscription = null;
            this._optionsGatherer = null;
        }
        if (!this._optionsGatherer) {
            this._optionsGatherer = this.optionsGatherer;
            this._optionsChangeSubscription = this._optionsGatherer.availableOptionsChange.subscribe((/**
             * @return {?}
             */
            () => this.loadOptions()));
        }
        /** @type {?} */
        let normalState = (/** @type {?} */ (this.ngSelectPlugins[NORMAL_STATE]));
        if (this._normalState && this._normalState != normalState) {
            this._clickSubscription.unsubscribe();
            this._clickSubscription = null;
            this._normalState = null;
        }
        if (!this._normalState) {
            this._normalState = normalState;
            this._clickSubscription = this._normalState.click.subscribe((/**
             * @return {?}
             */
            () => this.togglePopup()));
        }
        /** @type {?} */
        let keyboardHandler = (/** @type {?} */ (this.ngSelectPlugins[KEYBOARD_HANDLER]));
        if (this._keyboardHandler && this._keyboardHandler != keyboardHandler) {
            this._khPopupVisibilityRequestSubscription.unsubscribe();
            this._khPopupVisibilityRequestSubscription = null;
            this._keyboardHandler = null;
        }
        if (!this._keyboardHandler) {
            this._keyboardHandler = keyboardHandler;
            this._khPopupVisibilityRequestSubscription = this._keyboardHandler.popupVisibilityRequest.subscribe(this._handleVisibilityChange);
        }
        /** @type {?} */
        let valueHandler = (/** @type {?} */ (this.ngSelectPlugins[VALUE_HANDLER]));
        if (this._valueHandler && this._valueHandler != valueHandler) {
            this._vhPopupVisibilityRequestSubscription.unsubscribe();
            this._vhPopupVisibilityRequestSubscription = null;
            this._valueHandler = null;
        }
        if (!this._valueHandler) {
            this._valueHandler = valueHandler;
            this._vhPopupVisibilityRequestSubscription = this._valueHandler.popupVisibilityRequest.subscribe(this._handleVisibilityChange);
        }
        this.loadOptions();
    }
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     * @return {?}
     */
    initOptions() {
    }
    /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    invalidateVisuals() {
        this._changeDetector.detectChanges();
    }
    //######################### protected methods #########################
    /**
     * Loads options
     * @protected
     * @return {?}
     */
    loadOptions() {
        this.selectOptions = this._optionsGatherer.availableOptions;
        this._changeDetector.detectChanges();
    }
    /**
     * Toggles popup visibility
     * @protected
     * @return {?}
     */
    togglePopup() {
        this.options.visible = !this.options.visible;
        this._changeDetector.detectChanges();
    }
}
BasicPopupComponent.decorators = [
    { type: Component, args: [{
                selector: "div.ng-select-popup",
                template: "<ng-template #defaultOptionTextLook let-option>{{option?.text}}</ng-template>\r\n\r\n<div #popupDiv \r\n     *ngIf=\"options?.visible\"\r\n     [ngClass]=\"options?.cssClasses?.popupDiv\">\r\n    <ng-content></ng-content>\r\n\r\n    <div *ngFor=\"let option of selectOptions\"\r\n         [ngClass]=\"options?.cssClasses?.optionItemDiv\"\r\n         [class.selected]=\"option?.selected\"\r\n         [class.active]=\"option?.active\"\r\n         (click)=\"optionClick?.emit(option)\">\r\n        <div [ngClass]=\"options?.cssClasses?.optionItemTextDiv\">\r\n            <ng-container *ngTemplateOutlet=\"templateGatherer?.optionTemplate || defaultOptionTextLook; context: {$implicit: option, popup: this}\"></ng-container>\r\n        </div>\r\n\r\n        <div *ngIf=\"option?.selected && options?.multiple\" [ngClass]=\"options?.cssClasses?.optionChecked\"></div>\r\n    </div>\r\n</div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [`.popup-div
        {
            position: absolute;
            z-index: 250;
            background-color: #FFFFFF;
            border-radius: 4px;
            border: 1px solid #BBBBBB;
            overflow: auto;
            min-width: 100%;
            padding: 5px 0;
            box-shadow: 0 6px 12px rgba(0,0,0,.175);
            scrollbar-width: thin;
        }

        .popup-div::-webkit-scrollbar-thumb 
        {
            background-color: #cdcdcd;
        }
        
        .popup-div::-webkit-scrollbar 
        {
            width: 6px;
            background-color: #f0f0f0;
        }

        .option-item
        {
            padding: 3px 12px;
            display: flex;
            align-items: center;
        }

        .option-item .option-item-text
        {
            min-width: 0;
            flex: 1;
            white-space: nowrap;
        }

        .option-item .option-item-text:hover
        {
            cursor: pointer;
        }

        .option-item .fa-check
        {
            margin-left: 8px;
        }

        .option-item.selected,
        .option-item.active
        {
            background-color: #E8E8E8;
            background-image: linear-gradient(to bottom,#F5F5F5 0,#E8E8E8 100%);
        }

        .option-item:hover
        {
            background-color: #E8E8E8;
            background-image: linear-gradient(to bottom,#F5F5F5 0,#E8E8E8 100%);
            cursor: pointer;
        }`]
            }] }
];
/** @nocollapse */
BasicPopupComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NG_SELECT_PLUGIN_INSTANCES,] }, { type: Optional }] },
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Inject, args: [POPUP_OPTIONS,] }, { type: Optional }] },
    { type: HTMLDocument, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
BasicPopupComponent.propDecorators = {
    popupElementChildren: [{ type: ViewChildren, args: ['popupDiv',] }]
};
if (false) {
    /**
     * Options for NgSelect plugin
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._options;
    /**
     * Instance of previous options gatherer, that is used for obtaining available options
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._optionsGatherer;
    /**
     * Subscription for changes of options in options gatherer
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._optionsChangeSubscription;
    /**
     * Subscription for click event on normal state
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._clickSubscription;
    /**
     * Subscription for popup visibility request from keyboard handler
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._khPopupVisibilityRequestSubscription;
    /**
     * Subscription for popup visibility request from value handler
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._vhPopupVisibilityRequestSubscription;
    /**
     * Normal state that is displayed
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._normalState;
    /**
     * Keyboard handler that is used
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._keyboardHandler;
    /**
     * Value handler that is used
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._valueHandler;
    /**
     * Indication whether is popup visible
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._popupVisible;
    /**
     * Instance of options gatherer, that is used for obtaining available options
     * @type {?}
     */
    BasicPopupComponent.prototype.optionsGatherer;
    /**
     * Gatherer used for obtaining custom templates
     * @type {?}
     */
    BasicPopupComponent.prototype.templateGatherer;
    /**
     * HTML element that represents select itself
     * @type {?}
     */
    BasicPopupComponent.prototype.selectElement;
    /**
     * Occurs when user clicks on option, clicked options is passed as argument
     * @type {?}
     */
    BasicPopupComponent.prototype.optionClick;
    /**
     * Occurs when visibility of popup has changed
     * @type {?}
     */
    BasicPopupComponent.prototype.visibilityChange;
    /**
     * Array of select options available
     * \@internal
     * @type {?}
     */
    BasicPopupComponent.prototype.selectOptions;
    /**
     * Watch for visibility of popup div element
     * \@internal
     * @type {?}
     */
    BasicPopupComponent.prototype.popupElementChildren;
    /**
     * Handles click outside of select element
     * \@param event Mouse event object
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._handleClickOutside;
    /**
     * Handles visibility change
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._handleVisibilityChange;
    /** @type {?} */
    BasicPopupComponent.prototype.ngSelectPlugins;
    /** @type {?} */
    BasicPopupComponent.prototype.pluginElement;
    /**
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._changeDetector;
    /**
     * @type {?}
     * @protected
     */
    BasicPopupComponent.prototype._document;
}
//# sourceMappingURL=data:application/json;base64,