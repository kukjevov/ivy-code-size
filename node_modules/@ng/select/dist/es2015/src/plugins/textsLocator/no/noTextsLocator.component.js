/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, ElementRef, EventEmitter, Inject, Optional } from "@angular/core";
import { NG_SELECT_PLUGIN_INSTANCES } from '../../../components/select/types';
/**
 * Component used for rendering no texts locator
 */
export class NoTextsLocatorComponent {
    //######################### constructor #########################
    /**
     * @param {?} ngSelectPlugins
     * @param {?} pluginElement
     */
    constructor(ngSelectPlugins, pluginElement) {
        this.ngSelectPlugins = ngSelectPlugins;
        this.pluginElement = pluginElement;
        /**
         * Indication that texts should be obtained again, because they have changed
         */
        this.textsChange = new EventEmitter();
    }
    //######################### public methods - implementation of TextsLocator #########################
    /**
     * Gets text for specified key
     * @param {?} key
     * @return {?}
     */
    getText(key) {
        return key;
    }
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     * @return {?}
     */
    initialize() {
    }
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     * @return {?}
     */
    initOptions() {
    }
    /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    invalidateVisuals() {
    }
}
NoTextsLocatorComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-no-texts-locator',
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
NoTextsLocatorComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NG_SELECT_PLUGIN_INSTANCES,] }, { type: Optional }] },
    { type: ElementRef }
];
if (false) {
    /**
     * Options for NgSelect plugin
     * @type {?}
     */
    NoTextsLocatorComponent.prototype.options;
    /**
     * Indication that texts should be obtained again, because they have changed
     * @type {?}
     */
    NoTextsLocatorComponent.prototype.textsChange;
    /** @type {?} */
    NoTextsLocatorComponent.prototype.ngSelectPlugins;
    /** @type {?} */
    NoTextsLocatorComponent.prototype.pluginElement;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9UZXh0c0xvY2F0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL3BsdWdpbnMvdGV4dHNMb2NhdG9yL25vL25vVGV4dHNMb2NhdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSx1QkFBdUIsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFJN0csT0FBTyxFQUFDLDBCQUEwQixFQUFDLE1BQU0sa0NBQWtDLENBQUM7Ozs7QUFZNUUsTUFBTSxPQUFPLHVCQUF1Qjs7Ozs7O0lBZWhDLFlBQW1FLGVBQXdDLEVBQ3hGLGFBQXlCO1FBRHVCLG9CQUFlLEdBQWYsZUFBZSxDQUF5QjtRQUN4RixrQkFBYSxHQUFiLGFBQWEsQ0FBWTs7OztRQUpyQyxnQkFBVyxHQUF1QixJQUFJLFlBQVksRUFBUSxDQUFDO0lBTWxFLENBQUM7Ozs7Ozs7SUFPTSxPQUFPLENBQUMsR0FBVztRQUV0QixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBS00sVUFBVTtJQUVqQixDQUFDOzs7OztJQUtNLFdBQVc7SUFFbEIsQ0FBQzs7Ozs7SUFLTSxpQkFBaUI7SUFFeEIsQ0FBQzs7O1lBdkRKLFNBQVMsU0FDVjtnQkFDSSxRQUFRLEVBQUUscUJBQXFCO2dCQUMvQixRQUFRLEVBQUUsRUFBRTtnQkFDWixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTthQUNsRDs7Ozs0Q0FnQmdCLE1BQU0sU0FBQywwQkFBMEIsY0FBRyxRQUFRO1lBL0JqQixVQUFVOzs7Ozs7O0lBdUJsRCwwQ0FBc0M7Ozs7O0lBS3RDLDhDQUFrRTs7SUFHdEQsa0RBQStGOztJQUMvRixnREFBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5qZWN0LCBPcHRpb25hbH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuXHJcbmltcG9ydCB7TmdTZWxlY3RQbHVnaW5HZW5lcmljfSBmcm9tIFwiLi4vLi4vLi4vbWlzY1wiO1xyXG5pbXBvcnQge05nU2VsZWN0UGx1Z2luSW5zdGFuY2VzfSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50cy9zZWxlY3RcIjtcclxuaW1wb3J0IHtOR19TRUxFQ1RfUExVR0lOX0lOU1RBTkNFU30gZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy9zZWxlY3QvdHlwZXMnO1xyXG5pbXBvcnQge05vVGV4dHNMb2NhdG9yT3B0aW9ucywgTm9UZXh0c0xvY2F0b3J9IGZyb20gXCIuL25vVGV4dHNMb2NhdG9yLmludGVyZmFjZVwiO1xyXG5cclxuLyoqXHJcbiAqIENvbXBvbmVudCB1c2VkIGZvciByZW5kZXJpbmcgbm8gdGV4dHMgbG9jYXRvclxyXG4gKi9cclxuQENvbXBvbmVudChcclxue1xyXG4gICAgc2VsZWN0b3I6ICduZy1uby10ZXh0cy1sb2NhdG9yJyxcclxuICAgIHRlbXBsYXRlOiAnJyxcclxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOb1RleHRzTG9jYXRvckNvbXBvbmVudCBpbXBsZW1lbnRzIE5vVGV4dHNMb2NhdG9yLCBOZ1NlbGVjdFBsdWdpbkdlbmVyaWM8Tm9UZXh0c0xvY2F0b3JPcHRpb25zPlxyXG57XHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIHByb3BlcnRpZXMgLSBpbXBsZW1lbnRhdGlvbiBvZiBUZXh0c0xvY2F0b3IgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogT3B0aW9ucyBmb3IgTmdTZWxlY3QgcGx1Z2luXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvcHRpb25zOiBOb1RleHRzTG9jYXRvck9wdGlvbnM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbmRpY2F0aW9uIHRoYXQgdGV4dHMgc2hvdWxkIGJlIG9idGFpbmVkIGFnYWluLCBiZWNhdXNlIHRoZXkgaGF2ZSBjaGFuZ2VkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB0ZXh0c0NoYW5nZTogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBjb25zdHJ1Y3RvciAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KE5HX1NFTEVDVF9QTFVHSU5fSU5TVEFOQ0VTKSBAT3B0aW9uYWwoKSBwdWJsaWMgbmdTZWxlY3RQbHVnaW5zOiBOZ1NlbGVjdFBsdWdpbkluc3RhbmNlcyxcclxuICAgICAgICAgICAgICAgIHB1YmxpYyBwbHVnaW5FbGVtZW50OiBFbGVtZW50UmVmKVxyXG4gICAge1xyXG4gICAgfVxyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwdWJsaWMgbWV0aG9kcyAtIGltcGxlbWVudGF0aW9uIG9mIFRleHRzTG9jYXRvciAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRleHQgZm9yIHNwZWNpZmllZCBrZXlcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFRleHQoa2V5OiBzdHJpbmcpOiBzdHJpbmdcclxuICAgIHtcclxuICAgICAgICByZXR1cm4ga2V5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZSBwbHVnaW4sIHRvIGJlIHJlYWR5IHRvIHVzZSwgaW5pdGlhbGl6ZSBjb21tdW5pY2F0aW9uIHdpdGggb3RoZXIgcGx1Z2luc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5pdGlhbGl6ZSgpXHJcbiAgICB7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplIHBsdWdpbiBvcHRpb25zLCBhbGwgb3BlcmF0aW9ucyByZXF1aXJlZCB0byBiZSBkb25lIHdpdGggcGx1Z2luIG9wdGlvbnMgYXJlIGhhbmRsZWQgaGVyZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5pdE9wdGlvbnMoKVxyXG4gICAge1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXhwbGljaXRseSBydW5zIGludmFsaWRhdGlvbiBvZiBjb250ZW50IChjaGFuZ2UgZGV0ZWN0aW9uKVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW52YWxpZGF0ZVZpc3VhbHMoKTogdm9pZFxyXG4gICAge1xyXG4gICAgfVxyXG59Il19