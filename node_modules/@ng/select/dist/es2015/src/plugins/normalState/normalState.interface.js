/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Texts that are used within NormalState
 * @record
 */
export function NormalStateTexts() { }
if (false) {
    /**
     * Displayed when there is no value selected, represents empty value, used if value is null or empty array
     * @type {?|undefined}
     */
    NormalStateTexts.prototype.nothingSelected;
}
/**
 * Options for normal state plugin
 * @record
 * @template TCssClasses
 */
export function NormalStateOptions() { }
if (false) {
    /**
     * Texts that are used within any NormalState
     * @type {?|undefined}
     */
    NormalStateOptions.prototype.texts;
    /**
     * Indication whether NgSelect should be in readonly state
     * @type {?|undefined}
     */
    NormalStateOptions.prototype.readonly;
}
/**
 * Normal state plugin interface
 * @record
 */
export function NormalState() { }
if (false) {
    /**
     * Gatherer used for obtaining custom templates
     * @type {?}
     */
    NormalState.prototype.templateGatherer;
    /**
     * Occurs when user clicks on normal state
     * @type {?}
     */
    NormalState.prototype.click;
    /**
     * Occurs when normal state gains focus
     * @type {?}
     */
    NormalState.prototype.focus;
    /**
     * Occurs when user tries to cancel one of selected values
     * @type {?}
     */
    NormalState.prototype.cancelOption;
}
/**
 * Context for template that is used within normal state plugin
 * @record
 */
export function NormalStateContext() { }
if (false) {
    /**
     * Instance of plugin itself
     * @type {?}
     */
    NormalStateContext.prototype.$implicit;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9ybWFsU3RhdGUuaW50ZXJmYWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BsdWdpbnMvbm9ybWFsU3RhdGUvbm9ybWFsU3RhdGUuaW50ZXJmYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBUUEsc0NBTUM7Ozs7OztJQURHLDJDQUF5Qjs7Ozs7OztBQU03Qix3Q0FXQzs7Ozs7O0lBTkcsbUNBQXlCOzs7OztJQUt6QixzQ0FBbUI7Ozs7OztBQU12QixpQ0FxQkM7Ozs7OztJQWhCRyx1Q0FBbUM7Ozs7O0lBS25DLDRCQUFtQzs7Ozs7SUFLbkMsNEJBQW1DOzs7OztJQUtuQyxtQ0FBeUQ7Ozs7OztBQU03RCx3Q0FNQzs7Ozs7O0lBREcsdUNBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFdmVudEVtaXR0ZXJ9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcblxyXG5pbXBvcnQge05nU2VsZWN0UGx1Z2luLCBWaXN1YWxQbHVnaW5PcHRpb25zLCBUZW1wbGF0ZUdhdGhlcmVyfSBmcm9tIFwiLi4vLi4vbWlzY1wiO1xyXG5pbXBvcnQge05nU2VsZWN0T3B0aW9ufSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9vcHRpb25cIjtcclxuXHJcbi8qKlxyXG4gKiBUZXh0cyB0aGF0IGFyZSB1c2VkIHdpdGhpbiBOb3JtYWxTdGF0ZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBOb3JtYWxTdGF0ZVRleHRzXHJcbntcclxuICAgIC8qKlxyXG4gICAgICogRGlzcGxheWVkIHdoZW4gdGhlcmUgaXMgbm8gdmFsdWUgc2VsZWN0ZWQsIHJlcHJlc2VudHMgZW1wdHkgdmFsdWUsIHVzZWQgaWYgdmFsdWUgaXMgbnVsbCBvciBlbXB0eSBhcnJheVxyXG4gICAgICovXHJcbiAgICBub3RoaW5nU2VsZWN0ZWQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBPcHRpb25zIGZvciBub3JtYWwgc3RhdGUgcGx1Z2luXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE5vcm1hbFN0YXRlT3B0aW9uczxUQ3NzQ2xhc3Nlcz4gZXh0ZW5kcyBWaXN1YWxQbHVnaW5PcHRpb25zPFRDc3NDbGFzc2VzPlxyXG57XHJcbiAgICAvKipcclxuICAgICAqIFRleHRzIHRoYXQgYXJlIHVzZWQgd2l0aGluIGFueSBOb3JtYWxTdGF0ZVxyXG4gICAgICovXHJcbiAgICB0ZXh0cz86IE5vcm1hbFN0YXRlVGV4dHM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbmRpY2F0aW9uIHdoZXRoZXIgTmdTZWxlY3Qgc2hvdWxkIGJlIGluIHJlYWRvbmx5IHN0YXRlXHJcbiAgICAgKi9cclxuICAgIHJlYWRvbmx5PzogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIE5vcm1hbCBzdGF0ZSBwbHVnaW4gaW50ZXJmYWNlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE5vcm1hbFN0YXRlIGV4dGVuZHMgTmdTZWxlY3RQbHVnaW5cclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiBHYXRoZXJlciB1c2VkIGZvciBvYnRhaW5pbmcgY3VzdG9tIHRlbXBsYXRlc1xyXG4gICAgICovXHJcbiAgICB0ZW1wbGF0ZUdhdGhlcmVyOiBUZW1wbGF0ZUdhdGhlcmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogT2NjdXJzIHdoZW4gdXNlciBjbGlja3Mgb24gbm9ybWFsIHN0YXRlXHJcbiAgICAgKi9cclxuICAgIHJlYWRvbmx5IGNsaWNrOiBFdmVudEVtaXR0ZXI8dm9pZD47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPY2N1cnMgd2hlbiBub3JtYWwgc3RhdGUgZ2FpbnMgZm9jdXNcclxuICAgICAqL1xyXG4gICAgcmVhZG9ubHkgZm9jdXM6IEV2ZW50RW1pdHRlcjx2b2lkPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE9jY3VycyB3aGVuIHVzZXIgdHJpZXMgdG8gY2FuY2VsIG9uZSBvZiBzZWxlY3RlZCB2YWx1ZXNcclxuICAgICAqL1xyXG4gICAgcmVhZG9ubHkgY2FuY2VsT3B0aW9uOiBFdmVudEVtaXR0ZXI8TmdTZWxlY3RPcHRpb248YW55Pj47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb250ZXh0IGZvciB0ZW1wbGF0ZSB0aGF0IGlzIHVzZWQgd2l0aGluIG5vcm1hbCBzdGF0ZSBwbHVnaW5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTm9ybWFsU3RhdGVDb250ZXh0XHJcbntcclxuICAgIC8qKlxyXG4gICAgICogSW5zdGFuY2Ugb2YgcGx1Z2luIGl0c2VsZlxyXG4gICAgICovXHJcbiAgICAkaW1wbGljaXQ6IE5vcm1hbFN0YXRlO1xyXG59Il19