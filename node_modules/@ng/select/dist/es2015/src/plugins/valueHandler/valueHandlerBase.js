/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter } from '@angular/core';
import { KEYBOARD_HANDLER } from '../keyboardHandler/types';
import { POPUP } from '../popup/types';
import { NORMAL_STATE } from '../normalState/types';
/**
 * Base class for value handlers
 * @abstract
 * @template TValue, TOptions
 */
export class ValueHandlerBase {
    //######################### constructor #########################
    /**
     * @param {?} ngSelectPlugins
     * @param {?} pluginElement
     */
    constructor(ngSelectPlugins, pluginElement) {
        this.ngSelectPlugins = ngSelectPlugins;
        this.pluginElement = pluginElement;
        /**
         * Occurs when value of NgSelect changes
         */
        this.valueChange = new EventEmitter();
        /**
         * Occurs when there is requested for change of visibility of popup using keyboard
         */
        this.popupVisibilityRequest = new EventEmitter();
        /**
         * Cancels, removes option from selected options
         * @param option Option to be canceled
         */
        this._cancelValue = (/**
         * @param {?} option
         * @return {?}
         */
        (option) => {
            if (Array.isArray(this.selectedOptions)) {
                /** @type {?} */
                let index = this.selectedOptions.indexOf(option);
                if (index >= 0) {
                    this.selectedOptions.splice(index, 1);
                }
            }
            else {
                if (this.selectedOptions == option) {
                    this.selectedOptions = null;
                }
            }
            this._clearSelected();
            this._markValueAsSelected();
            this._normalState.invalidateVisuals();
            this.valueChange.emit();
        });
    }
    /**
     * Current selected value of NgSelect
     * @return {?}
     */
    get value() {
        if (this.selectedOptions) {
            if (Array.isArray(this.selectedOptions)) {
                return this.selectedOptions.map((/**
                 * @param {?} opt
                 * @return {?}
                 */
                opt => opt.value));
            }
            else {
                return this.selectedOptions.value;
            }
        }
        return null;
    }
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    ngOnDestroy() {
        if (this._optionSelectSubscription) {
            this._optionSelectSubscription.unsubscribe();
            this._optionSelectSubscription = null;
        }
        if (this._optionClickSubscription) {
            this._optionClickSubscription.unsubscribe();
            this._optionClickSubscription = null;
        }
        if (this._optionsChangeSubscription) {
            this._optionsChangeSubscription.unsubscribe();
            this._optionsChangeSubscription = null;
        }
        if (this._cancelOptionSubscription) {
            this._cancelOptionSubscription.unsubscribe();
            this._cancelOptionSubscription = null;
        }
    }
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     * @return {?}
     */
    initialize() {
        if (this._optionsGatherer && this._optionsGatherer != this.optionsGatherer) {
            this._optionsChangeSubscription.unsubscribe();
            this._optionsChangeSubscription = null;
            this._optionsGatherer = null;
        }
        if (!this._optionsGatherer) {
            this._optionsGatherer = this.optionsGatherer;
            this._optionsChangeSubscription = this._optionsGatherer.optionsChange.subscribe((/**
             * @return {?}
             */
            () => this._loadOptions()));
        }
        /** @type {?} */
        let keyboardHandler = (/** @type {?} */ (this.ngSelectPlugins[KEYBOARD_HANDLER]));
        if (this._keyboardHandler && this._keyboardHandler != keyboardHandler) {
            this._optionSelectSubscription.unsubscribe();
            this._optionSelectSubscription = null;
            this._keyboardHandler = null;
        }
        if (!this._keyboardHandler) {
            this._keyboardHandler = keyboardHandler;
            this._optionSelectSubscription = this._keyboardHandler.optionSelect.subscribe(this._setValue);
        }
        /** @type {?} */
        let popup = (/** @type {?} */ (this.ngSelectPlugins[POPUP]));
        if (this._popup && this._popup != popup) {
            this._optionClickSubscription.unsubscribe();
            this._optionClickSubscription = null;
            this._popup = null;
        }
        if (!this._popup) {
            this._popup = popup;
            this._optionClickSubscription = this._popup.optionClick.subscribe(this._setValue);
        }
        /** @type {?} */
        let normalState = (/** @type {?} */ (this.ngSelectPlugins[NORMAL_STATE]));
        if (this._normalState && this._normalState != normalState) {
            this._cancelOptionSubscription.unsubscribe();
            this._cancelOptionSubscription = null;
            this._normalState = null;
        }
        if (!this._normalState) {
            this._normalState = normalState;
            this._cancelOptionSubscription = this._normalState.cancelOption.subscribe(this._cancelValue);
        }
        this._loadOptions();
    }
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     * @return {?}
     */
    initOptions() {
    }
    /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    invalidateVisuals() {
    }
    /**
     * Clears all selected values
     * @protected
     * @return {?}
     */
    _clearSelected() {
        this._optionsGatherer.options.forEach((/**
         * @param {?} option
         * @return {?}
         */
        (option) => option.selected = false));
    }
    /**
     * Marks current value as selected
     * @protected
     * @return {?}
     */
    _markValueAsSelected() {
        if (this.selectedOptions) {
            if (Array.isArray(this.selectedOptions)) {
                this.selectedOptions.forEach((/**
                 * @param {?} option
                 * @return {?}
                 */
                (option) => option.selected = true));
            }
            else {
                ((/** @type {?} */ (this.selectedOptions))).selected = true;
            }
        }
    }
}
if (false) {
    /**
     * Options for NgSelect plugin
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._options;
    /**
     * Keyboard handler that is used
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._keyboardHandler;
    /**
     * Popup that is used
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._popup;
    /**
     * Normal state that is used
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._normalState;
    /**
     * Subscription for option selection using keyboard
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._optionSelectSubscription;
    /**
     * Subscription for option selection using mouse
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._optionClickSubscription;
    /**
     * Subscription for changes of options in options gatherer
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._optionsChangeSubscription;
    /**
     * Subscription for canceling an option
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._cancelOptionSubscription;
    /**
     * Instance of previous options gatherer, that is used for obtaining available options
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._optionsGatherer;
    /**
     * Options for NgSelect plugin
     * @type {?}
     */
    ValueHandlerBase.prototype.options;
    /**
     * Occurs when value of NgSelect changes
     * @type {?}
     */
    ValueHandlerBase.prototype.valueChange;
    /**
     * Instance of options gatherer, that is used for obtaining available options
     * @type {?}
     */
    ValueHandlerBase.prototype.optionsGatherer;
    /**
     * Function of value comparer that is used for comparison of values
     * @type {?}
     */
    ValueHandlerBase.prototype.valueComparer;
    /**
     * Occurs when there is requested for change of visibility of popup using keyboard
     * @type {?}
     */
    ValueHandlerBase.prototype.popupVisibilityRequest;
    /**
     * Current value of NgSelect
     * @type {?}
     */
    ValueHandlerBase.prototype.selectedOptions;
    /**
     * Sets value
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._setValue;
    /**
     * Cancels, removes option from selected options
     * \@param option Option to be canceled
     * @type {?}
     * @protected
     */
    ValueHandlerBase.prototype._cancelValue;
    /** @type {?} */
    ValueHandlerBase.prototype.ngSelectPlugins;
    /** @type {?} */
    ValueHandlerBase.prototype.pluginElement;
    /**
     * Sets value for NgSelect
     * @abstract
     * @param {?} value Value to be set
     * @return {?}
     */
    ValueHandlerBase.prototype.setValue = function (value) { };
    /**
     * Loads options
     * @abstract
     * @protected
     * @return {?}
     */
    ValueHandlerBase.prototype._loadOptions = function () { };
}
//# sourceMappingURL=data:application/json;base64,