var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, Inject, Optional, ElementRef } from '@angular/core';
import { extend, isBlank } from '@asseco/common';
import { NG_SELECT_PLUGIN_INSTANCES } from '../../../components/select/types';
import { VALUE_HANDLER_OPTIONS } from '../types';
import { ValueHandlerBase } from '../valueHandlerBase';
const ɵ0 = /**
 * @param {?} value
 * @return {?}
 */
value => value;
/**
 * Default options for value handler
 * \@internal
 * @type {?}
 */
const defaultOptions = {
    textExtractor: (ɵ0)
};
/**
 * Component used for handling current value of NgSelect, allows values which are not present in options
 * @template TValue
 */
export class DynamicValueHandlerComponent extends ValueHandlerBase {
    //######################### constructor #########################
    /**
     * @param {?} ngSelectPlugins
     * @param {?} pluginElement
     * @param {?=} options
     */
    constructor(ngSelectPlugins, pluginElement, options) {
        super(ngSelectPlugins, pluginElement);
        //######################### protected methods #########################
        /**
         * Sets value
         */
        this._setValue = (/**
         * @param {?} option
         * @return {?}
         */
        (option) => {
            //multiple values are allowed
            if (this.options.multiple) {
                if (!Array.isArray(this.selectedOptions)) {
                    this.selectedOptions = [];
                }
                else {
                    /** @type {?} */
                    let opt;
                    //value exists, removing from list
                    if ((opt = this.selectedOptions.find((/**
                     * @param {?} selOpt
                     * @return {?}
                     */
                    selOpt => this.valueComparer(selOpt.value, opt.value))))) {
                        /** @type {?} */
                        let index = this.selectedOptions.indexOf(option);
                        this.selectedOptions.splice(index, 1);
                    }
                    //adding value
                    else {
                        this.selectedOptions.push(option);
                    }
                }
            }
            else 
            //only signle value allowed
            {
                this.selectedOptions = option;
            }
            this._clearSelected();
            this._markValueAsSelected();
            this._normalState.invalidateVisuals();
            this.valueChange.emit();
            //close popup if not multiple
            if (!this.options.multiple) {
                this.popupVisibilityRequest.emit(false);
            }
            else {
                this._popup.invalidateVisuals();
            }
        });
        this._options = extend(true, {}, defaultOptions, options);
    }
    //######################### public properties - implementation of DynamicValueHandler #########################
    /**
     * Options for NgSelect plugin
     * @return {?}
     */
    get options() {
        return this._options;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this._options = extend(true, this._options, options);
    }
    //######################### public methods - implementation of DynamicValueHandler #########################
    /**
     * Sets value for NgSelect
     * @param {?} value Value to be set
     * @return {?}
     */
    setValue(value) {
        this._useOptionsAsValue(value);
    }
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     * @return {?}
     */
    initOptions() {
    }
    /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    invalidateVisuals() {
    }
    /**
     * Loads options
     * @protected
     * @return {?}
     */
    _loadOptions() {
    }
    /**
     * Converts value to options
     * @protected
     * @param {?} value Value to be changed to options
     * @return {?}
     */
    _useOptionsAsValue(value) {
        return __awaiter(this, void 0, void 0, function* () {
            //set empty value
            if (isBlank(value) || (Array.isArray(value) && !value.length)) {
                this.selectedOptions = value;
                this._clearSelected();
                this._normalState.invalidateVisuals();
                this.valueChange.emit();
                return;
            }
            if (this.options.multiple) {
                if (Array.isArray(value)) {
                    /** @type {?} */
                    let items = value;
                    /** @type {?} */
                    let options = [];
                    for (let itm of items) {
                        options.push(yield this._loadText(itm));
                    }
                    this.selectedOptions = options;
                }
                else {
                    throw new Error('Don`t you have redundant "multiple"?');
                }
            }
            else {
                if (Array.isArray(value)) {
                    throw new Error('Are you missing attribute "multiple"?');
                }
                else {
                    /** @type {?} */
                    let item = value;
                    this.selectedOptions = yield this._loadText(item);
                }
            }
            this._clearSelected();
            this._markValueAsSelected();
            this._normalState.invalidateVisuals();
            this.valueChange.emit();
        });
    }
    /**
     * Loads text for specified value
     * @protected
     * @param {?} value Value that is going to be used for obtaining option
     * @return {?}
     */
    _loadText(value) {
        return __awaiter(this, void 0, void 0, function* () {
            //load option dynamically
            if (this.options.dynamicOptionsCallback) {
                /** @type {?} */
                let opts = yield this.options.dynamicOptionsCallback(value);
                if (opts && opts.length) {
                    /** @type {?} */
                    let opt = opts[0];
                    opt.value = value;
                    opt.selected = true;
                    return opt;
                }
            }
            //load option from value
            return (/** @type {?} */ ({
                selected: true,
                active: false,
                value: value,
                text: this.options.textExtractor(value)
            }));
        });
    }
}
DynamicValueHandlerComponent.decorators = [
    { type: Component, args: [{
                selector: "ng-dynamic-value-handler",
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
DynamicValueHandlerComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NG_SELECT_PLUGIN_INSTANCES,] }, { type: Optional }] },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [VALUE_HANDLER_OPTIONS,] }, { type: Optional }] }
];
if (false) {
    /**
     * Sets value
     * @type {?}
     * @protected
     */
    DynamicValueHandlerComponent.prototype._setValue;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,