/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, Inject, Optional, ElementRef, PLATFORM_ID } from '@angular/core';
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { extend } from '@asseco/common';
import * as positions from 'positions';
import { NG_SELECT_PLUGIN_INSTANCES } from '../../../components/select/types';
import { POSITIONER_OPTIONS } from '../types';
import { POPUP } from '../../popup/types';
/**
 * Default options for positioner
 * \@internal
 * @type {?}
 */
const defaultOptions = {
    optionsCoordinates: 'top left',
    selectCoordinates: 'bottom left'
};
/**
 * Component used for positioning popup element
 */
export class BasicPositionerComponent {
    //######################### constructor #########################
    /**
     * @param {?} ngSelectPlugins
     * @param {?} pluginElement
     * @param {?=} options
     * @param {?=} _document
     * @param {?=} _platformId
     */
    constructor(ngSelectPlugins, pluginElement, options, _document, _platformId) {
        this.ngSelectPlugins = ngSelectPlugins;
        this.pluginElement = pluginElement;
        this._document = _document;
        this._platformId = _platformId;
        /**
         * Indication whether is code running in browser
         */
        this._isBrowser = isPlatformBrowser(this._platformId);
        //######################### protected methods #########################
        /**
         * Handles resize and scroll event
         */
        this._handleResizeAndScroll = (/**
         * @return {?}
         */
        () => {
            this._calculatePositionAndDimensions();
        });
        this._options = extend(true, {}, defaultOptions, options);
    }
    //######################### public properties - implementation of BasicPositioner #########################
    /**
     * Options for NgSelect plugin
     * @return {?}
     */
    get options() {
        return this._options;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this._options = extend(true, this._options, options);
    }
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    ngOnDestroy() {
        if (this._visibilitySubscription) {
            this._visibilitySubscription.unsubscribe();
            this._visibilitySubscription = null;
        }
        if (this._optionsChangeSubscription) {
            this._optionsChangeSubscription.unsubscribe();
            this._optionsChangeSubscription = null;
        }
        if (this._isBrowser) {
            window.removeEventListener('resize', this._handleResizeAndScroll);
            window.removeEventListener('scroll', this._handleResizeAndScroll);
        }
    }
    //######################### public methods - implementation of BasicPositioner #########################
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     * @return {?}
     */
    initialize() {
        if (this._optionsGatherer && this._optionsGatherer != this.optionsGatherer) {
            this._optionsChangeSubscription.unsubscribe();
            this._optionsChangeSubscription = null;
            this._optionsGatherer = null;
        }
        if (!this._optionsGatherer) {
            this._optionsGatherer = this.optionsGatherer;
            this._optionsChangeSubscription = this._optionsGatherer.availableOptionsChange.subscribe((/**
             * @return {?}
             */
            () => {
                if (this._popup.popupElement && this.optionsGatherer.availableOptions && this.optionsGatherer.availableOptions.length) {
                    this._handlePosition();
                }
            }));
        }
        /** @type {?} */
        let popup = (/** @type {?} */ (this.ngSelectPlugins[POPUP]));
        if (this._popup && this._popup != popup) {
            this._visibilitySubscription.unsubscribe();
            this._visibilitySubscription = null;
            this._popup = null;
        }
        if (!this._popup) {
            this._popup = popup;
            this._visibilitySubscription = this._popup.visibilityChange.subscribe((/**
             * @return {?}
             */
            () => this._handlePosition()));
        }
        this._handlePosition();
    }
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     * @return {?}
     */
    initOptions() {
    }
    /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    invalidateVisuals() {
    }
    /**
     * Handles position of popup
     * @protected
     * @return {?}
     */
    _handlePosition() {
        this._popupElement = this._popup.popupElement;
        if (this._isBrowser) {
            //register events and handle position of opened popup
            if (this._popupElement) {
                window.addEventListener('resize', this._handleResizeAndScroll);
                window.addEventListener('scroll', this._handleResizeAndScroll);
                this._handleResizeAndScroll();
            }
            //unregister events
            else {
                window.removeEventListener('resize', this._handleResizeAndScroll);
                window.removeEventListener('scroll', this._handleResizeAndScroll);
            }
        }
    }
    /**
     * Calculates positions and dimensions of popup
     * @protected
     * @return {?}
     */
    _calculatePositionAndDimensions() {
        //set to default position
        /** @type {?} */
        let popupCoordinates = positions(this._popupElement, this.options.optionsCoordinates, this.selectElement, this.options.selectCoordinates);
        this._popupElement.style.left = `${popupCoordinates.left}px`;
        this._popupElement.style.top = `${popupCoordinates.top}px`;
        this._popupElement.style.maxHeight = '';
        //flip if collision with viewport
        /** @type {?} */
        let optionsCoordinates;
        /** @type {?} */
        let selectCoordinates;
        [popupCoordinates, optionsCoordinates, selectCoordinates] = this._flipIfCollision(this._popupElement);
        this._popupElement.style.left = `${popupCoordinates.left}px`;
        this._popupElement.style.top = `${popupCoordinates.top}px`;
        //set maxHeight if there is not more place
        this._updateHeight(this._popupElement);
        popupCoordinates = positions(this._popupElement, optionsCoordinates, this.selectElement, selectCoordinates);
        this._popupElement.style.left = `${popupCoordinates.left}px`;
        this._popupElement.style.top = `${popupCoordinates.top}px`;
    }
    /**
     * Updates height of element
     * @protected
     * @param {?} popupElement Html element for popup div
     * @return {?}
     */
    _updateHeight(popupElement) {
        /** @type {?} */
        let rect = popupElement.getBoundingClientRect();
        /** @type {?} */
        let selectRect = this.selectElement.getBoundingClientRect();
        /** @type {?} */
        let h = Math.max(this._document.documentElement.clientHeight, window.innerHeight || 0);
        //popup is above
        if (rect.top < selectRect.top) {
            //space above is not enough
            popupElement.style.maxHeight = `${selectRect.top - 6}px`;
        }
        //popup is below
        else {
            //space below is not enough
            popupElement.style.maxHeight = `${h - selectRect.bottom - 6}px`;
        }
    }
    /**
     * Flips html element position if collision occur
     * @protected
     * @param {?} popupElement Html element to be flipped if collisions occur
     * @return {?}
     */
    _flipIfCollision(popupElement) {
        /** @type {?} */
        let w = Math.max(this._document.documentElement.clientWidth, window.innerWidth || 0);
        /** @type {?} */
        let h = Math.max(this._document.documentElement.clientHeight, window.innerHeight || 0);
        /** @type {?} */
        let rect = popupElement.getBoundingClientRect();
        /** @type {?} */
        let selectRect = this.selectElement.getBoundingClientRect();
        /** @type {?} */
        let spaceAbove = selectRect.top;
        /** @type {?} */
        let spaceUnder = h - selectRect.bottom;
        /** @type {?} */
        let spaceBefore = selectRect.left;
        /** @type {?} */
        let spaceAfter = w - selectRect.right;
        /** @type {?} */
        let optionsCoordinates = this.options.optionsCoordinates;
        /** @type {?} */
        let selectCoordinates = this.options.selectCoordinates;
        //vertical overflow
        if ((h < rect.bottom &&
            spaceUnder < spaceAbove) ||
            (rect.top < 0 &&
                spaceAbove < spaceUnder)) {
            optionsCoordinates = this._flipVertiacal(optionsCoordinates);
            selectCoordinates = this._flipVertiacal(selectCoordinates);
        }
        //horizontal overflow
        if ((w < (rect.left + rect.width) &&
            spaceAfter < spaceBefore) ||
            (rect.left < 0 &&
                spaceBefore < spaceAfter)) {
            optionsCoordinates = this._flipHorizontal(optionsCoordinates);
            selectCoordinates = this._flipHorizontal(selectCoordinates);
        }
        return [positions(popupElement, optionsCoordinates, this.selectElement, selectCoordinates), optionsCoordinates, selectCoordinates];
    }
    /**
     * Flips vertical position
     * @protected
     * @param {?} position Position to be flipped vertically
     * @return {?}
     */
    _flipVertiacal(position) {
        if (position.indexOf('top') >= 0) {
            return (/** @type {?} */ (position.replace('top', 'bottom')));
        }
        else if (position.indexOf('bottom') >= 0) {
            return (/** @type {?} */ (position.replace('bottom', 'top')));
        }
        return position;
    }
    /**
     * Flips horizontal position
     * @protected
     * @param {?} position Position to be flipped horizontally
     * @return {?}
     */
    _flipHorizontal(position) {
        if (position.indexOf('right') >= 0) {
            return (/** @type {?} */ (position.replace('right', 'left')));
        }
        else if (position.indexOf('left') >= 0) {
            return (/** @type {?} */ (position.replace('left', 'right')));
        }
        return position;
    }
}
BasicPositionerComponent.decorators = [
    { type: Component, args: [{
                selector: "ng-basic-positioner",
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
BasicPositionerComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NG_SELECT_PLUGIN_INSTANCES,] }, { type: Optional }] },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [POSITIONER_OPTIONS,] }, { type: Optional }] },
    { type: HTMLDocument, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
if (false) {
    /**
     * Instance of previous options gatherer, that is used for obtaining available options
     * @type {?}
     * @protected
     */
    BasicPositionerComponent.prototype._optionsGatherer;
    /**
     * Options for NgSelect plugin
     * @type {?}
     * @protected
     */
    BasicPositionerComponent.prototype._options;
    /**
     * Subscription for visibility change of popup
     * @type {?}
     * @protected
     */
    BasicPositionerComponent.prototype._visibilitySubscription;
    /**
     * Subscription for changes of options in options gatherer
     * @type {?}
     * @protected
     */
    BasicPositionerComponent.prototype._optionsChangeSubscription;
    /**
     * Popup that is displayed
     * @type {?}
     * @protected
     */
    BasicPositionerComponent.prototype._popup;
    /**
     * Html element of popup plugin
     * @type {?}
     * @protected
     */
    BasicPositionerComponent.prototype._popupElement;
    /**
     * Indication whether is code running in browser
     * @type {?}
     * @protected
     */
    BasicPositionerComponent.prototype._isBrowser;
    /**
     * HTML element that represents select itself
     * @type {?}
     */
    BasicPositionerComponent.prototype.selectElement;
    /**
     * Instance of options gatherer, that is used for obtaining available options
     * @type {?}
     */
    BasicPositionerComponent.prototype.optionsGatherer;
    /**
     * Handles resize and scroll event
     * @type {?}
     * @protected
     */
    BasicPositionerComponent.prototype._handleResizeAndScroll;
    /** @type {?} */
    BasicPositionerComponent.prototype.ngSelectPlugins;
    /** @type {?} */
    BasicPositionerComponent.prototype.pluginElement;
    /**
     * @type {?}
     * @protected
     */
    BasicPositionerComponent.prototype._document;
    /**
     * @type {?}
     * @protected
     */
    BasicPositionerComponent.prototype._platformId;
}
//# sourceMappingURL=data:application/json;base64,