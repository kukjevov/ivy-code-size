/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { forwardRef, Directive } from '@angular/core';
import { NgSelectComponent } from '../components/select/select.component';
import { valueChange, setValue, onFocus, setReadonly, getValue } from '../extensions';
/**
 * Provider for control value accessor
 * \@internal
 * @type {?}
 */
export const NG_SELECT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => NgSelectControlValueAccessor)),
    multi: true
};
/**
 * Control value accessor for NgSelectComponent
 * @template TValue
 */
export class NgSelectControlValueAccessor {
    //######################### constructor #########################
    /**
     * @param {?} _select
     */
    constructor(_select) {
        this._select = _select;
        /**
         * Subscription that looks for changes of select
         */
        this._changeSubscription = null;
        /**
         * Subscription that looks for changes of select
         */
        this._focusSubscription = null;
    }
    //######################### public methods - implementation of ControlValueAccessor #########################
    /**
     * Sets value to select
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this._value = value;
        if (this._select.isInitialized) {
            this._select.execute(setValue(value));
            return;
        }
        if (this._initializedSubscription) {
            this._initializedSubscription.unsubscribe();
            this._initializedSubscription = null;
        }
        this._initializedSubscription = this._select.initialized.subscribe((/**
         * @param {?} initialized
         * @return {?}
         */
        initialized => {
            if (initialized) {
                this._initializedSubscription.unsubscribe();
                this._initializedSubscription = null;
                this._select.execute(setValue(value));
            }
        }));
    }
    /**
     * Registers callback that is called when value of select changes
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._changeInitializedSubscription = this._select.initialized.subscribe((/**
         * @param {?} initialized
         * @return {?}
         */
        initialized => {
            if (initialized) {
                if (this._changeSubscription) {
                    this._changeSubscription.unsubscribe();
                    this._changeSubscription = null;
                }
                this._changeSubscription = this._select.executeAndReturn(valueChange(fn));
                /** @type {?} */
                let value = this._select.executeAndReturn(getValue());
                if (this._value != value) {
                    this._value = value;
                    fn(value);
                }
            }
        }));
    }
    /**
     * Registers callback that is called when select is closed
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._touchInitializedSubscription = this._select.initialized.subscribe((/**
         * @param {?} initialized
         * @return {?}
         */
        initialized => {
            if (initialized) {
                if (this._focusSubscription) {
                    this._focusSubscription.unsubscribe();
                    this._focusSubscription = null;
                }
                this._focusSubscription = this._select.executeAndReturn(onFocus(fn));
            }
        }));
    }
    /**
     * Sets NgSelect as disabled/readonly
     * @param {?} isDisabled Indication whether is control disabled or not
     * @return {?}
     */
    setDisabledState(isDisabled) {
        if (this._select.isInitialized) {
            this._select.execute(setReadonly(isDisabled));
            return;
        }
        if (this._disabledInitializedSubscription) {
            this._disabledInitializedSubscription.unsubscribe();
            this._disabledInitializedSubscription = null;
        }
        this._disabledInitializedSubscription = this._select.initialized.subscribe((/**
         * @param {?} initialized
         * @return {?}
         */
        initialized => {
            if (initialized) {
                this._disabledInitializedSubscription.unsubscribe();
                this._disabledInitializedSubscription = null;
                this._select.execute(setReadonly(isDisabled));
            }
        }));
    }
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    ngOnDestroy() {
        if (this._changeSubscription) {
            this._changeSubscription.unsubscribe();
            this._changeSubscription = null;
        }
        if (this._initializedSubscription) {
            this._initializedSubscription.unsubscribe();
            this._initializedSubscription = null;
        }
        if (this._changeInitializedSubscription) {
            this._changeInitializedSubscription.unsubscribe();
            this._changeInitializedSubscription = null;
        }
        if (this._touchInitializedSubscription) {
            this._touchInitializedSubscription.unsubscribe();
            this._touchInitializedSubscription = null;
        }
        if (this._focusSubscription) {
            this._focusSubscription.unsubscribe();
            this._focusSubscription = null;
        }
        if (this._disabledInitializedSubscription) {
            this._disabledInitializedSubscription.unsubscribe();
            this._disabledInitializedSubscription = null;
        }
    }
}
NgSelectControlValueAccessor.decorators = [
    { type: Directive, args: [{
                selector: 'ng-select[formControlName],ng-select[formControl],ng-select[ngModel]',
                providers: [NG_SELECT_VALUE_ACCESSOR]
            },] }
];
/** @nocollapse */
NgSelectControlValueAccessor.ctorParameters = () => [
    { type: NgSelectComponent }
];
if (false) {
    /**
     * Subscription for initialized status of NgSelect, used for writeValue
     * @type {?}
     * @private
     */
    NgSelectControlValueAccessor.prototype._initializedSubscription;
    /**
     * Subscription for initialized status of NgSelect, used for registerOnChange
     * @type {?}
     * @private
     */
    NgSelectControlValueAccessor.prototype._changeInitializedSubscription;
    /**
     * Subscription for initialized status of NgSelect, used for registerOnTouched
     * @type {?}
     * @private
     */
    NgSelectControlValueAccessor.prototype._touchInitializedSubscription;
    /**
     * Subscription for initialized status of NgSelect, used for setDisabledState
     * @type {?}
     * @private
     */
    NgSelectControlValueAccessor.prototype._disabledInitializedSubscription;
    /**
     * Subscription that looks for changes of select
     * @type {?}
     * @private
     */
    NgSelectControlValueAccessor.prototype._changeSubscription;
    /**
     * Subscription that looks for changes of select
     * @type {?}
     * @private
     */
    NgSelectControlValueAccessor.prototype._focusSubscription;
    /**
     * Last set value to this control
     * @type {?}
     * @private
     */
    NgSelectControlValueAccessor.prototype._value;
    /**
     * @type {?}
     * @private
     */
    NgSelectControlValueAccessor.prototype._select;
}
//# sourceMappingURL=data:application/json;base64,