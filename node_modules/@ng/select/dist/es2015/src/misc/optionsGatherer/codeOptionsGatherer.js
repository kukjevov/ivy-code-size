/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter } from "@angular/core";
import { isBlank } from "@asseco/common";
import { LIVE_SEARCH } from "../../plugins/liveSearch/types";
/**
 * Options gatherer used for static options gathering from code
 * @template TValue
 */
export class CodeOptionsGatherer {
    //######################### constructor #########################
    /**
     * @param {?=} _liveSearchFilter
     */
    constructor(_liveSearchFilter) {
        this._liveSearchFilter = _liveSearchFilter;
        //######################### private fields #########################
        /**
         * Array of visible, displayed options for select
         */
        this._availableOptions = [];
        /**
         * Array of provided options for select
         */
        this._options = [];
        /**
         * Occurs when array of visible, displayed options has changed
         */
        this._availableOptionsChange = new EventEmitter();
        /**
         * Occurs when array of provided options has changed
         */
        this.optionsChange = new EventEmitter();
        if (isBlank(this._liveSearchFilter)) {
            this._liveSearchFilter = (/**
             * @param {?} query
             * @return {?}
             */
            (query) => {
                return (/**
                 * @param {?} itm
                 * @return {?}
                 */
                itm => itm.text.indexOf(query) >= 0);
            });
        }
    }
    //######################### public properties - implementation of OptionsGatherer #########################
    /**
     * Array of provided options for select
     * @param {?} value
     * @return {?}
     */
    set options(value) {
        this._options = value;
        this._availableOptions = value;
    }
    /**
     * @return {?}
     */
    get options() {
        return this._options;
    }
    /**
     * Array of visible, displayed options for select
     * @return {?}
     */
    get availableOptions() {
        return this._availableOptions;
    }
    ;
    /**
     * Occurs when array of visible, displayed options has changed
     * @return {?}
     */
    get availableOptionsChange() {
        return this._availableOptionsChange;
    }
    //######################### public methods - implmentation of OptionsGatherer #########################
    /**
     * Initialize gatherer during initialization phase
     * @return {?}
     */
    initializeGatherer() {
        /** @type {?} */
        let liveSearch = (/** @type {?} */ (this.ngSelectPlugins[LIVE_SEARCH]));
        if (this._liveSearch && this._liveSearch != liveSearch) {
            this._searchValueChangeSubscription.unsubscribe();
            this._searchValueChangeSubscription = null;
            this._liveSearch = null;
        }
        if (!this._liveSearch) {
            this._liveSearch = liveSearch;
            this._searchValueChangeSubscription = this._liveSearch.searchValueChange.subscribe((/**
             * @return {?}
             */
            () => {
                if (!this._liveSearch.searchValue) {
                    this._availableOptions = this.options;
                    this._availableOptionsChange.emit();
                    return;
                }
                this._availableOptions = this.options.filter(this._liveSearchFilter(this._liveSearch.searchValue));
                this._availableOptionsChange.emit();
            }));
        }
    }
    /**
     * Called when gatherer needs to be destroyed
     * @return {?}
     */
    destroyGatherer() {
        if (this._searchValueChangeSubscription) {
            this._searchValueChangeSubscription.unsubscribe();
            this._searchValueChangeSubscription = null;
        }
    }
}
if (false) {
    /**
     * Array of visible, displayed options for select
     * @type {?}
     * @private
     */
    CodeOptionsGatherer.prototype._availableOptions;
    /**
     * Array of provided options for select
     * @type {?}
     * @private
     */
    CodeOptionsGatherer.prototype._options;
    /**
     * Occurs when array of visible, displayed options has changed
     * @type {?}
     * @private
     */
    CodeOptionsGatherer.prototype._availableOptionsChange;
    /**
     * Live search plugin currently used in NgSelect
     * @type {?}
     * @protected
     */
    CodeOptionsGatherer.prototype._liveSearch;
    /**
     * Subscription for changes of live search value
     * @type {?}
     * @protected
     */
    CodeOptionsGatherer.prototype._searchValueChangeSubscription;
    /**
     * Occurs when array of provided options has changed
     * @type {?}
     */
    CodeOptionsGatherer.prototype.optionsChange;
    /**
     * NgSelect plugin instances available for gatherer
     * @type {?}
     */
    CodeOptionsGatherer.prototype.ngSelectPlugins;
    /**
     * @type {?}
     * @private
     */
    CodeOptionsGatherer.prototype._liveSearchFilter;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,