var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter } from "@angular/core";
import { isPresent, isBlank } from "@asseco/common";
import { debounceTime } from "rxjs/operators";
import { LIVE_SEARCH } from "../../plugins/liveSearch/types";
/**
 * Class that is used as for options gathering in dynamic way, for example from external source when writing
 * @template TValue
 */
export class DynamicOptionsGatherer {
    //######################### constructor #########################
    /**
     * @param {?} _options
     */
    constructor(_options) {
        this._options = _options;
        /**
         * Minimal number of characters required for searching
         */
        this._minLength = 2;
        //######################### public properties - implementation of OptionsGatherer #########################
        /**
         * Array of provided options for select
         */
        this.options = [];
        /**
         * Occurs when array of provided options has changed
         */
        this.optionsChange = new EventEmitter();
        if (!this._options) {
            throw new Error("Options can not be null!");
        }
        if (this._options && isPresent(this._options.minLength)) {
            this._minLength = this._options.minLength;
        }
    }
    /**
     * Array of visible, displayed options for select
     * @return {?}
     */
    get availableOptions() {
        return this.options;
    }
    /**
     * Occurs when array of visible, displayed options has changed
     * @return {?}
     */
    get availableOptionsChange() {
        return this.optionsChange;
    }
    //######################### public methods - implementation of OptionsGatherer #########################
    /**
     * Initialize gatherer during initialization phase
     * @return {?}
     */
    initializeGatherer() {
        /** @type {?} */
        let liveSearch = (/** @type {?} */ (this.ngSelectPlugins[LIVE_SEARCH]));
        if (this._liveSearch && this._liveSearch != liveSearch) {
            this._searchValueChangeSubscription.unsubscribe();
            this._searchValueChangeSubscription = null;
            this._liveSearch = null;
        }
        if (!this._liveSearch) {
            this._liveSearch = liveSearch;
            /** @type {?} */
            let searchValueChange = this._liveSearch.searchValueChange;
            if (this._options.delay) {
                searchValueChange = searchValueChange.pipe(debounceTime(this._options.delay));
            }
            this._searchValueChangeSubscription = searchValueChange.subscribe((/**
             * @return {?}
             */
            () => __awaiter(this, void 0, void 0, function* () {
                if (isBlank(this._liveSearch.searchValue) || this._liveSearch.searchValue.length < this._minLength) {
                    this.options = [];
                    this.optionsChange.emit();
                    return;
                }
                this.options = yield this._options.dynamicOptionsCallback(this._liveSearch.searchValue);
                this.optionsChange.emit();
            })));
        }
    }
    /**
     * Called when gatherer needs to be destroyed
     * @return {?}
     */
    destroyGatherer() {
        if (this._searchValueChangeSubscription) {
            this._searchValueChangeSubscription.unsubscribe();
            this._searchValueChangeSubscription = null;
        }
    }
}
if (false) {
    /**
     * Live search plugin currently used in NgSelect
     * @type {?}
     * @protected
     */
    DynamicOptionsGatherer.prototype._liveSearch;
    /**
     * Subscription for changes of live search value
     * @type {?}
     * @protected
     */
    DynamicOptionsGatherer.prototype._searchValueChangeSubscription;
    /**
     * Minimal number of characters required for searching
     * @type {?}
     * @protected
     */
    DynamicOptionsGatherer.prototype._minLength;
    /**
     * Array of provided options for select
     * @type {?}
     */
    DynamicOptionsGatherer.prototype.options;
    /**
     * Occurs when array of provided options has changed
     * @type {?}
     */
    DynamicOptionsGatherer.prototype.optionsChange;
    /**
     * NgSelect plugin instances available for gatherer
     * @type {?}
     */
    DynamicOptionsGatherer.prototype.ngSelectPlugins;
    /**
     * @type {?}
     * @protected
     */
    DynamicOptionsGatherer.prototype._options;
}
//# sourceMappingURL=data:application/json;base64,