/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * NgSelect plugin interface
 * @record
 */
export function NgSelectPlugin() { }
if (false) {
    /**
     * NgSelect plugin instances available for this plugin
     * @type {?}
     */
    NgSelectPlugin.prototype.ngSelectPlugins;
    /**
     * Element that represents plugin
     * @type {?}
     */
    NgSelectPlugin.prototype.pluginElement;
    /**
     * Options for NgSelect plugin
     * @type {?}
     */
    NgSelectPlugin.prototype.options;
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     * @return {?}
     */
    NgSelectPlugin.prototype.initialize = function () { };
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     * @return {?}
     */
    NgSelectPlugin.prototype.initOptions = function () { };
    /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    NgSelectPlugin.prototype.invalidateVisuals = function () { };
}
/**
 * NgSelect plugin generic interface
 * @record
 * @template TOptions
 */
export function NgSelectPluginGeneric() { }
if (false) {
    /**
     * Options for ng select plugin
     * @type {?}
     */
    NgSelectPluginGeneric.prototype.options;
}
/**
 * All available types of plugins for NgSelect
 * @record
 */
export function NgSelectPluginTypes() { }
if (false) {
    /**
     * Handles keyboard events
     * @type {?|undefined}
     */
    NgSelectPluginTypes.prototype.keyboardHandler;
    /**
     * Component used for displaying normal state of select
     * @type {?|undefined}
     */
    NgSelectPluginTypes.prototype.normalState;
    /**
     * Component used for displaying available options for selection
     * @type {?|undefined}
     */
    NgSelectPluginTypes.prototype.popup;
    /**
     * Handles correct position of pop component
     * @type {?|undefined}
     */
    NgSelectPluginTypes.prototype.positioner;
    /**
     * Component used for displaying readonly/disabled state of select, can be null, in that case normal state component is used
     * @type {?|undefined}
     */
    NgSelectPluginTypes.prototype.readonlyState;
    /**
     * Handles obtaining and setting value of component
     * @type {?|undefined}
     */
    NgSelectPluginTypes.prototype.valueHandler;
    /**
     * Contains component that is used for live searching in options
     * @type {?|undefined}
     */
    NgSelectPluginTypes.prototype.liveSearch;
    /**
     * Used for obtaining texts that are displayed in NgSelect
     * @type {?|undefined}
     */
    NgSelectPluginTypes.prototype.textsLocator;
}
/**
 * Base options for every plugin
 * @record
 */
export function PluginOptions() { }
/**
 * Base options for every visual plugin (component)
 * @record
 * @template TCssClasses
 */
export function VisualPluginOptions() { }
if (false) {
    /**
     * Css classes applied to visual plugin (component), possible to override only part of classes
     * @type {?|undefined}
     */
    VisualPluginOptions.prototype.cssClasses;
}
/**
 * Defines interface, that describes minimal set of parameters for specifying plugin for NgSelect
 * @record
 * @template PluginType
 */
export function PluginDescription() { }
if (false) {
    /**
     * Type of plugin that will be dynamically instantiated
     * @type {?|undefined}
     */
    PluginDescription.prototype.type;
    /**
     * Options that will be passed to dynamically instantiated plugin
     * @type {?|undefined}
     */
    PluginDescription.prototype.options;
    /**
     * Optional callback used for obtaining dynamic instance of plugin (allows direct communication with plugin)
     * @type {?|undefined}
     */
    PluginDescription.prototype.instanceCallback;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLmludGVyZmFjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9taXNjL3BsdWdpbi5pbnRlcmZhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFlQSxvQ0ErQkM7Ozs7OztJQTFCRyx5Q0FBeUM7Ozs7O0lBS3pDLHVDQUEwQjs7Ozs7SUFLMUIsaUNBQWE7Ozs7O0lBS2Isc0RBQWE7Ozs7O0lBS2IsdURBQWM7Ozs7O0lBS2QsNkRBQTBCOzs7Ozs7O0FBTTlCLDJDQU1DOzs7Ozs7SUFERyx3Q0FBa0I7Ozs7OztBQU10Qix5Q0F5Q0M7Ozs7OztJQXBDRyw4Q0FBcUQ7Ozs7O0lBS3JELDBDQUE2Qzs7Ozs7SUFLN0Msb0NBQWlDOzs7OztJQUtqQyx5Q0FBMkM7Ozs7O0lBSzNDLDRDQUFpRDs7Ozs7SUFLakQsMkNBQW9EOzs7OztJQUtwRCx5Q0FBMkM7Ozs7O0lBSzNDLDJDQUErQzs7Ozs7O0FBTW5ELG1DQUVDOzs7Ozs7QUFLRCx5Q0FNQzs7Ozs7O0lBREcseUNBQXlCOzs7Ozs7O0FBTTdCLHVDQWdCQzs7Ozs7O0lBWEcsaUNBQXdCOzs7OztJQUt4QixvQ0FBd0I7Ozs7O0lBS3hCLDZDQUF1RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VHlwZSwgRWxlbWVudFJlZn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuXHJcbmltcG9ydCB7TmdTZWxlY3RQbHVnaW5JbnN0YW5jZXN9IGZyb20gXCIuLi9jb21wb25lbnRzL3NlbGVjdFwiO1xyXG5pbXBvcnQge0tleWJvYXJkSGFuZGxlcn0gZnJvbSBcIi4uL3BsdWdpbnMva2V5Ym9hcmRIYW5kbGVyXCI7XHJcbmltcG9ydCB7Tm9ybWFsU3RhdGV9IGZyb20gXCIuLi9wbHVnaW5zL25vcm1hbFN0YXRlXCI7XHJcbmltcG9ydCB7UG9wdXB9IGZyb20gXCIuLi9wbHVnaW5zL3BvcHVwXCI7XHJcbmltcG9ydCB7UG9zaXRpb25lcn0gZnJvbSBcIi4uL3BsdWdpbnMvcG9zaXRpb25lclwiO1xyXG5pbXBvcnQge1JlYWRvbmx5U3RhdGV9IGZyb20gXCIuLi9wbHVnaW5zL3JlYWRvbmx5U3RhdGVcIjtcclxuaW1wb3J0IHtWYWx1ZUhhbmRsZXJ9IGZyb20gXCIuLi9wbHVnaW5zL3ZhbHVlSGFuZGxlclwiO1xyXG5pbXBvcnQge0xpdmVTZWFyY2h9IGZyb20gXCIuLi9wbHVnaW5zL2xpdmVTZWFyY2hcIjtcclxuaW1wb3J0IHtUZXh0c0xvY2F0b3J9IGZyb20gXCIuLi9wbHVnaW5zL3RleHRzTG9jYXRvclwiO1xyXG5cclxuLyoqXHJcbiAqIE5nU2VsZWN0IHBsdWdpbiBpbnRlcmZhY2VcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTmdTZWxlY3RQbHVnaW5cclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiBOZ1NlbGVjdCBwbHVnaW4gaW5zdGFuY2VzIGF2YWlsYWJsZSBmb3IgdGhpcyBwbHVnaW5cclxuICAgICAqL1xyXG4gICAgbmdTZWxlY3RQbHVnaW5zOiBOZ1NlbGVjdFBsdWdpbkluc3RhbmNlcztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEVsZW1lbnQgdGhhdCByZXByZXNlbnRzIHBsdWdpblxyXG4gICAgICovXHJcbiAgICBwbHVnaW5FbGVtZW50OiBFbGVtZW50UmVmO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogT3B0aW9ucyBmb3IgTmdTZWxlY3QgcGx1Z2luXHJcbiAgICAgKi9cclxuICAgIG9wdGlvbnM6IGFueTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemUgcGx1Z2luLCB0byBiZSByZWFkeSB0byB1c2UsIGluaXRpYWxpemUgY29tbXVuaWNhdGlvbiB3aXRoIG90aGVyIHBsdWdpbnNcclxuICAgICAqL1xyXG4gICAgaW5pdGlhbGl6ZSgpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZSBwbHVnaW4gb3B0aW9ucywgYWxsIG9wZXJhdGlvbnMgcmVxdWlyZWQgdG8gYmUgZG9uZSB3aXRoIHBsdWdpbiBvcHRpb25zIGFyZSBoYW5kbGVkIGhlcmVcclxuICAgICAqL1xyXG4gICAgaW5pdE9wdGlvbnMoKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEV4cGxpY2l0bHkgcnVucyBpbnZhbGlkYXRpb24gb2YgY29udGVudCAoY2hhbmdlIGRldGVjdGlvbilcclxuICAgICAqL1xyXG4gICAgaW52YWxpZGF0ZVZpc3VhbHMoKTogdm9pZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIE5nU2VsZWN0IHBsdWdpbiBnZW5lcmljIGludGVyZmFjZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBOZ1NlbGVjdFBsdWdpbkdlbmVyaWM8VE9wdGlvbnM+IGV4dGVuZHMgTmdTZWxlY3RQbHVnaW5cclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiBPcHRpb25zIGZvciBuZyBzZWxlY3QgcGx1Z2luXHJcbiAgICAgKi9cclxuICAgIG9wdGlvbnM6IFRPcHRpb25zO1xyXG59XHJcblxyXG4vKipcclxuICogQWxsIGF2YWlsYWJsZSB0eXBlcyBvZiBwbHVnaW5zIGZvciBOZ1NlbGVjdFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBOZ1NlbGVjdFBsdWdpblR5cGVzXHJcbntcclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyBrZXlib2FyZCBldmVudHNcclxuICAgICAqL1xyXG4gICAga2V5Ym9hcmRIYW5kbGVyPzogUGx1Z2luRGVzY3JpcHRpb248S2V5Ym9hcmRIYW5kbGVyPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbXBvbmVudCB1c2VkIGZvciBkaXNwbGF5aW5nIG5vcm1hbCBzdGF0ZSBvZiBzZWxlY3RcclxuICAgICAqL1xyXG4gICAgbm9ybWFsU3RhdGU/OiBQbHVnaW5EZXNjcmlwdGlvbjxOb3JtYWxTdGF0ZT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb21wb25lbnQgdXNlZCBmb3IgZGlzcGxheWluZyBhdmFpbGFibGUgb3B0aW9ucyBmb3Igc2VsZWN0aW9uXHJcbiAgICAgKi9cclxuICAgIHBvcHVwPzogUGx1Z2luRGVzY3JpcHRpb248UG9wdXA+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyBjb3JyZWN0IHBvc2l0aW9uIG9mIHBvcCBjb21wb25lbnRcclxuICAgICAqL1xyXG4gICAgcG9zaXRpb25lcj86IFBsdWdpbkRlc2NyaXB0aW9uPFBvc2l0aW9uZXI+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29tcG9uZW50IHVzZWQgZm9yIGRpc3BsYXlpbmcgcmVhZG9ubHkvZGlzYWJsZWQgc3RhdGUgb2Ygc2VsZWN0LCBjYW4gYmUgbnVsbCwgaW4gdGhhdCBjYXNlIG5vcm1hbCBzdGF0ZSBjb21wb25lbnQgaXMgdXNlZFxyXG4gICAgICovXHJcbiAgICByZWFkb25seVN0YXRlPzogUGx1Z2luRGVzY3JpcHRpb248UmVhZG9ubHlTdGF0ZT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIG9idGFpbmluZyBhbmQgc2V0dGluZyB2YWx1ZSBvZiBjb21wb25lbnRcclxuICAgICAqL1xyXG4gICAgdmFsdWVIYW5kbGVyPzogUGx1Z2luRGVzY3JpcHRpb248VmFsdWVIYW5kbGVyPGFueT4+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29udGFpbnMgY29tcG9uZW50IHRoYXQgaXMgdXNlZCBmb3IgbGl2ZSBzZWFyY2hpbmcgaW4gb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBsaXZlU2VhcmNoPzogUGx1Z2luRGVzY3JpcHRpb248TGl2ZVNlYXJjaD47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIGZvciBvYnRhaW5pbmcgdGV4dHMgdGhhdCBhcmUgZGlzcGxheWVkIGluIE5nU2VsZWN0XHJcbiAgICAgKi9cclxuICAgIHRleHRzTG9jYXRvcj86IFBsdWdpbkRlc2NyaXB0aW9uPFRleHRzTG9jYXRvcj47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBCYXNlIG9wdGlvbnMgZm9yIGV2ZXJ5IHBsdWdpblxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBQbHVnaW5PcHRpb25zXHJcbntcclxufVxyXG5cclxuLyoqXHJcbiAqIEJhc2Ugb3B0aW9ucyBmb3IgZXZlcnkgdmlzdWFsIHBsdWdpbiAoY29tcG9uZW50KVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBWaXN1YWxQbHVnaW5PcHRpb25zPFRDc3NDbGFzc2VzPiBleHRlbmRzIFBsdWdpbk9wdGlvbnNcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiBDc3MgY2xhc3NlcyBhcHBsaWVkIHRvIHZpc3VhbCBwbHVnaW4gKGNvbXBvbmVudCksIHBvc3NpYmxlIHRvIG92ZXJyaWRlIG9ubHkgcGFydCBvZiBjbGFzc2VzXHJcbiAgICAgKi9cclxuICAgIGNzc0NsYXNzZXM/OiBUQ3NzQ2xhc3NlcztcclxufVxyXG5cclxuLyoqXHJcbiAqIERlZmluZXMgaW50ZXJmYWNlLCB0aGF0IGRlc2NyaWJlcyBtaW5pbWFsIHNldCBvZiBwYXJhbWV0ZXJzIGZvciBzcGVjaWZ5aW5nIHBsdWdpbiBmb3IgTmdTZWxlY3RcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGx1Z2luRGVzY3JpcHRpb248UGx1Z2luVHlwZT5cclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiBUeXBlIG9mIHBsdWdpbiB0aGF0IHdpbGwgYmUgZHluYW1pY2FsbHkgaW5zdGFudGlhdGVkXHJcbiAgICAgKi9cclxuICAgIHR5cGU/OiBUeXBlPFBsdWdpblR5cGU+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogT3B0aW9ucyB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIGR5bmFtaWNhbGx5IGluc3RhbnRpYXRlZCBwbHVnaW5cclxuICAgICAqL1xyXG4gICAgb3B0aW9ucz86IFBsdWdpbk9wdGlvbnM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPcHRpb25hbCBjYWxsYmFjayB1c2VkIGZvciBvYnRhaW5pbmcgZHluYW1pYyBpbnN0YW5jZSBvZiBwbHVnaW4gKGFsbG93cyBkaXJlY3QgY29tbXVuaWNhdGlvbiB3aXRoIHBsdWdpbilcclxuICAgICAqL1xyXG4gICAgaW5zdGFuY2VDYWxsYmFjaz86IChpbnN0YW5jZTogUGx1Z2luVHlwZXxudWxsKSA9PiB2b2lkO1xyXG59Il19