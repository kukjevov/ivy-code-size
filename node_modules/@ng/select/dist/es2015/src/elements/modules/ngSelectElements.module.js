/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, Injector } from '@angular/core';
import { CommonModule } from '@angular/common';
import { BrowserModule } from '@angular/platform-browser';
import { createCustomElement } from '@angular/elements';
import { CommonModule as NgCommonModule } from '@ng/common';
import { NgSelectModule, OptionComponent } from '@ng/select';
import { NgSelectElementsComponent } from '../components/ngSelectElements.component';
/**
 * Represents module for WebComponent NgSelect
 */
export class NgSelectElementsModule {
    //######################### constructor #########################
    /**
     * @param {?} injector
     */
    constructor(injector) {
        /** @type {?} */
        const ngOption = createCustomElement(OptionComponent, { injector });
        customElements.define('ng-option', ngOption);
        /** @type {?} */
        const ngSelect = createCustomElement(NgSelectElementsComponent, { injector });
        customElements.define('ng-select', ngSelect);
    }
    //######################### public methods - implementation of DoBootstrap #########################
    /**
     * Called during bootstrapping of module
     * @return {?}
     */
    ngDoBootstrap() {
    }
}
NgSelectElementsModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    BrowserModule,
                    CommonModule,
                    NgCommonModule,
                    NgSelectModule
                ],
                declarations: [
                    NgSelectElementsComponent
                ],
                entryComponents: [
                    NgSelectElementsComponent,
                    OptionComponent
                ]
            },] }
];
/** @nocollapse */
NgSelectElementsModule.ctorParameters = () => [
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdTZWxlY3RFbGVtZW50cy5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZWxlbWVudHMvbW9kdWxlcy9uZ1NlbGVjdEVsZW1lbnRzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFFBQVEsRUFBZSxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQUMsWUFBWSxJQUFJLGNBQWMsRUFBQyxNQUFNLFlBQVksQ0FBQztBQUMxRCxPQUFPLEVBQUMsY0FBYyxFQUFFLGVBQWUsRUFBQyxNQUFNLFlBQVksQ0FBQztBQUUzRCxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSwwQ0FBMEMsQ0FBQzs7OztBQXdCbkYsTUFBTSxPQUFPLHNCQUFzQjs7Ozs7SUFHL0IsWUFBWSxRQUFrQjs7Y0FFcEIsUUFBUSxHQUFHLG1CQUFtQixDQUFDLGVBQWUsRUFBRSxFQUFDLFFBQVEsRUFBQyxDQUFDO1FBQ2pFLGNBQWMsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDOztjQUV2QyxRQUFRLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLEVBQUUsRUFBQyxRQUFRLEVBQUMsQ0FBQztRQUMzRSxjQUFjLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNqRCxDQUFDOzs7Ozs7SUFPTSxhQUFhO0lBRXBCLENBQUM7OztZQXRDSixRQUFRLFNBQ1Q7Z0JBQ0ksT0FBTyxFQUNQO29CQUNJLGFBQWE7b0JBQ2IsWUFBWTtvQkFDWixjQUFjO29CQUNkLGNBQWM7aUJBQ2pCO2dCQUNELFlBQVksRUFDWjtvQkFDSSx5QkFBeUI7aUJBQzVCO2dCQUNELGVBQWUsRUFDZjtvQkFDSSx5QkFBeUI7b0JBQ3pCLGVBQWU7aUJBQ2xCO2FBQ0o7Ozs7WUE5QjhCLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge05nTW9kdWxlLCBEb0Jvb3RzdHJhcCwgSW5qZWN0b3J9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0NvbW1vbk1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHtCcm93c2VyTW9kdWxlfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHtjcmVhdGVDdXN0b21FbGVtZW50fSBmcm9tICdAYW5ndWxhci9lbGVtZW50cyc7XHJcbmltcG9ydCB7Q29tbW9uTW9kdWxlIGFzIE5nQ29tbW9uTW9kdWxlfSBmcm9tICdAbmcvY29tbW9uJztcclxuaW1wb3J0IHtOZ1NlbGVjdE1vZHVsZSwgT3B0aW9uQ29tcG9uZW50fSBmcm9tICdAbmcvc2VsZWN0JztcclxuXHJcbmltcG9ydCB7TmdTZWxlY3RFbGVtZW50c0NvbXBvbmVudH0gZnJvbSAnLi4vY29tcG9uZW50cy9uZ1NlbGVjdEVsZW1lbnRzLmNvbXBvbmVudCc7XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBtb2R1bGUgZm9yIFdlYkNvbXBvbmVudCBOZ1NlbGVjdFxyXG4gKi9cclxuQE5nTW9kdWxlKFxyXG57XHJcbiAgICBpbXBvcnRzOlxyXG4gICAgW1xyXG4gICAgICAgIEJyb3dzZXJNb2R1bGUsXHJcbiAgICAgICAgQ29tbW9uTW9kdWxlLFxyXG4gICAgICAgIE5nQ29tbW9uTW9kdWxlLFxyXG4gICAgICAgIE5nU2VsZWN0TW9kdWxlXHJcbiAgICBdLFxyXG4gICAgZGVjbGFyYXRpb25zOlxyXG4gICAgW1xyXG4gICAgICAgIE5nU2VsZWN0RWxlbWVudHNDb21wb25lbnRcclxuICAgIF0sXHJcbiAgICBlbnRyeUNvbXBvbmVudHM6XHJcbiAgICBbXHJcbiAgICAgICAgTmdTZWxlY3RFbGVtZW50c0NvbXBvbmVudCxcclxuICAgICAgICBPcHRpb25Db21wb25lbnRcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIE5nU2VsZWN0RWxlbWVudHNNb2R1bGUgaW1wbGVtZW50cyBEb0Jvb3RzdHJhcFxyXG57XHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgY29uc3RydWN0b3IgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG4gICAgY29uc3RydWN0b3IoaW5qZWN0b3I6IEluamVjdG9yKSBcclxuICAgIHtcclxuICAgICAgICBjb25zdCBuZ09wdGlvbiA9IGNyZWF0ZUN1c3RvbUVsZW1lbnQoT3B0aW9uQ29tcG9uZW50LCB7aW5qZWN0b3J9KTtcclxuICAgICAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ25nLW9wdGlvbicsIG5nT3B0aW9uKTtcclxuXHJcbiAgICAgICAgY29uc3QgbmdTZWxlY3QgPSBjcmVhdGVDdXN0b21FbGVtZW50KE5nU2VsZWN0RWxlbWVudHNDb21wb25lbnQsIHtpbmplY3Rvcn0pO1xyXG4gICAgICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZSgnbmctc2VsZWN0JywgbmdTZWxlY3QpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwdWJsaWMgbWV0aG9kcyAtIGltcGxlbWVudGF0aW9uIG9mIERvQm9vdHN0cmFwICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgZHVyaW5nIGJvb3RzdHJhcHBpbmcgb2YgbW9kdWxlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBuZ0RvQm9vdHN0cmFwKClcclxuICAgIHtcclxuICAgIH1cclxufSJdfQ==