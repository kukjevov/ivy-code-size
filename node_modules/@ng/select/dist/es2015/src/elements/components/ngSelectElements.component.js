/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, Input, ChangeDetectorRef, ElementRef, Inject, Attribute } from "@angular/core";
import { isString } from '@asseco/common';
import { NgSelectComponent, NG_SELECT_PLUGIN_INSTANCES, ngSelectPluginInstancesFactory, CodeOptionsGatherer } from "@ng/select";
import { Observable } from "rxjs";
/** @type {?} */
const NG_OPTION = "NG-OPTION";
const ɵ0 = ngSelectPluginInstancesFactory;
/**
 * Component that represents WebComponent implementation of NgSelect
 * @template TValue
 */
export class NgSelectElementsComponent extends NgSelectComponent {
    //######################### constructors #########################
    /**
     * @param {?} changeDetector
     * @param {?} element
     * @param {?} pluginInstances
     * @param {?=} readonly
     * @param {?=} disabled
     * @param {?=} multiple
     */
    constructor(changeDetector, element, pluginInstances, readonly, disabled, multiple) {
        super(changeDetector, element, pluginInstances, null, null, null, null, null, null, null, null, null, readonly, disabled, multiple);
        this.pluginInstances = pluginInstances;
        /**
         * Options gatherer used for NgSelect WebComponent
         */
        this._codeOptionsGatherer = new CodeOptionsGatherer();
        //######################### public methods #########################
        /**
         * Initialize component, automatically called once if not blocked by options
         */
        this.initializeWC = (/**
         * @return {?}
         */
        () => this.initialize());
        /**
         * Initialize options, automaticaly called during init phase, but can be used to reinitialize NgSelectOptions
         */
        this.initOptionsWC = (/**
         * @return {?}
         */
        () => this.initOptions());
        /**
         * Gets instance of plugin by its id
         * @param pluginId Id of plugin, use constants
         */
        this.getPluginWC = (/**
         * @template PluginType
         * @param {?} pluginId
         * @return {?}
         */
        (pluginId) => this.getPlugin(pluginId));
        /**
         * Explicitly runs invalidation of content (change detection)
         */
        this.invalidateVisualsWC = (/**
         * @return {?}
         */
        () => this.invalidateVisuals());
        /**
         * Executes actions on NgSelect
         * @param actions Array of actions that are executed over NgSelect
         */
        this.executeWC = (/**
         * @param {...?} actions
         * @return {?}
         */
        (...actions) => this.execute(...actions));
        /**
         * Executes function on NgSelect and returns result
         * @param func Function that is executed and its result is returned
         */
        this.executeAndReturnWC = (/**
         * @template TResult
         * @param {?} func
         * @return {?}
         */
        (func) => this.executeAndReturn(func));
        this._selectOptions.optionsGatherer = this._codeOptionsGatherer;
        this._optionsObserver = new MutationObserver((/**
         * @param {?} mutationsList
         * @return {?}
         */
        mutationsList => {
            /** @type {?} */
            let added = false;
            /** @type {?} */
            let removed = false;
            console.log('mutations', mutationsList);
            mutationsList.forEach((/**
             * @param {?} itm
             * @return {?}
             */
            itm => {
                itm.addedNodes.forEach((/**
                 * @param {?} node
                 * @return {?}
                 */
                node => {
                    if (node.nodeName == NG_OPTION) {
                        added = true;
                    }
                }));
                itm.removedNodes.forEach((/**
                 * @param {?} node
                 * @return {?}
                 */
                node => {
                    if (node.nodeName == NG_OPTION) {
                        removed = true;
                    }
                }));
                if (added || removed) {
                    /** @type {?} */
                    let options = [];
                    for (let x = 0; x < element.nativeElement.children.length; x++) {
                        /** @type {?} */
                        let itm = (/** @type {?} */ (element.nativeElement.children.item(x)));
                        if (itm.nodeName == NG_OPTION) {
                            options.push(itm);
                        }
                    }
                    this._codeOptionsGatherer.options = options;
                    this._codeOptionsGatherer.optionsChange.emit();
                    this._codeOptionsGatherer.availableOptionsChange.emit();
                }
            }));
        }));
        this._optionsObserver.observe(element.nativeElement, {
            childList: true
        });
    }
    //######################### public properties #########################
    /**
     * Occurs every time when NgSelect is initialized or reinitialized, if value is false NgSelect was not initialized yet
     * @return {?}
     */
    get initializedWC() {
        return this.initialized;
    }
    /**
     * Gets current state of initialization
     * @return {?}
     */
    get isInitializedWC() {
        return this.isInitialized;
    }
    /**
     * Gets or sets NgSelect options
     * @param {?} options
     * @return {?}
     */
    set selectOptionsWC(options) {
        if (isString(options)) {
            try {
                options = JSON.parse(options);
            }
            catch (e) {
                console.log(e);
                options = {};
            }
        }
        this.selectOptions = options;
    }
    /**
     * @return {?}
     */
    get selectOptionsWC() {
        return this.selectOptions;
    }
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    ngOnDestroy() {
        if (this._optionsObserver) {
            this._optionsObserver.disconnect();
            this._optionsObserver = null;
        }
        super.ngOnDestroy();
    }
}
NgSelectElementsComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-select-web-component',
                template: "<ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.textsLocator?.type\" (ngComponentOutletExCreated)=\"setTextsLocatorComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.liveSearch?.type\" (ngComponentOutletExCreated)=\"setLiveSearchComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.positioner?.type\" (ngComponentOutletExCreated)=\"setPositionerComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.keyboardHandler?.type\" (ngComponentOutletExCreated)=\"setKeyboardHandlerComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.valueHandler?.type\" (ngComponentOutletExCreated)=\"setValueHandlerComponent($event)\"></ng-template>\r\n\r\n<div>\r\n    <ng-template [ngIf]=\"!selectOptions?.readonly\">\r\n        <ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.normalState?.type\" (ngComponentOutletExCreated)=\"setNormalStateComponent($event)\" [ngComponentOutletExContent]=\"liveSearchElement\"></ng-template>\r\n    </ng-template>\r\n\r\n    <ng-template [ngIf]=\"selectOptions?.readonly\">\r\n        <ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.readonlyState?.type\" (ngComponentOutletExCreated)=\"setReadonlyStateComponent($event)\"></ng-template>\r\n    </ng-template>\r\n\r\n    <ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.popup?.type\" (ngComponentOutletExCreated)=\"setPopupComponent($event)\" [ngComponentOutletExContent]=\"liveSearchElement\"></ng-template>\r\n</div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    (/** @type {?} */ ({
                        provide: NG_SELECT_PLUGIN_INSTANCES,
                        useFactory: ɵ0
                    }))
                ],
                styles: [`:host
        {
            display: block;
            position: relative;
        }`]
            }] }
];
/** @nocollapse */
NgSelectElementsComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [NG_SELECT_PLUGIN_INSTANCES,] }] },
    { type: String, decorators: [{ type: Attribute, args: ['readonly',] }] },
    { type: String, decorators: [{ type: Attribute, args: ['disabled',] }] },
    { type: String, decorators: [{ type: Attribute, args: ['multiple',] }] }
];
NgSelectElementsComponent.propDecorators = {
    initializedWC: [{ type: Input }],
    isInitializedWC: [{ type: Input }],
    selectOptionsWC: [{ type: Input, args: ['selectOptions',] }],
    initializeWC: [{ type: Input }],
    initOptionsWC: [{ type: Input }],
    getPluginWC: [{ type: Input }],
    invalidateVisualsWC: [{ type: Input }],
    executeWC: [{ type: Input }],
    executeAndReturnWC: [{ type: Input }]
};
if (false) {
    /**
     * Mutation observer, that observes ng-options
     * @type {?}
     * @protected
     */
    NgSelectElementsComponent.prototype._optionsObserver;
    /**
     * Options gatherer used for NgSelect WebComponent
     * @type {?}
     * @protected
     */
    NgSelectElementsComponent.prototype._codeOptionsGatherer;
    /**
     * Initialize component, automatically called once if not blocked by options
     * @type {?}
     */
    NgSelectElementsComponent.prototype.initializeWC;
    /**
     * Initialize options, automaticaly called during init phase, but can be used to reinitialize NgSelectOptions
     * @type {?}
     */
    NgSelectElementsComponent.prototype.initOptionsWC;
    /**
     * Gets instance of plugin by its id
     * \@param pluginId Id of plugin, use constants
     * @type {?}
     */
    NgSelectElementsComponent.prototype.getPluginWC;
    /**
     * Explicitly runs invalidation of content (change detection)
     * @type {?}
     */
    NgSelectElementsComponent.prototype.invalidateVisualsWC;
    /**
     * Executes actions on NgSelect
     * \@param actions Array of actions that are executed over NgSelect
     * @type {?}
     */
    NgSelectElementsComponent.prototype.executeWC;
    /**
     * Executes function on NgSelect and returns result
     * \@param func Function that is executed and its result is returned
     * @type {?}
     */
    NgSelectElementsComponent.prototype.executeAndReturnWC;
    /**
     * @type {?}
     * @protected
     */
    NgSelectElementsComponent.prototype.pluginInstances;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,