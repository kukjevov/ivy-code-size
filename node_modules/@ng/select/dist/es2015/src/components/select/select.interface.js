/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Interface describing object storing all existing plugin instances for NgSelect
 * @record
 */
export function NgSelectPluginInstances() { }
/**
 * Public API for NgSelect
 * @record
 * @template TValue
 */
export function NgSelect() { }
if (false) {
    /**
     * Occurs every time when NgSelect is initialized or reinitialized, if value is false NgSelect was not initialized yet
     * @type {?}
     */
    NgSelect.prototype.initialized;
    /**
     * Gets current state of initialization
     * @type {?}
     */
    NgSelect.prototype.isInitialized;
    /**
     * Gets or sets NgSelect options
     * @type {?}
     */
    NgSelect.prototype.selectOptions;
    /**
     * Initialize component, automatically called once if not blocked by options
     * @return {?}
     */
    NgSelect.prototype.initialize = function () { };
    /**
     * Initialize options, automaticaly called during init phase, but can be used to reinitialize NgSelectOptions
     * @return {?}
     */
    NgSelect.prototype.initOptions = function () { };
    /**
     * Gets instance of plugin by its id
     * @template PluginType
     * @param {?} pluginId Id of plugin, use constants
     * @return {?}
     */
    NgSelect.prototype.getPlugin = function (pluginId) { };
    /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    NgSelect.prototype.invalidateVisuals = function () { };
    /**
     * Executes actions on NgSelect
     * @param {...?} actions Array of actions that are executed over NgSelect
     * @return {?}
     */
    NgSelect.prototype.execute = function (actions) { };
    /**
     * Executes function on NgSelect and returns result
     * @template TResult
     * @param {?} func Function that is executed and its result is returned
     * @return {?}
     */
    NgSelect.prototype.executeAndReturn = function (func) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmludGVyZmFjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3NlbGVjdC9zZWxlY3QuaW50ZXJmYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBT0EsNkNBR0M7Ozs7OztBQUtELDhCQWlEQzs7Ozs7O0lBNUNHLCtCQUEwQzs7Ozs7SUFLMUMsaUNBQWdDOzs7OztJQUtoQyxpQ0FBdUM7Ozs7O0lBS3ZDLGdEQUFhOzs7OztJQUtiLGlEQUFjOzs7Ozs7O0lBTWQsdURBQTJFOzs7OztJQUszRSx1REFBMEI7Ozs7OztJQU0xQixvREFBOEM7Ozs7Ozs7SUFNOUMsMERBQTRFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tIFwicnhqc1wiO1xyXG5cclxuaW1wb3J0IHtOZ1NlbGVjdFBsdWdpbiwgTmdTZWxlY3RPcHRpb25zfSBmcm9tIFwiLi4vLi4vbWlzY1wiO1xyXG5cclxuLyoqXHJcbiAqIEludGVyZmFjZSBkZXNjcmliaW5nIG9iamVjdCBzdG9yaW5nIGFsbCBleGlzdGluZyBwbHVnaW4gaW5zdGFuY2VzIGZvciBOZ1NlbGVjdFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBOZ1NlbGVjdFBsdWdpbkluc3RhbmNlc1xyXG57XHJcbiAgICBbcGx1Z2luTmFtZTogc3RyaW5nXTogTmdTZWxlY3RQbHVnaW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQdWJsaWMgQVBJIGZvciBOZ1NlbGVjdFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBOZ1NlbGVjdDxUVmFsdWU+XHJcbntcclxuICAgIC8qKlxyXG4gICAgICogT2NjdXJzIGV2ZXJ5IHRpbWUgd2hlbiBOZ1NlbGVjdCBpcyBpbml0aWFsaXplZCBvciByZWluaXRpYWxpemVkLCBpZiB2YWx1ZSBpcyBmYWxzZSBOZ1NlbGVjdCB3YXMgbm90IGluaXRpYWxpemVkIHlldFxyXG4gICAgICovXHJcbiAgICByZWFkb25seSBpbml0aWFsaXplZDogT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgY3VycmVudCBzdGF0ZSBvZiBpbml0aWFsaXphdGlvblxyXG4gICAgICovXHJcbiAgICByZWFkb25seSBpc0luaXRpYWxpemVkOiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIE5nU2VsZWN0IG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgc2VsZWN0T3B0aW9uczogTmdTZWxlY3RPcHRpb25zPFRWYWx1ZT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplIGNvbXBvbmVudCwgYXV0b21hdGljYWxseSBjYWxsZWQgb25jZSBpZiBub3QgYmxvY2tlZCBieSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGluaXRpYWxpemUoKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemUgb3B0aW9ucywgYXV0b21hdGljYWx5IGNhbGxlZCBkdXJpbmcgaW5pdCBwaGFzZSwgYnV0IGNhbiBiZSB1c2VkIHRvIHJlaW5pdGlhbGl6ZSBOZ1NlbGVjdE9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgaW5pdE9wdGlvbnMoKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgaW5zdGFuY2Ugb2YgcGx1Z2luIGJ5IGl0cyBpZFxyXG4gICAgICogQHBhcmFtIHBsdWdpbklkIElkIG9mIHBsdWdpbiwgdXNlIGNvbnN0YW50c1xyXG4gICAgICovXHJcbiAgICBnZXRQbHVnaW48UGx1Z2luVHlwZSBleHRlbmRzIE5nU2VsZWN0UGx1Z2luPihwbHVnaW5JZDogc3RyaW5nKTogUGx1Z2luVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEV4cGxpY2l0bHkgcnVucyBpbnZhbGlkYXRpb24gb2YgY29udGVudCAoY2hhbmdlIGRldGVjdGlvbilcclxuICAgICAqL1xyXG4gICAgaW52YWxpZGF0ZVZpc3VhbHMoKTogdm9pZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEV4ZWN1dGVzIGFjdGlvbnMgb24gTmdTZWxlY3RcclxuICAgICAqIEBwYXJhbSBhY3Rpb25zIEFycmF5IG9mIGFjdGlvbnMgdGhhdCBhcmUgZXhlY3V0ZWQgb3ZlciBOZ1NlbGVjdFxyXG4gICAgICovXHJcbiAgICBleGVjdXRlKC4uLmFjdGlvbnM6IE5nU2VsZWN0QWN0aW9uPFRWYWx1ZT5bXSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFeGVjdXRlcyBmdW5jdGlvbiBvbiBOZ1NlbGVjdCBhbmQgcmV0dXJucyByZXN1bHRcclxuICAgICAqIEBwYXJhbSBmdW5jIEZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgYW5kIGl0cyByZXN1bHQgaXMgcmV0dXJuZWRcclxuICAgICAqL1xyXG4gICAgZXhlY3V0ZUFuZFJldHVybjxUUmVzdWx0PihmdW5jOiBOZ1NlbGVjdEZ1bmN0aW9uPFRSZXN1bHQsIFRWYWx1ZT4pOiBUUmVzdWx0O1xyXG59XHJcblxyXG4vKipcclxuICogRGVmaW50aW9uIG9mIGFjdGlvbiB0aGF0IGNhbiBiZSBleGVjdXRlZCBvbiBOZ1NlbGVjdFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTmdTZWxlY3RBY3Rpb248VFZhbHVlPiA9IChuZ1NlbGVjdDogTmdTZWxlY3Q8VFZhbHVlPikgPT4gdm9pZDtcclxuXHJcbi8qKlxyXG4gKiBEZWZpbml0aW9uIG9mIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIGV4ZWN1dGVkIG9uIE5nU2VsZWN0IGFuZCByZXR1cm5zIHNvbWUgZGF0YVxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTmdTZWxlY3RGdW5jdGlvbjxUUmVzdWx0LCBUVmFsdWU+ID0gKG5nU2VsZWN0OiBOZ1NlbGVjdDxUVmFsdWU+KSA9PiBUUmVzdWx0OyJdfQ==