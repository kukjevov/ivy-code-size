/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, Input, Inject, ChangeDetectorRef, Optional, Type, ContentChildren, QueryList, EventEmitter, forwardRef, resolveForwardRef, ElementRef, Attribute, TemplateRef, ContentChild } from "@angular/core";
import { extend, nameof, isBoolean, isPresent } from "@asseco/common";
import { BehaviorSubject } from "rxjs";
import { NG_SELECT_OPTIONS, KEYBOARD_HANDLER_TYPE, NORMAL_STATE_TYPE, POPUP_TYPE, POSITIONER_TYPE, READONLY_STATE_TYPE, VALUE_HANDLER_TYPE, LIVE_SEARCH_TYPE } from "../../misc/types";
import { NG_SELECT_PLUGIN_INSTANCES } from "./types";
import { BasicKeyboardHandlerComponent } from "../../plugins/keyboardHandler/components";
import { KEYBOARD_HANDLER } from "../../plugins/keyboardHandler/types";
import { NORMAL_STATE } from "../../plugins/normalState/types";
import { BasicNormalStateComponent } from "../../plugins/normalState/components";
import { POPUP } from "../../plugins/popup/types";
import { BasicPopupComponent } from "../../plugins/popup/component";
import { POSITIONER } from "../../plugins/positioner/types";
import { BasicPositionerComponent } from "../../plugins/positioner/components";
import { READONLY_STATE } from "../../plugins/readonlyState/types";
import { VALUE_HANDLER } from "../../plugins/valueHandler/types";
import { BasicValueHandlerComponent } from "../../plugins/valueHandler/components";
import { LIVE_SEARCH } from "../../plugins/liveSearch/types";
import { NoLiveSearchComponent } from "../../plugins/liveSearch/components";
import { TEXTS_LOCATOR } from "../../plugins/textsLocator/types";
import { NoTextsLocatorComponent } from "../../plugins/textsLocator/components";
import { OptionComponent } from "../option/option.component";
import { OptGroupComponent } from "../option/optgroup.component";
const ɵ0 = /**
 * @param {?} source
 * @param {?} target
 * @return {?}
 */
(source, target) => {
    return source == target;
}, ɵ1 = /**
 * @param {?} query
 * @return {?}
 */
(query) => {
    return (/**
     * @param {?} itm
     * @return {?}
     */
    itm => itm.text.indexOf(query) >= 0);
};
/**
 * Default 'NgSelectOptions'
 * \@internal
 * @type {?}
 */
const defaultOptions = {
    autoInitialize: true,
    valueComparer: (ɵ0),
    liveSearchFilter: (ɵ1),
    cssClasses: {},
    plugins: {
        normalState: (/** @type {?} */ ({
            type: forwardRef((/**
             * @return {?}
             */
            () => BasicNormalStateComponent))
        })),
        textsLocator: (/** @type {?} */ ({
            type: forwardRef((/**
             * @return {?}
             */
            () => NoTextsLocatorComponent))
        })),
        liveSearch: (/** @type {?} */ ({
            type: forwardRef((/**
             * @return {?}
             */
            () => NoLiveSearchComponent))
        })),
        popup: (/** @type {?} */ ({
            type: forwardRef((/**
             * @return {?}
             */
            () => BasicPopupComponent))
        })),
        positioner: (/** @type {?} */ ({
            type: forwardRef((/**
             * @return {?}
             */
            () => BasicPositionerComponent))
        })),
        keyboardHandler: (/** @type {?} */ ({
            type: forwardRef((/**
             * @return {?}
             */
            () => BasicKeyboardHandlerComponent))
        })),
        readonlyState: (/** @type {?} */ ({
            type: forwardRef((/**
             * @return {?}
             */
            () => BasicNormalStateComponent))
        })),
        valueHandler: (/** @type {?} */ ({
            type: forwardRef((/**
             * @return {?}
             */
            () => BasicValueHandlerComponent))
        }))
    }
};
/**
 * NgSelect plugin instances factory method
 * \@internal
 * @return {?}
 */
export function ngSelectPluginInstancesFactory() {
    return {};
}
/**
 * Component that represents NgSelect itself, allows selection of value from options
 * @template TValue
 */
export class NgSelectComponent {
    //######################### constructors #########################
    /**
     * @param {?} _changeDetector
     * @param {?} _element
     * @param {?} _pluginInstances
     * @param {?=} options
     * @param {?=} normalStateType
     * @param {?=} keyboardHandlerType
     * @param {?=} popupType
     * @param {?=} positionerType
     * @param {?=} readonlyStateType
     * @param {?=} valueHandlerType
     * @param {?=} liveSearchType
     * @param {?=} textsLocatorType
     * @param {?=} readonly
     * @param {?=} disabled
     * @param {?=} multiple
     */
    constructor(_changeDetector, _element, _pluginInstances, options, normalStateType, keyboardHandlerType, popupType, positionerType, readonlyStateType, valueHandlerType, liveSearchType, textsLocatorType, readonly, disabled, multiple) {
        this._changeDetector = _changeDetector;
        this._element = _element;
        this._pluginInstances = _pluginInstances;
        /**
         * Subject used for indication that NgSelect was initialized
         */
        this._initializedSubject = new BehaviorSubject(false);
        /**
         * Occurs when array of provided options has changed
         */
        this._optionsChange = new EventEmitter();
        /**
         * Occurs when array of visible, displayed options has changed
         */
        this._availableOptionsChange = new EventEmitter();
        /**
         * Array of available options to be displayed
         */
        this._availableOptions = [];
        /**
         * Gets current state of initialization
         */
        this.isInitialized = false;
        //at least on of following is present (value is not important)
        /** @type {?} */
        let readonlyDefault = isPresent(readonly) || isPresent(disabled);
        /** @type {?} */
        let multipleDefault = isPresent(multiple);
        /** @type {?} */
        let opts = extend(true, {}, options);
        if (!opts.plugins) {
            opts.plugins = {};
        }
        if (keyboardHandlerType) {
            if (!opts.plugins.keyboardHandler) {
                opts.plugins.keyboardHandler = {};
            }
            opts.plugins.keyboardHandler.type = keyboardHandlerType;
        }
        if (normalStateType) {
            if (!opts.plugins.normalState) {
                opts.plugins.normalState = {};
            }
            opts.plugins.normalState.type = normalStateType;
        }
        if (popupType) {
            if (!opts.plugins.popup) {
                opts.plugins.popup = {};
            }
            opts.plugins.popup.type = popupType;
        }
        if (positionerType) {
            if (!opts.plugins.positioner) {
                opts.plugins.positioner = {};
            }
            opts.plugins.positioner.type = positionerType;
        }
        if (readonlyStateType) {
            if (!opts.plugins.readonlyState) {
                opts.plugins.readonlyState = {};
            }
            opts.plugins.readonlyState.type = readonlyStateType;
        }
        if (valueHandlerType) {
            if (!opts.plugins.valueHandler) {
                opts.plugins.valueHandler = {};
            }
            opts.plugins.valueHandler.type = valueHandlerType;
        }
        if (liveSearchType) {
            if (!opts.plugins.liveSearch) {
                opts.plugins.liveSearch = {};
            }
            opts.plugins.liveSearch.type = liveSearchType;
        }
        if (textsLocatorType) {
            if (!opts.plugins.textsLocator) {
                opts.plugins.textsLocator = {};
            }
            opts.plugins.textsLocator.type = textsLocatorType;
        }
        this._selectOptions = extend(true, (/** @type {?} */ ({
            optionsGatherer: this,
            templateGatherer: this,
            readonly: readonlyDefault,
            plugins: {
                popup: {
                    options: (/** @type {?} */ ({
                        multiple: multipleDefault
                    }))
                },
                valueHandler: {
                    options: (/** @type {?} */ ({
                        multiple: multipleDefault
                    }))
                }
            }
        })), defaultOptions, opts);
    }
    //######################### public properties - inputs #########################
    /**
     * Gets or sets NgSelect options
     * @param {?} options
     * @return {?}
     */
    set selectOptions(options) {
        this._selectOptions = extend(true, this._selectOptions, options);
    }
    /**
     * @return {?}
     */
    get selectOptions() {
        return this._selectOptions;
    }
    //######################### public properties - implementation of NgSelect #########################
    /**
     * Occurs every time when NgSelect is initialized or reinitialized, if value is false NgSelect was not initialized yet
     * @return {?}
     */
    get initialized() {
        return this._initializedSubject.asObservable();
    }
    //######################### public properties - implementation of OptionsGatherer #########################
    /**
     * Array of provided options for select
     * \@internal
     * @return {?}
     */
    get options() {
        return this.optionsChildren.toArray();
    }
    /**
     * Occurs when array of provided options has changed
     * \@internal
     * @return {?}
     */
    get optionsChange() {
        return this._optionsChange;
    }
    /**
     * Array of visible, displayed options for select
     * \@internal
     * @return {?}
     */
    get availableOptions() {
        return this._availableOptions;
    }
    /**
     * Occurs when array of visible, displayed options has changed
     * \@internal
     * @return {?}
     */
    get availableOptionsChange() {
        return this._availableOptionsChange;
    }
    //######################### public methods - implementation of OnChanges #########################
    /**
     * Called when input value changes
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        let updateReadonly = (/**
         * @param {?} state
         * @param {?} firstChange
         * @return {?}
         */
        (state, firstChange) => {
            //update options
            this.selectOptions.readonly = state;
            if (!firstChange) {
                this.initOptions();
                this.initialize();
            }
        });
        if (nameof('disabled') in changes && isBoolean(this.disabled)) {
            updateReadonly(this.disabled, changes[nameof('disabled')].firstChange);
        }
        if (nameof('readonly') in changes && isBoolean(this.readonly)) {
            updateReadonly(this.readonly, changes[nameof('readonly')].firstChange);
        }
    }
    //######################### public methods - implementation of OnInit #########################
    /**
     * Initialize component
     * @return {?}
     */
    ngOnInit() {
        this.initOptions();
    }
    //######################### public methods - implementation of AfterViewInit #########################
    /**
     * Called when view was initialized
     * @return {?}
     */
    ngAfterViewInit() {
        this._availableOptions = this.options;
        this.optionsChildren.changes.subscribe((/**
         * @return {?}
         */
        () => {
            this._availableOptions = this.options;
            this._optionsChange.emit();
            this._availableOptionsChange.emit();
        }));
        if (this._selectOptions.autoInitialize) {
            this.initialize();
        }
    }
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    ngOnDestroy() {
        if (this._searchValueChangeSubscription) {
            this._searchValueChangeSubscription.unsubscribe();
            this._searchValueChangeSubscription = null;
        }
        if (this.selectOptions.optionsGatherer) {
            this.selectOptions.optionsGatherer.destroyGatherer();
        }
    }
    //######################### public methods - implementation of OptionsGatherer #########################
    /**
     * Initialize gatherer during initialization phase
     * \@internal
     * @return {?}
     */
    initializeGatherer() {
        /** @type {?} */
        let liveSearch = (/** @type {?} */ (this._pluginInstances[LIVE_SEARCH]));
        if (this._liveSearch && this._liveSearch != liveSearch) {
            this._searchValueChangeSubscription.unsubscribe();
            this._searchValueChangeSubscription = null;
            this._liveSearch = null;
        }
        if (!this._liveSearch) {
            this._liveSearch = liveSearch;
            this._searchValueChangeSubscription = this._liveSearch.searchValueChange.subscribe((/**
             * @return {?}
             */
            () => {
                if (!this._liveSearch.searchValue) {
                    this._availableOptions = this.options;
                    this._availableOptionsChange.emit();
                    return;
                }
                this._availableOptions = this.options.filter(this.selectOptions.liveSearchFilter(this._liveSearch.searchValue));
                this._availableOptionsChange.emit();
            }));
        }
    }
    /**
     * Called when gatherer needs to be destroyed
     * \@internal
     * @return {?}
     */
    destroyGatherer() {
    }
    //######################### public methods - template bindings #########################
    /**
     * Sets normal state component
     * \@internal
     * @param {?} normalState Created normal state that is rendered
     * @return {?}
     */
    setNormalStateComponent(normalState) {
        if (!normalState) {
            return;
        }
        this._pluginInstances[NORMAL_STATE] = normalState;
        if (this._selectOptions.plugins && this._selectOptions.plugins.normalState && this._selectOptions.plugins.normalState.options) {
            normalState.options = this._selectOptions.plugins.normalState.options;
        }
        normalState.templateGatherer = this.selectOptions.templateGatherer;
        normalState.initOptions();
        if (this._selectOptions.plugins && this._selectOptions.plugins.normalState && this._selectOptions.plugins.normalState.instanceCallback) {
            this._selectOptions.plugins.normalState.instanceCallback(normalState);
        }
    }
    /**
     * Sets keyboard handler component
     * \@internal
     * @param {?} keyboardHandler Created keyboard handler that is rendered
     * @return {?}
     */
    setKeyboardHandlerComponent(keyboardHandler) {
        if (!keyboardHandler) {
            return;
        }
        this._pluginInstances[KEYBOARD_HANDLER] = keyboardHandler;
        if (this._selectOptions.plugins && this._selectOptions.plugins.keyboardHandler && this._selectOptions.plugins.keyboardHandler.options) {
            keyboardHandler.options = this._selectOptions.plugins.keyboardHandler.options;
        }
        keyboardHandler.selectElement = this._element.nativeElement;
        keyboardHandler.optionsGatherer = this.selectOptions.optionsGatherer;
        keyboardHandler.initOptions();
        if (this._selectOptions.plugins && this._selectOptions.plugins.keyboardHandler && this._selectOptions.plugins.keyboardHandler.instanceCallback) {
            this._selectOptions.plugins.keyboardHandler.instanceCallback(keyboardHandler);
        }
    }
    /**
     * Sets popup component
     * \@internal
     * @param {?} popup Created popup that is rendered
     * @return {?}
     */
    setPopupComponent(popup) {
        if (!popup) {
            return;
        }
        this._pluginInstances[POPUP] = popup;
        if (this._selectOptions.plugins && this._selectOptions.plugins.popup && this._selectOptions.plugins.popup.options) {
            popup.options = this._selectOptions.plugins.popup.options;
        }
        popup.selectElement = this._element.nativeElement;
        popup.optionsGatherer = this.selectOptions.optionsGatherer;
        popup.templateGatherer = this.selectOptions.templateGatherer;
        popup.initOptions();
        if (this._selectOptions.plugins && this._selectOptions.plugins.popup && this._selectOptions.plugins.popup.instanceCallback) {
            this._selectOptions.plugins.popup.instanceCallback(popup);
        }
    }
    /**
     * Sets positioner component
     * \@internal
     * @param {?} positioner Created positioner that is rendered
     * @return {?}
     */
    setPositionerComponent(positioner) {
        if (!positioner) {
            return;
        }
        this._pluginInstances[POSITIONER] = positioner;
        if (this._selectOptions.plugins && this._selectOptions.plugins.positioner && this._selectOptions.plugins.positioner.options) {
            positioner.options = this._selectOptions.plugins.positioner.options;
        }
        positioner.selectElement = this._element.nativeElement;
        positioner.optionsGatherer = this.selectOptions.optionsGatherer;
        positioner.initOptions();
        if (this._selectOptions.plugins && this._selectOptions.plugins.positioner && this._selectOptions.plugins.positioner.instanceCallback) {
            this._selectOptions.plugins.positioner.instanceCallback(positioner);
        }
    }
    /**
     * Sets texts locator component
     * \@internal
     * @param {?} textsLocator Created texts locator that is rendered
     * @return {?}
     */
    setTextsLocatorComponent(textsLocator) {
        if (!textsLocator) {
            return;
        }
        this._pluginInstances[TEXTS_LOCATOR] = textsLocator;
        if (this._selectOptions.plugins && this._selectOptions.plugins.textsLocator && this._selectOptions.plugins.textsLocator.options) {
            textsLocator.options = this._selectOptions.plugins.textsLocator.options;
        }
        textsLocator.initOptions();
        if (this._selectOptions.plugins && this._selectOptions.plugins.textsLocator && this._selectOptions.plugins.textsLocator.instanceCallback) {
            this._selectOptions.plugins.textsLocator.instanceCallback(textsLocator);
        }
    }
    /**
     * Sets readonly state component
     * \@internal
     * @param {?} readonlyState Created readonly state that is rendered
     * @return {?}
     */
    setReadonlyStateComponent(readonlyState) {
        if (!readonlyState) {
            this._pluginInstances[READONLY_STATE] = null;
            return;
        }
        this._pluginInstances[READONLY_STATE] = readonlyState;
        this._pluginInstances[NORMAL_STATE] = readonlyState;
        if (this._selectOptions.plugins && this._selectOptions.plugins.readonlyState && this._selectOptions.plugins.readonlyState.options) {
            readonlyState.options = this._selectOptions.plugins.readonlyState.options;
        }
        /** @type {?} */
        let options = (/** @type {?} */ (readonlyState.options));
        options.readonly = true;
        readonlyState.initOptions();
        if (this._selectOptions.plugins && this._selectOptions.plugins.readonlyState && this._selectOptions.plugins.readonlyState.instanceCallback) {
            this._selectOptions.plugins.readonlyState.instanceCallback(readonlyState);
        }
    }
    /**
     * Sets value handler component
     * \@internal
     * @param {?} valueHandler Created value handler that is rendered
     * @return {?}
     */
    setValueHandlerComponent(valueHandler) {
        if (!valueHandler) {
            return;
        }
        this._pluginInstances[VALUE_HANDLER] = valueHandler;
        if (this._selectOptions.plugins && this._selectOptions.plugins.valueHandler && this._selectOptions.plugins.valueHandler.options) {
            valueHandler.options = this._selectOptions.plugins.valueHandler.options;
        }
        valueHandler.valueComparer = this.selectOptions.valueComparer;
        valueHandler.optionsGatherer = this.selectOptions.optionsGatherer;
        valueHandler.initOptions();
        if (this._selectOptions.plugins && this._selectOptions.plugins.valueHandler && this._selectOptions.plugins.valueHandler.instanceCallback) {
            this._selectOptions.plugins.valueHandler.instanceCallback(valueHandler);
        }
    }
    /**
     * Sets live search component
     * \@internal
     * @param {?} liveSearch Created live search that is rendered
     * @return {?}
     */
    setLiveSearchComponent(liveSearch) {
        if (!liveSearch) {
            return;
        }
        this._pluginInstances[LIVE_SEARCH] = liveSearch;
        if (this._selectOptions.plugins && this._selectOptions.plugins.liveSearch && this._selectOptions.plugins.liveSearch.options) {
            liveSearch.options = this._selectOptions.plugins.liveSearch.options;
        }
        liveSearch.initOptions();
        if (this._selectOptions.plugins && this._selectOptions.plugins.liveSearch && this._selectOptions.plugins.liveSearch.instanceCallback) {
            this._selectOptions.plugins.liveSearch.instanceCallback(liveSearch);
        }
    }
    //######################### public methods #########################
    /**
     * Initialize component, automatically called once if not blocked by options
     * @return {?}
     */
    initialize() {
        /** @type {?} */
        let liveSearchPlugin = (/** @type {?} */ (this._pluginInstances[LIVE_SEARCH]));
        this.liveSearchElement = [[liveSearchPlugin.liveSearchElement]];
        this._changeDetector.detectChanges();
        this.selectOptions.optionsGatherer.initializeGatherer();
        this._pluginInstances[LIVE_SEARCH].initialize();
        this._pluginInstances[TEXTS_LOCATOR].initialize();
        this._pluginInstances[KEYBOARD_HANDLER].initialize();
        this._pluginInstances[VALUE_HANDLER].initialize();
        this._pluginInstances[NORMAL_STATE].initialize();
        this._pluginInstances[POPUP].initialize();
        this._pluginInstances[POSITIONER].initialize();
        this.isInitialized = true;
        this._initializedSubject.next(true);
    }
    /**
     * Initialize options, automaticaly called during init phase, but can be used to reinitialize NgSelectOptions
     * @return {?}
     */
    initOptions() {
        this.selectOptions.optionsGatherer.ngSelectPlugins = this._pluginInstances;
        if (this._selectOptions.plugins) {
            if (this._selectOptions.plugins.normalState) {
                this._selectOptions.plugins.normalState.type = resolveForwardRef(this._selectOptions.plugins.normalState.type);
                if (this._pluginInstances[NORMAL_STATE]) {
                    if (this._selectOptions.plugins && this._selectOptions.plugins.normalState && this._selectOptions.plugins.normalState.options) {
                        this._pluginInstances[NORMAL_STATE].options = this._selectOptions.plugins.normalState.options;
                    }
                    /** @type {?} */
                    let normalState = (/** @type {?} */ (this._pluginInstances[NORMAL_STATE]));
                    normalState.templateGatherer = this.selectOptions.templateGatherer;
                    this._pluginInstances[NORMAL_STATE].initOptions();
                }
            }
            if (this._selectOptions.plugins.textsLocator) {
                this._selectOptions.plugins.textsLocator.type = resolveForwardRef(this._selectOptions.plugins.textsLocator.type);
                if (this._pluginInstances[TEXTS_LOCATOR]) {
                    if (this._selectOptions.plugins && this._selectOptions.plugins.textsLocator && this._selectOptions.plugins.textsLocator.options) {
                        this._pluginInstances[TEXTS_LOCATOR].options = this._selectOptions.plugins.textsLocator.options;
                    }
                    this._pluginInstances[TEXTS_LOCATOR].initOptions();
                }
            }
            if (this._selectOptions.plugins.keyboardHandler) {
                this._selectOptions.plugins.keyboardHandler.type = resolveForwardRef(this._selectOptions.plugins.keyboardHandler.type);
                if (this._pluginInstances[KEYBOARD_HANDLER]) {
                    if (this._selectOptions.plugins && this._selectOptions.plugins.keyboardHandler && this._selectOptions.plugins.keyboardHandler.options) {
                        this._pluginInstances[KEYBOARD_HANDLER].options = this._selectOptions.plugins.keyboardHandler.options;
                    }
                    /** @type {?} */
                    let keyboardHandler = (/** @type {?} */ (this._pluginInstances[KEYBOARD_HANDLER]));
                    keyboardHandler.selectElement = this._element.nativeElement;
                    keyboardHandler.optionsGatherer = this.selectOptions.optionsGatherer;
                    this._pluginInstances[KEYBOARD_HANDLER].initOptions();
                }
            }
            if (this._selectOptions.plugins.popup) {
                this._selectOptions.plugins.popup.type = resolveForwardRef(this._selectOptions.plugins.popup.type);
                if (this._pluginInstances[POPUP]) {
                    if (this._selectOptions.plugins && this._selectOptions.plugins.popup && this._selectOptions.plugins.popup.options) {
                        this._pluginInstances[POPUP].options = this._selectOptions.plugins.popup.options;
                    }
                    /** @type {?} */
                    let popup = (/** @type {?} */ (this._pluginInstances[POPUP]));
                    popup.selectElement = this._element.nativeElement;
                    popup.optionsGatherer = this.selectOptions.optionsGatherer;
                    popup.templateGatherer = this.selectOptions.templateGatherer;
                    this._pluginInstances[POPUP].initOptions();
                }
            }
            if (this._selectOptions.plugins.positioner) {
                this._selectOptions.plugins.positioner.type = resolveForwardRef(this._selectOptions.plugins.positioner.type);
                if (this._pluginInstances[POSITIONER]) {
                    if (this._selectOptions.plugins && this._selectOptions.plugins.positioner && this._selectOptions.plugins.positioner.options) {
                        this._pluginInstances[POSITIONER].options = this._selectOptions.plugins.positioner.options;
                    }
                    /** @type {?} */
                    let positioner = (/** @type {?} */ (this._pluginInstances[POSITIONER]));
                    positioner.selectElement = this._element.nativeElement;
                    positioner.optionsGatherer = this.selectOptions.optionsGatherer;
                    this._pluginInstances[POSITIONER].initOptions();
                }
            }
            if (this._selectOptions.plugins.readonlyState) {
                this._selectOptions.plugins.readonlyState.type = resolveForwardRef(this._selectOptions.plugins.readonlyState.type);
                if (this._pluginInstances[READONLY_STATE]) {
                    if (this._selectOptions.plugins && this._selectOptions.plugins.readonlyState && this._selectOptions.plugins.readonlyState.options) {
                        this._pluginInstances[READONLY_STATE].options = this._selectOptions.plugins.readonlyState.options;
                    }
                    /** @type {?} */
                    let options = (/** @type {?} */ (this._pluginInstances[READONLY_STATE].options));
                    options.readonly = true;
                    this._pluginInstances[READONLY_STATE].initOptions();
                }
            }
            if (this._selectOptions.plugins.valueHandler) {
                this._selectOptions.plugins.valueHandler.type = resolveForwardRef(this._selectOptions.plugins.valueHandler.type);
                if (this._pluginInstances[VALUE_HANDLER]) {
                    if (this._selectOptions.plugins && this._selectOptions.plugins.valueHandler && this._selectOptions.plugins.valueHandler.options) {
                        this._pluginInstances[VALUE_HANDLER].options = this._selectOptions.plugins.valueHandler.options;
                    }
                    /** @type {?} */
                    let valueHandler = (/** @type {?} */ (this._pluginInstances[VALUE_HANDLER]));
                    valueHandler.valueComparer = this.selectOptions.valueComparer;
                    valueHandler.optionsGatherer = this.selectOptions.optionsGatherer;
                    this._pluginInstances[VALUE_HANDLER].initOptions();
                }
            }
            if (this._selectOptions.plugins.liveSearch) {
                this._selectOptions.plugins.liveSearch.type = resolveForwardRef(this._selectOptions.plugins.liveSearch.type);
                if (this._pluginInstances[LIVE_SEARCH]) {
                    if (this._selectOptions.plugins && this._selectOptions.plugins.liveSearch && this._selectOptions.plugins.liveSearch.options) {
                        this._pluginInstances[LIVE_SEARCH].options = this._selectOptions.plugins.liveSearch.options;
                    }
                    this._pluginInstances[LIVE_SEARCH].initOptions();
                }
            }
        }
    }
    /**
     * Explicitly runs invalidation of content (change detection)
     * @return {?}
     */
    invalidateVisuals() {
        this._changeDetector.detectChanges();
    }
    /**
     * Gets instance of plugin by its id
     * @template PluginType
     * @param {?} pluginId Id of plugin, use constants
     * @return {?}
     */
    getPlugin(pluginId) {
        return (/** @type {?} */ (this._pluginInstances[pluginId]));
    }
    /**
     * Executes actions on NgSelect
     * @param {...?} actions Array of actions that are executed over NgSelect
     * @return {?}
     */
    execute(...actions) {
        if (!actions) {
            return;
        }
        actions.forEach((/**
         * @param {?} action
         * @return {?}
         */
        action => action(this)));
    }
    /**
     * Executes function on NgSelect and returns result
     * @template TResult
     * @param {?} func Function that is executed and its result is returned
     * @return {?}
     */
    executeAndReturn(func) {
        if (!func) {
            return null;
        }
        return func(this);
    }
}
NgSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-select',
                template: "<ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.textsLocator?.type\" (ngComponentOutletExCreated)=\"setTextsLocatorComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.liveSearch?.type\" (ngComponentOutletExCreated)=\"setLiveSearchComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.positioner?.type\" (ngComponentOutletExCreated)=\"setPositionerComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.keyboardHandler?.type\" (ngComponentOutletExCreated)=\"setKeyboardHandlerComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.valueHandler?.type\" (ngComponentOutletExCreated)=\"setValueHandlerComponent($event)\"></ng-template>\r\n\r\n<div>\r\n    <ng-template [ngIf]=\"!selectOptions?.readonly\">\r\n        <ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.normalState?.type\" (ngComponentOutletExCreated)=\"setNormalStateComponent($event)\" [ngComponentOutletExContent]=\"liveSearchElement\"></ng-template>\r\n    </ng-template>\r\n\r\n    <ng-template [ngIf]=\"selectOptions?.readonly\">\r\n        <ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.readonlyState?.type\" (ngComponentOutletExCreated)=\"setReadonlyStateComponent($event)\"></ng-template>\r\n    </ng-template>\r\n\r\n    <ng-template [ngComponentOutletEx]=\"selectOptions?.plugins?.popup?.type\" (ngComponentOutletExCreated)=\"setPopupComponent($event)\" [ngComponentOutletExContent]=\"liveSearchElement\"></ng-template>\r\n</div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    (/** @type {?} */ ({
                        provide: NG_SELECT_PLUGIN_INSTANCES,
                        useFactory: ngSelectPluginInstancesFactory
                    }))
                ],
                styles: [`:host
        {
            display: block;
            position: relative;
        }`]
            }] }
];
/** @nocollapse */
NgSelectComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [NG_SELECT_PLUGIN_INSTANCES,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [NG_SELECT_OPTIONS,] }, { type: Optional }] },
    { type: Type, decorators: [{ type: Inject, args: [NORMAL_STATE_TYPE,] }, { type: Optional }] },
    { type: Type, decorators: [{ type: Inject, args: [KEYBOARD_HANDLER_TYPE,] }, { type: Optional }] },
    { type: Type, decorators: [{ type: Inject, args: [POPUP_TYPE,] }, { type: Optional }] },
    { type: Type, decorators: [{ type: Inject, args: [POSITIONER_TYPE,] }, { type: Optional }] },
    { type: Type, decorators: [{ type: Inject, args: [READONLY_STATE_TYPE,] }, { type: Optional }] },
    { type: Type, decorators: [{ type: Inject, args: [VALUE_HANDLER_TYPE,] }, { type: Optional }] },
    { type: Type, decorators: [{ type: Inject, args: [LIVE_SEARCH_TYPE,] }, { type: Optional }] },
    { type: Type, decorators: [{ type: Inject, args: [TEXTS_LOCATOR,] }, { type: Optional }] },
    { type: String, decorators: [{ type: Attribute, args: ['readonly',] }] },
    { type: String, decorators: [{ type: Attribute, args: ['disabled',] }] },
    { type: String, decorators: [{ type: Attribute, args: ['multiple',] }] }
];
NgSelectComponent.propDecorators = {
    selectOptions: [{ type: Input }],
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    normalStateTemplate: [{ type: ContentChild, args: ['normalStateTemplate',] }],
    optionTemplate: [{ type: ContentChild, args: ['optionTemplate',] }],
    optionsChildren: [{ type: ContentChildren, args: [OptionComponent,] }],
    optGroupsChildren: [{ type: ContentChildren, args: [OptGroupComponent,] }]
};
if (false) {
    /**
     * NgSelect options
     * @type {?}
     * @protected
     */
    NgSelectComponent.prototype._selectOptions;
    /**
     * Subject used for indication that NgSelect was initialized
     * @type {?}
     * @protected
     */
    NgSelectComponent.prototype._initializedSubject;
    /**
     * Occurs when array of provided options has changed
     * @type {?}
     * @protected
     */
    NgSelectComponent.prototype._optionsChange;
    /**
     * Occurs when array of visible, displayed options has changed
     * @type {?}
     * @protected
     */
    NgSelectComponent.prototype._availableOptionsChange;
    /**
     * Array of available options to be displayed
     * @type {?}
     * @protected
     */
    NgSelectComponent.prototype._availableOptions;
    /**
     * Live search plugin currently used in NgSelect
     * @type {?}
     * @protected
     */
    NgSelectComponent.prototype._liveSearch;
    /**
     * Subscription for changes of live search value
     * @type {?}
     * @protected
     */
    NgSelectComponent.prototype._searchValueChangeSubscription;
    /**
     * Indication whether should be NgSelect disabled or not
     * @type {?}
     */
    NgSelectComponent.prototype.disabled;
    /**
     * Indication whether should be NgSelect readonly or not
     * @type {?}
     */
    NgSelectComponent.prototype.readonly;
    /**
     * Gets current state of initialization
     * @type {?}
     */
    NgSelectComponent.prototype.isInitialized;
    /**
     * Template used within normal state
     * \@internal
     * @type {?}
     */
    NgSelectComponent.prototype.normalStateTemplate;
    /**
     * Template that is used within Popup as option
     * \@internal
     * @type {?}
     */
    NgSelectComponent.prototype.optionTemplate;
    /**
     * NgSelect plugin instances available for gatherer
     * \@internal
     * @type {?}
     */
    NgSelectComponent.prototype.ngSelectPlugins;
    /**
     * Element used for live search
     * \@internal
     * @type {?}
     */
    NgSelectComponent.prototype.liveSearchElement;
    /**
     * Options children found inside ng-select
     * \@internal
     * @type {?}
     */
    NgSelectComponent.prototype.optionsChildren;
    /**
     * Options groups children found inside ng-select
     * \@internal
     * @type {?}
     */
    NgSelectComponent.prototype.optGroupsChildren;
    /**
     * @type {?}
     * @protected
     */
    NgSelectComponent.prototype._changeDetector;
    /**
     * @type {?}
     * @protected
     */
    NgSelectComponent.prototype._element;
    /**
     * @type {?}
     * @protected
     */
    NgSelectComponent.prototype._pluginInstances;
}
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3NlbGVjdC9zZWxlY3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLHVCQUF1QixFQUFtQixLQUFLLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQXlCLGVBQWUsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxVQUFVLEVBQTRCLFNBQVMsRUFBYSxXQUFXLEVBQUUsWUFBWSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNULE9BQU8sRUFBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRSxPQUFPLEVBQUMsZUFBZSxFQUEyQixNQUFNLE1BQU0sQ0FBQztBQUcvRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUUscUJBQXFCLEVBQUUsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxtQkFBbUIsRUFBRSxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBRXJMLE9BQU8sRUFBQywwQkFBMEIsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUVuRCxPQUFPLEVBQUMsNkJBQTZCLEVBQUMsTUFBTSwwQ0FBMEMsQ0FBQztBQUN2RixPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxxQ0FBcUMsQ0FBQztBQUVyRSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFDN0QsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sc0NBQXNDLENBQUM7QUFFL0UsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLCtCQUErQixD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SUFLbEMsMkRBQXVEOzs7OztJQW9CdkQscUNBQ3lCOzs7OztJQUt6QixxQ0FDeUI7Ozs7O0lBZXpCLDBDQUFzQzs7Ozs7O0lBUXRDLGdEQUM0RDs7Ozs7O0lBTTVELDJDQUNrRDs7Ozs7O0lBNENsRCw0Q0FBZ0Q7Ozs7OztJQVFoRCw4Q0FBMEM7Ozs7OztJQVExQyw0Q0FDdUQ7Ozs7OztJQVF2RCw4Q0FDMkQ7Ozs7O0lBRy9DLDRDQUE0Qzs7Ozs7SUFDNUMscUNBQTJDOzs7OztJQUMzQyw2Q0FBdUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIEZhY3RvcnlQcm92aWRlciwgSW5wdXQsIEluamVjdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9wdGlvbmFsLCBUeXBlLCBBZnRlclZpZXdJbml0LCBPbkluaXQsIENvbnRlbnRDaGlsZHJlbiwgUXVlcnlMaXN0LCBFdmVudEVtaXR0ZXIsIGZvcndhcmRSZWYsIHJlc29sdmVGb3J3YXJkUmVmLCBFbGVtZW50UmVmLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIEF0dHJpYnV0ZSwgT25EZXN0cm95LCBUZW1wbGF0ZVJlZiwgQ29udGVudENoaWxkfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQge2V4dGVuZCwgbmFtZW9mLCBpc0Jvb2xlYW4sIGlzUHJlc2VudH0gZnJvbSBcIkBhc3NlY28vY29tbW9uXCI7XHJcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb259IGZyb20gXCJyeGpzXCI7XHJcblxyXG5pbXBvcnQge05nU2VsZWN0T3B0aW9ucywgTmdTZWxlY3RQbHVnaW4sIE9wdGlvbnNHYXRoZXJlciwgUGx1Z2luRGVzY3JpcHRpb24sIFRlbXBsYXRlR2F0aGVyZXJ9IGZyb20gXCIuLi8uLi9taXNjXCI7XHJcbmltcG9ydCB7TkdfU0VMRUNUX09QVElPTlMsIEtFWUJPQVJEX0hBTkRMRVJfVFlQRSwgTk9STUFMX1NUQVRFX1RZUEUsIFBPUFVQX1RZUEUsIFBPU0lUSU9ORVJfVFlQRSwgUkVBRE9OTFlfU1RBVEVfVFlQRSwgVkFMVUVfSEFORExFUl9UWVBFLCBMSVZFX1NFQVJDSF9UWVBFfSBmcm9tIFwiLi4vLi4vbWlzYy90eXBlc1wiO1xyXG5pbXBvcnQge05nU2VsZWN0LCBOZ1NlbGVjdFBsdWdpbkluc3RhbmNlcywgTmdTZWxlY3RBY3Rpb24sIE5nU2VsZWN0RnVuY3Rpb259IGZyb20gXCIuL3NlbGVjdC5pbnRlcmZhY2VcIjtcclxuaW1wb3J0IHtOR19TRUxFQ1RfUExVR0lOX0lOU1RBTkNFU30gZnJvbSBcIi4vdHlwZXNcIjtcclxuaW1wb3J0IHtLZXlib2FyZEhhbmRsZXJ9IGZyb20gXCIuLi8uLi9wbHVnaW5zL2tleWJvYXJkSGFuZGxlclwiO1xyXG5pbXBvcnQge0Jhc2ljS2V5Ym9hcmRIYW5kbGVyQ29tcG9uZW50fSBmcm9tIFwiLi4vLi4vcGx1Z2lucy9rZXlib2FyZEhhbmRsZXIvY29tcG9uZW50c1wiO1xyXG5pbXBvcnQge0tFWUJPQVJEX0hBTkRMRVJ9IGZyb20gXCIuLi8uLi9wbHVnaW5zL2tleWJvYXJkSGFuZGxlci90eXBlc1wiO1xyXG5pbXBvcnQge05vcm1hbFN0YXRlLCBOb3JtYWxTdGF0ZUNvbnRleHR9IGZyb20gXCIuLi8uLi9wbHVnaW5zL25vcm1hbFN0YXRlXCI7XHJcbmltcG9ydCB7Tk9STUFMX1NUQVRFfSBmcm9tIFwiLi4vLi4vcGx1Z2lucy9ub3JtYWxTdGF0ZS90eXBlc1wiO1xyXG5pbXBvcnQge0Jhc2ljTm9ybWFsU3RhdGVDb21wb25lbnR9IGZyb20gXCIuLi8uLi9wbHVnaW5zL25vcm1hbFN0YXRlL2NvbXBvbmVudHNcIjtcclxuaW1wb3J0IHtQb3B1cCwgUG9wdXBPcHRpb25zLCBQb3B1cENvbnRleHR9IGZyb20gXCIuLi8uLi9wbHVnaW5zL3BvcHVwXCI7XHJcbmltcG9ydCB7UE9QVVB9IGZyb20gXCIuLi8uLi9wbHVnaW5zL3BvcHVwL3R5cGVzXCI7XHJcbmltcG9ydCB7QmFzaWNQb3B1cENvbXBvbmVudH0gZnJvbSBcIi4uLy4uL3BsdWdpbnMvcG9wdXAvY29tcG9uZW50XCI7XHJcbmltcG9ydCB7UG9zaXRpb25lcn0gZnJvbSBcIi4uLy4uL3BsdWdpbnMvcG9zaXRpb25lclwiO1xyXG5pbXBvcnQge1BPU0lUSU9ORVJ9IGZyb20gXCIuLi8uLi9wbHVnaW5zL3Bvc2l0aW9uZXIvdHlwZXNcIjtcclxuaW1wb3J0IHtCYXNpY1Bvc2l0aW9uZXJDb21wb25lbnR9IGZyb20gXCIuLi8uLi9wbHVnaW5zL3Bvc2l0aW9uZXIvY29tcG9uZW50c1wiO1xyXG5pbXBvcnQge1JlYWRvbmx5U3RhdGUsIFJlYWRvbmx5U3RhdGVPcHRpb25zfSBmcm9tIFwiLi4vLi4vcGx1Z2lucy9yZWFkb25seVN0YXRlXCI7XHJcbmltcG9ydCB7UkVBRE9OTFlfU1RBVEV9IGZyb20gXCIuLi8uLi9wbHVnaW5zL3JlYWRvbmx5U3RhdGUvdHlwZXNcIjtcclxuaW1wb3J0IHtWYWx1ZUhhbmRsZXIsIFZhbHVlSGFuZGxlck9wdGlvbnN9IGZyb20gXCIuLi8uLi9wbHVnaW5zL3ZhbHVlSGFuZGxlclwiO1xyXG5pbXBvcnQge1ZBTFVFX0hBTkRMRVJ9IGZyb20gXCIuLi8uLi9wbHVnaW5zL3ZhbHVlSGFuZGxlci90eXBlc1wiO1xyXG5pbXBvcnQge0Jhc2ljVmFsdWVIYW5kbGVyQ29tcG9uZW50fSBmcm9tIFwiLi4vLi4vcGx1Z2lucy92YWx1ZUhhbmRsZXIvY29tcG9uZW50c1wiO1xyXG5pbXBvcnQge0xpdmVTZWFyY2h9IGZyb20gXCIuLi8uLi9wbHVnaW5zL2xpdmVTZWFyY2hcIjtcclxuaW1wb3J0IHtMSVZFX1NFQVJDSH0gZnJvbSBcIi4uLy4uL3BsdWdpbnMvbGl2ZVNlYXJjaC90eXBlc1wiO1xyXG5pbXBvcnQge05vTGl2ZVNlYXJjaENvbXBvbmVudH0gZnJvbSBcIi4uLy4uL3BsdWdpbnMvbGl2ZVNlYXJjaC9jb21wb25lbnRzXCI7XHJcbmltcG9ydCB7VGV4dHNMb2NhdG9yfSBmcm9tIFwiLi4vLi4vcGx1Z2lucy90ZXh0c0xvY2F0b3JcIjtcclxuaW1wb3J0IHtURVhUU19MT0NBVE9SfSBmcm9tIFwiLi4vLi4vcGx1Z2lucy90ZXh0c0xvY2F0b3IvdHlwZXNcIjtcclxuaW1wb3J0IHtOb1RleHRzTG9jYXRvckNvbXBvbmVudH0gZnJvbSBcIi4uLy4uL3BsdWdpbnMvdGV4dHNMb2NhdG9yL2NvbXBvbmVudHNcIjtcclxuaW1wb3J0IHtOZ1NlbGVjdE9wdGlvbiwgTmdTZWxlY3RPcHRHcm91cH0gZnJvbSBcIi4uL29wdGlvblwiO1xyXG5pbXBvcnQge09wdGlvbkNvbXBvbmVudH0gZnJvbSBcIi4uL29wdGlvbi9vcHRpb24uY29tcG9uZW50XCI7XHJcbmltcG9ydCB7T3B0R3JvdXBDb21wb25lbnR9IGZyb20gXCIuLi9vcHRpb24vb3B0Z3JvdXAuY29tcG9uZW50XCI7XHJcblxyXG4vKipcclxuICogRGVmYXVsdCAnTmdTZWxlY3RPcHRpb25zJ1xyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmNvbnN0IGRlZmF1bHRPcHRpb25zOiBOZ1NlbGVjdE9wdGlvbnM8YW55PiA9XHJcbntcclxuICAgIGF1dG9Jbml0aWFsaXplOiB0cnVlLFxyXG4gICAgdmFsdWVDb21wYXJlcjogKHNvdXJjZSwgdGFyZ2V0KSA9PlxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBzb3VyY2UgPT0gdGFyZ2V0O1xyXG4gICAgfSxcclxuICAgIGxpdmVTZWFyY2hGaWx0ZXI6IChxdWVyeTogc3RyaW5nKSA9PlxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBpdG0gPT4gaXRtLnRleHQuaW5kZXhPZihxdWVyeSkgPj0gMDtcclxuICAgIH0sXHJcbiAgICBjc3NDbGFzc2VzOlxyXG4gICAge1xyXG4gICAgfSxcclxuICAgIHBsdWdpbnM6XHJcbiAgICB7XHJcbiAgICAgICAgbm9ybWFsU3RhdGU6IDxQbHVnaW5EZXNjcmlwdGlvbjxCYXNpY05vcm1hbFN0YXRlQ29tcG9uZW50Pj5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHR5cGU6IGZvcndhcmRSZWYoKCkgPT4gQmFzaWNOb3JtYWxTdGF0ZUNvbXBvbmVudClcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRleHRzTG9jYXRvcjogPFBsdWdpbkRlc2NyaXB0aW9uPE5vVGV4dHNMb2NhdG9yQ29tcG9uZW50Pj5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHR5cGU6IGZvcndhcmRSZWYoKCkgPT4gTm9UZXh0c0xvY2F0b3JDb21wb25lbnQpXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsaXZlU2VhcmNoOiA8UGx1Z2luRGVzY3JpcHRpb248Tm9MaXZlU2VhcmNoQ29tcG9uZW50Pj5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHR5cGU6IGZvcndhcmRSZWYoKCkgPT4gTm9MaXZlU2VhcmNoQ29tcG9uZW50KVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcG9wdXA6IDxQbHVnaW5EZXNjcmlwdGlvbjxCYXNpY1BvcHVwQ29tcG9uZW50Pj5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHR5cGU6IGZvcndhcmRSZWYoKCkgPT4gQmFzaWNQb3B1cENvbXBvbmVudClcclxuICAgICAgICB9LFxyXG4gICAgICAgIHBvc2l0aW9uZXI6IDxQbHVnaW5EZXNjcmlwdGlvbjxCYXNpY1Bvc2l0aW9uZXJDb21wb25lbnQ+PlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdHlwZTogZm9yd2FyZFJlZigoKSA9PiBCYXNpY1Bvc2l0aW9uZXJDb21wb25lbnQpXHJcbiAgICAgICAgfSxcclxuICAgICAgICBrZXlib2FyZEhhbmRsZXI6IDxQbHVnaW5EZXNjcmlwdGlvbjxCYXNpY0tleWJvYXJkSGFuZGxlckNvbXBvbmVudD4+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0eXBlOiBmb3J3YXJkUmVmKCgpID0+IEJhc2ljS2V5Ym9hcmRIYW5kbGVyQ29tcG9uZW50KVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVhZG9ubHlTdGF0ZTogPFBsdWdpbkRlc2NyaXB0aW9uPFJlYWRvbmx5U3RhdGU+PlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdHlwZTogZm9yd2FyZFJlZigoKSA9PiBCYXNpY05vcm1hbFN0YXRlQ29tcG9uZW50KVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdmFsdWVIYW5kbGVyOiA8UGx1Z2luRGVzY3JpcHRpb248QmFzaWNWYWx1ZUhhbmRsZXJDb21wb25lbnQ8YW55Pj4+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0eXBlOiBmb3J3YXJkUmVmKCgpID0+IEJhc2ljVmFsdWVIYW5kbGVyQ29tcG9uZW50KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBOZ1NlbGVjdCBwbHVnaW4gaW5zdGFuY2VzIGZhY3RvcnkgbWV0aG9kXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG5nU2VsZWN0UGx1Z2luSW5zdGFuY2VzRmFjdG9yeSgpXHJcbntcclxuICAgIHJldHVybiB7fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbXBvbmVudCB0aGF0IHJlcHJlc2VudHMgTmdTZWxlY3QgaXRzZWxmLCBhbGxvd3Mgc2VsZWN0aW9uIG9mIHZhbHVlIGZyb20gb3B0aW9uc1xyXG4gKi9cclxuQENvbXBvbmVudChcclxue1xyXG4gICAgc2VsZWN0b3I6ICduZy1zZWxlY3QnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICdzZWxlY3QuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgICBwcm92aWRlcnM6XHJcbiAgICBbXHJcbiAgICAgICAgPEZhY3RvcnlQcm92aWRlcj5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHByb3ZpZGU6IE5HX1NFTEVDVF9QTFVHSU5fSU5TVEFOQ0VTLFxyXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiBuZ1NlbGVjdFBsdWdpbkluc3RhbmNlc0ZhY3RvcnlcclxuICAgICAgICB9XHJcbiAgICBdLFxyXG4gICAgc3R5bGVzOlxyXG4gICAgW1xyXG4gICAgICAgIGA6aG9zdFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICB9YFxyXG4gICAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdTZWxlY3RDb21wb25lbnQ8VFZhbHVlPiBpbXBsZW1lbnRzIE5nU2VsZWN0PFRWYWx1ZT4sIE9uQ2hhbmdlcywgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3ksIE9wdGlvbnNHYXRoZXJlcjxUVmFsdWU+LCBUZW1wbGF0ZUdhdGhlcmVyXHJcbntcclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwcm90ZWN0ZWQgZmllbGRzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIE5nU2VsZWN0IG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIF9zZWxlY3RPcHRpb25zOiBOZ1NlbGVjdE9wdGlvbnM8VFZhbHVlPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN1YmplY3QgdXNlZCBmb3IgaW5kaWNhdGlvbiB0aGF0IE5nU2VsZWN0IHdhcyBpbml0aWFsaXplZFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgX2luaXRpYWxpemVkU3ViamVjdDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPihmYWxzZSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPY2N1cnMgd2hlbiBhcnJheSBvZiBwcm92aWRlZCBvcHRpb25zIGhhcyBjaGFuZ2VkXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBfb3B0aW9uc0NoYW5nZTogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogT2NjdXJzIHdoZW4gYXJyYXkgb2YgdmlzaWJsZSwgZGlzcGxheWVkIG9wdGlvbnMgaGFzIGNoYW5nZWRcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIF9hdmFpbGFibGVPcHRpb25zQ2hhbmdlOiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcnJheSBvZiBhdmFpbGFibGUgb3B0aW9ucyB0byBiZSBkaXNwbGF5ZWRcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIF9hdmFpbGFibGVPcHRpb25zOiBOZ1NlbGVjdE9wdGlvbjxUVmFsdWU+W10gPSBbXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIExpdmUgc2VhcmNoIHBsdWdpbiBjdXJyZW50bHkgdXNlZCBpbiBOZ1NlbGVjdFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgX2xpdmVTZWFyY2g6IExpdmVTZWFyY2g7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdWJzY3JpcHRpb24gZm9yIGNoYW5nZXMgb2YgbGl2ZSBzZWFyY2ggdmFsdWVcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIF9zZWFyY2hWYWx1ZUNoYW5nZVN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwdWJsaWMgcHJvcGVydGllcyAtIGlucHV0cyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgTmdTZWxlY3Qgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBASW5wdXQoKVxyXG4gICAgcHVibGljIHNldCBzZWxlY3RPcHRpb25zKG9wdGlvbnM6IE5nU2VsZWN0T3B0aW9uczxUVmFsdWU+KVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuX3NlbGVjdE9wdGlvbnMgPSBleHRlbmQodHJ1ZSwgdGhpcy5fc2VsZWN0T3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0IHNlbGVjdE9wdGlvbnMoKTogTmdTZWxlY3RPcHRpb25zPFRWYWx1ZT5cclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0T3B0aW9ucztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEluZGljYXRpb24gd2hldGhlciBzaG91bGQgYmUgTmdTZWxlY3QgZGlzYWJsZWQgb3Igbm90XHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpXHJcbiAgICBwdWJsaWMgZGlzYWJsZWQ6IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbmRpY2F0aW9uIHdoZXRoZXIgc2hvdWxkIGJlIE5nU2VsZWN0IHJlYWRvbmx5IG9yIG5vdFxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKVxyXG4gICAgcHVibGljIHJlYWRvbmx5OiBib29sZWFuO1xyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwdWJsaWMgcHJvcGVydGllcyAtIGltcGxlbWVudGF0aW9uIG9mIE5nU2VsZWN0ICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIE9jY3VycyBldmVyeSB0aW1lIHdoZW4gTmdTZWxlY3QgaXMgaW5pdGlhbGl6ZWQgb3IgcmVpbml0aWFsaXplZCwgaWYgdmFsdWUgaXMgZmFsc2UgTmdTZWxlY3Qgd2FzIG5vdCBpbml0aWFsaXplZCB5ZXRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBpbml0aWFsaXplZCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+XHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luaXRpYWxpemVkU3ViamVjdC5hc09ic2VydmFibGUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgY3VycmVudCBzdGF0ZSBvZiBpbml0aWFsaXphdGlvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaXNJbml0aWFsaXplZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwdWJsaWMgcHJvcGVydGllcyAtIGltcGxlbWVudGF0aW9uIG9mIFRlbXBsYXRlR2F0aGVyZXIgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVtcGxhdGUgdXNlZCB3aXRoaW4gbm9ybWFsIHN0YXRlXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgQENvbnRlbnRDaGlsZCgnbm9ybWFsU3RhdGVUZW1wbGF0ZScpXHJcbiAgICBwdWJsaWMgbm9ybWFsU3RhdGVUZW1wbGF0ZTogVGVtcGxhdGVSZWY8Tm9ybWFsU3RhdGVDb250ZXh0PjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlbXBsYXRlIHRoYXQgaXMgdXNlZCB3aXRoaW4gUG9wdXAgYXMgb3B0aW9uXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgQENvbnRlbnRDaGlsZCgnb3B0aW9uVGVtcGxhdGUnKVxyXG4gICAgcHVibGljIG9wdGlvblRlbXBsYXRlPzogVGVtcGxhdGVSZWY8UG9wdXBDb250ZXh0PjtcclxuXHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIHByb3BlcnRpZXMgLSBpbXBsZW1lbnRhdGlvbiBvZiBPcHRpb25zR2F0aGVyZXIgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXJyYXkgb2YgcHJvdmlkZWQgb3B0aW9ucyBmb3Igc2VsZWN0XHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBvcHRpb25zKCk6IE5nU2VsZWN0T3B0aW9uPFRWYWx1ZT5bXVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNDaGlsZHJlbi50b0FycmF5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPY2N1cnMgd2hlbiBhcnJheSBvZiBwcm92aWRlZCBvcHRpb25zIGhhcyBjaGFuZ2VkXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBvcHRpb25zQ2hhbmdlKCk6IEV2ZW50RW1pdHRlcjx2b2lkPlxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zQ2hhbmdlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXJyYXkgb2YgdmlzaWJsZSwgZGlzcGxheWVkIG9wdGlvbnMgZm9yIHNlbGVjdFxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgYXZhaWxhYmxlT3B0aW9ucygpOiBOZ1NlbGVjdE9wdGlvbjxUVmFsdWU+W11cclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYXZhaWxhYmxlT3B0aW9ucztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE9jY3VycyB3aGVuIGFycmF5IG9mIHZpc2libGUsIGRpc3BsYXllZCBvcHRpb25zIGhhcyBjaGFuZ2VkXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBhdmFpbGFibGVPcHRpb25zQ2hhbmdlKCk6IEV2ZW50RW1pdHRlcjx2b2lkPlxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hdmFpbGFibGVPcHRpb25zQ2hhbmdlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTmdTZWxlY3QgcGx1Z2luIGluc3RhbmNlcyBhdmFpbGFibGUgZm9yIGdhdGhlcmVyXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG5nU2VsZWN0UGx1Z2luczogTmdTZWxlY3RQbHVnaW5JbnN0YW5jZXM7XHJcblxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHB1YmxpYyBwcm9wZXJ0aWVzIC0gdGVtcGxhdGUgYmluZGluZ3MgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRWxlbWVudCB1c2VkIGZvciBsaXZlIHNlYXJjaFxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBsaXZlU2VhcmNoRWxlbWVudDogSFRNTEVsZW1lbnRbXVtdO1xyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwdWJsaWMgcHJvcGVydGllcyAtIGNoaWxkcmVuICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIE9wdGlvbnMgY2hpbGRyZW4gZm91bmQgaW5zaWRlIG5nLXNlbGVjdFxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIEBDb250ZW50Q2hpbGRyZW4oT3B0aW9uQ29tcG9uZW50KVxyXG4gICAgcHVibGljIG9wdGlvbnNDaGlsZHJlbjogUXVlcnlMaXN0PE5nU2VsZWN0T3B0aW9uPGFueT4+O1xyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwdWJsaWMgcHJvcGVydGllcyAtIGNoaWxkcmVuICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIE9wdGlvbnMgZ3JvdXBzIGNoaWxkcmVuIGZvdW5kIGluc2lkZSBuZy1zZWxlY3RcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBAQ29udGVudENoaWxkcmVuKE9wdEdyb3VwQ29tcG9uZW50KVxyXG4gICAgcHVibGljIG9wdEdyb3Vwc0NoaWxkcmVuOiBRdWVyeUxpc3Q8TmdTZWxlY3RPcHRHcm91cDxhbnk+PjtcclxuXHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgY29uc3RydWN0b3JzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBfY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgICAgICAgICAgICAgcHJvdGVjdGVkIF9lbGVtZW50OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcclxuICAgICAgICAgICAgICAgIEBJbmplY3QoTkdfU0VMRUNUX1BMVUdJTl9JTlNUQU5DRVMpIHByb3RlY3RlZCBfcGx1Z2luSW5zdGFuY2VzOiBOZ1NlbGVjdFBsdWdpbkluc3RhbmNlcyxcclxuICAgICAgICAgICAgICAgIEBJbmplY3QoTkdfU0VMRUNUX09QVElPTlMpIEBPcHRpb25hbCgpIG9wdGlvbnM/OiBOZ1NlbGVjdE9wdGlvbnM8VFZhbHVlPixcclxuICAgICAgICAgICAgICAgIEBJbmplY3QoTk9STUFMX1NUQVRFX1RZUEUpIEBPcHRpb25hbCgpIG5vcm1hbFN0YXRlVHlwZT86IFR5cGU8Tm9ybWFsU3RhdGU+LFxyXG4gICAgICAgICAgICAgICAgQEluamVjdChLRVlCT0FSRF9IQU5ETEVSX1RZUEUpIEBPcHRpb25hbCgpIGtleWJvYXJkSGFuZGxlclR5cGU/OiBUeXBlPEtleWJvYXJkSGFuZGxlcj4sXHJcbiAgICAgICAgICAgICAgICBASW5qZWN0KFBPUFVQX1RZUEUpIEBPcHRpb25hbCgpIHBvcHVwVHlwZT86IFR5cGU8UG9wdXA+LFxyXG4gICAgICAgICAgICAgICAgQEluamVjdChQT1NJVElPTkVSX1RZUEUpIEBPcHRpb25hbCgpIHBvc2l0aW9uZXJUeXBlPzogVHlwZTxQb3NpdGlvbmVyPixcclxuICAgICAgICAgICAgICAgIEBJbmplY3QoUkVBRE9OTFlfU1RBVEVfVFlQRSkgQE9wdGlvbmFsKCkgcmVhZG9ubHlTdGF0ZVR5cGU/OiBUeXBlPFJlYWRvbmx5U3RhdGU+LFxyXG4gICAgICAgICAgICAgICAgQEluamVjdChWQUxVRV9IQU5ETEVSX1RZUEUpIEBPcHRpb25hbCgpIHZhbHVlSGFuZGxlclR5cGU/OiBUeXBlPFZhbHVlSGFuZGxlcjxhbnk+PixcclxuICAgICAgICAgICAgICAgIEBJbmplY3QoTElWRV9TRUFSQ0hfVFlQRSkgQE9wdGlvbmFsKCkgbGl2ZVNlYXJjaFR5cGU/OiBUeXBlPExpdmVTZWFyY2g+LFxyXG4gICAgICAgICAgICAgICAgQEluamVjdChURVhUU19MT0NBVE9SKSBAT3B0aW9uYWwoKSB0ZXh0c0xvY2F0b3JUeXBlPzogVHlwZTxUZXh0c0xvY2F0b3I+LFxyXG4gICAgICAgICAgICAgICAgQEF0dHJpYnV0ZSgncmVhZG9ubHknKSByZWFkb25seT86IHN0cmluZyxcclxuICAgICAgICAgICAgICAgIEBBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgZGlzYWJsZWQ/OiBzdHJpbmcsXHJcbiAgICAgICAgICAgICAgICBAQXR0cmlidXRlKCdtdWx0aXBsZScpIG11bHRpcGxlPzogc3RyaW5nKVxyXG4gICAge1xyXG4gICAgICAgIC8vYXQgbGVhc3Qgb24gb2YgZm9sbG93aW5nIGlzIHByZXNlbnQgKHZhbHVlIGlzIG5vdCBpbXBvcnRhbnQpXHJcbiAgICAgICAgbGV0IHJlYWRvbmx5RGVmYXVsdCA9IGlzUHJlc2VudChyZWFkb25seSkgfHwgaXNQcmVzZW50KGRpc2FibGVkKTtcclxuICAgICAgICBsZXQgbXVsdGlwbGVEZWZhdWx0ID0gaXNQcmVzZW50KG11bHRpcGxlKTtcclxuICAgICAgICBsZXQgb3B0czogTmdTZWxlY3RPcHRpb25zPFRWYWx1ZT4gPSBleHRlbmQodHJ1ZSwge30sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBpZighb3B0cy5wbHVnaW5zKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgb3B0cy5wbHVnaW5zID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihrZXlib2FyZEhhbmRsZXJUeXBlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoIW9wdHMucGx1Z2lucy5rZXlib2FyZEhhbmRsZXIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG9wdHMucGx1Z2lucy5rZXlib2FyZEhhbmRsZXIgPSB7fTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgb3B0cy5wbHVnaW5zLmtleWJvYXJkSGFuZGxlci50eXBlID0ga2V5Ym9hcmRIYW5kbGVyVHlwZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKG5vcm1hbFN0YXRlVHlwZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCFvcHRzLnBsdWdpbnMubm9ybWFsU3RhdGUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG9wdHMucGx1Z2lucy5ub3JtYWxTdGF0ZSA9IHt9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvcHRzLnBsdWdpbnMubm9ybWFsU3RhdGUudHlwZSA9IG5vcm1hbFN0YXRlVHlwZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKHBvcHVwVHlwZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCFvcHRzLnBsdWdpbnMucG9wdXApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG9wdHMucGx1Z2lucy5wb3B1cCA9IHt9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvcHRzLnBsdWdpbnMucG9wdXAudHlwZSA9IHBvcHVwVHlwZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKHBvc2l0aW9uZXJUeXBlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoIW9wdHMucGx1Z2lucy5wb3NpdGlvbmVyKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBvcHRzLnBsdWdpbnMucG9zaXRpb25lciA9IHt9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvcHRzLnBsdWdpbnMucG9zaXRpb25lci50eXBlID0gcG9zaXRpb25lclR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihyZWFkb25seVN0YXRlVHlwZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCFvcHRzLnBsdWdpbnMucmVhZG9ubHlTdGF0ZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgb3B0cy5wbHVnaW5zLnJlYWRvbmx5U3RhdGUgPSB7fTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgb3B0cy5wbHVnaW5zLnJlYWRvbmx5U3RhdGUudHlwZSA9IHJlYWRvbmx5U3RhdGVUeXBlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYodmFsdWVIYW5kbGVyVHlwZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCFvcHRzLnBsdWdpbnMudmFsdWVIYW5kbGVyKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBvcHRzLnBsdWdpbnMudmFsdWVIYW5kbGVyID0ge307XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG9wdHMucGx1Z2lucy52YWx1ZUhhbmRsZXIudHlwZSA9IHZhbHVlSGFuZGxlclR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihsaXZlU2VhcmNoVHlwZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCFvcHRzLnBsdWdpbnMubGl2ZVNlYXJjaClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgb3B0cy5wbHVnaW5zLmxpdmVTZWFyY2ggPSB7fTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgb3B0cy5wbHVnaW5zLmxpdmVTZWFyY2gudHlwZSA9IGxpdmVTZWFyY2hUeXBlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYodGV4dHNMb2NhdG9yVHlwZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCFvcHRzLnBsdWdpbnMudGV4dHNMb2NhdG9yKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBvcHRzLnBsdWdpbnMudGV4dHNMb2NhdG9yID0ge307XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG9wdHMucGx1Z2lucy50ZXh0c0xvY2F0b3IudHlwZSA9IHRleHRzTG9jYXRvclR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9zZWxlY3RPcHRpb25zID0gZXh0ZW5kKHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmdTZWxlY3RPcHRpb25zPFRWYWx1ZT4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uc0dhdGhlcmVyOiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlR2F0aGVyZXI6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHk6IHJlYWRvbmx5RGVmYXVsdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW5zOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IDxQb3B1cE9wdGlvbnM8YW55Pj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZTogbXVsdGlwbGVEZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlSGFuZGxlcjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogPFZhbHVlSGFuZGxlck9wdGlvbnM+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGU6IG11bHRpcGxlRGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRPcHRpb25zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHB1YmxpYyBtZXRob2RzIC0gaW1wbGVtZW50YXRpb24gb2YgT25DaGFuZ2VzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB3aGVuIGlucHV0IHZhbHVlIGNoYW5nZXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IHVwZGF0ZVJlYWRvbmx5ID0gKHN0YXRlOiBib29sZWFuLCBmaXJzdENoYW5nZTogYm9vbGVhbikgPT5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vdXBkYXRlIG9wdGlvbnNcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RPcHRpb25zLnJlYWRvbmx5ID0gc3RhdGU7XHJcblxyXG4gICAgICAgICAgICBpZighZmlyc3RDaGFuZ2UpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdE9wdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYobmFtZW9mPE5nU2VsZWN0Q29tcG9uZW50PFRWYWx1ZT4+KCdkaXNhYmxlZCcpIGluIGNoYW5nZXMgJiYgaXNCb29sZWFuKHRoaXMuZGlzYWJsZWQpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdXBkYXRlUmVhZG9ubHkodGhpcy5kaXNhYmxlZCwgY2hhbmdlc1tuYW1lb2Y8TmdTZWxlY3RDb21wb25lbnQ8VFZhbHVlPj4oJ2Rpc2FibGVkJyldLmZpcnN0Q2hhbmdlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKG5hbWVvZjxOZ1NlbGVjdENvbXBvbmVudDxUVmFsdWU+PigncmVhZG9ubHknKSBpbiBjaGFuZ2VzICYmIGlzQm9vbGVhbih0aGlzLnJlYWRvbmx5KSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHVwZGF0ZVJlYWRvbmx5KHRoaXMucmVhZG9ubHksIGNoYW5nZXNbbmFtZW9mPE5nU2VsZWN0Q29tcG9uZW50PFRWYWx1ZT4+KCdyZWFkb25seScpXS5maXJzdENoYW5nZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwdWJsaWMgbWV0aG9kcyAtIGltcGxlbWVudGF0aW9uIG9mIE9uSW5pdCAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplIGNvbXBvbmVudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbmdPbkluaXQoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuaW5pdE9wdGlvbnMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIG1ldGhvZHMgLSBpbXBsZW1lbnRhdGlvbiBvZiBBZnRlclZpZXdJbml0ICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB3aGVuIHZpZXcgd2FzIGluaXRpYWxpemVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuX2F2YWlsYWJsZU9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XHJcblxyXG4gICAgICAgIHRoaXMub3B0aW9uc0NoaWxkcmVuLmNoYW5nZXMuc3Vic2NyaWJlKCgpID0+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9hdmFpbGFibGVPcHRpb25zID0gdGhpcy5vcHRpb25zO1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zQ2hhbmdlLmVtaXQoKTtcclxuICAgICAgICAgICAgdGhpcy5fYXZhaWxhYmxlT3B0aW9uc0NoYW5nZS5lbWl0KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmKHRoaXMuX3NlbGVjdE9wdGlvbnMuYXV0b0luaXRpYWxpemUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmluaXRpYWxpemUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHB1YmxpYyBtZXRob2RzIC0gaW1wbGVtZW50YXRpb24gb2YgT25EZXN0cm95ICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB3aGVuIGNvbXBvbmVudCBpcyBkZXN0cm95ZWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIG5nT25EZXN0cm95KClcclxuICAgIHtcclxuICAgICAgICBpZih0aGlzLl9zZWFyY2hWYWx1ZUNoYW5nZVN1YnNjcmlwdGlvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NlYXJjaFZhbHVlQ2hhbmdlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3NlYXJjaFZhbHVlQ2hhbmdlU3Vic2NyaXB0aW9uID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKHRoaXMuc2VsZWN0T3B0aW9ucy5vcHRpb25zR2F0aGVyZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdE9wdGlvbnMub3B0aW9uc0dhdGhlcmVyLmRlc3Ryb3lHYXRoZXJlcigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIG1ldGhvZHMgLSBpbXBsZW1lbnRhdGlvbiBvZiBPcHRpb25zR2F0aGVyZXIgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZSBnYXRoZXJlciBkdXJpbmcgaW5pdGlhbGl6YXRpb24gcGhhc2VcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5pdGlhbGl6ZUdhdGhlcmVyKCk6IHZvaWRcclxuICAgIHtcclxuICAgICAgICBsZXQgbGl2ZVNlYXJjaCA9IHRoaXMuX3BsdWdpbkluc3RhbmNlc1tMSVZFX1NFQVJDSF0gYXMgTGl2ZVNlYXJjaDtcclxuXHJcbiAgICAgICAgaWYodGhpcy5fbGl2ZVNlYXJjaCAmJiB0aGlzLl9saXZlU2VhcmNoICE9IGxpdmVTZWFyY2gpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9zZWFyY2hWYWx1ZUNoYW5nZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9zZWFyY2hWYWx1ZUNoYW5nZVN1YnNjcmlwdGlvbiA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9saXZlU2VhcmNoID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKCF0aGlzLl9saXZlU2VhcmNoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fbGl2ZVNlYXJjaCA9IGxpdmVTZWFyY2g7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9zZWFyY2hWYWx1ZUNoYW5nZVN1YnNjcmlwdGlvbiA9IHRoaXMuX2xpdmVTZWFyY2guc2VhcmNoVmFsdWVDaGFuZ2Uuc3Vic2NyaWJlKCgpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKCF0aGlzLl9saXZlU2VhcmNoLnNlYXJjaFZhbHVlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2F2YWlsYWJsZU9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXZhaWxhYmxlT3B0aW9uc0NoYW5nZS5lbWl0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hdmFpbGFibGVPcHRpb25zID0gdGhpcy5vcHRpb25zLmZpbHRlcih0aGlzLnNlbGVjdE9wdGlvbnMubGl2ZVNlYXJjaEZpbHRlcih0aGlzLl9saXZlU2VhcmNoLnNlYXJjaFZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hdmFpbGFibGVPcHRpb25zQ2hhbmdlLmVtaXQoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGVkIHdoZW4gZ2F0aGVyZXIgbmVlZHMgdG8gYmUgZGVzdHJveWVkXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIGRlc3Ryb3lHYXRoZXJlcigpOiB2b2lkXHJcbiAgICB7XHJcbiAgICB9XHJcblxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHB1YmxpYyBtZXRob2RzIC0gdGVtcGxhdGUgYmluZGluZ3MgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyBub3JtYWwgc3RhdGUgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0gbm9ybWFsU3RhdGUgQ3JlYXRlZCBub3JtYWwgc3RhdGUgdGhhdCBpcyByZW5kZXJlZFxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXROb3JtYWxTdGF0ZUNvbXBvbmVudChub3JtYWxTdGF0ZTogTm9ybWFsU3RhdGUpXHJcbiAgICB7XHJcbiAgICAgICAgaWYoIW5vcm1hbFN0YXRlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fcGx1Z2luSW5zdGFuY2VzW05PUk1BTF9TVEFURV0gPSBub3JtYWxTdGF0ZTtcclxuXHJcbiAgICAgICAgaWYodGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zICYmIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5ub3JtYWxTdGF0ZSAmJiB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMubm9ybWFsU3RhdGUub3B0aW9ucylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5vcm1hbFN0YXRlLm9wdGlvbnMgPSB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMubm9ybWFsU3RhdGUub3B0aW9ucztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG5vcm1hbFN0YXRlLnRlbXBsYXRlR2F0aGVyZXIgPSB0aGlzLnNlbGVjdE9wdGlvbnMudGVtcGxhdGVHYXRoZXJlcjtcclxuICAgICAgICBub3JtYWxTdGF0ZS5pbml0T3B0aW9ucygpO1xyXG5cclxuICAgICAgICBpZih0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMgJiYgdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLm5vcm1hbFN0YXRlICYmIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5ub3JtYWxTdGF0ZS5pbnN0YW5jZUNhbGxiYWNrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLm5vcm1hbFN0YXRlLmluc3RhbmNlQ2FsbGJhY2sobm9ybWFsU3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMga2V5Ym9hcmQgaGFuZGxlciBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSBrZXlib2FyZEhhbmRsZXIgQ3JlYXRlZCBrZXlib2FyZCBoYW5kbGVyIHRoYXQgaXMgcmVuZGVyZWRcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0S2V5Ym9hcmRIYW5kbGVyQ29tcG9uZW50KGtleWJvYXJkSGFuZGxlcjogS2V5Ym9hcmRIYW5kbGVyKVxyXG4gICAge1xyXG4gICAgICAgIGlmKCFrZXlib2FyZEhhbmRsZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9wbHVnaW5JbnN0YW5jZXNbS0VZQk9BUkRfSEFORExFUl0gPSBrZXlib2FyZEhhbmRsZXI7XHJcblxyXG4gICAgICAgIGlmKHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucyAmJiB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMua2V5Ym9hcmRIYW5kbGVyICYmIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5rZXlib2FyZEhhbmRsZXIub3B0aW9ucylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGtleWJvYXJkSGFuZGxlci5vcHRpb25zID0gdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLmtleWJvYXJkSGFuZGxlci5vcHRpb25zO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAga2V5Ym9hcmRIYW5kbGVyLnNlbGVjdEVsZW1lbnQgPSB0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAga2V5Ym9hcmRIYW5kbGVyLm9wdGlvbnNHYXRoZXJlciA9IHRoaXMuc2VsZWN0T3B0aW9ucy5vcHRpb25zR2F0aGVyZXI7XHJcbiAgICAgICAga2V5Ym9hcmRIYW5kbGVyLmluaXRPcHRpb25zKCk7XHJcblxyXG4gICAgICAgIGlmKHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucyAmJiB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMua2V5Ym9hcmRIYW5kbGVyICYmIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5rZXlib2FyZEhhbmRsZXIuaW5zdGFuY2VDYWxsYmFjaylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5rZXlib2FyZEhhbmRsZXIuaW5zdGFuY2VDYWxsYmFjayhrZXlib2FyZEhhbmRsZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgcG9wdXAgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0gcG9wdXAgQ3JlYXRlZCBwb3B1cCB0aGF0IGlzIHJlbmRlcmVkXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldFBvcHVwQ29tcG9uZW50KHBvcHVwOiBQb3B1cClcclxuICAgIHtcclxuICAgICAgICBpZighcG9wdXApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9wbHVnaW5JbnN0YW5jZXNbUE9QVVBdID0gcG9wdXA7XHJcblxyXG4gICAgICAgIGlmKHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucyAmJiB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMucG9wdXAgJiYgdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLnBvcHVwLm9wdGlvbnMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwb3B1cC5vcHRpb25zID0gdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLnBvcHVwLm9wdGlvbnM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwb3B1cC5zZWxlY3RFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIHBvcHVwLm9wdGlvbnNHYXRoZXJlciA9IHRoaXMuc2VsZWN0T3B0aW9ucy5vcHRpb25zR2F0aGVyZXI7XHJcbiAgICAgICAgcG9wdXAudGVtcGxhdGVHYXRoZXJlciA9IHRoaXMuc2VsZWN0T3B0aW9ucy50ZW1wbGF0ZUdhdGhlcmVyO1xyXG4gICAgICAgIHBvcHVwLmluaXRPcHRpb25zKCk7XHJcblxyXG4gICAgICAgIGlmKHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucyAmJiB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMucG9wdXAgJiYgdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLnBvcHVwLmluc3RhbmNlQ2FsbGJhY2spXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMucG9wdXAuaW5zdGFuY2VDYWxsYmFjayhwb3B1cCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyBwb3NpdGlvbmVyIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHBvc2l0aW9uZXIgQ3JlYXRlZCBwb3NpdGlvbmVyIHRoYXQgaXMgcmVuZGVyZWRcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0UG9zaXRpb25lckNvbXBvbmVudChwb3NpdGlvbmVyOiBQb3NpdGlvbmVyKVxyXG4gICAge1xyXG4gICAgICAgIGlmKCFwb3NpdGlvbmVyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fcGx1Z2luSW5zdGFuY2VzW1BPU0lUSU9ORVJdID0gcG9zaXRpb25lcjtcclxuXHJcbiAgICAgICAgaWYodGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zICYmIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5wb3NpdGlvbmVyICYmIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5wb3NpdGlvbmVyLm9wdGlvbnMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwb3NpdGlvbmVyLm9wdGlvbnMgPSB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMucG9zaXRpb25lci5vcHRpb25zO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcG9zaXRpb25lci5zZWxlY3RFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIHBvc2l0aW9uZXIub3B0aW9uc0dhdGhlcmVyID0gdGhpcy5zZWxlY3RPcHRpb25zLm9wdGlvbnNHYXRoZXJlcjtcclxuICAgICAgICBwb3NpdGlvbmVyLmluaXRPcHRpb25zKCk7XHJcblxyXG4gICAgICAgIGlmKHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucyAmJiB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMucG9zaXRpb25lciAmJiB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMucG9zaXRpb25lci5pbnN0YW5jZUNhbGxiYWNrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLnBvc2l0aW9uZXIuaW5zdGFuY2VDYWxsYmFjayhwb3NpdGlvbmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRleHRzIGxvY2F0b3IgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0gdGV4dHNMb2NhdG9yIENyZWF0ZWQgdGV4dHMgbG9jYXRvciB0aGF0IGlzIHJlbmRlcmVkXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldFRleHRzTG9jYXRvckNvbXBvbmVudCh0ZXh0c0xvY2F0b3I6IFRleHRzTG9jYXRvcilcclxuICAgIHtcclxuICAgICAgICBpZighdGV4dHNMb2NhdG9yKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fcGx1Z2luSW5zdGFuY2VzW1RFWFRTX0xPQ0FUT1JdID0gdGV4dHNMb2NhdG9yO1xyXG5cclxuICAgICAgICBpZih0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMgJiYgdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLnRleHRzTG9jYXRvciAmJiB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMudGV4dHNMb2NhdG9yLm9wdGlvbnMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0ZXh0c0xvY2F0b3Iub3B0aW9ucyA9IHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy50ZXh0c0xvY2F0b3Iub3B0aW9ucztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRleHRzTG9jYXRvci5pbml0T3B0aW9ucygpO1xyXG5cclxuICAgICAgICBpZih0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMgJiYgdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLnRleHRzTG9jYXRvciAmJiB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMudGV4dHNMb2NhdG9yLmluc3RhbmNlQ2FsbGJhY2spXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMudGV4dHNMb2NhdG9yLmluc3RhbmNlQ2FsbGJhY2sodGV4dHNMb2NhdG9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHJlYWRvbmx5IHN0YXRlIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHJlYWRvbmx5U3RhdGUgQ3JlYXRlZCByZWFkb25seSBzdGF0ZSB0aGF0IGlzIHJlbmRlcmVkXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldFJlYWRvbmx5U3RhdGVDb21wb25lbnQocmVhZG9ubHlTdGF0ZTogUmVhZG9ubHlTdGF0ZSlcclxuICAgIHtcclxuICAgICAgICBpZighcmVhZG9ubHlTdGF0ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BsdWdpbkluc3RhbmNlc1tSRUFET05MWV9TVEFURV0gPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fcGx1Z2luSW5zdGFuY2VzW1JFQURPTkxZX1NUQVRFXSA9IHJlYWRvbmx5U3RhdGU7XHJcbiAgICAgICAgdGhpcy5fcGx1Z2luSW5zdGFuY2VzW05PUk1BTF9TVEFURV0gPSByZWFkb25seVN0YXRlO1xyXG5cclxuICAgICAgICBpZih0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMgJiYgdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLnJlYWRvbmx5U3RhdGUgJiYgdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLnJlYWRvbmx5U3RhdGUub3B0aW9ucylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJlYWRvbmx5U3RhdGUub3B0aW9ucyA9IHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5yZWFkb25seVN0YXRlLm9wdGlvbnM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHJlYWRvbmx5U3RhdGUub3B0aW9ucyBhcyBSZWFkb25seVN0YXRlT3B0aW9uczxhbnk+O1xyXG5cclxuICAgICAgICBvcHRpb25zLnJlYWRvbmx5ID0gdHJ1ZTtcclxuICAgICAgICByZWFkb25seVN0YXRlLmluaXRPcHRpb25zKCk7XHJcblxyXG4gICAgICAgIGlmKHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucyAmJiB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMucmVhZG9ubHlTdGF0ZSAmJiB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMucmVhZG9ubHlTdGF0ZS5pbnN0YW5jZUNhbGxiYWNrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLnJlYWRvbmx5U3RhdGUuaW5zdGFuY2VDYWxsYmFjayhyZWFkb25seVN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHZhbHVlIGhhbmRsZXIgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0gdmFsdWVIYW5kbGVyIENyZWF0ZWQgdmFsdWUgaGFuZGxlciB0aGF0IGlzIHJlbmRlcmVkXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldFZhbHVlSGFuZGxlckNvbXBvbmVudCh2YWx1ZUhhbmRsZXI6IFZhbHVlSGFuZGxlcjxUVmFsdWU+KVxyXG4gICAge1xyXG4gICAgICAgIGlmKCF2YWx1ZUhhbmRsZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9wbHVnaW5JbnN0YW5jZXNbVkFMVUVfSEFORExFUl0gPSB2YWx1ZUhhbmRsZXI7XHJcblxyXG4gICAgICAgIGlmKHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucyAmJiB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMudmFsdWVIYW5kbGVyICYmIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy52YWx1ZUhhbmRsZXIub3B0aW9ucylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhbHVlSGFuZGxlci5vcHRpb25zID0gdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLnZhbHVlSGFuZGxlci5vcHRpb25zO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFsdWVIYW5kbGVyLnZhbHVlQ29tcGFyZXIgPSB0aGlzLnNlbGVjdE9wdGlvbnMudmFsdWVDb21wYXJlcjtcclxuICAgICAgICB2YWx1ZUhhbmRsZXIub3B0aW9uc0dhdGhlcmVyID0gdGhpcy5zZWxlY3RPcHRpb25zLm9wdGlvbnNHYXRoZXJlcjtcclxuICAgICAgICB2YWx1ZUhhbmRsZXIuaW5pdE9wdGlvbnMoKTtcclxuXHJcbiAgICAgICAgaWYodGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zICYmIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy52YWx1ZUhhbmRsZXIgJiYgdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLnZhbHVlSGFuZGxlci5pbnN0YW5jZUNhbGxiYWNrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLnZhbHVlSGFuZGxlci5pbnN0YW5jZUNhbGxiYWNrKHZhbHVlSGFuZGxlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyBsaXZlIHNlYXJjaCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSBsaXZlU2VhcmNoIENyZWF0ZWQgbGl2ZSBzZWFyY2ggdGhhdCBpcyByZW5kZXJlZFxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXRMaXZlU2VhcmNoQ29tcG9uZW50KGxpdmVTZWFyY2g6IExpdmVTZWFyY2gpXHJcbiAgICB7XHJcbiAgICAgICAgaWYoIWxpdmVTZWFyY2gpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9wbHVnaW5JbnN0YW5jZXNbTElWRV9TRUFSQ0hdID0gbGl2ZVNlYXJjaDtcclxuXHJcbiAgICAgICAgaWYodGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zICYmIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5saXZlU2VhcmNoICYmIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5saXZlU2VhcmNoLm9wdGlvbnMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsaXZlU2VhcmNoLm9wdGlvbnMgPSB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMubGl2ZVNlYXJjaC5vcHRpb25zO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGl2ZVNlYXJjaC5pbml0T3B0aW9ucygpO1xyXG5cclxuICAgICAgICBpZih0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMgJiYgdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLmxpdmVTZWFyY2ggJiYgdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLmxpdmVTZWFyY2guaW5zdGFuY2VDYWxsYmFjaylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5saXZlU2VhcmNoLmluc3RhbmNlQ2FsbGJhY2sobGl2ZVNlYXJjaCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwdWJsaWMgbWV0aG9kcyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplIGNvbXBvbmVudCwgYXV0b21hdGljYWxseSBjYWxsZWQgb25jZSBpZiBub3QgYmxvY2tlZCBieSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbml0aWFsaXplKClcclxuICAgIHtcclxuICAgICAgICBsZXQgbGl2ZVNlYXJjaFBsdWdpbiA9IHRoaXMuX3BsdWdpbkluc3RhbmNlc1tMSVZFX1NFQVJDSF0gYXMgTGl2ZVNlYXJjaDtcclxuICAgICAgICB0aGlzLmxpdmVTZWFyY2hFbGVtZW50ID0gW1tsaXZlU2VhcmNoUGx1Z2luLmxpdmVTZWFyY2hFbGVtZW50XV07XHJcbiAgICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc2VsZWN0T3B0aW9ucy5vcHRpb25zR2F0aGVyZXIuaW5pdGlhbGl6ZUdhdGhlcmVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3BsdWdpbkluc3RhbmNlc1tMSVZFX1NFQVJDSF0uaW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgIHRoaXMuX3BsdWdpbkluc3RhbmNlc1tURVhUU19MT0NBVE9SXS5pbml0aWFsaXplKCk7XHJcbiAgICAgICAgdGhpcy5fcGx1Z2luSW5zdGFuY2VzW0tFWUJPQVJEX0hBTkRMRVJdLmluaXRpYWxpemUoKTtcclxuICAgICAgICB0aGlzLl9wbHVnaW5JbnN0YW5jZXNbVkFMVUVfSEFORExFUl0uaW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgIHRoaXMuX3BsdWdpbkluc3RhbmNlc1tOT1JNQUxfU1RBVEVdLmluaXRpYWxpemUoKTtcclxuICAgICAgICB0aGlzLl9wbHVnaW5JbnN0YW5jZXNbUE9QVVBdLmluaXRpYWxpemUoKTtcclxuICAgICAgICB0aGlzLl9wbHVnaW5JbnN0YW5jZXNbUE9TSVRJT05FUl0uaW5pdGlhbGl6ZSgpO1xyXG5cclxuICAgICAgICB0aGlzLmlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVkU3ViamVjdC5uZXh0KHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZSBvcHRpb25zLCBhdXRvbWF0aWNhbHkgY2FsbGVkIGR1cmluZyBpbml0IHBoYXNlLCBidXQgY2FuIGJlIHVzZWQgdG8gcmVpbml0aWFsaXplIE5nU2VsZWN0T3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5pdE9wdGlvbnMoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0T3B0aW9ucy5vcHRpb25zR2F0aGVyZXIubmdTZWxlY3RQbHVnaW5zID0gdGhpcy5fcGx1Z2luSW5zdGFuY2VzO1xyXG5cclxuICAgICAgICBpZih0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZih0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMubm9ybWFsU3RhdGUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5ub3JtYWxTdGF0ZS50eXBlID0gcmVzb2x2ZUZvcndhcmRSZWYodGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLm5vcm1hbFN0YXRlLnR5cGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuX3BsdWdpbkluc3RhbmNlc1tOT1JNQUxfU1RBVEVdKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucyAmJiB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMubm9ybWFsU3RhdGUgJiYgdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLm5vcm1hbFN0YXRlLm9wdGlvbnMpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wbHVnaW5JbnN0YW5jZXNbTk9STUFMX1NUQVRFXS5vcHRpb25zID0gdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLm5vcm1hbFN0YXRlLm9wdGlvbnM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgbm9ybWFsU3RhdGUgPSB0aGlzLl9wbHVnaW5JbnN0YW5jZXNbTk9STUFMX1NUQVRFXSBhcyBOb3JtYWxTdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICBub3JtYWxTdGF0ZS50ZW1wbGF0ZUdhdGhlcmVyID0gdGhpcy5zZWxlY3RPcHRpb25zLnRlbXBsYXRlR2F0aGVyZXI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BsdWdpbkluc3RhbmNlc1tOT1JNQUxfU1RBVEVdLmluaXRPcHRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy50ZXh0c0xvY2F0b3IpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy50ZXh0c0xvY2F0b3IudHlwZSA9IHJlc29sdmVGb3J3YXJkUmVmKHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy50ZXh0c0xvY2F0b3IudHlwZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5fcGx1Z2luSW5zdGFuY2VzW1RFWFRTX0xPQ0FUT1JdKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucyAmJiB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMudGV4dHNMb2NhdG9yICYmIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy50ZXh0c0xvY2F0b3Iub3B0aW9ucylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BsdWdpbkluc3RhbmNlc1tURVhUU19MT0NBVE9SXS5vcHRpb25zID0gdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLnRleHRzTG9jYXRvci5vcHRpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGx1Z2luSW5zdGFuY2VzW1RFWFRTX0xPQ0FUT1JdLmluaXRPcHRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5rZXlib2FyZEhhbmRsZXIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5rZXlib2FyZEhhbmRsZXIudHlwZSA9IHJlc29sdmVGb3J3YXJkUmVmKHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5rZXlib2FyZEhhbmRsZXIudHlwZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5fcGx1Z2luSW5zdGFuY2VzW0tFWUJPQVJEX0hBTkRMRVJdKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucyAmJiB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMua2V5Ym9hcmRIYW5kbGVyICYmIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5rZXlib2FyZEhhbmRsZXIub3B0aW9ucylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BsdWdpbkluc3RhbmNlc1tLRVlCT0FSRF9IQU5ETEVSXS5vcHRpb25zID0gdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLmtleWJvYXJkSGFuZGxlci5vcHRpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGtleWJvYXJkSGFuZGxlciA9IHRoaXMuX3BsdWdpbkluc3RhbmNlc1tLRVlCT0FSRF9IQU5ETEVSXSBhcyBLZXlib2FyZEhhbmRsZXI7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmRIYW5kbGVyLnNlbGVjdEVsZW1lbnQgPSB0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmRIYW5kbGVyLm9wdGlvbnNHYXRoZXJlciA9IHRoaXMuc2VsZWN0T3B0aW9ucy5vcHRpb25zR2F0aGVyZXI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BsdWdpbkluc3RhbmNlc1tLRVlCT0FSRF9IQU5ETEVSXS5pbml0T3B0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZih0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMucG9wdXApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5wb3B1cC50eXBlID0gcmVzb2x2ZUZvcndhcmRSZWYodGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLnBvcHVwLnR5cGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuX3BsdWdpbkluc3RhbmNlc1tQT1BVUF0pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zICYmIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5wb3B1cCAmJiB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMucG9wdXAub3B0aW9ucylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BsdWdpbkluc3RhbmNlc1tQT1BVUF0ub3B0aW9ucyA9IHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5wb3B1cC5vcHRpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBvcHVwID0gdGhpcy5fcGx1Z2luSW5zdGFuY2VzW1BPUFVQXSBhcyBQb3B1cDtcclxuICAgICAgICAgICAgICAgICAgICBwb3B1cC5zZWxlY3RFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIHBvcHVwLm9wdGlvbnNHYXRoZXJlciA9IHRoaXMuc2VsZWN0T3B0aW9ucy5vcHRpb25zR2F0aGVyZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9wdXAudGVtcGxhdGVHYXRoZXJlciA9IHRoaXMuc2VsZWN0T3B0aW9ucy50ZW1wbGF0ZUdhdGhlcmVyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wbHVnaW5JbnN0YW5jZXNbUE9QVVBdLmluaXRPcHRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5wb3NpdGlvbmVyKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMucG9zaXRpb25lci50eXBlID0gcmVzb2x2ZUZvcndhcmRSZWYodGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLnBvc2l0aW9uZXIudHlwZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5fcGx1Z2luSW5zdGFuY2VzW1BPU0lUSU9ORVJdKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucyAmJiB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMucG9zaXRpb25lciAmJiB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMucG9zaXRpb25lci5vcHRpb25zKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGx1Z2luSW5zdGFuY2VzW1BPU0lUSU9ORVJdLm9wdGlvbnMgPSB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMucG9zaXRpb25lci5vcHRpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBvc2l0aW9uZXIgPSB0aGlzLl9wbHVnaW5JbnN0YW5jZXNbUE9TSVRJT05FUl0gYXMgUG9zaXRpb25lcjtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbmVyLnNlbGVjdEVsZW1lbnQgPSB0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25lci5vcHRpb25zR2F0aGVyZXIgPSB0aGlzLnNlbGVjdE9wdGlvbnMub3B0aW9uc0dhdGhlcmVyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wbHVnaW5JbnN0YW5jZXNbUE9TSVRJT05FUl0uaW5pdE9wdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYodGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLnJlYWRvbmx5U3RhdGUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5yZWFkb25seVN0YXRlLnR5cGUgPSByZXNvbHZlRm9yd2FyZFJlZih0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMucmVhZG9ubHlTdGF0ZS50eXBlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLl9wbHVnaW5JbnN0YW5jZXNbUkVBRE9OTFlfU1RBVEVdKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucyAmJiB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMucmVhZG9ubHlTdGF0ZSAmJiB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMucmVhZG9ubHlTdGF0ZS5vcHRpb25zKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGx1Z2luSW5zdGFuY2VzW1JFQURPTkxZX1NUQVRFXS5vcHRpb25zID0gdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLnJlYWRvbmx5U3RhdGUub3B0aW9ucztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5fcGx1Z2luSW5zdGFuY2VzW1JFQURPTkxZX1NUQVRFXS5vcHRpb25zIGFzIFJlYWRvbmx5U3RhdGVPcHRpb25zPGFueT47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucmVhZG9ubHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BsdWdpbkluc3RhbmNlc1tSRUFET05MWV9TVEFURV0uaW5pdE9wdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYodGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLnZhbHVlSGFuZGxlcilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLnZhbHVlSGFuZGxlci50eXBlID0gcmVzb2x2ZUZvcndhcmRSZWYodGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLnZhbHVlSGFuZGxlci50eXBlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLl9wbHVnaW5JbnN0YW5jZXNbVkFMVUVfSEFORExFUl0pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zICYmIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy52YWx1ZUhhbmRsZXIgJiYgdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLnZhbHVlSGFuZGxlci5vcHRpb25zKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGx1Z2luSW5zdGFuY2VzW1ZBTFVFX0hBTkRMRVJdLm9wdGlvbnMgPSB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMudmFsdWVIYW5kbGVyLm9wdGlvbnM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWVIYW5kbGVyID0gdGhpcy5fcGx1Z2luSW5zdGFuY2VzW1ZBTFVFX0hBTkRMRVJdIGFzIFZhbHVlSGFuZGxlcjxUVmFsdWU+O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZUhhbmRsZXIudmFsdWVDb21wYXJlciA9IHRoaXMuc2VsZWN0T3B0aW9ucy52YWx1ZUNvbXBhcmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlSGFuZGxlci5vcHRpb25zR2F0aGVyZXIgPSB0aGlzLnNlbGVjdE9wdGlvbnMub3B0aW9uc0dhdGhlcmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BsdWdpbkluc3RhbmNlc1tWQUxVRV9IQU5ETEVSXS5pbml0T3B0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZih0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMubGl2ZVNlYXJjaClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zLmxpdmVTZWFyY2gudHlwZSA9IHJlc29sdmVGb3J3YXJkUmVmKHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5saXZlU2VhcmNoLnR5cGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuX3BsdWdpbkluc3RhbmNlc1tMSVZFX1NFQVJDSF0pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5fc2VsZWN0T3B0aW9ucy5wbHVnaW5zICYmIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5saXZlU2VhcmNoICYmIHRoaXMuX3NlbGVjdE9wdGlvbnMucGx1Z2lucy5saXZlU2VhcmNoLm9wdGlvbnMpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wbHVnaW5JbnN0YW5jZXNbTElWRV9TRUFSQ0hdLm9wdGlvbnMgPSB0aGlzLl9zZWxlY3RPcHRpb25zLnBsdWdpbnMubGl2ZVNlYXJjaC5vcHRpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGx1Z2luSW5zdGFuY2VzW0xJVkVfU0VBUkNIXS5pbml0T3B0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXhwbGljaXRseSBydW5zIGludmFsaWRhdGlvbiBvZiBjb250ZW50IChjaGFuZ2UgZGV0ZWN0aW9uKVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW52YWxpZGF0ZVZpc3VhbHMoKTogdm9pZFxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yLmRldGVjdENoYW5nZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgaW5zdGFuY2Ugb2YgcGx1Z2luIGJ5IGl0cyBpZFxyXG4gICAgICogQHBhcmFtIHBsdWdpbklkIElkIG9mIHBsdWdpbiwgdXNlIGNvbnN0YW50c1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0UGx1Z2luPFBsdWdpblR5cGUgZXh0ZW5kcyBOZ1NlbGVjdFBsdWdpbj4ocGx1Z2luSWQ6IHN0cmluZyk6IFBsdWdpblR5cGVcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcGx1Z2luSW5zdGFuY2VzW3BsdWdpbklkXSBhcyBQbHVnaW5UeXBlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXhlY3V0ZXMgYWN0aW9ucyBvbiBOZ1NlbGVjdFxyXG4gICAgICogQHBhcmFtIGFjdGlvbnMgQXJyYXkgb2YgYWN0aW9ucyB0aGF0IGFyZSBleGVjdXRlZCBvdmVyIE5nU2VsZWN0XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBleGVjdXRlKC4uLmFjdGlvbnM6IE5nU2VsZWN0QWN0aW9uPFRWYWx1ZT5bXSlcclxuICAgIHtcclxuICAgICAgICBpZighYWN0aW9ucylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFjdGlvbnMuZm9yRWFjaChhY3Rpb24gPT4gYWN0aW9uKHRoaXMpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEV4ZWN1dGVzIGZ1bmN0aW9uIG9uIE5nU2VsZWN0IGFuZCByZXR1cm5zIHJlc3VsdFxyXG4gICAgICogQHBhcmFtIGZ1bmMgRnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBhbmQgaXRzIHJlc3VsdCBpcyByZXR1cm5lZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZXhlY3V0ZUFuZFJldHVybjxUUmVzdWx0PihmdW5jOiBOZ1NlbGVjdEZ1bmN0aW9uPFRSZXN1bHQsIFRWYWx1ZT4pOiBUUmVzdWx0XHJcbiAgICB7XHJcbiAgICAgICAgaWYoIWZ1bmMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmdW5jKHRoaXMpO1xyXG4gICAgfVxyXG59Il19