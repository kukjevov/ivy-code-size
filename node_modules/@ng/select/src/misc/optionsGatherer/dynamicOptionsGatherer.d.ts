import { EventEmitter } from "@angular/core";
import { Subscription } from "rxjs";
import { OptionsGatherer } from "./optionsGatherer.interface";
import { NgSelectPluginInstances } from "../../components/select";
import { NgSelectOption } from "../../components/option";
import { DynamicOptionsGathererOptions } from "./dynamicOptionsGatherer.interface";
import { LiveSearch } from "../../plugins/liveSearch";
/**
 * Class that is used as for options gathering in dynamic way, for example from external source when writing
 */
export declare class DynamicOptionsGatherer<TValue> implements OptionsGatherer<TValue> {
    protected _options: DynamicOptionsGathererOptions<TValue>;
    /**
     * Live search plugin currently used in NgSelect
     */
    protected _liveSearch: LiveSearch;
    /**
     * Subscription for changes of live search value
     */
    protected _searchValueChangeSubscription: Subscription;
    /**
     * Minimal number of characters required for searching
     */
    protected _minLength: number;
    /**
     * Array of provided options for select
     */
    options: NgSelectOption<TValue>[];
    /**
     * Occurs when array of provided options has changed
     */
    optionsChange: EventEmitter<void>;
    /**
     * Array of visible, displayed options for select
     */
    readonly availableOptions: NgSelectOption<TValue>[];
    /**
     * Occurs when array of visible, displayed options has changed
     */
    readonly availableOptionsChange: EventEmitter<void>;
    /**
     * NgSelect plugin instances available for gatherer
     */
    ngSelectPlugins: NgSelectPluginInstances;
    constructor(_options: DynamicOptionsGathererOptions<TValue>);
    /**
     * Initialize gatherer during initialization phase
     */
    initializeGatherer(): void;
    /**
     * Called when gatherer needs to be destroyed
     */
    destroyGatherer(): void;
}
