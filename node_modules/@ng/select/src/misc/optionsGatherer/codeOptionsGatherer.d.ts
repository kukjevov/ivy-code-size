import { EventEmitter } from "@angular/core";
import { Subscription } from "rxjs";
import { OptionsGatherer, LiveSearchFilter } from "./optionsGatherer.interface";
import { NgSelectOption } from "../../components/option";
import { NgSelectPluginInstances } from "../../components/select";
import { LiveSearch } from "../../plugins/liveSearch";
/**
 * Options gatherer used for static options gathering from code
 */
export declare class CodeOptionsGatherer<TValue> implements OptionsGatherer<TValue> {
    private _liveSearchFilter?;
    /**
     * Array of visible, displayed options for select
     */
    private _availableOptions;
    /**
     * Array of provided options for select
     */
    private _options;
    /**
     * Occurs when array of visible, displayed options has changed
     */
    private _availableOptionsChange;
    /**
     * Live search plugin currently used in NgSelect
     */
    protected _liveSearch: LiveSearch;
    /**
     * Subscription for changes of live search value
     */
    protected _searchValueChangeSubscription: Subscription;
    /**
     * Array of provided options for select
     */
    options: NgSelectOption<TValue>[];
    /**
     * Occurs when array of provided options has changed
     */
    optionsChange: EventEmitter<void>;
    /**
     * Array of visible, displayed options for select
     */
    readonly availableOptions: NgSelectOption<TValue>[];
    /**
     * Occurs when array of visible, displayed options has changed
     */
    readonly availableOptionsChange: EventEmitter<void>;
    /**
     * NgSelect plugin instances available for gatherer
     */
    ngSelectPlugins: NgSelectPluginInstances;
    constructor(_liveSearchFilter?: LiveSearchFilter<TValue>);
    /**
     * Initialize gatherer during initialization phase
     */
    initializeGatherer(): void;
    /**
     * Called when gatherer needs to be destroyed
     */
    destroyGatherer(): void;
}
