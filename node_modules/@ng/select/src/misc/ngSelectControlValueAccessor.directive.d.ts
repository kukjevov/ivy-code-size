import { ControlValueAccessor } from '@angular/forms';
import { ExistingProvider, OnDestroy } from '@angular/core';
import { NgSelectComponent } from '../components/select/select.component';
/**
 * Provider for control value accessor
 * @internal
 */
export declare const NG_SELECT_VALUE_ACCESSOR: ExistingProvider;
/**
 * Control value accessor for NgSelectComponent
 */
export declare class NgSelectControlValueAccessor<TValue> implements ControlValueAccessor, OnDestroy {
    private _select;
    /**
     * Subscription for initialized status of NgSelect, used for writeValue
     */
    private _initializedSubscription;
    /**
     * Subscription for initialized status of NgSelect, used for registerOnChange
     */
    private _changeInitializedSubscription;
    /**
     * Subscription for initialized status of NgSelect, used for registerOnTouched
     */
    private _touchInitializedSubscription;
    /**
     * Subscription for initialized status of NgSelect, used for setDisabledState
     */
    private _disabledInitializedSubscription;
    /**
     * Subscription that looks for changes of select
     */
    private _changeSubscription;
    /**
     * Subscription that looks for changes of select
     */
    private _focusSubscription;
    /**
     * Last set value to this control
     */
    private _value;
    constructor(_select: NgSelectComponent<TValue>);
    /**
     * Sets value to select
     */
    writeValue(value: TValue | Array<TValue>): void;
    /**
     * Registers callback that is called when value of select changes
     */
    registerOnChange(fn: (data: TValue | Array<TValue>) => void): void;
    /**
     * Registers callback that is called when select is closed
     */
    registerOnTouched(fn: () => void): void;
    /**
     * Sets NgSelect as disabled/readonly
     * @param isDisabled Indication whether is control disabled or not
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * Called when component is destroyed
     */
    ngOnDestroy(): void;
}
