/// <reference types="positions" />
import { ElementRef, OnDestroy } from '@angular/core';
import { Subscription } from 'rxjs';
import { BasicPositionerOptions, BasicPositioner } from './basicPositioner.interface';
import { NgSelectPluginGeneric, OptionsGatherer } from '../../../misc';
import { NgSelectPluginInstances } from '../../../components/select';
import { Popup } from '../../popup';
/**
 * Component used for positioning popup element
 */
export declare class BasicPositionerComponent implements BasicPositioner, NgSelectPluginGeneric<BasicPositionerOptions>, OnDestroy {
    ngSelectPlugins: NgSelectPluginInstances;
    pluginElement: ElementRef;
    protected _document?: HTMLDocument;
    protected _platformId?: Object;
    /**
     * Instance of previous options gatherer, that is used for obtaining available options
     */
    protected _optionsGatherer: OptionsGatherer<any>;
    /**
     * Options for NgSelect plugin
     */
    protected _options: BasicPositionerOptions;
    /**
     * Subscription for visibility change of popup
     */
    protected _visibilitySubscription: Subscription;
    /**
     * Subscription for changes of options in options gatherer
     */
    protected _optionsChangeSubscription: Subscription;
    /**
     * Popup that is displayed
     */
    protected _popup: Popup;
    /**
     * Html element of popup plugin
     */
    protected _popupElement: HTMLElement;
    /**
     * Indication whether is code running in browser
     */
    protected _isBrowser: boolean;
    /**
     * Options for NgSelect plugin
     */
    options: BasicPositionerOptions;
    /**
     * HTML element that represents select itself
     */
    selectElement: HTMLElement;
    /**
     * Instance of options gatherer, that is used for obtaining available options
     */
    optionsGatherer: OptionsGatherer<any>;
    constructor(ngSelectPlugins: NgSelectPluginInstances, pluginElement: ElementRef, options?: BasicPositionerOptions, _document?: HTMLDocument, _platformId?: Object);
    /**
     * Called when component is destroyed
     */
    ngOnDestroy(): void;
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     */
    initialize(): void;
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     */
    initOptions(): void;
    /**
     * Explicitly runs invalidation of content (change detection)
     */
    invalidateVisuals(): void;
    /**
     * Handles resize and scroll event
     */
    protected _handleResizeAndScroll: () => void;
    /**
     * Handles position of popup
     */
    protected _handlePosition(): void;
    /**
     * Calculates positions and dimensions of popup
     */
    protected _calculatePositionAndDimensions(): void;
    /**
     * Updates height of element
     * @param popupElement Html element for popup div
     */
    protected _updateHeight(popupElement: HTMLElement): void;
    /**
     * Flips html element position if collision occur
     * @param popupElement Html element to be flipped if collisions occur
     */
    protected _flipIfCollision(popupElement: HTMLElement): [Positions.PositionsCss, Positions.PositionsCoordinates, Positions.PositionsCoordinates];
    /**
     * Flips vertical position
     * @param position Position to be flipped vertically
     */
    protected _flipVertiacal(position: Positions.PositionsCoordinates): Positions.PositionsCoordinates;
    /**
     * Flips horizontal position
     * @param position Position to be flipped horizontally
     */
    protected _flipHorizontal(position: Positions.PositionsCoordinates): Positions.PositionsCoordinates;
}
