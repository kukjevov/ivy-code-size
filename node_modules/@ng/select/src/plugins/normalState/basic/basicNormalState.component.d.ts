import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import { Subscription } from 'rxjs';
import { BasicNormalStateOptions, BasicNormalState } from './basicNormalState.interface';
import { NgSelectPluginGeneric, TemplateGatherer } from '../../../misc';
import { NgSelectPluginInstances } from '../../../components/select';
import { NormalStateTexts } from '../normalState.interface';
import { TextsLocator } from '../../textsLocator';
import { ValueHandler } from '../../valueHandler';
import { NgSelectOption } from '../../../components/option';
/**
 * Component used for rendering basic simple normal state of select
 */
export declare class BasicNormalStateComponent implements BasicNormalState, NgSelectPluginGeneric<BasicNormalStateOptions>, OnDestroy {
    ngSelectPlugins: NgSelectPluginInstances;
    pluginElement: ElementRef;
    protected _changeDetector: ChangeDetectorRef;
    /**
     * Texts locator used for handling texts
     */
    protected _textsLocator: TextsLocator;
    /**
     * Subscription for changes in texts
     */
    protected _textsChangedSubscription: Subscription;
    /**
     * Options for NgSelect plugin
     */
    protected _options: BasicNormalStateOptions;
    /**
     * Options for NgSelect plugin
     */
    options: BasicNormalStateOptions;
    /**
     * Occurs when user clicks on normal state
     */
    click: EventEmitter<void>;
    /**
     * Occurs when normal state gains focus
     */
    focus: EventEmitter<void>;
    /**
     * Occurs when user tries to cancel one of selected values
     */
    cancelOption: EventEmitter<NgSelectOption<any>>;
    /**
     * Gatherer used for obtaining custom templates
     */
    templateGatherer: TemplateGatherer;
    /**
     * Object containing available texts
     * @internal
     */
    texts: NormalStateTexts;
    /**
     * Value handler used in NgSelect
     * @internal
     */
    valueHandler: ValueHandler<any>;
    constructor(ngSelectPlugins: NgSelectPluginInstances, pluginElement: ElementRef, _changeDetector: ChangeDetectorRef, options?: BasicNormalStateOptions);
    /**
     * Called when component is destroyed
     */
    ngOnDestroy(): void;
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     */
    initialize(): void;
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     */
    initOptions(): void;
    /**
     * Explicitly runs invalidation of content (change detection)
     */
    invalidateVisuals(): void;
    /**
     * Initialize texts
     */
    protected _initTexts(): void;
}
