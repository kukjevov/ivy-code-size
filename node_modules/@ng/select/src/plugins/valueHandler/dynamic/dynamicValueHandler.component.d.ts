import { ElementRef } from '@angular/core';
import { DynamicValueHandlerOptions, DynamicValueHandler } from './dynamicValueHandler.interface';
import { NgSelectPluginInstances } from '../../../components/select';
import { ɵNgSelectOption } from '../../../components/option';
import { ValueHandlerBase } from '../valueHandlerBase';
/**
 * Component used for handling current value of NgSelect, allows values which are not present in options
 */
export declare class DynamicValueHandlerComponent<TValue> extends ValueHandlerBase<TValue, DynamicValueHandlerOptions<TValue>> implements DynamicValueHandler<TValue> {
    /**
     * Options for NgSelect plugin
     */
    options: DynamicValueHandlerOptions<TValue>;
    constructor(ngSelectPlugins: NgSelectPluginInstances, pluginElement: ElementRef, options?: DynamicValueHandlerOptions<TValue>);
    /**
     * Sets value for NgSelect
     * @param value Value to be set
     */
    setValue(value: TValue | TValue[]): void;
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     */
    initOptions(): void;
    /**
     * Explicitly runs invalidation of content (change detection)
     */
    invalidateVisuals(): void;
    /**
     * Sets value
     */
    protected _setValue: (option: ɵNgSelectOption<TValue>) => void;
    /**
     * Loads options
     */
    protected _loadOptions(): void;
    /**
     * Converts value to options
     * @param value Value to be changed to options
     */
    protected _useOptionsAsValue(value: TValue | TValue[]): Promise<void>;
    /**
     * Loads text for specified value
     * @param value Value that is going to be used for obtaining option
     */
    protected _loadText(value: TValue): Promise<ɵNgSelectOption<TValue>>;
}
