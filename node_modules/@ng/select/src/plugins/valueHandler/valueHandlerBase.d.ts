import { ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import { Subscription } from 'rxjs';
import { NgSelectPluginGeneric, OptionsGatherer, CompareValueFunc } from '../../misc';
import { NgSelectPluginInstances } from '../../components/select';
import { KeyboardHandler } from '../keyboardHandler';
import { Popup } from '../popup';
import { ɵNgSelectOption, NgSelectOption } from '../../components/option';
import { NormalState } from '../normalState';
import { ValueHandler, ValueHandlerOptions } from './valueHandler.interface';
/**
 * Base class for value handlers
 */
export declare abstract class ValueHandlerBase<TValue, TOptions extends ValueHandlerOptions> implements ValueHandler<TValue>, NgSelectPluginGeneric<TOptions>, OnDestroy {
    ngSelectPlugins: NgSelectPluginInstances;
    pluginElement: ElementRef;
    /**
     * Options for NgSelect plugin
     */
    protected _options: TOptions;
    /**
     * Keyboard handler that is used
     */
    protected _keyboardHandler: KeyboardHandler;
    /**
     * Popup that is used
     */
    protected _popup: Popup;
    /**
     * Normal state that is used
     */
    protected _normalState: NormalState;
    /**
     * Subscription for option selection using keyboard
     */
    protected _optionSelectSubscription: Subscription;
    /**
     * Subscription for option selection using mouse
     */
    protected _optionClickSubscription: Subscription;
    /**
     * Subscription for changes of options in options gatherer
     */
    protected _optionsChangeSubscription: Subscription;
    /**
     * Subscription for canceling an option
     */
    protected _cancelOptionSubscription: Subscription;
    /**
     * Instance of previous options gatherer, that is used for obtaining available options
     */
    protected _optionsGatherer: OptionsGatherer<TValue>;
    /**
     * Options for NgSelect plugin
     */
    abstract options: TOptions;
    /**
     * Occurs when value of NgSelect changes
     */
    valueChange: EventEmitter<void>;
    /**
     * Instance of options gatherer, that is used for obtaining available options
     */
    optionsGatherer: OptionsGatherer<TValue>;
    /**
     * Function of value comparer that is used for comparison of values
     */
    valueComparer: CompareValueFunc<TValue>;
    /**
     * Occurs when there is requested for change of visibility of popup using keyboard
     */
    popupVisibilityRequest: EventEmitter<boolean>;
    /**
     * Current value of NgSelect
     */
    selectedOptions: NgSelectOption<TValue> | NgSelectOption<TValue>[];
    /**
     * Current selected value of NgSelect
     */
    readonly value: TValue | TValue[];
    constructor(ngSelectPlugins: NgSelectPluginInstances, pluginElement: ElementRef);
    /**
     * Called when component is destroyed
     */
    ngOnDestroy(): void;
    /**
     * Sets value for NgSelect
     * @param value Value to be set
     */
    abstract setValue(value: TValue | TValue[]): void;
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     */
    initialize(): void;
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     */
    initOptions(): void;
    /**
     * Explicitly runs invalidation of content (change detection)
     */
    invalidateVisuals(): void;
    /**
     * Sets value
     */
    protected abstract _setValue: (option: ɵNgSelectOption<TValue>) => void;
    /**
     * Cancels, removes option from selected options
     * @param option Option to be canceled
     */
    protected _cancelValue: (option: ɵNgSelectOption<TValue>) => void;
    /**
     * Clears all selected values
     */
    protected _clearSelected(): void;
    /**
     * Marks current value as selected
     */
    protected _markValueAsSelected(): void;
    /**
     * Loads options
     */
    protected abstract _loadOptions(): void;
}
