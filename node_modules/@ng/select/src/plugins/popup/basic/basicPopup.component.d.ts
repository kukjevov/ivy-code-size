import { ChangeDetectorRef, ElementRef, OnDestroy, EventEmitter, QueryList, AfterViewInit } from '@angular/core';
import { Subscription } from 'rxjs';
import { BasicPopupOptions, BasicPopup } from './basicPopup.interface';
import { NgSelectPluginGeneric, OptionsGatherer, TemplateGatherer } from '../../../misc';
import { NgSelectPluginInstances } from '../../../components/select';
import { ɵNgSelectOption, NgSelectOption } from '../../../components/option';
import { NormalState } from '../../normalState';
import { KeyboardHandler } from '../../keyboardHandler';
import { ValueHandler } from '../../valueHandler';
/**
 * Component used for rendering basic popup with options
 */
export declare class BasicPopupComponent implements BasicPopup, NgSelectPluginGeneric<BasicPopupOptions>, AfterViewInit, OnDestroy {
    ngSelectPlugins: NgSelectPluginInstances;
    pluginElement: ElementRef;
    protected _changeDetector: ChangeDetectorRef;
    protected _document?: HTMLDocument;
    /**
     * Options for NgSelect plugin
     */
    protected _options: BasicPopupOptions;
    /**
     * Instance of previous options gatherer, that is used for obtaining available options
     */
    protected _optionsGatherer: OptionsGatherer<any>;
    /**
     * Subscription for changes of options in options gatherer
     */
    protected _optionsChangeSubscription: Subscription;
    /**
     * Subscription for click event on normal state
     */
    protected _clickSubscription: Subscription;
    /**
     * Subscription for popup visibility request from keyboard handler
     */
    protected _khPopupVisibilityRequestSubscription: Subscription;
    /**
     * Subscription for popup visibility request from value handler
     */
    protected _vhPopupVisibilityRequestSubscription: Subscription;
    /**
     * Normal state that is displayed
     */
    protected _normalState: NormalState;
    /**
     * Keyboard handler that is used
     */
    protected _keyboardHandler: KeyboardHandler;
    /**
     * Value handler that is used
     */
    protected _valueHandler: ValueHandler<any>;
    /**
     * Indication whether is popup visible
     */
    protected _popupVisible: boolean;
    /**
     * Options for NgSelect plugin
     */
    options: BasicPopupOptions;
    /**
     * Instance of options gatherer, that is used for obtaining available options
     */
    optionsGatherer: OptionsGatherer<any>;
    /**
     * Gatherer used for obtaining custom templates
     */
    templateGatherer: TemplateGatherer;
    /**
     * HTML element that represents select itself
     */
    selectElement: HTMLElement;
    /**
     * Occurs when user clicks on option, clicked options is passed as argument
     */
    optionClick: EventEmitter<NgSelectOption<any>>;
    /**
     * Occurs when visibility of popup has changed
     */
    visibilityChange: EventEmitter<void>;
    /**
     * Html element that represents popup itself
     */
    readonly popupElement: HTMLElement;
    /**
     * Array of select options available
     * @internal
     */
    selectOptions: ɵNgSelectOption<any>[];
    /**
     * Watch for visibility of popup div element
     * @internal
     */
    popupElementChildren: QueryList<ElementRef<HTMLElement>>;
    constructor(ngSelectPlugins: NgSelectPluginInstances, pluginElement: ElementRef, _changeDetector: ChangeDetectorRef, options?: BasicPopupOptions, _document?: HTMLDocument);
    /**
     * Called when view was initialized
     */
    ngAfterViewInit(): void;
    /**
     * Called when component is destroyed
     */
    ngOnDestroy(): void;
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     */
    initialize(): void;
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     */
    initOptions(): void;
    /**
     * Explicitly runs invalidation of content (change detection)
     */
    invalidateVisuals(): void;
    /**
     * Loads options
     */
    protected loadOptions(): void;
    /**
     * Toggles popup visibility
     */
    protected togglePopup(): void;
    /**
     * Handles click outside of select element
     * @param event Mouse event object
     */
    protected _handleClickOutside: (event: MouseEvent) => void;
    /**
     * Handles visibility change
     */
    protected _handleVisibilityChange: (visible: boolean) => void;
}
