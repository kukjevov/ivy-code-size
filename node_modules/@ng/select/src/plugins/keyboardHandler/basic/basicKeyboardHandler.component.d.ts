import { ElementRef, OnDestroy, EventEmitter } from '@angular/core';
import { BasicKeyboardHandlerOptions, BasicKeyboardHandler } from './basicKeyboardHandler.interface';
import { NgSelectPluginGeneric, OptionsGatherer } from '../../../misc';
import { NgSelectPluginInstances } from '../../../components/select';
import { ɵNgSelectOption, NgSelectOption } from '../../../components/option';
import { Popup } from '../../popup';
/**
 * Component used for obtaining basic keyboard handler html element
 */
export declare class BasicKeyboardHandlerComponent implements BasicKeyboardHandler, NgSelectPluginGeneric<BasicKeyboardHandlerOptions>, OnDestroy {
    ngSelectPlugins: NgSelectPluginInstances;
    pluginElement: ElementRef;
    /**
     * Options for NgSelect plugin
     */
    protected _options: BasicKeyboardHandlerOptions;
    /**
     * Popup that is displayed
     */
    protected _popup: Popup;
    /**
     * Gets currently available options
     */
    protected readonly availableOptions: ɵNgSelectOption<any>[];
    /**
     * Options for NgSelect plugin
     */
    options: BasicKeyboardHandlerOptions;
    /**
     * HTML element that represents select itself
     */
    selectElement: HTMLElement;
    /**
     * Instance of options gatherer, that is used for obtaining available options
     */
    optionsGatherer: OptionsGatherer<any>;
    /**
     * Occurs when there is requested for change of visibility of popup using keyboard
     */
    popupVisibilityRequest: EventEmitter<boolean>;
    /**
     * Occurs when option was selected using keyboard
     */
    optionSelect: EventEmitter<NgSelectOption<any>>;
    constructor(ngSelectPlugins: NgSelectPluginInstances, pluginElement: ElementRef, options?: BasicKeyboardHandlerOptions);
    /**
     * Called when component is destroyed
     */
    ngOnDestroy(): void;
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     */
    initialize(): void;
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     */
    initOptions(): void;
    /**
     * Explicitly runs invalidation of content (change detection)
     */
    invalidateVisuals(): void;
    /**
     * Handles keyboard event
     * @param event Keyboard event that occured
     */
    protected _handleKeyboard: (event: KeyboardEvent) => void;
}
