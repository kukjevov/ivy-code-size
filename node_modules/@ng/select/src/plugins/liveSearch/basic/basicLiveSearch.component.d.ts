import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import { Subscription } from 'rxjs';
import { BasicLiveSearchOptions, BasicLiveSearch } from './basicLiveSearch.interface';
import { NgSelectPluginGeneric } from '../../../misc';
import { NgSelectPluginInstances } from '../../../components/select';
import { LiveSearchTexts } from '../liveSearch.interface';
import { TextsLocator } from '../../textsLocator';
import { Popup } from '../../popup';
/**
 * Component used for obtaining basic live search html element
 */
export declare class BasicLiveSearchComponent implements BasicLiveSearch, NgSelectPluginGeneric<BasicLiveSearchOptions>, OnDestroy {
    ngSelectPlugins: NgSelectPluginInstances;
    pluginElement: ElementRef;
    protected _changeDetector: ChangeDetectorRef;
    /**
     * Texts locator used for handling texts
     */
    protected _textsLocator: TextsLocator;
    /**
     * Popup used in NgSelect
     */
    protected _popup: Popup;
    /**
     * Subscription for changes in texts
     */
    protected _textsChangedSubscription: Subscription;
    /**
     * Subscription for changes of popup visibility
     */
    protected _visibilityChangeSubscription: Subscription;
    /**
     * Options for NgSelect plugin
     */
    protected _options: BasicLiveSearchOptions;
    /**
     * Options for NgSelect plugin
     */
    options: BasicLiveSearchOptions;
    /**
     * HTML element that represents live search
     */
    readonly liveSearchElement: HTMLElement;
    /**
     * Current value of live search
     */
    searchValue: string;
    /**
     * Occurs when current value of live search changes
     */
    searchValueChange: EventEmitter<void>;
    /**
     * Object containing available texts
     * @internal
     */
    texts: LiveSearchTexts;
    /**
     * View child that represents live search element
     * @internal
     */
    liveSearchElementChild: ElementRef<HTMLElement>;
    constructor(ngSelectPlugins: NgSelectPluginInstances, pluginElement: ElementRef, _changeDetector: ChangeDetectorRef, options?: BasicLiveSearchOptions);
    /**
     * Called when component is destroyed
     */
    ngOnDestroy(): void;
    /**
     * Initialize plugin, to be ready to use, initialize communication with other plugins
     */
    initialize(): void;
    /**
     * Initialize plugin options, all operations required to be done with plugin options are handled here
     */
    initOptions(): void;
    /**
     * Explicitly runs invalidation of content (change detection)
     */
    invalidateVisuals(): void;
    /**
     * Handle input value
     * @param value Value of input
     * @internal
     */
    handleInput(value: string): void;
    /**
     * Initialize texts
     */
    protected _initTexts(): void;
}
