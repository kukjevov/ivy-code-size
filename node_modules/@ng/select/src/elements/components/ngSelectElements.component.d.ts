import { ChangeDetectorRef, ElementRef } from "@angular/core";
import { NgSelectComponent, NgSelectOptions, NgSelectAction, NgSelectFunction, NgSelectPluginInstances, NgSelectPlugin, CodeOptionsGatherer } from "@ng/select";
import { Observable } from "rxjs";
import { NgSelectWebComponent } from "./ngSelectElements.interface";
/**
 * Component that represents WebComponent implementation of NgSelect
 */
export declare class NgSelectElementsComponent<TValue> extends NgSelectComponent<TValue> implements NgSelectWebComponent<TValue> {
    protected pluginInstances: NgSelectPluginInstances;
    /**
     * Mutation observer, that observes ng-options
     */
    protected _optionsObserver: MutationObserver;
    /**
     * Options gatherer used for NgSelect WebComponent
     */
    protected _codeOptionsGatherer: CodeOptionsGatherer<TValue>;
    /**
     * Occurs every time when NgSelect is initialized or reinitialized, if value is false NgSelect was not initialized yet
     */
    readonly initializedWC: Observable<boolean>;
    /**
     * Gets current state of initialization
     */
    readonly isInitializedWC: boolean;
    /**
     * Gets or sets NgSelect options
     */
    selectOptionsWC: NgSelectOptions<TValue>;
    constructor(changeDetector: ChangeDetectorRef, element: ElementRef<HTMLElement>, pluginInstances: NgSelectPluginInstances, readonly?: string, disabled?: string, multiple?: string);
    /**
     * Called when component is destroyed
     */
    ngOnDestroy(): void;
    /**
     * Initialize component, automatically called once if not blocked by options
     */
    initializeWC: () => void;
    /**
     * Initialize options, automaticaly called during init phase, but can be used to reinitialize NgSelectOptions
     */
    initOptionsWC: () => void;
    /**
     * Gets instance of plugin by its id
     * @param pluginId Id of plugin, use constants
     */
    getPluginWC: <PluginType extends NgSelectPlugin>(pluginId: string) => PluginType;
    /**
     * Explicitly runs invalidation of content (change detection)
     */
    invalidateVisualsWC: () => void;
    /**
     * Executes actions on NgSelect
     * @param actions Array of actions that are executed over NgSelect
     */
    executeWC: (...actions: NgSelectAction<TValue>[]) => void;
    /**
     * Executes function on NgSelect and returns result
     * @param func Function that is executed and its result is returned
     */
    executeAndReturnWC: <TResult>(func: NgSelectFunction<TResult, TValue>) => TResult;
}
