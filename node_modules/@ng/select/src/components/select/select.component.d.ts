import { ChangeDetectorRef, Type, AfterViewInit, OnInit, QueryList, EventEmitter, ElementRef, OnChanges, SimpleChanges, OnDestroy, TemplateRef } from "@angular/core";
import { BehaviorSubject, Observable, Subscription } from "rxjs";
import { NgSelectOptions, NgSelectPlugin, OptionsGatherer, TemplateGatherer } from "../../misc";
import { NgSelect, NgSelectPluginInstances, NgSelectAction, NgSelectFunction } from "./select.interface";
import { KeyboardHandler } from "../../plugins/keyboardHandler";
import { NormalState, NormalStateContext } from "../../plugins/normalState";
import { Popup, PopupContext } from "../../plugins/popup";
import { Positioner } from "../../plugins/positioner";
import { ReadonlyState } from "../../plugins/readonlyState";
import { ValueHandler } from "../../plugins/valueHandler";
import { LiveSearch } from "../../plugins/liveSearch";
import { TextsLocator } from "../../plugins/textsLocator";
import { NgSelectOption, NgSelectOptGroup } from "../option";
/**
 * NgSelect plugin instances factory method
 * @internal
 */
export declare function ngSelectPluginInstancesFactory(): {};
/**
 * Component that represents NgSelect itself, allows selection of value from options
 */
export declare class NgSelectComponent<TValue> implements NgSelect<TValue>, OnChanges, OnInit, AfterViewInit, OnDestroy, OptionsGatherer<TValue>, TemplateGatherer {
    protected _changeDetector: ChangeDetectorRef;
    protected _element: ElementRef<HTMLElement>;
    protected _pluginInstances: NgSelectPluginInstances;
    /**
     * NgSelect options
     */
    protected _selectOptions: NgSelectOptions<TValue>;
    /**
     * Subject used for indication that NgSelect was initialized
     */
    protected _initializedSubject: BehaviorSubject<boolean>;
    /**
     * Occurs when array of provided options has changed
     */
    protected _optionsChange: EventEmitter<void>;
    /**
     * Occurs when array of visible, displayed options has changed
     */
    protected _availableOptionsChange: EventEmitter<void>;
    /**
     * Array of available options to be displayed
     */
    protected _availableOptions: NgSelectOption<TValue>[];
    /**
     * Live search plugin currently used in NgSelect
     */
    protected _liveSearch: LiveSearch;
    /**
     * Subscription for changes of live search value
     */
    protected _searchValueChangeSubscription: Subscription;
    /**
     * Gets or sets NgSelect options
     */
    selectOptions: NgSelectOptions<TValue>;
    /**
     * Indication whether should be NgSelect disabled or not
     */
    disabled: boolean;
    /**
     * Indication whether should be NgSelect readonly or not
     */
    readonly: boolean;
    /**
     * Occurs every time when NgSelect is initialized or reinitialized, if value is false NgSelect was not initialized yet
     */
    readonly initialized: Observable<boolean>;
    /**
     * Gets current state of initialization
     */
    isInitialized: boolean;
    /**
     * Template used within normal state
     * @internal
     */
    normalStateTemplate: TemplateRef<NormalStateContext>;
    /**
     * Template that is used within Popup as option
     * @internal
     */
    optionTemplate?: TemplateRef<PopupContext>;
    /**
     * Array of provided options for select
     * @internal
     */
    readonly options: NgSelectOption<TValue>[];
    /**
     * Occurs when array of provided options has changed
     * @internal
     */
    readonly optionsChange: EventEmitter<void>;
    /**
     * Array of visible, displayed options for select
     * @internal
     */
    readonly availableOptions: NgSelectOption<TValue>[];
    /**
     * Occurs when array of visible, displayed options has changed
     * @internal
     */
    readonly availableOptionsChange: EventEmitter<void>;
    /**
     * NgSelect plugin instances available for gatherer
     * @internal
     */
    ngSelectPlugins: NgSelectPluginInstances;
    /**
     * Element used for live search
     * @internal
     */
    liveSearchElement: HTMLElement[][];
    /**
     * Options children found inside ng-select
     * @internal
     */
    optionsChildren: QueryList<NgSelectOption<any>>;
    /**
     * Options groups children found inside ng-select
     * @internal
     */
    optGroupsChildren: QueryList<NgSelectOptGroup<any>>;
    constructor(_changeDetector: ChangeDetectorRef, _element: ElementRef<HTMLElement>, _pluginInstances: NgSelectPluginInstances, options?: NgSelectOptions<TValue>, normalStateType?: Type<NormalState>, keyboardHandlerType?: Type<KeyboardHandler>, popupType?: Type<Popup>, positionerType?: Type<Positioner>, readonlyStateType?: Type<ReadonlyState>, valueHandlerType?: Type<ValueHandler<any>>, liveSearchType?: Type<LiveSearch>, textsLocatorType?: Type<TextsLocator>, readonly?: string, disabled?: string, multiple?: string);
    /**
     * Called when input value changes
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Initialize component
     */
    ngOnInit(): void;
    /**
     * Called when view was initialized
     */
    ngAfterViewInit(): void;
    /**
     * Called when component is destroyed
     */
    ngOnDestroy(): void;
    /**
     * Initialize gatherer during initialization phase
     * @internal
     */
    initializeGatherer(): void;
    /**
     * Called when gatherer needs to be destroyed
     * @internal
     */
    destroyGatherer(): void;
    /**
     * Sets normal state component
     * @param normalState Created normal state that is rendered
     * @internal
     */
    setNormalStateComponent(normalState: NormalState): void;
    /**
     * Sets keyboard handler component
     * @param keyboardHandler Created keyboard handler that is rendered
     * @internal
     */
    setKeyboardHandlerComponent(keyboardHandler: KeyboardHandler): void;
    /**
     * Sets popup component
     * @param popup Created popup that is rendered
     * @internal
     */
    setPopupComponent(popup: Popup): void;
    /**
     * Sets positioner component
     * @param positioner Created positioner that is rendered
     * @internal
     */
    setPositionerComponent(positioner: Positioner): void;
    /**
     * Sets texts locator component
     * @param textsLocator Created texts locator that is rendered
     * @internal
     */
    setTextsLocatorComponent(textsLocator: TextsLocator): void;
    /**
     * Sets readonly state component
     * @param readonlyState Created readonly state that is rendered
     * @internal
     */
    setReadonlyStateComponent(readonlyState: ReadonlyState): void;
    /**
     * Sets value handler component
     * @param valueHandler Created value handler that is rendered
     * @internal
     */
    setValueHandlerComponent(valueHandler: ValueHandler<TValue>): void;
    /**
     * Sets live search component
     * @param liveSearch Created live search that is rendered
     * @internal
     */
    setLiveSearchComponent(liveSearch: LiveSearch): void;
    /**
     * Initialize component, automatically called once if not blocked by options
     */
    initialize(): void;
    /**
     * Initialize options, automaticaly called during init phase, but can be used to reinitialize NgSelectOptions
     */
    initOptions(): void;
    /**
     * Explicitly runs invalidation of content (change detection)
     */
    invalidateVisuals(): void;
    /**
     * Gets instance of plugin by its id
     * @param pluginId Id of plugin, use constants
     */
    getPlugin<PluginType extends NgSelectPlugin>(pluginId: string): PluginType;
    /**
     * Executes actions on NgSelect
     * @param actions Array of actions that are executed over NgSelect
     */
    execute(...actions: NgSelectAction<TValue>[]): void;
    /**
     * Executes function on NgSelect and returns result
     * @param func Function that is executed and its result is returned
     */
    executeAndReturn<TResult>(func: NgSelectFunction<TResult, TValue>): TResult;
}
