/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { IgnoredInterceptorsService } from '@ng/common';
import { Observable } from 'rxjs';
import { catchError } from 'rxjs/operators';
/**
 * SuppressAuthInterceptor used for intercepting http responses and suppressing 401, 403 statuses
 */
var SuppressAuthInterceptor = /** @class */ (function () {
    //######################### constructors #########################
    function SuppressAuthInterceptor(_ignoredInterceptorsService) {
        this._ignoredInterceptorsService = _ignoredInterceptorsService;
    }
    //######################### public methods - implementation of HttpInterceptor #########################
    /**
     * Intercepts http request
     * @param req Request to be intercepted
     * @param next Next middleware that can be called for next processing
     */
    //######################### public methods - implementation of HttpInterceptor #########################
    /**
     * Intercepts http request
     * @param {?} req Request to be intercepted
     * @param {?} next Next middleware that can be called for next processing
     * @return {?}
     */
    SuppressAuthInterceptor.prototype.intercept = 
    //######################### public methods - implementation of HttpInterceptor #########################
    /**
     * Intercepts http request
     * @param {?} req Request to be intercepted
     * @param {?} next Next middleware that can be called for next processing
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        return next.handle(req).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            return (/** @type {?} */ (Observable.create((/**
             * @param {?} observer
             * @return {?}
             */
            function (observer) {
                //client error, not response from server, or is ignored
                if (err.error instanceof Error ||
                    (_this._ignoredInterceptorsService && _this._ignoredInterceptorsService.isIgnored(SuppressAuthInterceptor, req))) {
                    observer.error(err);
                    observer.complete();
                    return;
                }
                //if auth error
                if (err.status == 403 || err.status == 401) {
                    observer.complete();
                    return;
                }
                //other errors
                observer.error(err);
                observer.complete();
            }))));
        })));
    };
    SuppressAuthInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SuppressAuthInterceptor.ctorParameters = function () { return [
        { type: IgnoredInterceptorsService }
    ]; };
    return SuppressAuthInterceptor;
}());
export { SuppressAuthInterceptor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SuppressAuthInterceptor.prototype._ignoredInterceptorsService;
}
/**
 * Provider for proper use of SuppressAuthInterceptor, use this provider to inject this interceptor
 * @type {?}
 */
export var SUPPRESS_AUTH_INTERCEPTOR_PROVIDER = {
    provide: HTTP_INTERCEPTORS,
    multi: true,
    useClass: SuppressAuthInterceptor
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwcHJlc3NBdXRoSW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc3VwcHJlc3NBdXRoSW50ZXJjZXB0b3Ivc3VwcHJlc3NBdXRoSW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBZ0IsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hELE9BQU8sRUFBa0IsaUJBQWlCLEVBQXlCLE1BQU0sc0JBQXNCLENBQUM7QUFDaEcsT0FBTyxFQUFDLDBCQUEwQixFQUFrQyxNQUFNLFlBQVksQ0FBQztBQUN2RixPQUFPLEVBQUMsVUFBVSxFQUE0QixNQUFNLE1BQU0sQ0FBQztBQUMzRCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFLMUM7SUFHSSxrRUFBa0U7SUFDbEUsaUNBQW9CLDJCQUF1RDtRQUF2RCxnQ0FBMkIsR0FBM0IsMkJBQTJCLENBQTRCO0lBRTNFLENBQUM7SUFFRCx3R0FBd0c7SUFFeEc7Ozs7T0FJRzs7Ozs7Ozs7SUFDSSwyQ0FBUzs7Ozs7Ozs7SUFBaEIsVUFBaUIsR0FBeUMsRUFBRSxJQUFpQjtRQUE3RSxpQkE2QkM7UUEzQkcsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVOzs7O1FBQUMsVUFBQyxHQUFHO1lBRXhDLE9BQU8sbUJBQUEsVUFBVSxDQUFDLE1BQU07Ozs7WUFBQyxVQUFDLFFBQXVCO2dCQUU3Qyx1REFBdUQ7Z0JBQ3ZELElBQUksR0FBRyxDQUFDLEtBQUssWUFBWSxLQUFLO29CQUMxQixDQUFDLEtBQUksQ0FBQywyQkFBMkIsSUFBSSxLQUFJLENBQUMsMkJBQTJCLENBQUMsU0FBUyxDQUFDLHVCQUF1QixFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQ2xIO29CQUNJLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ3BCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztvQkFFcEIsT0FBTztpQkFDVjtnQkFFRCxlQUFlO2dCQUNmLElBQUcsR0FBRyxDQUFDLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxHQUFHLEVBQ3pDO29CQUNJLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztvQkFFcEIsT0FBTztpQkFDVjtnQkFFRCxjQUFjO2dCQUNkLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3BCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN4QixDQUFDLEVBQUMsRUFBbUMsQ0FBQztRQUMxQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQ1IsQ0FBQzs7Z0JBNUNKLFVBQVU7Ozs7Z0JBUEgsMEJBQTBCOztJQW9EbEMsOEJBQUM7Q0FBQSxBQTdDRCxJQTZDQztTQTVDWSx1QkFBdUI7Ozs7OztJQUdwQiw4REFBK0Q7Ozs7OztBQThDL0UsTUFBTSxLQUFPLGtDQUFrQyxHQUMvQztJQUNJLE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsS0FBSyxFQUFFLElBQUk7SUFDWCxRQUFRLEVBQUUsdUJBQXVCO0NBQ3BDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDbGFzc1Byb3ZpZGVyLCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtIdHRwSW50ZXJjZXB0b3IsIEhUVFBfSU5URVJDRVBUT1JTLCBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7SWdub3JlZEludGVyY2VwdG9yc1NlcnZpY2UsIEh0dHBSZXF1ZXN0SWdub3JlZEludGVyY2VwdG9ySWR9IGZyb20gJ0BuZy9jb21tb24nO1xyXG5pbXBvcnQge09ic2VydmFibGUsIE9ic2VydmFibGVJbnB1dCwgT2JzZXJ2ZXJ9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQge2NhdGNoRXJyb3J9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbi8qKlxyXG4gKiBTdXBwcmVzc0F1dGhJbnRlcmNlcHRvciB1c2VkIGZvciBpbnRlcmNlcHRpbmcgaHR0cCByZXNwb25zZXMgYW5kIHN1cHByZXNzaW5nIDQwMSwgNDAzIHN0YXR1c2VzXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBTdXBwcmVzc0F1dGhJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvclxyXG57XHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgY29uc3RydWN0b3JzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2lnbm9yZWRJbnRlcmNlcHRvcnNTZXJ2aWNlOiBJZ25vcmVkSW50ZXJjZXB0b3JzU2VydmljZSlcclxuICAgIHtcclxuICAgIH1cclxuXHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIG1ldGhvZHMgLSBpbXBsZW1lbnRhdGlvbiBvZiBIdHRwSW50ZXJjZXB0b3IgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW50ZXJjZXB0cyBodHRwIHJlcXVlc3RcclxuICAgICAqIEBwYXJhbSByZXEgUmVxdWVzdCB0byBiZSBpbnRlcmNlcHRlZFxyXG4gICAgICogQHBhcmFtIG5leHQgTmV4dCBtaWRkbGV3YXJlIHRoYXQgY2FuIGJlIGNhbGxlZCBmb3IgbmV4dCBwcm9jZXNzaW5nXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdElnbm9yZWRJbnRlcmNlcHRvcklkPGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj5cclxuICAgIHtcclxuICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKS5waXBlKGNhdGNoRXJyb3IoKGVycikgPT5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZSgob2JzZXJ2ZXI6IE9ic2VydmVyPGFueT4pID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vY2xpZW50IGVycm9yLCBub3QgcmVzcG9uc2UgZnJvbSBzZXJ2ZXIsIG9yIGlzIGlnbm9yZWRcclxuICAgICAgICAgICAgICAgIGlmIChlcnIuZXJyb3IgaW5zdGFuY2VvZiBFcnJvciB8fCBcclxuICAgICAgICAgICAgICAgICAgICAodGhpcy5faWdub3JlZEludGVyY2VwdG9yc1NlcnZpY2UgJiYgdGhpcy5faWdub3JlZEludGVyY2VwdG9yc1NlcnZpY2UuaXNJZ25vcmVkKFN1cHByZXNzQXV0aEludGVyY2VwdG9yLCByZXEpKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL2lmIGF1dGggZXJyb3JcclxuICAgICAgICAgICAgICAgIGlmKGVyci5zdGF0dXMgPT0gNDAzIHx8IGVyci5zdGF0dXMgPT0gNDAxKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7ICAgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy9vdGhlciBlcnJvcnNcclxuICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICB9KSBhcyBPYnNlcnZhYmxlSW5wdXQ8SHR0cEV2ZW50PGFueT4+O1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFByb3ZpZGVyIGZvciBwcm9wZXIgdXNlIG9mIFN1cHByZXNzQXV0aEludGVyY2VwdG9yLCB1c2UgdGhpcyBwcm92aWRlciB0byBpbmplY3QgdGhpcyBpbnRlcmNlcHRvclxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFNVUFBSRVNTX0FVVEhfSU5URVJDRVBUT1JfUFJPVklERVI6IENsYXNzUHJvdmlkZXIgPVxyXG57XHJcbiAgICBwcm92aWRlOiBIVFRQX0lOVEVSQ0VQVE9SUyxcclxuICAgIG11bHRpOiB0cnVlLFxyXG4gICAgdXNlQ2xhc3M6IFN1cHByZXNzQXV0aEludGVyY2VwdG9yXHJcbn07Il19