/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { AuthenticationService } from './authentication.service';
import * as i0 from "@angular/core";
import * as i1 from "./authentication.service";
/**
 * Routing guard that is used for authorization of user
 */
var AuthGuard = /** @class */ (function () {
    //######################### constructor #########################
    function AuthGuard(authService) {
        this.authService = authService;
    }
    //######################### implementation of CanActivate #########################
    /**
     * Tests whether component can be activated
     * @param next Information about next coming route
     * @param state Information about router state
     * @returns Observable
     */
    //######################### implementation of CanActivate #########################
    /**
     * Tests whether component can be activated
     * @param {?} next Information about next coming route
     * @return {?} Observable
     */
    AuthGuard.prototype.canActivate = 
    //######################### implementation of CanActivate #########################
    /**
     * Tests whether component can be activated
     * @param {?} next Information about next coming route
     * @return {?} Observable
     */
    function (next) {
        var _this = this;
        /** @type {?} */
        var component = (/** @type {?} */ (next.component));
        /** @type {?} */
        var permission = component.permissionName;
        return Observable.create((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            _this.authService
                .getUserIdentity()
                .catch((/**
             * @return {?}
             */
            function () {
                console.error("Unexpected error in AuthGuard!");
                observer.next(false);
                observer.complete();
                return;
            }))
                .then((/**
             * @param {?} userData
             * @return {?}
             */
            function (userData) {
                if (userData) {
                    if (userData.permissions.indexOf(permission) < 0 && userData.isAuthenticated) {
                        _this.authService.showAccessDenied();
                        observer.next(false);
                        observer.complete();
                        return;
                    }
                    else if (userData.permissions.indexOf(permission) < 0 && !userData.isAuthenticated && !_this.authService.isAuthPage()) {
                        _this.authService.showAuthPage();
                        observer.next(false);
                        observer.complete();
                        return;
                    }
                    observer.next(true);
                    observer.complete();
                    return;
                }
                console.warn("No UserData in AuthGuard!");
                observer.next(false);
                observer.complete();
            }));
        }));
    };
    AuthGuard.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    AuthGuard.ctorParameters = function () { return [
        { type: AuthenticationService }
    ]; };
    /** @nocollapse */ AuthGuard.ngInjectableDef = i0.defineInjectable({ factory: function AuthGuard_Factory() { return new AuthGuard(i0.inject(i1.AuthenticationService)); }, token: AuthGuard, providedIn: "root" });
    return AuthGuard;
}());
export { AuthGuard };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthGuard.prototype.authService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb24vYXV0aC5ndWFyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUMsVUFBVSxFQUFXLE1BQU0sTUFBTSxDQUFDO0FBRTFDLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLDBCQUEwQixDQUFDOzs7Ozs7QUFNL0Q7SUFHSSxpRUFBaUU7SUFDakUsbUJBQW9CLFdBQXVDO1FBQXZDLGdCQUFXLEdBQVgsV0FBVyxDQUE0QjtJQUUzRCxDQUFDO0lBRUQsbUZBQW1GO0lBRW5GOzs7OztPQUtHOzs7Ozs7O0lBQ0gsK0JBQVc7Ozs7Ozs7SUFBWCxVQUFZLElBQTRCO1FBQXhDLGlCQWlEQzs7WUEvQ08sU0FBUyxHQUFvQyxtQkFBSyxJQUFJLENBQUMsU0FBUyxFQUFBOztZQUNoRSxVQUFVLEdBQVcsU0FBUyxDQUFDLGNBQWM7UUFFakQsT0FBTyxVQUFVLENBQUMsTUFBTTs7OztRQUFDLFVBQUMsUUFBMkI7WUFFakQsS0FBSSxDQUFDLFdBQVc7aUJBQ1gsZUFBZSxFQUFFO2lCQUNqQixLQUFLOzs7WUFBQztnQkFFSCxPQUFPLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7Z0JBQ2hELFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3JCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFFcEIsT0FBTztZQUNYLENBQUMsRUFBQztpQkFDRCxJQUFJOzs7O1lBQUMsVUFBQSxRQUFRO2dCQUVWLElBQUcsUUFBUSxFQUNYO29CQUNJLElBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxlQUFlLEVBQzNFO3dCQUNJLEtBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQzt3QkFDcEMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDckIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO3dCQUVwQixPQUFPO3FCQUNWO3lCQUNJLElBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsSUFBSSxDQUFDLEtBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLEVBQ25IO3dCQUNJLEtBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7d0JBQ2hDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBQ3JCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQzt3QkFFcEIsT0FBTztxQkFDVjtvQkFFRCxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNwQixRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7b0JBRXBCLE9BQU87aUJBQ1Y7Z0JBRUQsT0FBTyxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO2dCQUMxQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNyQixRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDeEIsQ0FBQyxFQUFDLENBQUM7UUFDWCxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7O2dCQWpFSixVQUFVLFNBQUMsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDOzs7O2dCQU54QixxQkFBcUI7OztvQkFKN0I7Q0E0RUMsQUFsRUQsSUFrRUM7U0FqRVksU0FBUzs7Ozs7O0lBR04sZ0NBQStDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtDYW5BY3RpdmF0ZSwgQWN0aXZhdGVkUm91dGVTbmFwc2hvdH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHtPYnNlcnZhYmxlLCBPYnNlcnZlcn0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQge0F1dGhlbnRpY2F0aW9uU2VydmljZX0gZnJvbSAnLi9hdXRoZW50aWNhdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHtBdXRob3JpemF0aW9uRGVjb3JhdGVkQ29tcG9uZW50fSBmcm9tICcuL2F1dGhvcml6ZS5kZWNvcmF0b3InO1xyXG5cclxuLyoqXHJcbiAqIFJvdXRpbmcgZ3VhcmQgdGhhdCBpcyB1c2VkIGZvciBhdXRob3JpemF0aW9uIG9mIHVzZXJcclxuICovXHJcbkBJbmplY3RhYmxlKHtwcm92aWRlZEluOiAncm9vdCd9KVxyXG5leHBvcnQgY2xhc3MgQXV0aEd1YXJkIGltcGxlbWVudHMgQ2FuQWN0aXZhdGVcclxue1xyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIGNvbnN0cnVjdG9yICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXV0aFNlcnZpY2U6IEF1dGhlbnRpY2F0aW9uU2VydmljZTxhbnk+KVxyXG4gICAge1xyXG4gICAgfVxyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBpbXBsZW1lbnRhdGlvbiBvZiBDYW5BY3RpdmF0ZSAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyB3aGV0aGVyIGNvbXBvbmVudCBjYW4gYmUgYWN0aXZhdGVkXHJcbiAgICAgKiBAcGFyYW0gbmV4dCBJbmZvcm1hdGlvbiBhYm91dCBuZXh0IGNvbWluZyByb3V0ZVxyXG4gICAgICogQHBhcmFtIHN0YXRlIEluZm9ybWF0aW9uIGFib3V0IHJvdXRlciBzdGF0ZVxyXG4gICAgICogQHJldHVybnMgT2JzZXJ2YWJsZVxyXG4gICAgICovXHJcbiAgICBjYW5BY3RpdmF0ZShuZXh0OiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KSA6IE9ic2VydmFibGU8Ym9vbGVhbj5cclxuICAgIHtcclxuICAgICAgICBsZXQgY29tcG9uZW50OiBBdXRob3JpemF0aW9uRGVjb3JhdGVkQ29tcG9uZW50ID0gPGFueT5uZXh0LmNvbXBvbmVudDtcclxuICAgICAgICBsZXQgcGVybWlzc2lvbjogc3RyaW5nID0gY29tcG9uZW50LnBlcm1pc3Npb25OYW1lO1xyXG5cclxuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUoKG9ic2VydmVyOiBPYnNlcnZlcjxib29sZWFuPikgPT5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuYXV0aFNlcnZpY2VcclxuICAgICAgICAgICAgICAgIC5nZXRVc2VySWRlbnRpdHkoKVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKCgpID0+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlVuZXhwZWN0ZWQgZXJyb3IgaW4gQXV0aEd1YXJkIVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4odXNlckRhdGEgPT5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZih1c2VyRGF0YSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHVzZXJEYXRhLnBlcm1pc3Npb25zLmluZGV4T2YocGVybWlzc2lvbikgPCAwICYmIHVzZXJEYXRhLmlzQXV0aGVudGljYXRlZClcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXRoU2VydmljZS5zaG93QWNjZXNzRGVuaWVkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYodXNlckRhdGEucGVybWlzc2lvbnMuaW5kZXhPZihwZXJtaXNzaW9uKSA8IDAgJiYgIXVzZXJEYXRhLmlzQXV0aGVudGljYXRlZCAmJiAhdGhpcy5hdXRoU2VydmljZS5pc0F1dGhQYWdlKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXV0aFNlcnZpY2Uuc2hvd0F1dGhQYWdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIk5vIFVzZXJEYXRhIGluIEF1dGhHdWFyZCFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59Il19