/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, Injector } from '@angular/core';
import { isFunction, isArray, isBlank } from '@asseco/common';
import { Observable, Subject, empty } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { AUTHENTICATION_SERVICE_OPTIONS } from './authenticationServiceOptions.interface';
import * as i0 from "@angular/core";
import * as i1 from "./authenticationServiceOptions.interface";
/**
 * Factory used for creating AuthenticationService
 * @param {?} options Options passed to created service
 * @return {?}
 */
export function authenticationServiceFactory(options) {
    if (isBlank(options) ||
        isBlank(options.getUserIdentity) || !isFunction(options.getUserIdentity) ||
        isBlank(options.login) || !isFunction(options.login) ||
        isBlank(options.logout) || !isFunction(options.logout) ||
        isBlank(options.isAuthPage) || !isFunction(options.isAuthPage) ||
        isBlank(options.showAccessDenied) || !isFunction(options.showAccessDenied) ||
        isBlank(options.showAuthPage) || !isFunction(options.showAuthPage)) {
        throw new Error("Options must be set and must implement AuthenticationServiceOptions");
    }
    return new AuthenticationService(options);
}
/**
 * Authentication service managing authentication
 * @template TUserInfo
 */
var AuthenticationService = /** @class */ (function () {
    //######################### constructor #########################
    //TODO - report bug, this is HACK to be compilable
    function AuthenticationService(_options) {
        var _this = this;
        this._options = _options;
        /**
         * Subject used for indicating authenticationChanged
         */
        this._authenticationChangedSubject = new Subject();
        this.isInitialized = new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) { return _this._isInitializedResolver = resolve; }));
    }
    Object.defineProperty(AuthenticationService.prototype, "authenticationChanged", {
        /**
         * Gets observable that indicates when authentication has changed
         */
        get: /**
         * Gets observable that indicates when authentication has changed
         * @return {?}
         */
        function () {
            return this._authenticationChangedSubject.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    //######################### public methods #########################
    /**
     * Tests whether is used authorized for specified permission
     * @param permission Permission name that is tested
     * @returns Promise<boolean> True if user is authorized otherwise false
     */
    //######################### public methods #########################
    /**
     * Tests whether is used authorized for specified permission
     * @param {?} permission Permission name that is tested
     * @return {?} Promise<boolean> True if user is authorized otherwise false
     */
    AuthenticationService.prototype.isAuthorized = 
    //######################### public methods #########################
    /**
     * Tests whether is used authorized for specified permission
     * @param {?} permission Permission name that is tested
     * @return {?} Promise<boolean> True if user is authorized otherwise false
     */
    function (permission) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.getUserIdentity()
                .then((/**
             * @param {?} userIdentity
             * @return {?}
             */
            function (userIdentity) {
                if (isArray(userIdentity.permissions)) {
                    if (userIdentity.permissions.indexOf(permission) > -1) {
                        resolve(true);
                    }
                    else {
                        resolve(false);
                    }
                }
                else {
                    resolve(false);
                }
            }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return reject(error); }));
        }));
    };
    /**
     * Gets user identity
     * @param refresh? Indication that server get user identity should be called, otherwise cached response will be used
     * @returns Promise
     */
    /**
     * Gets user identity
     * @param {?=} refresh
     * @return {?} Promise
     */
    AuthenticationService.prototype.getUserIdentity = /**
     * Gets user identity
     * @param {?=} refresh
     * @return {?} Promise
     */
    function (refresh) {
        var _this = this;
        if (refresh === true) {
            this._authenticationPromise = null;
        }
        if (this._authenticationPromise != null) {
            return this._authenticationPromise;
        }
        this._authenticationPromise = new Promise((/**
         * @param {?} success
         * @param {?} reject
         * @return {?}
         */
        function (success, reject) {
            _this._options
                .getUserIdentity()
                .pipe(catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                reject(error);
                _this._isInitializedResolver(true);
                return empty();
            })))
                .subscribe((/**
             * @param {?} itm
             * @return {?}
             */
            function (itm) {
                success(itm);
                _this._authenticationChangedSubject.next(itm);
                _this._isInitializedResolver(true);
            }));
        }));
        return this._authenticationPromise;
    };
    /**
     * Method logs user into system
     * @param accessToken Access token holding authentication information
     * @returns Observable
     */
    /**
     * Method logs user into system
     * @param {?} accessToken Access token holding authentication information
     * @return {?} Observable
     */
    AuthenticationService.prototype.login = /**
     * Method logs user into system
     * @param {?} accessToken Access token holding authentication information
     * @return {?} Observable
     */
    function (accessToken) {
        var _this = this;
        return Observable.create((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            _this._options.login(accessToken)
                .subscribe((/**
             * @return {?}
             */
            function () {
                _this.getUserIdentity(true)
                    .then((/**
                 * @return {?}
                 */
                function () {
                    observer.next(null);
                }));
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                observer.error(error);
            }));
        }));
    };
    /**
     * Methods logs out user out of system
     * @returns Observable
     */
    /**
     * Methods logs out user out of system
     * @return {?} Observable
     */
    AuthenticationService.prototype.logout = /**
     * Methods logs out user out of system
     * @return {?} Observable
     */
    function () {
        var _this = this;
        return Observable.create((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            _this._options.logout()
                .subscribe((/**
             * @return {?}
             */
            function () {
                _this.getUserIdentity(true)
                    .then((/**
                 * @return {?}
                 */
                function () {
                    observer.next(null);
                }));
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                observer.error(error);
            }));
        }));
    };
    /**
     * Redirects current page to authentication page
     */
    /**
     * Redirects current page to authentication page
     * @return {?}
     */
    AuthenticationService.prototype.showAuthPage = /**
     * Redirects current page to authentication page
     * @return {?}
     */
    function () {
        return this._options.showAuthPage();
    };
    /**
     * Redirects current page to access denied page
     */
    /**
     * Redirects current page to access denied page
     * @return {?}
     */
    AuthenticationService.prototype.showAccessDenied = /**
     * Redirects current page to access denied page
     * @return {?}
     */
    function () {
        return this._options.showAccessDenied();
    };
    /**
     * Gets indicatio whether current state of app is displaying login page
     * @returns boolean
     */
    /**
     * Gets indicatio whether current state of app is displaying login page
     * @return {?} boolean
     */
    AuthenticationService.prototype.isAuthPage = /**
     * Gets indicatio whether current state of app is displaying login page
     * @return {?} boolean
     */
    function () {
        return this._options.isAuthPage();
    };
    AuthenticationService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root', deps: [AUTHENTICATION_SERVICE_OPTIONS], useFactory: authenticationServiceFactory },] }
    ];
    /** @nocollapse */
    AuthenticationService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [Injector,] }] }
    ]; };
    /** @nocollapse */ AuthenticationService.ngInjectableDef = i0.defineInjectable({ factory: function AuthenticationService_Factory() { return authenticationServiceFactory(i0.inject(i1.AUTHENTICATION_SERVICE_OPTIONS)); }, token: AuthenticationService, providedIn: "root" });
    return AuthenticationService;
}());
export { AuthenticationService };
if (false) {
    /**
     * Authentication promise that was used for authentication
     * @type {?}
     * @private
     */
    AuthenticationService.prototype._authenticationPromise;
    /**
     * Resolved function for isInitialized
     * @type {?}
     * @private
     */
    AuthenticationService.prototype._isInitializedResolver;
    /**
     * Subject used for indicating authenticationChanged
     * @type {?}
     * @private
     */
    AuthenticationService.prototype._authenticationChangedSubject;
    /**
     * Indication whether is authentication module initialized or not
     * @type {?}
     */
    AuthenticationService.prototype.isInitialized;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype._options;
}
//# sourceMappingURL=data:application/json;base64,