var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken, Injector } from '@angular/core';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { isBlank } from '@asseco/common';
import { IgnoredInterceptorsService } from '@ng/common';
import { Observable } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
/**
 * Configuration object that is used by AuthInterceptor, overriding its properties allows you to customize configuration
 * @abstract
 */
var /**
 * Configuration object that is used by AuthInterceptor, overriding its properties allows you to customize configuration
 * @abstract
 */
AuthInterceptorConfig = /** @class */ (function () {
    function AuthInterceptorConfig() {
    }
    return AuthInterceptorConfig;
}());
/**
 * Configuration object that is used by AuthInterceptor, overriding its properties allows you to customize configuration
 * @abstract
 */
export { AuthInterceptorConfig };
if (false) {
    /**
     * Gets indication whether is user authenticated or not
     * @abstract
     * @return {?} boolean
     */
    AuthInterceptorConfig.prototype.isAuthenticated = function () { };
    /**
     * Gets indication whether request was done from authentication page
     * @abstract
     * @return {?} boolean
     */
    AuthInterceptorConfig.prototype.isAuthPage = function () { };
    /**
     * Redirects current page to authentication page
     * @abstract
     * @return {?}
     */
    AuthInterceptorConfig.prototype.showAuthPage = function () { };
    /**
     * Redirects current page to access denied page
     * @abstract
     * @return {?}
     */
    AuthInterceptorConfig.prototype.showAccessDenied = function () { };
}
/**
 * Token used for injecting custom configuration for AuthInterceptor
 * @type {?}
 */
export var AUTH_INTERCEPTOR_CONFIG = new InjectionToken("auth-interceptor-config");
/**
 * AuthInterceptor used for intercepting http responses and handling 401, 403 statuses
 */
var /**
 * AuthInterceptor used for intercepting http responses and handling 401, 403 statuses
 */
AuthInterceptor = /** @class */ (function () {
    //######################### constructors #########################
    function AuthInterceptor(_config, _ignoredInterceptorsService) {
        this._config = _config;
        this._ignoredInterceptorsService = _ignoredInterceptorsService;
        //######################### private fields #########################
        /**
         * Counter for requests in progress
         */
        this._requestsInProgress = 0;
        /**
         * Indication whether is handling of 401, 403 blocked because one request is already handled
         */
        this._blocked = false;
    }
    Object.defineProperty(AuthInterceptor.prototype, "requestsInProgress", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this._requestsInProgress;
        },
        //######################### private properties #########################
        /**
         * Counter for requests in progress
         */
        set: 
        //######################### private properties #########################
        /**
         * Counter for requests in progress
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._requestsInProgress = value;
            if (value < 1) {
                this._blocked = false;
                this._requestsInProgress = 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    //######################### public methods - implementation of HttpInterceptor #########################
    /**
     * Intercepts http request
     * @param req Request to be intercepted
     * @param next Next middleware that can be called for next processing
     */
    //######################### public methods - implementation of HttpInterceptor #########################
    /**
     * Intercepts http request
     * @param {?} req Request to be intercepted
     * @param {?} next Next middleware that can be called for next processing
     * @return {?}
     */
    AuthInterceptor.prototype.intercept = 
    //######################### public methods - implementation of HttpInterceptor #########################
    /**
     * Intercepts http request
     * @param {?} req Request to be intercepted
     * @param {?} next Next middleware that can be called for next processing
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        this.requestsInProgress++;
        return next.handle(req).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            return (/** @type {?} */ (Observable.create((/**
             * @param {?} observer
             * @return {?}
             */
            function (observer) {
                //client error, not response from server, or is ignored
                if (err.error instanceof Error ||
                    (_this._ignoredInterceptorsService && _this._ignoredInterceptorsService.isIgnored(AuthInterceptor, req))) {
                    observer.error(err);
                    observer.complete();
                    return;
                }
                //if auth error
                if (err.status == 403 || err.status == 401) {
                    if (_this._blocked) {
                        observer.error(err);
                        observer.complete();
                        return;
                    }
                    _this._blocked = true;
                    //auth error from auth page
                    if (_this._config.isAuthPage()) {
                        observer.error(err);
                        observer.complete();
                        return;
                    }
                    //auth error from other pages
                    _this._config.isAuthenticated()
                        .then((/**
                     * @param {?} isAuthenticated
                     * @return {?}
                     */
                    function (isAuthenticated) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!isAuthenticated) return [3 /*break*/, 2];
                                    return [4 /*yield*/, this._config.showAccessDenied()];
                                case 1:
                                    _a.sent();
                                    observer.complete();
                                    return [2 /*return*/];
                                case 2: 
                                //show auth page, user not authenticated
                                return [4 /*yield*/, this._config.showAuthPage()];
                                case 3:
                                    //show auth page, user not authenticated
                                    _a.sent();
                                    observer.complete();
                                    return [2 /*return*/];
                            }
                        });
                    }); }))
                        .catch((/**
                     * @return {?}
                     */
                    function () { return observer.complete(); }));
                    return;
                }
                //other errors
                observer.error(err);
                observer.complete();
            }))));
        })), tap((/**
         * @return {?}
         */
        function () { return _this.requestsInProgress--; }), (/**
         * @return {?}
         */
        function () { return _this.requestsInProgress--; })));
    };
    return AuthInterceptor;
}());
/**
 * AuthInterceptor used for intercepting http responses and handling 401, 403 statuses
 */
export { AuthInterceptor };
if (false) {
    /**
     * Counter for requests in progress
     * @type {?}
     * @private
     */
    AuthInterceptor.prototype._requestsInProgress;
    /**
     * Indication whether is handling of 401, 403 blocked because one request is already handled
     * @type {?}
     * @private
     */
    AuthInterceptor.prototype._blocked;
    /**
     * @type {?}
     * @private
     */
    AuthInterceptor.prototype._config;
    /**
     * @type {?}
     * @private
     */
    AuthInterceptor.prototype._ignoredInterceptorsService;
}
/**
 * Factory used for creating auth interceptor
 * @param {?} config Configuration for auth interceptor
 * @param {?} injector
 * @return {?}
 */
export function authInterceptorProviderFactory(config, injector) {
    if (isBlank(config) || !(config instanceof AuthInterceptorConfig)) {
        throw new Error("Provided configuration for 'AuthInterceptor' is not of type 'AutInterceptorConfig', you must provide one!");
    }
    return new AuthInterceptor(config, injector.get(IgnoredInterceptorsService));
}
;
/**
 * Provider for proper use of AuthInterceptor, use this provider to inject this interceptor
 * @type {?}
 */
export var AUTH_INTERCEPTOR_PROVIDER = {
    provide: HTTP_INTERCEPTORS,
    multi: true,
    useFactory: authInterceptorProviderFactory,
    deps: [AUTH_INTERCEPTOR_CONFIG, Injector]
};
//# sourceMappingURL=data:application/json;base64,