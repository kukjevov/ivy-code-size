/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { IgnoredInterceptorsService } from '@ng/common';
import { Observable } from 'rxjs';
import { catchError } from 'rxjs/operators';
/**
 * SuppressAuthInterceptor used for intercepting http responses and suppressing 401, 403 statuses
 */
export class SuppressAuthInterceptor {
    //######################### constructors #########################
    /**
     * @param {?} _ignoredInterceptorsService
     */
    constructor(_ignoredInterceptorsService) {
        this._ignoredInterceptorsService = _ignoredInterceptorsService;
    }
    //######################### public methods - implementation of HttpInterceptor #########################
    /**
     * Intercepts http request
     * @param {?} req Request to be intercepted
     * @param {?} next Next middleware that can be called for next processing
     * @return {?}
     */
    intercept(req, next) {
        return next.handle(req).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            return (/** @type {?} */ (Observable.create((/**
             * @param {?} observer
             * @return {?}
             */
            (observer) => {
                //client error, not response from server, or is ignored
                if (err.error instanceof Error ||
                    (this._ignoredInterceptorsService && this._ignoredInterceptorsService.isIgnored(SuppressAuthInterceptor, req))) {
                    observer.error(err);
                    observer.complete();
                    return;
                }
                //if auth error
                if (err.status == 403 || err.status == 401) {
                    observer.complete();
                    return;
                }
                //other errors
                observer.error(err);
                observer.complete();
            }))));
        })));
    }
}
SuppressAuthInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SuppressAuthInterceptor.ctorParameters = () => [
    { type: IgnoredInterceptorsService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SuppressAuthInterceptor.prototype._ignoredInterceptorsService;
}
/**
 * Provider for proper use of SuppressAuthInterceptor, use this provider to inject this interceptor
 * @type {?}
 */
export const SUPPRESS_AUTH_INTERCEPTOR_PROVIDER = {
    provide: HTTP_INTERCEPTORS,
    multi: true,
    useClass: SuppressAuthInterceptor
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwcHJlc3NBdXRoSW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc3VwcHJlc3NBdXRoSW50ZXJjZXB0b3Ivc3VwcHJlc3NBdXRoSW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBZ0IsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hELE9BQU8sRUFBa0IsaUJBQWlCLEVBQXlCLE1BQU0sc0JBQXNCLENBQUM7QUFDaEcsT0FBTyxFQUFDLDBCQUEwQixFQUFrQyxNQUFNLFlBQVksQ0FBQztBQUN2RixPQUFPLEVBQUMsVUFBVSxFQUE0QixNQUFNLE1BQU0sQ0FBQztBQUMzRCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFNMUMsTUFBTSxPQUFPLHVCQUF1Qjs7Ozs7SUFHaEMsWUFBb0IsMkJBQXVEO1FBQXZELGdDQUEyQixHQUEzQiwyQkFBMkIsQ0FBNEI7SUFFM0UsQ0FBQzs7Ozs7Ozs7SUFTTSxTQUFTLENBQUMsR0FBeUMsRUFBRSxJQUFpQjtRQUV6RSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVU7Ozs7UUFBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBRTVDLE9BQU8sbUJBQUEsVUFBVSxDQUFDLE1BQU07Ozs7WUFBQyxDQUFDLFFBQXVCLEVBQUUsRUFBRTtnQkFFakQsdURBQXVEO2dCQUN2RCxJQUFJLEdBQUcsQ0FBQyxLQUFLLFlBQVksS0FBSztvQkFDMUIsQ0FBQyxJQUFJLENBQUMsMkJBQTJCLElBQUksSUFBSSxDQUFDLDJCQUEyQixDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUNsSDtvQkFDSSxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNwQixRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7b0JBRXBCLE9BQU87aUJBQ1Y7Z0JBRUQsZUFBZTtnQkFDZixJQUFHLEdBQUcsQ0FBQyxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUksR0FBRyxFQUN6QztvQkFDSSxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7b0JBRXBCLE9BQU87aUJBQ1Y7Z0JBRUQsY0FBYztnQkFDZCxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNwQixRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDeEIsQ0FBQyxFQUFDLEVBQW1DLENBQUM7UUFDMUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUNSLENBQUM7OztZQTVDSixVQUFVOzs7O1lBUEgsMEJBQTBCOzs7Ozs7O0lBV2xCLDhEQUErRDs7Ozs7O0FBOEMvRSxNQUFNLE9BQU8sa0NBQWtDLEdBQy9DO0lBQ0ksT0FBTyxFQUFFLGlCQUFpQjtJQUMxQixLQUFLLEVBQUUsSUFBSTtJQUNYLFFBQVEsRUFBRSx1QkFBdUI7Q0FDcEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NsYXNzUHJvdmlkZXIsIEluamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0h0dHBJbnRlcmNlcHRvciwgSFRUUF9JTlRFUkNFUFRPUlMsIEh0dHBFdmVudCwgSHR0cEhhbmRsZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHtJZ25vcmVkSW50ZXJjZXB0b3JzU2VydmljZSwgSHR0cFJlcXVlc3RJZ25vcmVkSW50ZXJjZXB0b3JJZH0gZnJvbSAnQG5nL2NvbW1vbic7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZSwgT2JzZXJ2YWJsZUlucHV0LCBPYnNlcnZlcn0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7Y2F0Y2hFcnJvcn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuLyoqXHJcbiAqIFN1cHByZXNzQXV0aEludGVyY2VwdG9yIHVzZWQgZm9yIGludGVyY2VwdGluZyBodHRwIHJlc3BvbnNlcyBhbmQgc3VwcHJlc3NpbmcgNDAxLCA0MDMgc3RhdHVzZXNcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFN1cHByZXNzQXV0aEludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yXHJcbntcclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBjb25zdHJ1Y3RvcnMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfaWdub3JlZEludGVyY2VwdG9yc1NlcnZpY2U6IElnbm9yZWRJbnRlcmNlcHRvcnNTZXJ2aWNlKVxyXG4gICAge1xyXG4gICAgfVxyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwdWJsaWMgbWV0aG9kcyAtIGltcGxlbWVudGF0aW9uIG9mIEh0dHBJbnRlcmNlcHRvciAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbnRlcmNlcHRzIGh0dHAgcmVxdWVzdFxyXG4gICAgICogQHBhcmFtIHJlcSBSZXF1ZXN0IHRvIGJlIGludGVyY2VwdGVkXHJcbiAgICAgKiBAcGFyYW0gbmV4dCBOZXh0IG1pZGRsZXdhcmUgdGhhdCBjYW4gYmUgY2FsbGVkIGZvciBuZXh0IHByb2Nlc3NpbmdcclxuICAgICAqL1xyXG4gICAgcHVibGljIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0SWdub3JlZEludGVyY2VwdG9ySWQ8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PlxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpLnBpcGUoY2F0Y2hFcnJvcigoZXJyKSA9PlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKChvYnNlcnZlcjogT2JzZXJ2ZXI8YW55PikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy9jbGllbnQgZXJyb3IsIG5vdCByZXNwb25zZSBmcm9tIHNlcnZlciwgb3IgaXMgaWdub3JlZFxyXG4gICAgICAgICAgICAgICAgaWYgKGVyci5lcnJvciBpbnN0YW5jZW9mIEVycm9yIHx8IFxyXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLl9pZ25vcmVkSW50ZXJjZXB0b3JzU2VydmljZSAmJiB0aGlzLl9pZ25vcmVkSW50ZXJjZXB0b3JzU2VydmljZS5pc0lnbm9yZWQoU3VwcHJlc3NBdXRoSW50ZXJjZXB0b3IsIHJlcSkpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vaWYgYXV0aCBlcnJvclxyXG4gICAgICAgICAgICAgICAgaWYoZXJyLnN0YXR1cyA9PSA0MDMgfHwgZXJyLnN0YXR1cyA9PSA0MDEpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTsgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL290aGVyIGVycm9yc1xyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgIH0pIGFzIE9ic2VydmFibGVJbnB1dDxIdHRwRXZlbnQ8YW55Pj47XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogUHJvdmlkZXIgZm9yIHByb3BlciB1c2Ugb2YgU3VwcHJlc3NBdXRoSW50ZXJjZXB0b3IsIHVzZSB0aGlzIHByb3ZpZGVyIHRvIGluamVjdCB0aGlzIGludGVyY2VwdG9yXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgU1VQUFJFU1NfQVVUSF9JTlRFUkNFUFRPUl9QUk9WSURFUjogQ2xhc3NQcm92aWRlciA9XHJcbntcclxuICAgIHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLFxyXG4gICAgbXVsdGk6IHRydWUsXHJcbiAgICB1c2VDbGFzczogU3VwcHJlc3NBdXRoSW50ZXJjZXB0b3JcclxufTsiXX0=