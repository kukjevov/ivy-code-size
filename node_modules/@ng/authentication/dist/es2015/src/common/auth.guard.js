/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { AuthenticationService } from './authentication.service';
import * as i0 from "@angular/core";
import * as i1 from "./authentication.service";
/**
 * Routing guard that is used for authorization of user
 */
export class AuthGuard {
    //######################### constructor #########################
    /**
     * @param {?} authService
     */
    constructor(authService) {
        this.authService = authService;
    }
    //######################### implementation of CanActivate #########################
    /**
     * Tests whether component can be activated
     * @param {?} next Information about next coming route
     * @return {?} Observable
     */
    canActivate(next) {
        /** @type {?} */
        let component = (/** @type {?} */ (next.component));
        /** @type {?} */
        let permission = component.permissionName;
        return Observable.create((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            this.authService
                .getUserIdentity()
                .catch((/**
             * @return {?}
             */
            () => {
                console.error("Unexpected error in AuthGuard!");
                observer.next(false);
                observer.complete();
                return;
            }))
                .then((/**
             * @param {?} userData
             * @return {?}
             */
            userData => {
                if (userData) {
                    if (userData.permissions.indexOf(permission) < 0 && userData.isAuthenticated) {
                        this.authService.showAccessDenied();
                        observer.next(false);
                        observer.complete();
                        return;
                    }
                    else if (userData.permissions.indexOf(permission) < 0 && !userData.isAuthenticated && !this.authService.isAuthPage()) {
                        this.authService.showAuthPage();
                        observer.next(false);
                        observer.complete();
                        return;
                    }
                    observer.next(true);
                    observer.complete();
                    return;
                }
                console.warn("No UserData in AuthGuard!");
                observer.next(false);
                observer.complete();
            }));
        }));
    }
}
AuthGuard.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
AuthGuard.ctorParameters = () => [
    { type: AuthenticationService }
];
/** @nocollapse */ AuthGuard.ngInjectableDef = i0.defineInjectable({ factory: function AuthGuard_Factory() { return new AuthGuard(i0.inject(i1.AuthenticationService)); }, token: AuthGuard, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthGuard.prototype.authService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb24vYXV0aC5ndWFyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUMsVUFBVSxFQUFXLE1BQU0sTUFBTSxDQUFDO0FBRTFDLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLDBCQUEwQixDQUFDOzs7Ozs7QUFPL0QsTUFBTSxPQUFPLFNBQVM7Ozs7O0lBR2xCLFlBQW9CLFdBQXVDO1FBQXZDLGdCQUFXLEdBQVgsV0FBVyxDQUE0QjtJQUUzRCxDQUFDOzs7Ozs7O0lBVUQsV0FBVyxDQUFDLElBQTRCOztZQUVoQyxTQUFTLEdBQW9DLG1CQUFLLElBQUksQ0FBQyxTQUFTLEVBQUE7O1lBQ2hFLFVBQVUsR0FBVyxTQUFTLENBQUMsY0FBYztRQUVqRCxPQUFPLFVBQVUsQ0FBQyxNQUFNOzs7O1FBQUMsQ0FBQyxRQUEyQixFQUFFLEVBQUU7WUFFckQsSUFBSSxDQUFDLFdBQVc7aUJBQ1gsZUFBZSxFQUFFO2lCQUNqQixLQUFLOzs7WUFBQyxHQUFHLEVBQUU7Z0JBRVIsT0FBTyxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO2dCQUNoRCxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNyQixRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBRXBCLE9BQU87WUFDWCxDQUFDLEVBQUM7aUJBQ0QsSUFBSTs7OztZQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUViLElBQUcsUUFBUSxFQUNYO29CQUNJLElBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxlQUFlLEVBQzNFO3dCQUNJLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQzt3QkFDcEMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDckIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO3dCQUVwQixPQUFPO3FCQUNWO3lCQUNJLElBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLEVBQ25IO3dCQUNJLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7d0JBQ2hDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBQ3JCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQzt3QkFFcEIsT0FBTztxQkFDVjtvQkFFRCxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNwQixRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7b0JBRXBCLE9BQU87aUJBQ1Y7Z0JBRUQsT0FBTyxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO2dCQUMxQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNyQixRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDeEIsQ0FBQyxFQUFDLENBQUM7UUFDWCxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7OztZQWpFSixVQUFVLFNBQUMsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDOzs7O1lBTnhCLHFCQUFxQjs7Ozs7Ozs7SUFVYixnQ0FBK0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0NhbkFjdGl2YXRlLCBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90fSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQge09ic2VydmFibGUsIE9ic2VydmVyfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7QXV0aGVudGljYXRpb25TZXJ2aWNlfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uLnNlcnZpY2UnO1xyXG5pbXBvcnQge0F1dGhvcml6YXRpb25EZWNvcmF0ZWRDb21wb25lbnR9IGZyb20gJy4vYXV0aG9yaXplLmRlY29yYXRvcic7XHJcblxyXG4vKipcclxuICogUm91dGluZyBndWFyZCB0aGF0IGlzIHVzZWQgZm9yIGF1dGhvcml6YXRpb24gb2YgdXNlclxyXG4gKi9cclxuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXHJcbmV4cG9ydCBjbGFzcyBBdXRoR3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZVxyXG57XHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgY29uc3RydWN0b3IgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhdXRoU2VydmljZTogQXV0aGVudGljYXRpb25TZXJ2aWNlPGFueT4pXHJcbiAgICB7XHJcbiAgICB9XHJcblxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIGltcGxlbWVudGF0aW9uIG9mIENhbkFjdGl2YXRlICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIHdoZXRoZXIgY29tcG9uZW50IGNhbiBiZSBhY3RpdmF0ZWRcclxuICAgICAqIEBwYXJhbSBuZXh0IEluZm9ybWF0aW9uIGFib3V0IG5leHQgY29taW5nIHJvdXRlXHJcbiAgICAgKiBAcGFyYW0gc3RhdGUgSW5mb3JtYXRpb24gYWJvdXQgcm91dGVyIHN0YXRlXHJcbiAgICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlXHJcbiAgICAgKi9cclxuICAgIGNhbkFjdGl2YXRlKG5leHQ6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpIDogT2JzZXJ2YWJsZTxib29sZWFuPlxyXG4gICAge1xyXG4gICAgICAgIGxldCBjb21wb25lbnQ6IEF1dGhvcml6YXRpb25EZWNvcmF0ZWRDb21wb25lbnQgPSA8YW55Pm5leHQuY29tcG9uZW50O1xyXG4gICAgICAgIGxldCBwZXJtaXNzaW9uOiBzdHJpbmcgPSBjb21wb25lbnQucGVybWlzc2lvbk5hbWU7XHJcblxyXG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZSgob2JzZXJ2ZXI6IE9ic2VydmVyPGJvb2xlYW4+KSA9PlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5hdXRoU2VydmljZVxyXG4gICAgICAgICAgICAgICAgLmdldFVzZXJJZGVudGl0eSgpXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goKCkgPT5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVW5leHBlY3RlZCBlcnJvciBpbiBBdXRoR3VhcmQhXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbih1c2VyRGF0YSA9PlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHVzZXJEYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYodXNlckRhdGEucGVybWlzc2lvbnMuaW5kZXhPZihwZXJtaXNzaW9uKSA8IDAgJiYgdXNlckRhdGEuaXNBdXRoZW50aWNhdGVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF1dGhTZXJ2aWNlLnNob3dBY2Nlc3NEZW5pZWQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZih1c2VyRGF0YS5wZXJtaXNzaW9ucy5pbmRleE9mKHBlcm1pc3Npb24pIDwgMCAmJiAhdXNlckRhdGEuaXNBdXRoZW50aWNhdGVkICYmICF0aGlzLmF1dGhTZXJ2aWNlLmlzQXV0aFBhZ2UoKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXRoU2VydmljZS5zaG93QXV0aFBhZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiTm8gVXNlckRhdGEgaW4gQXV0aEd1YXJkIVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iXX0=