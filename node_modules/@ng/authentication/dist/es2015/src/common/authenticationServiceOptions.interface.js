/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
/**
 * Options for authentication service
 * @record
 * @template TUserInfo
 */
export function AuthenticationServiceOptions() { }
if (false) {
    /**
     * Method logs user into system
     * @param {?} accessToken Access token holding authentication information
     * @return {?} Observable
     */
    AuthenticationServiceOptions.prototype.login = function (accessToken) { };
    /**
     * Gets indication whether current state of app is displaying auth page
     * @return {?} boolean
     */
    AuthenticationServiceOptions.prototype.isAuthPage = function () { };
    /**
     * Methods logs out user out of system
     * @return {?} Observable
     */
    AuthenticationServiceOptions.prototype.logout = function () { };
    /**
     * Gets information about user
     * @return {?} Observable
     */
    AuthenticationServiceOptions.prototype.getUserIdentity = function () { };
    /**
     * Redirects current page to authentication page
     * @return {?}
     */
    AuthenticationServiceOptions.prototype.showAuthPage = function () { };
    /**
     * Redirects current page to access denied page
     * @return {?}
     */
    AuthenticationServiceOptions.prototype.showAccessDenied = function () { };
}
/**
 * Authentication options token used for injecting into authentication service
 * @type {?}
 */
export const AUTHENTICATION_SERVICE_OPTIONS = new InjectionToken("AuthenticationServiceOptions");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpb25TZXJ2aWNlT3B0aW9ucy5pbnRlcmZhY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tbW9uL2F1dGhlbnRpY2F0aW9uU2VydmljZU9wdGlvbnMuaW50ZXJmYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDOzs7Ozs7QUFTN0Msa0RBb0NDOzs7Ozs7O0lBN0JHLDBFQUFpRDs7Ozs7SUFNakQsb0VBQXNCOzs7OztJQU10QixnRUFBMEI7Ozs7O0lBTTFCLHlFQUF1RDs7Ozs7SUFLdkQsc0VBQWlDOzs7OztJQUtqQywwRUFBcUM7Ozs7OztBQU16QyxNQUFNLE9BQU8sOEJBQThCLEdBQXNELElBQUksY0FBYyxDQUFvQyw4QkFBOEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0aW9uVG9rZW59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHtVc2VySWRlbnRpdHl9IGZyb20gJy4vdXNlcklkZW50aXR5JztcclxuaW1wb3J0IHtBY2Nlc3NUb2tlbn0gZnJvbSAnLi9hY2Nlc3NUb2tlbic7XHJcblxyXG4vKipcclxuICogT3B0aW9ucyBmb3IgYXV0aGVudGljYXRpb24gc2VydmljZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBBdXRoZW50aWNhdGlvblNlcnZpY2VPcHRpb25zPFRVc2VySW5mbz5cclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiBNZXRob2QgbG9ncyB1c2VyIGludG8gc3lzdGVtXHJcbiAgICAgKiBAcGFyYW0gYWNjZXNzVG9rZW4gQWNjZXNzIHRva2VuIGhvbGRpbmcgYXV0aGVudGljYXRpb24gaW5mb3JtYXRpb25cclxuICAgICAqIEByZXR1cm5zIE9ic2VydmFibGVcclxuICAgICAqL1xyXG4gICAgbG9naW4oYWNjZXNzVG9rZW46IEFjY2Vzc1Rva2VuKTogT2JzZXJ2YWJsZTxhbnk+O1xyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgaW5kaWNhdGlvbiB3aGV0aGVyIGN1cnJlbnQgc3RhdGUgb2YgYXBwIGlzIGRpc3BsYXlpbmcgYXV0aCBwYWdlXHJcbiAgICAgKiBAcmV0dXJucyBib29sZWFuXHJcbiAgICAgKi9cclxuICAgIGlzQXV0aFBhZ2UoKTogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ldGhvZHMgbG9ncyBvdXQgdXNlciBvdXQgb2Ygc3lzdGVtXHJcbiAgICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlXHJcbiAgICAgKi9cclxuICAgIGxvZ291dCgpOiBPYnNlcnZhYmxlPGFueT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGluZm9ybWF0aW9uIGFib3V0IHVzZXJcclxuICAgICAqIEByZXR1cm5zIE9ic2VydmFibGVcclxuICAgICAqL1xyXG4gICAgZ2V0VXNlcklkZW50aXR5KCk6IE9ic2VydmFibGU8VXNlcklkZW50aXR5PFRVc2VySW5mbz4+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVkaXJlY3RzIGN1cnJlbnQgcGFnZSB0byBhdXRoZW50aWNhdGlvbiBwYWdlXHJcbiAgICAgKi9cclxuICAgIHNob3dBdXRoUGFnZSgpOiBQcm9taXNlPGJvb2xlYW4+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVkaXJlY3RzIGN1cnJlbnQgcGFnZSB0byBhY2Nlc3MgZGVuaWVkIHBhZ2VcclxuICAgICAqL1xyXG4gICAgc2hvd0FjY2Vzc0RlbmllZCgpOiBQcm9taXNlPGJvb2xlYW4+O1xyXG59XHJcblxyXG4vKipcclxuICogQXV0aGVudGljYXRpb24gb3B0aW9ucyB0b2tlbiB1c2VkIGZvciBpbmplY3RpbmcgaW50byBhdXRoZW50aWNhdGlvbiBzZXJ2aWNlXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQVVUSEVOVElDQVRJT05fU0VSVklDRV9PUFRJT05TOiBJbmplY3Rpb25Ub2tlbjxBdXRoZW50aWNhdGlvblNlcnZpY2VPcHRpb25zPGFueT4+ID0gbmV3IEluamVjdGlvblRva2VuPEF1dGhlbnRpY2F0aW9uU2VydmljZU9wdGlvbnM8YW55Pj4oXCJBdXRoZW50aWNhdGlvblNlcnZpY2VPcHRpb25zXCIpOyJdfQ==