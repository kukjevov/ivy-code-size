/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, TemplateRef, ViewContainerRef, Input, ChangeDetectorRef } from '@angular/core';
import { isString, isBoolean, isBlank } from '@asseco/common';
import { AuthenticationService } from './authentication.service';
export class AuthorizeDirective {
    //######################### constructor #########################
    /**
     * @param {?} _template
     * @param {?} _viewContainer
     * @param {?} _authService
     * @param {?} _changeDetector
     */
    constructor(_template, _viewContainer, _authService, _changeDetector) {
        this._template = _template;
        this._viewContainer = _viewContainer;
        this._authService = _authService;
        this._changeDetector = _changeDetector;
        //######################### private fields #########################
        /**
         * Subscription for changes in authentication
         */
        this._subscription = null;
        /**
         * Indication that AND condition should be used instead of OR condition if multiple permissions are provided
         */
        this.andCondition = false;
        /**
         * Indication that provided string is set of loggical operations among permission names, if this is true andCondition is ignored
         */
        this.conditionString = false;
    }
    //######################### public methods - implementation of OnInit #########################
    /**
     * Initialize component
     * @return {?}
     */
    ngOnInit() {
        if (isBlank(this.permission)) {
            throw new Error("You must specify 'authorize' attribute value.");
        }
        if (!isBoolean(this.andCondition)) {
            throw new Error("Parameter 'andCondition' must be boolean value!");
        }
        if (!isBoolean(this.conditionString)) {
            throw new Error("Parameter 'conditionString' must be boolean value!");
        }
        if (isString(this.permission) && this.permission.indexOf(",") > -1) {
            this.permission = this.permission.split(",").map((/**
             * @param {?} itm
             * @return {?}
             */
            itm => itm.trim()));
        }
        this._authService
            .getUserIdentity()
            .then((/**
         * @param {?} userIdentity
         * @return {?}
         */
        userIdentity => {
            this._renderIfPermission(userIdentity);
            this._changeDetector.detectChanges();
        }));
        this._subscription = this._authService
            .authenticationChanged
            .subscribe((/**
         * @param {?} userIdentity
         * @return {?}
         */
        userIdentity => {
            this._renderIfPermission(userIdentity);
            this._changeDetector.detectChanges();
        }), (/**
         * @return {?}
         */
        () => { }));
    }
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    ngOnDestroy() {
        if (this._subscription) {
            this._subscription.unsubscribe();
            this._subscription = null;
        }
    }
    //######################### private methods #########################
    /**
     * Renders content if user has permissions
     * @private
     * @param {?} userIdentity
     * @return {?}
     */
    _renderIfPermission(userIdentity) {
        if (!isString(this.permission) && !Array.isArray(this.permission)) {
            throw new Error("Invalid argument type! Permission must be string or array of strings.");
        }
        if (userIdentity) {
            this._viewContainer.clear();
            //Multiple conditions
            if (Array.isArray(this.permission)) {
                /** @type {?} */
                let arrayPermission = (/** @type {?} */ (this.permission));
                if (this.andCondition) {
                    //AND Condition
                    if (arrayPermission.map((/**
                     * @param {?} perm
                     * @return {?}
                     */
                    perm => userIdentity.permissions.indexOf(perm) > -1)).every((/**
                     * @param {?} itm
                     * @return {?}
                     */
                    itm => itm === true))) {
                        this._viewContainer.createEmbeddedView(this._template);
                    }
                }
                else {
                    //OR Condition
                    if (arrayPermission.map((/**
                     * @param {?} perm
                     * @return {?}
                     */
                    perm => userIdentity.permissions.indexOf(perm) > -1)).indexOf(true) > -1) {
                        this._viewContainer.createEmbeddedView(this._template);
                    }
                }
            }
            //Single condition
            else {
                //Condition string
                if (this.conditionString) {
                    //TODO - think of some optimization for performance reasons
                    /** @type {?} */
                    let condition = (/** @type {?} */ (this.permission));
                    condition.replace(/!?(.*?)(?:&+|\|+|\(|\)|$)/g, "$1")
                        .split(" ")
                        .filter((/**
                     * @param {?} itm
                     * @return {?}
                     */
                    function (itm) { return itm.trim(); }))
                        .forEach((/**
                     * @param {?} permissionName
                     * @return {?}
                     */
                    permissionName => condition = condition.replace(new RegExp(permissionName, 'g'), (userIdentity.permissions.indexOf(permissionName) > -1).toString())));
                    if (new Function(`return (${condition})`)()) {
                        this._viewContainer.createEmbeddedView(this._template);
                    }
                }
                //Permission name string
                else {
                    /** @type {?} */
                    let stringPermission = (/** @type {?} */ (this.permission));
                    if (userIdentity.permissions.indexOf(stringPermission) > -1) {
                        this._viewContainer.createEmbeddedView(this._template);
                    }
                }
            }
        }
    }
}
AuthorizeDirective.decorators = [
    { type: Directive, args: [{
                selector: "[authorize]"
            },] }
];
/** @nocollapse */
AuthorizeDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: AuthenticationService },
    { type: ChangeDetectorRef }
];
AuthorizeDirective.propDecorators = {
    permission: [{ type: Input, args: ["authorize",] }],
    andCondition: [{ type: Input, args: ["authorizeAndCondition",] }],
    conditionString: [{ type: Input, args: ["authorizeConditionString",] }]
};
if (false) {
    /**
     * Subscription for changes in authentication
     * @type {?}
     * @private
     */
    AuthorizeDirective.prototype._subscription;
    /**
     * Name of permission that is requested for displaying element
     * @type {?}
     */
    AuthorizeDirective.prototype.permission;
    /**
     * Indication that AND condition should be used instead of OR condition if multiple permissions are provided
     * @type {?}
     */
    AuthorizeDirective.prototype.andCondition;
    /**
     * Indication that provided string is set of loggical operations among permission names, if this is true andCondition is ignored
     * @type {?}
     */
    AuthorizeDirective.prototype.conditionString;
    /**
     * @type {?}
     * @private
     */
    AuthorizeDirective.prototype._template;
    /**
     * @type {?}
     * @private
     */
    AuthorizeDirective.prototype._viewContainer;
    /**
     * @type {?}
     * @private
     */
    AuthorizeDirective.prototype._authService;
    /**
     * @type {?}
     * @private
     */
    AuthorizeDirective.prototype._changeDetector;
}
//# sourceMappingURL=data:application/json;base64,