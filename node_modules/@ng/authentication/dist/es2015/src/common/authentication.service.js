/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, Injector } from '@angular/core';
import { isFunction, isArray, isBlank } from '@asseco/common';
import { Observable, Subject, empty } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { AUTHENTICATION_SERVICE_OPTIONS } from './authenticationServiceOptions.interface';
import * as i0 from "@angular/core";
import * as i1 from "./authenticationServiceOptions.interface";
/**
 * Factory used for creating AuthenticationService
 * @param {?} options Options passed to created service
 * @return {?}
 */
export function authenticationServiceFactory(options) {
    if (isBlank(options) ||
        isBlank(options.getUserIdentity) || !isFunction(options.getUserIdentity) ||
        isBlank(options.login) || !isFunction(options.login) ||
        isBlank(options.logout) || !isFunction(options.logout) ||
        isBlank(options.isAuthPage) || !isFunction(options.isAuthPage) ||
        isBlank(options.showAccessDenied) || !isFunction(options.showAccessDenied) ||
        isBlank(options.showAuthPage) || !isFunction(options.showAuthPage)) {
        throw new Error("Options must be set and must implement AuthenticationServiceOptions");
    }
    return new AuthenticationService(options);
}
/**
 * Authentication service managing authentication
 * @template TUserInfo
 */
export class AuthenticationService {
    //######################### constructor #########################
    //TODO - report bug, this is HACK to be compilable
    /**
     * @param {?} _options
     */
    constructor(_options) {
        this._options = _options;
        /**
         * Subject used for indicating authenticationChanged
         */
        this._authenticationChangedSubject = new Subject();
        this.isInitialized = new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => this._isInitializedResolver = resolve));
    }
    /**
     * Gets observable that indicates when authentication has changed
     * @return {?}
     */
    get authenticationChanged() {
        return this._authenticationChangedSubject.asObservable();
    }
    //######################### public methods #########################
    /**
     * Tests whether is used authorized for specified permission
     * @param {?} permission Permission name that is tested
     * @return {?} Promise<boolean> True if user is authorized otherwise false
     */
    isAuthorized(permission) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.getUserIdentity()
                .then((/**
             * @param {?} userIdentity
             * @return {?}
             */
            (userIdentity) => {
                if (isArray(userIdentity.permissions)) {
                    if (userIdentity.permissions.indexOf(permission) > -1) {
                        resolve(true);
                    }
                    else {
                        resolve(false);
                    }
                }
                else {
                    resolve(false);
                }
            }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            error => reject(error)));
        }));
    }
    /**
     * Gets user identity
     * @param {?=} refresh
     * @return {?} Promise
     */
    getUserIdentity(refresh) {
        if (refresh === true) {
            this._authenticationPromise = null;
        }
        if (this._authenticationPromise != null) {
            return this._authenticationPromise;
        }
        this._authenticationPromise = new Promise((/**
         * @param {?} success
         * @param {?} reject
         * @return {?}
         */
        (success, reject) => {
            this._options
                .getUserIdentity()
                .pipe(catchError((/**
             * @param {?} error
             * @return {?}
             */
            error => {
                reject(error);
                this._isInitializedResolver(true);
                return empty();
            })))
                .subscribe((/**
             * @param {?} itm
             * @return {?}
             */
            (itm) => {
                success(itm);
                this._authenticationChangedSubject.next(itm);
                this._isInitializedResolver(true);
            }));
        }));
        return this._authenticationPromise;
    }
    /**
     * Method logs user into system
     * @param {?} accessToken Access token holding authentication information
     * @return {?} Observable
     */
    login(accessToken) {
        return Observable.create((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            this._options.login(accessToken)
                .subscribe((/**
             * @return {?}
             */
            () => {
                this.getUserIdentity(true)
                    .then((/**
                 * @return {?}
                 */
                () => {
                    observer.next(null);
                }));
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                observer.error(error);
            }));
        }));
    }
    /**
     * Methods logs out user out of system
     * @return {?} Observable
     */
    logout() {
        return Observable.create((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            this._options.logout()
                .subscribe((/**
             * @return {?}
             */
            () => {
                this.getUserIdentity(true)
                    .then((/**
                 * @return {?}
                 */
                () => {
                    observer.next(null);
                }));
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                observer.error(error);
            }));
        }));
    }
    /**
     * Redirects current page to authentication page
     * @return {?}
     */
    showAuthPage() {
        return this._options.showAuthPage();
    }
    /**
     * Redirects current page to access denied page
     * @return {?}
     */
    showAccessDenied() {
        return this._options.showAccessDenied();
    }
    /**
     * Gets indicatio whether current state of app is displaying login page
     * @return {?} boolean
     */
    isAuthPage() {
        return this._options.isAuthPage();
    }
}
AuthenticationService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root', deps: [AUTHENTICATION_SERVICE_OPTIONS], useFactory: authenticationServiceFactory },] }
];
/** @nocollapse */
AuthenticationService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [Injector,] }] }
];
/** @nocollapse */ AuthenticationService.ngInjectableDef = i0.defineInjectable({ factory: function AuthenticationService_Factory() { return authenticationServiceFactory(i0.inject(i1.AUTHENTICATION_SERVICE_OPTIONS)); }, token: AuthenticationService, providedIn: "root" });
if (false) {
    /**
     * Authentication promise that was used for authentication
     * @type {?}
     * @private
     */
    AuthenticationService.prototype._authenticationPromise;
    /**
     * Resolved function for isInitialized
     * @type {?}
     * @private
     */
    AuthenticationService.prototype._isInitializedResolver;
    /**
     * Subject used for indicating authenticationChanged
     * @type {?}
     * @private
     */
    AuthenticationService.prototype._authenticationChangedSubject;
    /**
     * Indication whether is authentication module initialized or not
     * @type {?}
     */
    AuthenticationService.prototype.isInitialized;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype._options;
}
//# sourceMappingURL=data:application/json;base64,