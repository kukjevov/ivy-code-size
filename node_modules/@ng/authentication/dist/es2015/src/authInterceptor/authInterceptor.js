var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken, Injector } from '@angular/core';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { isBlank } from '@asseco/common';
import { IgnoredInterceptorsService } from '@ng/common';
import { Observable } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
/**
 * Configuration object that is used by AuthInterceptor, overriding its properties allows you to customize configuration
 * @abstract
 */
export class AuthInterceptorConfig {
}
if (false) {
    /**
     * Gets indication whether is user authenticated or not
     * @abstract
     * @return {?} boolean
     */
    AuthInterceptorConfig.prototype.isAuthenticated = function () { };
    /**
     * Gets indication whether request was done from authentication page
     * @abstract
     * @return {?} boolean
     */
    AuthInterceptorConfig.prototype.isAuthPage = function () { };
    /**
     * Redirects current page to authentication page
     * @abstract
     * @return {?}
     */
    AuthInterceptorConfig.prototype.showAuthPage = function () { };
    /**
     * Redirects current page to access denied page
     * @abstract
     * @return {?}
     */
    AuthInterceptorConfig.prototype.showAccessDenied = function () { };
}
/**
 * Token used for injecting custom configuration for AuthInterceptor
 * @type {?}
 */
export const AUTH_INTERCEPTOR_CONFIG = new InjectionToken("auth-interceptor-config");
/**
 * AuthInterceptor used for intercepting http responses and handling 401, 403 statuses
 */
export class AuthInterceptor {
    //######################### constructors #########################
    /**
     * @param {?} _config
     * @param {?} _ignoredInterceptorsService
     */
    constructor(_config, _ignoredInterceptorsService) {
        this._config = _config;
        this._ignoredInterceptorsService = _ignoredInterceptorsService;
        //######################### private fields #########################
        /**
         * Counter for requests in progress
         */
        this._requestsInProgress = 0;
        /**
         * Indication whether is handling of 401, 403 blocked because one request is already handled
         */
        this._blocked = false;
    }
    //######################### private properties #########################
    /**
     * Counter for requests in progress
     * @private
     * @param {?} value
     * @return {?}
     */
    set requestsInProgress(value) {
        this._requestsInProgress = value;
        if (value < 1) {
            this._blocked = false;
            this._requestsInProgress = 0;
        }
    }
    /**
     * @private
     * @return {?}
     */
    get requestsInProgress() {
        return this._requestsInProgress;
    }
    //######################### public methods - implementation of HttpInterceptor #########################
    /**
     * Intercepts http request
     * @param {?} req Request to be intercepted
     * @param {?} next Next middleware that can be called for next processing
     * @return {?}
     */
    intercept(req, next) {
        this.requestsInProgress++;
        return next.handle(req).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            return (/** @type {?} */ (Observable.create((/**
             * @param {?} observer
             * @return {?}
             */
            (observer) => {
                //client error, not response from server, or is ignored
                if (err.error instanceof Error ||
                    (this._ignoredInterceptorsService && this._ignoredInterceptorsService.isIgnored(AuthInterceptor, req))) {
                    observer.error(err);
                    observer.complete();
                    return;
                }
                //if auth error
                if (err.status == 403 || err.status == 401) {
                    if (this._blocked) {
                        observer.error(err);
                        observer.complete();
                        return;
                    }
                    this._blocked = true;
                    //auth error from auth page
                    if (this._config.isAuthPage()) {
                        observer.error(err);
                        observer.complete();
                        return;
                    }
                    //auth error from other pages
                    this._config.isAuthenticated()
                        .then((/**
                     * @param {?} isAuthenticated
                     * @return {?}
                     */
                    (isAuthenticated) => __awaiter(this, void 0, void 0, function* () {
                        //access denied user authenticated, not authorized
                        if (isAuthenticated) {
                            yield this._config.showAccessDenied();
                            observer.complete();
                            return;
                        }
                        //show auth page, user not authenticated
                        yield this._config.showAuthPage();
                        observer.complete();
                        return;
                    })))
                        .catch((/**
                     * @return {?}
                     */
                    () => observer.complete()));
                    return;
                }
                //other errors
                observer.error(err);
                observer.complete();
            }))));
        })), tap((/**
         * @return {?}
         */
        () => this.requestsInProgress--), (/**
         * @return {?}
         */
        () => this.requestsInProgress--)));
    }
}
if (false) {
    /**
     * Counter for requests in progress
     * @type {?}
     * @private
     */
    AuthInterceptor.prototype._requestsInProgress;
    /**
     * Indication whether is handling of 401, 403 blocked because one request is already handled
     * @type {?}
     * @private
     */
    AuthInterceptor.prototype._blocked;
    /**
     * @type {?}
     * @private
     */
    AuthInterceptor.prototype._config;
    /**
     * @type {?}
     * @private
     */
    AuthInterceptor.prototype._ignoredInterceptorsService;
}
/**
 * Factory used for creating auth interceptor
 * @param {?} config Configuration for auth interceptor
 * @param {?} injector
 * @return {?}
 */
export function authInterceptorProviderFactory(config, injector) {
    if (isBlank(config) || !(config instanceof AuthInterceptorConfig)) {
        throw new Error("Provided configuration for 'AuthInterceptor' is not of type 'AutInterceptorConfig', you must provide one!");
    }
    return new AuthInterceptor(config, injector.get(IgnoredInterceptorsService));
}
;
/**
 * Provider for proper use of AuthInterceptor, use this provider to inject this interceptor
 * @type {?}
 */
export const AUTH_INTERCEPTOR_PROVIDER = {
    provide: HTTP_INTERCEPTORS,
    multi: true,
    useFactory: authInterceptorProviderFactory,
    deps: [AUTH_INTERCEPTOR_CONFIG, Injector]
};
//# sourceMappingURL=data:application/json;base64,