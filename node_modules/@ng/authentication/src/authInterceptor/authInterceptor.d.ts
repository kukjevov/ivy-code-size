import { FactoryProvider, InjectionToken, Injector } from '@angular/core';
import { HttpInterceptor, HttpEvent, HttpHandler } from '@angular/common/http';
import { IgnoredInterceptorsService, HttpRequestIgnoredInterceptorId } from '@ng/common';
import { Observable } from 'rxjs';
/**
 * Configuration object that is used by AuthInterceptor, overriding its properties allows you to customize configuration
 */
export declare abstract class AuthInterceptorConfig {
    /**
     * Gets indication whether is user authenticated or not
     * @returns boolean
     */
    abstract isAuthenticated(): Promise<boolean>;
    /**
     * Gets indication whether request was done from authentication page
     * @returns boolean
     */
    abstract isAuthPage(): boolean;
    /**
     * Redirects current page to authentication page
     */
    abstract showAuthPage(): Promise<boolean>;
    /**
     * Redirects current page to access denied page
     */
    abstract showAccessDenied(): Promise<boolean>;
}
/**
 * Token used for injecting custom configuration for AuthInterceptor
 */
export declare const AUTH_INTERCEPTOR_CONFIG: InjectionToken<AuthInterceptorConfig>;
/**
 * AuthInterceptor used for intercepting http responses and handling 401, 403 statuses
 */
export declare class AuthInterceptor implements HttpInterceptor {
    private _config;
    private _ignoredInterceptorsService;
    /**
     * Counter for requests in progress
     */
    private _requestsInProgress;
    /**
     * Indication whether is handling of 401, 403 blocked because one request is already handled
     */
    private _blocked;
    /**
     * Counter for requests in progress
     */
    private requestsInProgress;
    constructor(_config: AuthInterceptorConfig, _ignoredInterceptorsService: IgnoredInterceptorsService);
    /**
     * Intercepts http request
     * @param req Request to be intercepted
     * @param next Next middleware that can be called for next processing
     */
    intercept(req: HttpRequestIgnoredInterceptorId<any>, next: HttpHandler): Observable<HttpEvent<any>>;
}
/**
 * Factory used for creating auth interceptor
 * @param config Configuration for auth interceptor
 */
export declare function authInterceptorProviderFactory(config: AuthInterceptorConfig, injector: Injector): AuthInterceptor;
/**
 * Provider for proper use of AuthInterceptor, use this provider to inject this interceptor
 */
export declare const AUTH_INTERCEPTOR_PROVIDER: FactoryProvider;
