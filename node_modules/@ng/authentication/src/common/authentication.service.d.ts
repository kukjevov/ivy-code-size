import { Observable } from 'rxjs';
import { UserIdentity } from './userIdentity';
import { AuthenticationServiceOptions } from './authenticationServiceOptions.interface';
import { AccessToken } from './accessToken';
/**
 * Factory used for creating AuthenticationService
 * @param options Options passed to created service
 */
export declare function authenticationServiceFactory(options: AuthenticationServiceOptions<any>): AuthenticationService<any>;
/**
 * Authentication service managing authentication
 */
export declare class AuthenticationService<TUserInfo> {
    private _options;
    /**
     * Authentication promise that was used for authentication
     */
    private _authenticationPromise;
    /**
     * Resolved function for isInitialized
     */
    private _isInitializedResolver;
    /**
     * Subject used for indicating authenticationChanged
     */
    private _authenticationChangedSubject;
    /**
     * Indication whether is authentication module initialized or not
     */
    isInitialized: Promise<boolean>;
    /**
     * Gets observable that indicates when authentication has changed
     */
    readonly authenticationChanged: Observable<UserIdentity<TUserInfo>>;
    constructor(_options: AuthenticationServiceOptions<TUserInfo>);
    /**
     * Tests whether is used authorized for specified permission
     * @param permission Permission name that is tested
     * @returns Promise<boolean> True if user is authorized otherwise false
     */
    isAuthorized(permission: string): Promise<boolean>;
    /**
     * Gets user identity
     * @param refresh? Indication that server get user identity should be called, otherwise cached response will be used
     * @returns Promise
     */
    getUserIdentity(refresh?: boolean): Promise<UserIdentity<TUserInfo>>;
    /**
     * Method logs user into system
     * @param accessToken Access token holding authentication information
     * @returns Observable
     */
    login(accessToken: AccessToken): Observable<any>;
    /**
     * Methods logs out user out of system
     * @returns Observable
     */
    logout(): Observable<any>;
    /**
     * Redirects current page to authentication page
     */
    showAuthPage(): Promise<boolean>;
    /**
     * Redirects current page to access denied page
     */
    showAccessDenied(): Promise<boolean>;
    /**
     * Gets indicatio whether current state of app is displaying login page
     * @returns boolean
     */
    isAuthPage(): boolean;
}
