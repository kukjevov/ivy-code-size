/**
 * Class that is used as wrapper for working with cookies
 */
export declare class CookieService {
    private _serverCookies;
    /**
     * Indication that current code is running in browser
     */
    private _isBrowser;
    constructor(platformId: Object, _serverCookies: string);
    /**
     * Retrieves a single cookie by it's name
     *
     * @param name Identification of the Cookie
     * @returns The Cookie's value
     */
    getCookie(name: string): any;
    /**
     * Save the Cookie
     *
     * @param name Cookie's identification
     * @param value Cookie's value
     * @param expires Cookie's expiration date in days from now. If it's undefined the cookie is a session Cookie
     * @param path Path relative to the domain where the cookie should be avaiable. Default /
     * @param domain Domain where the cookie should be avaiable. Default current domain
     */
    setCookie(name: string, value: any, expires?: number, path?: string, domain?: string): void;
    /**
     * Removes specified Cookie
     *
     * @param name Cookie's identification
     * @param path Path relative to the domain where the cookie should be avaiable. Default /
     * @param domain Domain where the cookie should be avaiable. Default current domain
     */
    deleteCookie(name: string, path?: string, domain?: string): void;
}
