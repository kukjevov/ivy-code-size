/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isBlank, isPresent } from '@asseco/common';
/**
 * Extended type with redirect route definition
 * @record
 */
export function RedirectRouteDecoratedComponent() { }
if (false) {
    /**
     * Definition of redirection routes that are assigned to this type
     * @type {?}
     */
    RedirectRouteDecoratedComponent.prototype.redirectRouteValues;
}
/**
 * Defines redirection route to component`s route on which is this decorator applied
 * @param {?} redirectFrom Path from which should redirection occur
 * @param {?=} redirectTo Path to which should be redirect performed, if not specified and only one route is defined, its path will be used
 * @param {?=} pathMatchFull Indication that full path match should be used, default is true
 * @return {?} ClassDecorator
 */
export function ComponentRedirectRoute(redirectFrom, redirectTo, pathMatchFull) {
    return (/**
     * @template TFunction
     * @param {?} target
     * @return {?}
     */
    function (target) {
        /** @type {?} */
        let routeDecoratedComponent = (/** @type {?} */ (target));
        if (isBlank(routeDecoratedComponent.routeValues) && isBlank(redirectTo)) {
            console.warn("Missing 'ComponentRoute' or wrong order of decorators 'ComponentRoute' and 'ComponentRedirectRoute'!");
            return target;
        }
        if (isBlank(redirectTo) && isPresent(routeDecoratedComponent.routeValues) && routeDecoratedComponent.routeValues.length > 1) {
            console.warn("Multiple routes defined. Unable to set proper redirect!");
            return target;
        }
        /** @type {?} */
        let redirectRouteDecoratedComponent = (/** @type {?} */ (target));
        if (isBlank(redirectRouteDecoratedComponent.redirectRouteValues)) {
            Object.defineProperty(target, 'redirectRouteValues', {
                enumerable: true,
                configurable: false,
                writable: false,
                value: []
            });
        }
        if (isBlank(pathMatchFull)) {
            pathMatchFull = true;
        }
        if (isBlank(redirectTo)) {
            redirectTo = routeDecoratedComponent.routeValues[0].path;
        }
        redirectRouteDecoratedComponent.redirectRouteValues.push({
            path: redirectFrom,
            redirectTo: redirectTo,
            pathMatch: pathMatchFull ? "full" : "prefix"
        });
        return target;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50UmVkaXJlY3RSb3V0ZS5kZWNvcmF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZGVjb3JhdG9ycy9jb21wb25lbnRSZWRpcmVjdFJvdXRlLmRlY29yYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7QUFPbEQscURBTUM7Ozs7OztJQURHLDhEQUE2Qjs7Ozs7Ozs7O0FBVWpDLE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxZQUFvQixFQUFFLFVBQW1CLEVBQUUsYUFBdUI7SUFFckc7Ozs7O0lBQU8sVUFBdUMsTUFBaUI7O1lBRXZELHVCQUF1QixHQUE0QixtQkFBSyxNQUFNLEVBQUE7UUFFbEUsSUFBRyxPQUFPLENBQUMsdUJBQXVCLENBQUMsV0FBVyxDQUFDLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUN0RTtZQUNJLE9BQU8sQ0FBQyxJQUFJLENBQUMsc0dBQXNHLENBQUMsQ0FBQztZQUVySCxPQUFPLE1BQU0sQ0FBQztTQUNqQjtRQUVELElBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxXQUFXLENBQUMsSUFBSSx1QkFBdUIsQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFDMUg7WUFDSSxPQUFPLENBQUMsSUFBSSxDQUFDLHlEQUF5RCxDQUFDLENBQUM7WUFFeEUsT0FBTyxNQUFNLENBQUM7U0FDakI7O1lBRUcsK0JBQStCLEdBQW9DLG1CQUFLLE1BQU0sRUFBQTtRQUVsRixJQUFHLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQyxtQkFBbUIsQ0FBQyxFQUMvRDtZQUNJLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUNOLHFCQUFxQixFQUNyQjtnQkFDSSxVQUFVLEVBQUUsSUFBSTtnQkFDaEIsWUFBWSxFQUFFLEtBQUs7Z0JBQ25CLFFBQVEsRUFBRSxLQUFLO2dCQUNmLEtBQUssRUFBRSxFQUFFO2FBQ1osQ0FBQyxDQUFDO1NBQzVCO1FBRUQsSUFBRyxPQUFPLENBQUMsYUFBYSxDQUFDLEVBQ3pCO1lBQ0ksYUFBYSxHQUFHLElBQUksQ0FBQztTQUN4QjtRQUVELElBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUN0QjtZQUNJLFVBQVUsR0FBRyx1QkFBdUIsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1NBQzVEO1FBRUQsK0JBQStCLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUN4RDtZQUNJLElBQUksRUFBRSxZQUFZO1lBQ2xCLFVBQVUsRUFBRSxVQUFVO1lBQ3RCLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUTtTQUMvQyxDQUFDLENBQUM7UUFFSCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDLEVBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtSb3V0ZX0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHtpc0JsYW5rLCBpc1ByZXNlbnR9IGZyb20gJ0Bhc3NlY28vY29tbW9uJztcclxuXHJcbmltcG9ydCB7Um91dGVEZWNvcmF0ZWRDb21wb25lbnR9IGZyb20gJy4vY29tcG9uZW50Um91dGUuZGVjb3JhdG9yJztcclxuXHJcbi8qKlxyXG4gKiBFeHRlbmRlZCB0eXBlIHdpdGggcmVkaXJlY3Qgcm91dGUgZGVmaW5pdGlvblxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBSZWRpcmVjdFJvdXRlRGVjb3JhdGVkQ29tcG9uZW50XHJcbntcclxuICAgIC8qKlxyXG4gICAgICogRGVmaW5pdGlvbiBvZiByZWRpcmVjdGlvbiByb3V0ZXMgdGhhdCBhcmUgYXNzaWduZWQgdG8gdGhpcyB0eXBlXHJcbiAgICAgKi9cclxuICAgIHJlZGlyZWN0Um91dGVWYWx1ZXM6IFJvdXRlW107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZWZpbmVzIHJlZGlyZWN0aW9uIHJvdXRlIHRvIGNvbXBvbmVudGBzIHJvdXRlIG9uIHdoaWNoIGlzIHRoaXMgZGVjb3JhdG9yIGFwcGxpZWRcclxuICogQHBhcmFtIHJlZGlyZWN0RnJvbSBQYXRoIGZyb20gd2hpY2ggc2hvdWxkIHJlZGlyZWN0aW9uIG9jY3VyXHJcbiAqIEBwYXJhbSByZWRpcmVjdFRvIFBhdGggdG8gd2hpY2ggc2hvdWxkIGJlIHJlZGlyZWN0IHBlcmZvcm1lZCwgaWYgbm90IHNwZWNpZmllZCBhbmQgb25seSBvbmUgcm91dGUgaXMgZGVmaW5lZCwgaXRzIHBhdGggd2lsbCBiZSB1c2VkXHJcbiAqIEBwYXJhbSBwYXRoTWF0Y2hGdWxsIEluZGljYXRpb24gdGhhdCBmdWxsIHBhdGggbWF0Y2ggc2hvdWxkIGJlIHVzZWQsIGRlZmF1bHQgaXMgdHJ1ZVxyXG4gKiBAcmV0dXJucyBDbGFzc0RlY29yYXRvclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIENvbXBvbmVudFJlZGlyZWN0Um91dGUocmVkaXJlY3RGcm9tOiBzdHJpbmcsIHJlZGlyZWN0VG8/OiBzdHJpbmcsIHBhdGhNYXRjaEZ1bGw/OiBib29sZWFuKTogQ2xhc3NEZWNvcmF0b3Jcclxue1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIDxURnVuY3Rpb24gZXh0ZW5kcyBGdW5jdGlvbj4gKHRhcmdldDogVEZ1bmN0aW9uKTogVEZ1bmN0aW9uXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IHJvdXRlRGVjb3JhdGVkQ29tcG9uZW50OiBSb3V0ZURlY29yYXRlZENvbXBvbmVudCA9IDxhbnk+dGFyZ2V0O1xyXG5cclxuICAgICAgICBpZihpc0JsYW5rKHJvdXRlRGVjb3JhdGVkQ29tcG9uZW50LnJvdXRlVmFsdWVzKSAmJiBpc0JsYW5rKHJlZGlyZWN0VG8pKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiTWlzc2luZyAnQ29tcG9uZW50Um91dGUnIG9yIHdyb25nIG9yZGVyIG9mIGRlY29yYXRvcnMgJ0NvbXBvbmVudFJvdXRlJyBhbmQgJ0NvbXBvbmVudFJlZGlyZWN0Um91dGUnIVwiKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihpc0JsYW5rKHJlZGlyZWN0VG8pICYmIGlzUHJlc2VudChyb3V0ZURlY29yYXRlZENvbXBvbmVudC5yb3V0ZVZhbHVlcykgJiYgcm91dGVEZWNvcmF0ZWRDb21wb25lbnQucm91dGVWYWx1ZXMubGVuZ3RoID4gMSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIk11bHRpcGxlIHJvdXRlcyBkZWZpbmVkLiBVbmFibGUgdG8gc2V0IHByb3BlciByZWRpcmVjdCFcIik7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHJlZGlyZWN0Um91dGVEZWNvcmF0ZWRDb21wb25lbnQ6IFJlZGlyZWN0Um91dGVEZWNvcmF0ZWRDb21wb25lbnQgPSA8YW55PnRhcmdldDtcclxuXHJcbiAgICAgICAgaWYoaXNCbGFuayhyZWRpcmVjdFJvdXRlRGVjb3JhdGVkQ29tcG9uZW50LnJlZGlyZWN0Um91dGVWYWx1ZXMpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZWRpcmVjdFJvdXRlVmFsdWVzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihpc0JsYW5rKHBhdGhNYXRjaEZ1bGwpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcGF0aE1hdGNoRnVsbCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihpc0JsYW5rKHJlZGlyZWN0VG8pKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmVkaXJlY3RUbyA9IHJvdXRlRGVjb3JhdGVkQ29tcG9uZW50LnJvdXRlVmFsdWVzWzBdLnBhdGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZWRpcmVjdFJvdXRlRGVjb3JhdGVkQ29tcG9uZW50LnJlZGlyZWN0Um91dGVWYWx1ZXMucHVzaChcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHBhdGg6IHJlZGlyZWN0RnJvbSxcclxuICAgICAgICAgICAgcmVkaXJlY3RUbzogcmVkaXJlY3RUbyxcclxuICAgICAgICAgICAgcGF0aE1hdGNoOiBwYXRoTWF0Y2hGdWxsID8gXCJmdWxsXCIgOiBcInByZWZpeFwiXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICB9O1xyXG59XHJcbiJdfQ==