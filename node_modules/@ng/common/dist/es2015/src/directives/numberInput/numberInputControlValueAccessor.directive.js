/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, forwardRef, Renderer2, ElementRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { isBlank } from '@asseco/common';
/**
 * Value accessor provider for number inputs
 * @type {?}
 */
const NUMBER_INPUT_VALUE_ACCESSOR = (/** @type {?} */ ({
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => NumberInputControlValueAccessor)),
    multi: true
}));
/**
 * Value accessor for getting and setting values for number inputs
 */
export class NumberInputControlValueAccessor {
    //######################### constructor #########################
    /**
     * @param {?} _renderer
     * @param {?} _elementRef
     */
    constructor(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        //######################### public properties #########################
        this.onChange = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => { });
        /**
         * Method that is called when picker was touched
         */
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
    }
    //######################### public methods - implementation of ControlValueAccessor #########################
    /**
     * Sets value to select
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);
    }
    /**
     * Registers callback that is called when value of select changes
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = (/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            if (isBlank(value) || value == '') {
                fn(null);
                return;
            }
            if (!/^[+-]?\d+(?:[,.]\d+)?$/g.test(value)) {
                fn(NaN);
                return;
            }
            ;
            fn(parseFloat(value.replace(",", ".")));
        });
    }
    /**
     * Registers callback that is called when select is closed
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
}
NumberInputControlValueAccessor.decorators = [
    { type: Directive, args: [{
                selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',
                providers: [NUMBER_INPUT_VALUE_ACCESSOR],
                host: {
                    '(change)': 'onChange($event.target.value)',
                    '(input)': 'onChange($event.target.value)',
                    '(blur)': 'onTouched()'
                }
            },] }
];
/** @nocollapse */
NumberInputControlValueAccessor.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
if (false) {
    /** @type {?} */
    NumberInputControlValueAccessor.prototype.onChange;
    /**
     * Method that is called when picker was touched
     * @type {?}
     */
    NumberInputControlValueAccessor.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    NumberInputControlValueAccessor.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    NumberInputControlValueAccessor.prototype._elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVySW5wdXRDb250cm9sVmFsdWVBY2Nlc3Nvci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZGlyZWN0aXZlcy9udW1iZXJJbnB1dC9udW1iZXJJbnB1dENvbnRyb2xWYWx1ZUFjY2Vzc29yLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBb0IsVUFBVSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDN0YsT0FBTyxFQUFDLGlCQUFpQixFQUF1QixNQUFNLGdCQUFnQixDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7TUFLakMsMkJBQTJCLEdBQUcsbUJBQ3BDO0lBQ0ksT0FBTyxFQUFFLGlCQUFpQjtJQUMxQixXQUFXLEVBQUUsVUFBVTs7O0lBQUMsR0FBRyxFQUFFLENBQUMsK0JBQStCLEVBQUM7SUFDOUQsS0FBSyxFQUFFLElBQUk7Q0FDZCxFQUFBOzs7O0FBZ0JELE1BQU0sT0FBTywrQkFBK0I7Ozs7OztJQVl4QyxZQUFvQixTQUFvQixFQUFVLFdBQXVCO1FBQXJELGNBQVMsR0FBVCxTQUFTLENBQVc7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBWTs7UUFSbEUsYUFBUTs7OztRQUFHLENBQUMsQ0FBTSxFQUFFLEVBQUUsR0FBRSxDQUFDLEVBQUM7Ozs7UUFLMUIsY0FBUzs7O1FBQUcsR0FBRyxFQUFFLEdBQUUsQ0FBQyxFQUFDO0lBSzVCLENBQUM7Ozs7Ozs7SUFPTSxVQUFVLENBQUMsS0FBVTtRQUV4QixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDL0UsQ0FBQzs7Ozs7O0lBS00sZ0JBQWdCLENBQUMsRUFBc0I7UUFFMUMsSUFBSSxDQUFDLFFBQVE7Ozs7UUFBRyxDQUFDLEtBQWEsRUFBRSxFQUFFO1lBRTlCLElBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFLEVBQ2hDO2dCQUNJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFFVCxPQUFPO2FBQ1Y7WUFFRCxJQUFHLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUN6QztnQkFDSSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBRVIsT0FBTzthQUNWO1lBQUEsQ0FBQztZQUVGLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVDLENBQUMsQ0FBQSxDQUFDO0lBQ04sQ0FBQzs7Ozs7O0lBS00saUJBQWlCLENBQUMsRUFBYTtRQUVsQyxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN4QixDQUFDOzs7WUFwRUosU0FBUyxTQUNWO2dCQUNJLFFBQVEsRUFBRSxrRkFBa0Y7Z0JBQzVGLFNBQVMsRUFBRSxDQUFDLDJCQUEyQixDQUFDO2dCQUN4QyxJQUFJLEVBQ0o7b0JBQ0ksVUFBVSxFQUFFLCtCQUErQjtvQkFDM0MsU0FBUyxFQUFFLCtCQUErQjtvQkFDMUMsUUFBUSxFQUFFLGFBQWE7aUJBQzFCO2FBQ0o7Ozs7WUEzQmdELFNBQVM7WUFBRSxVQUFVOzs7O0lBZ0NsRSxtREFBaUM7Ozs7O0lBS2pDLG9EQUE0Qjs7Ozs7SUFHaEIsb0RBQTRCOzs7OztJQUFFLHNEQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFeGlzdGluZ1Byb3ZpZGVyLCBmb3J3YXJkUmVmLCBSZW5kZXJlcjIsIEVsZW1lbnRSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge05HX1ZBTFVFX0FDQ0VTU09SLCBDb250cm9sVmFsdWVBY2Nlc3Nvcn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQge2lzQmxhbmt9IGZyb20gJ0Bhc3NlY28vY29tbW9uJztcclxuXHJcbi8qKlxyXG4gKiBWYWx1ZSBhY2Nlc3NvciBwcm92aWRlciBmb3IgbnVtYmVyIGlucHV0c1xyXG4gKi9cclxuY29uc3QgTlVNQkVSX0lOUFVUX1ZBTFVFX0FDQ0VTU09SID0gPEV4aXN0aW5nUHJvdmlkZXI+XHJcbntcclxuICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLCBcclxuICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE51bWJlcklucHV0Q29udHJvbFZhbHVlQWNjZXNzb3IpLCBcclxuICAgIG11bHRpOiB0cnVlXHJcbn07XHJcblxyXG4vKipcclxuICogVmFsdWUgYWNjZXNzb3IgZm9yIGdldHRpbmcgYW5kIHNldHRpbmcgdmFsdWVzIGZvciBudW1iZXIgaW5wdXRzXHJcbiAqL1xyXG5ARGlyZWN0aXZlKFxyXG57XHJcbiAgICBzZWxlY3RvcjogJ2lucHV0W251bWJlcl1bZm9ybUNvbnRyb2xOYW1lXSxpbnB1dFtudW1iZXJdW2Zvcm1Db250cm9sXSxpbnB1dFtudW1iZXJdW25nTW9kZWxdJyxcclxuICAgIHByb3ZpZGVyczogW05VTUJFUl9JTlBVVF9WQUxVRV9BQ0NFU1NPUl0sXHJcbiAgICBob3N0OiBcclxuICAgIHtcclxuICAgICAgICAnKGNoYW5nZSknOiAnb25DaGFuZ2UoJGV2ZW50LnRhcmdldC52YWx1ZSknLFxyXG4gICAgICAgICcoaW5wdXQpJzogJ29uQ2hhbmdlKCRldmVudC50YXJnZXQudmFsdWUpJyxcclxuICAgICAgICAnKGJsdXIpJzogJ29uVG91Y2hlZCgpJ1xyXG4gICAgfVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTnVtYmVySW5wdXRDb250cm9sVmFsdWVBY2Nlc3NvciBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yXHJcbntcclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwdWJsaWMgcHJvcGVydGllcyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcbiAgICBcclxuICAgIHB1YmxpYyBvbkNoYW5nZSA9IChfOiBhbnkpID0+IHt9O1xyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIE1ldGhvZCB0aGF0IGlzIGNhbGxlZCB3aGVuIHBpY2tlciB3YXMgdG91Y2hlZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25Ub3VjaGVkID0gKCkgPT4ge307XHJcbiAgICBcclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBjb25zdHJ1Y3RvciAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyLCBwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmKVxyXG4gICAge1xyXG4gICAgfVxyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwdWJsaWMgbWV0aG9kcyAtIGltcGxlbWVudGF0aW9uIG9mIENvbnRyb2xWYWx1ZUFjY2Vzc29yICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdmFsdWUgdG8gc2VsZWN0XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAndmFsdWUnLCB2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlcnMgY2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB2YWx1ZSBvZiBzZWxlY3QgY2hhbmdlc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVnaXN0ZXJPbkNoYW5nZShmbjogKGRhdGE6IGFueSkgPT4gYW55KTogdm9pZFxyXG4gICAge1xyXG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSAodmFsdWU6IHN0cmluZykgPT4gXHJcbiAgICAgICAgeyBcclxuICAgICAgICAgICAgaWYoaXNCbGFuayh2YWx1ZSkgfHwgdmFsdWUgPT0gJycpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZuKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKCEvXlsrLV0/XFxkKyg/OlssLl1cXGQrKT8kL2cudGVzdCh2YWx1ZSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZuKE5hTik7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZuKHBhcnNlRmxvYXQodmFsdWUucmVwbGFjZShcIixcIiwgXCIuXCIpKSk7IFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlcnMgY2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiBzZWxlY3QgaXMgY2xvc2VkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gYW55KTogdm9pZFxyXG4gICAge1xyXG4gICAgICAgIHRoaXMub25Ub3VjaGVkID0gZm47XHJcbiAgICB9XHJcbn1cclxuIl19