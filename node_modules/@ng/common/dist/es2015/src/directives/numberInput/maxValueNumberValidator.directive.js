/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NG_VALIDATORS } from '@angular/forms';
import { Input, forwardRef, Directive, Attribute } from '@angular/core';
import { isBlank, isPresent } from '@asseco/common';
import { Validators } from '../../misc';
/**
 * Validator that is injected with directive MaxValueNumberValidatorDirective
 * @type {?}
 */
const MAX_NUMBER_VALIDATOR = (/** @type {?} */ ({
    provide: NG_VALIDATORS,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => MaxValueNumberValidatorDirective)),
    multi: true
}));
/**
 * Directive injecting checking for number max value validator
 */
export class MaxValueNumberValidatorDirective {
    //######################### constructor #########################
    /**
     * @param {?} maxValue
     */
    constructor(maxValue) {
        /**
         * Indication whether validator was initialized
         */
        this._initialized = false;
        /** @type {?} */
        var value;
        if (isBlank(maxValue) || maxValue.length < 1 || isNaN(value = parseFloat(maxValue.replace(",", ".")))) {
            value = null;
        }
        this._maxValue = value;
    }
    //######################### public methods - implementation of OnChanges #########################
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this._initialized) {
            this._initialized = true;
            this._validator = Validators.max(this._maxValue);
        }
        if ('maxValue' in changes) {
            this._validator = Validators.max(isPresent(this.maxValue) ? (/** @type {?} */ ((/** @type {?} */ (this.maxValue)))) : this._maxValue);
        }
    }
    //######################### public methods - implementation of Validator #########################
    /**
     * Validates input and returns validation result
     * @param {?} control Control that is being validated
     * @return {?} validation results
     */
    validate(control) {
        return this._validator(control);
    }
}
MaxValueNumberValidatorDirective.decorators = [
    { type: Directive, args: [{
                selector: "input[number][maxValue][formControlName],input[number][maxValue][formControl],input[number][maxValue][ngModel]",
                providers: [MAX_NUMBER_VALIDATOR]
            },] }
];
/** @nocollapse */
MaxValueNumberValidatorDirective.ctorParameters = () => [
    { type: String, decorators: [{ type: Attribute, args: ["maxValue",] }] }
];
MaxValueNumberValidatorDirective.propDecorators = {
    maxValue: [{ type: Input }]
};
if (false) {
    /**
     * Current max value that is allowed
     * @type {?}
     * @private
     */
    MaxValueNumberValidatorDirective.prototype._maxValue;
    /**
     * Function used for validations
     * @type {?}
     * @private
     */
    MaxValueNumberValidatorDirective.prototype._validator;
    /**
     * Indication whether validator was initialized
     * @type {?}
     * @private
     */
    MaxValueNumberValidatorDirective.prototype._initialized;
    /**
     * Bound max value that is allowed, which overrides value set to attribute maxValue
     * @type {?}
     */
    MaxValueNumberValidatorDirective.prototype.maxValue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF4VmFsdWVOdW1iZXJWYWxpZGF0b3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2RpcmVjdGl2ZXMvbnVtYmVySW5wdXQvbWF4VmFsdWVOdW1iZXJWYWxpZGF0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsYUFBYSxFQUE0RCxNQUFNLGdCQUFnQixDQUFDO0FBQ3hHLE9BQU8sRUFBbUIsS0FBSyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUEyQixNQUFNLGVBQWUsQ0FBQztBQUNsSCxPQUFPLEVBQUMsT0FBTyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRWxELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxZQUFZLENBQUM7Ozs7O01BS2hDLG9CQUFvQixHQUFHLG1CQUM3QjtJQUNJLE9BQU8sRUFBRSxhQUFhO0lBQ3RCLFdBQVcsRUFBRSxVQUFVOzs7SUFBQyxHQUFHLEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBQztJQUMvRCxLQUFLLEVBQUUsSUFBSTtDQUNkLEVBQUE7Ozs7QUFVRCxNQUFNLE9BQU8sZ0NBQWdDOzs7OztJQTRCekMsWUFBbUMsUUFBZ0I7Ozs7UUFYM0MsaUJBQVksR0FBWSxLQUFLLENBQUM7O1lBYTlCLEtBQUs7UUFFVCxJQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQ3BHO1lBQ0ksS0FBSyxHQUFHLElBQUksQ0FBQztTQUNoQjtRQUVELElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBQzNCLENBQUM7Ozs7OztJQUlNLFdBQVcsQ0FBQyxPQUFzQjtRQUVyQyxJQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksRUFDckI7WUFDSSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztZQUV6QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3BEO1FBRUQsSUFBSSxVQUFVLElBQUksT0FBTyxFQUN6QjtZQUNJLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBUSxtQkFBQSxJQUFJLENBQUMsUUFBUSxFQUFDLEVBQUEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3hHO0lBQ0wsQ0FBQzs7Ozs7OztJQVNNLFFBQVEsQ0FBQyxPQUF3QjtRQUVwQyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEMsQ0FBQzs7O1lBeEVKLFNBQVMsU0FDVjtnQkFDSSxRQUFRLEVBQUUsZ0hBQWdIO2dCQUMxSCxTQUFTLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQzthQUNwQzs7Ozt5Q0E2QmdCLFNBQVMsU0FBQyxVQUFVOzs7dUJBSmhDLEtBQUs7Ozs7Ozs7O0lBakJOLHFEQUErQjs7Ozs7O0lBSy9CLHNEQUFnQzs7Ozs7O0lBS2hDLHdEQUFzQzs7Ozs7SUFPdEMsb0RBQ3lCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtOR19WQUxJREFUT1JTLCBBYnN0cmFjdENvbnRyb2wsIFZhbGlkYXRvciwgVmFsaWRhdG9yRm4sIFZhbGlkYXRpb25FcnJvcnN9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHtFeGlzdGluZ1Byb3ZpZGVyLCBJbnB1dCwgZm9yd2FyZFJlZiwgRGlyZWN0aXZlLCBBdHRyaWJ1dGUsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlc30gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7aXNCbGFuaywgaXNQcmVzZW50fSBmcm9tICdAYXNzZWNvL2NvbW1vbic7XHJcblxyXG5pbXBvcnQge1ZhbGlkYXRvcnN9IGZyb20gJy4uLy4uL21pc2MnO1xyXG5cclxuLyoqXHJcbiAqIFZhbGlkYXRvciB0aGF0IGlzIGluamVjdGVkIHdpdGggZGlyZWN0aXZlIE1heFZhbHVlTnVtYmVyVmFsaWRhdG9yRGlyZWN0aXZlXHJcbiAqL1xyXG5jb25zdCBNQVhfTlVNQkVSX1ZBTElEQVRPUiA9IDxFeGlzdGluZ1Byb3ZpZGVyPlxyXG57XHJcbiAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxyXG4gICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTWF4VmFsdWVOdW1iZXJWYWxpZGF0b3JEaXJlY3RpdmUpLFxyXG4gICAgbXVsdGk6IHRydWVcclxufTtcclxuXHJcbi8qKlxyXG4gKiBEaXJlY3RpdmUgaW5qZWN0aW5nIGNoZWNraW5nIGZvciBudW1iZXIgbWF4IHZhbHVlIHZhbGlkYXRvclxyXG4gKi9cclxuQERpcmVjdGl2ZShcclxue1xyXG4gICAgc2VsZWN0b3I6IFwiaW5wdXRbbnVtYmVyXVttYXhWYWx1ZV1bZm9ybUNvbnRyb2xOYW1lXSxpbnB1dFtudW1iZXJdW21heFZhbHVlXVtmb3JtQ29udHJvbF0saW5wdXRbbnVtYmVyXVttYXhWYWx1ZV1bbmdNb2RlbF1cIixcclxuICAgIHByb3ZpZGVyczogW01BWF9OVU1CRVJfVkFMSURBVE9SXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTWF4VmFsdWVOdW1iZXJWYWxpZGF0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBWYWxpZGF0b3IsIE9uQ2hhbmdlc1xyXG57XHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHJpdmF0ZSBmaWVsZHMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3VycmVudCBtYXggdmFsdWUgdGhhdCBpcyBhbGxvd2VkXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX21heFZhbHVlOiBudW1iZXJ8bnVsbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIHVzZWQgZm9yIHZhbGlkYXRpb25zXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX3ZhbGlkYXRvcjogVmFsaWRhdG9yRm47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbmRpY2F0aW9uIHdoZXRoZXIgdmFsaWRhdG9yIHdhcyBpbml0aWFsaXplZFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9pbml0aWFsaXplZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwdWJsaWMgcHJvcGVydGllcyAtIGlucHV0cyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBCb3VuZCBtYXggdmFsdWUgdGhhdCBpcyBhbGxvd2VkLCB3aGljaCBvdmVycmlkZXMgdmFsdWUgc2V0IHRvIGF0dHJpYnV0ZSBtYXhWYWx1ZVxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKVxyXG4gICAgcHVibGljIG1heFZhbHVlPzogbnVtYmVyO1xyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBjb25zdHJ1Y3RvciAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcbiAgICBjb25zdHJ1Y3RvcihAQXR0cmlidXRlKFwibWF4VmFsdWVcIikgbWF4VmFsdWU6IHN0cmluZylcclxuICAgIHtcclxuICAgICAgICB2YXIgdmFsdWU7XHJcblxyXG4gICAgICAgIGlmKGlzQmxhbmsobWF4VmFsdWUpIHx8IG1heFZhbHVlLmxlbmd0aCA8IDEgfHwgaXNOYU4odmFsdWUgPSBwYXJzZUZsb2F0KG1heFZhbHVlLnJlcGxhY2UoXCIsXCIsIFwiLlwiKSkpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFsdWUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fbWF4VmFsdWUgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIG1ldGhvZHMgLSBpbXBsZW1lbnRhdGlvbiBvZiBPbkNoYW5nZXMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZFxyXG4gICAge1xyXG4gICAgICAgIGlmKCF0aGlzLl9pbml0aWFsaXplZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbGlkYXRvciA9IFZhbGlkYXRvcnMubWF4KHRoaXMuX21heFZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgnbWF4VmFsdWUnIGluIGNoYW5nZXMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl92YWxpZGF0b3IgPSBWYWxpZGF0b3JzLm1heChpc1ByZXNlbnQodGhpcy5tYXhWYWx1ZSkgPyA8bnVtYmVyPnRoaXMubWF4VmFsdWUhIDogdGhpcy5fbWF4VmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIG1ldGhvZHMgLSBpbXBsZW1lbnRhdGlvbiBvZiBWYWxpZGF0b3IgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVmFsaWRhdGVzIGlucHV0IGFuZCByZXR1cm5zIHZhbGlkYXRpb24gcmVzdWx0XHJcbiAgICAgKiBAcGFyYW0gY29udHJvbCBDb250cm9sIHRoYXQgaXMgYmVpbmcgdmFsaWRhdGVkXHJcbiAgICAgKiBAcmV0dXJucyB2YWxpZGF0aW9uIHJlc3VsdHNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHZhbGlkYXRlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnN8bnVsbFxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWxpZGF0b3IoY29udHJvbCk7XHJcbiAgICB9XHJcbn0iXX0=