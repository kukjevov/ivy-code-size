/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NG_VALIDATORS } from '@angular/forms';
import { forwardRef, Directive } from '@angular/core';
import { Validators } from '../../misc';
/**
 * Validator that is injected with directive NumberInputValidatorDirective
 * @type {?}
 */
const NUMBER_VALIDATOR = (/** @type {?} */ ({
    provide: NG_VALIDATORS,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => NumberInputValidatorDirective)),
    multi: true
}));
/**
 * Is number directive injecting checking for number validator
 */
export class NumberInputValidatorDirective {
    //######################### public methods - implementation of Validator #########################
    /**
     * Validates input and returns validation result
     * @param {?} control Control that is being validated
     * @return {?} validation results
     */
    validate(control) {
        return Validators.number(control);
    }
}
NumberInputValidatorDirective.decorators = [
    { type: Directive, args: [{
                selector: "input[number][formControlName],input[number][formControl],input[number][ngModel]",
                providers: [NUMBER_VALIDATOR]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVySW5wdXRWYWxpZGF0b3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2RpcmVjdGl2ZXMvbnVtYmVySW5wdXQvbnVtYmVySW5wdXRWYWxpZGF0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsYUFBYSxFQUErQyxNQUFNLGdCQUFnQixDQUFDO0FBQzNGLE9BQU8sRUFBbUIsVUFBVSxFQUFFLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV0RSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sWUFBWSxDQUFDOzs7OztNQUtoQyxnQkFBZ0IsR0FBRyxtQkFDekI7SUFDSSxPQUFPLEVBQUUsYUFBYTtJQUN0QixXQUFXLEVBQUUsVUFBVTs7O0lBQUMsR0FBRyxFQUFFLENBQUMsNkJBQTZCLEVBQUM7SUFDNUQsS0FBSyxFQUFFLElBQUk7Q0FDZCxFQUFBOzs7O0FBVUQsTUFBTSxPQUFPLDZCQUE2Qjs7Ozs7OztJQVMvQixRQUFRLENBQUMsT0FBd0I7UUFFcEMsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7OztZQWpCSixTQUFTLFNBQ1Y7Z0JBQ0ksUUFBUSxFQUFFLGtGQUFrRjtnQkFDNUYsU0FBUyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7YUFDaEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge05HX1ZBTElEQVRPUlMsIEFic3RyYWN0Q29udHJvbCwgVmFsaWRhdG9yLCBWYWxpZGF0aW9uRXJyb3JzfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7RXhpc3RpbmdQcm92aWRlciwgZm9yd2FyZFJlZiwgRGlyZWN0aXZlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7VmFsaWRhdG9yc30gZnJvbSAnLi4vLi4vbWlzYyc7XHJcblxyXG4vKipcclxuICogVmFsaWRhdG9yIHRoYXQgaXMgaW5qZWN0ZWQgd2l0aCBkaXJlY3RpdmUgTnVtYmVySW5wdXRWYWxpZGF0b3JEaXJlY3RpdmVcclxuICovXHJcbmNvbnN0IE5VTUJFUl9WQUxJREFUT1IgPSA8RXhpc3RpbmdQcm92aWRlcj5cclxue1xyXG4gICAgcHJvdmlkZTogTkdfVkFMSURBVE9SUyxcclxuICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE51bWJlcklucHV0VmFsaWRhdG9yRGlyZWN0aXZlKSxcclxuICAgIG11bHRpOiB0cnVlXHJcbn07XHJcblxyXG4vKipcclxuICogSXMgbnVtYmVyIGRpcmVjdGl2ZSBpbmplY3RpbmcgY2hlY2tpbmcgZm9yIG51bWJlciB2YWxpZGF0b3JcclxuICovXHJcbkBEaXJlY3RpdmUoXHJcbntcclxuICAgIHNlbGVjdG9yOiBcImlucHV0W251bWJlcl1bZm9ybUNvbnRyb2xOYW1lXSxpbnB1dFtudW1iZXJdW2Zvcm1Db250cm9sXSxpbnB1dFtudW1iZXJdW25nTW9kZWxdXCIsXHJcbiAgICBwcm92aWRlcnM6IFtOVU1CRVJfVkFMSURBVE9SXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTnVtYmVySW5wdXRWYWxpZGF0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBWYWxpZGF0b3Jcclxue1xyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHB1YmxpYyBtZXRob2RzIC0gaW1wbGVtZW50YXRpb24gb2YgVmFsaWRhdG9yICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIFZhbGlkYXRlcyBpbnB1dCBhbmQgcmV0dXJucyB2YWxpZGF0aW9uIHJlc3VsdFxyXG4gICAgICogQHBhcmFtIGNvbnRyb2wgQ29udHJvbCB0aGF0IGlzIGJlaW5nIHZhbGlkYXRlZFxyXG4gICAgICogQHJldHVybnMgdmFsaWRhdGlvbiByZXN1bHRzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzfG51bGxcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gVmFsaWRhdG9ycy5udW1iZXIoY29udHJvbCk7XHJcbiAgICB9XHJcbn0iXX0=