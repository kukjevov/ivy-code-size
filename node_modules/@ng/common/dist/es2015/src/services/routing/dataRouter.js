/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Router, NavigationEnd, NavigationError } from '@angular/router';
import { isPresent } from '@asseco/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
/**
 * Special implementation of router that allows routing with sending complex data to routed component
 */
export class DataRouter {
    //######################### constructor #########################
    /**
     * @param {?} _router
     */
    constructor(_router) {
        this._router = _router;
        //######################### private fields #########################
        /**
         * Value that is going to be used for next routed data
         */
        this._nextValue = null;
        /**
         * Url path of next route
         */
        this._nextUrlPath = null;
        /**
         * Promise that resolves into value for current route
         */
        this._valuePromise = null;
        this._router.events.subscribe((/**
         * @param {?} next
         * @return {?}
         */
        next => {
            if (!(next instanceof NavigationEnd) && !(next instanceof NavigationError)) {
                return;
            }
            /** @type {?} */
            let error = next instanceof NavigationError;
            if (isPresent(this._valuePromiseResolver) && isPresent(this._nextUrlPath) && !error) {
                if (this._nextUrlPath == next.url) {
                    this._valuePromiseResolver(this._nextValue);
                }
                else {
                    this._valuePromiseResolver(null);
                }
            }
            else if (isPresent(this._valuePromiseResolver)) {
                this._valuePromiseResolver(null);
            }
            this._nextUrlPath = null;
            this._nextValue = null;
            this._valuePromise = new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            resolve => {
                this._valuePromiseResolver = resolve;
            }));
        }));
    }
    //######################### public properties #########################
    /**
     * Gets promise that resolves into value for current route
     * @return {?}
     */
    get valuePromise() {
        return this._valuePromise || new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            resolve(null);
        }));
    }
    //######################### public methods #########################
    /**
     * Navigate based on the provided Route Link DSL. This method also allows you to provide complex data for your route
     * @param {?} linkParams Link params that are used as for standard router
     * @param {?} routeData Any type of object that can be passed to your routed component
     * @return {?} Promise
     */
    navigate(linkParams, routeData) {
        this._nextValue = routeData;
        this._nextUrlPath = this._router.createUrlTree(linkParams).toString();
        return this._router.navigate(linkParams);
    }
}
DataRouter.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
DataRouter.ctorParameters = () => [
    { type: Router }
];
/** @nocollapse */ DataRouter.ngInjectableDef = i0.defineInjectable({ factory: function DataRouter_Factory() { return new DataRouter(i0.inject(i1.Router)); }, token: DataRouter, providedIn: "root" });
if (false) {
    /**
     * Value that is going to be used for next routed data
     * @type {?}
     * @private
     */
    DataRouter.prototype._nextValue;
    /**
     * Url path of next route
     * @type {?}
     * @private
     */
    DataRouter.prototype._nextUrlPath;
    /**
     * Resolver function that is used for resolving routed value
     * @type {?}
     * @private
     */
    DataRouter.prototype._valuePromiseResolver;
    /**
     * Promise that resolves into value for current route
     * @type {?}
     * @private
     */
    DataRouter.prototype._valuePromise;
    /**
     * @type {?}
     * @private
     */
    DataRouter.prototype._router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YVJvdXRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9zZXJ2aWNlcy9yb3V0aW5nL2RhdGFSb3V0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsZUFBZSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDdkUsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7QUFNekMsTUFBTSxPQUFPLFVBQVU7Ozs7O0lBc0NuQixZQUFvQixPQUFlO1FBQWYsWUFBTyxHQUFQLE9BQU8sQ0FBUTs7Ozs7UUEvQjNCLGVBQVUsR0FBUSxJQUFJLENBQUM7Ozs7UUFLdkIsaUJBQVksR0FBZ0IsSUFBSSxDQUFDOzs7O1FBVWpDLGtCQUFhLEdBQXNCLElBQUksQ0FBQztRQWtCNUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUzs7OztRQUFDLElBQUksQ0FBQyxFQUFFO1lBRWpDLElBQUcsQ0FBQyxDQUFDLElBQUksWUFBWSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxZQUFZLGVBQWUsQ0FBQyxFQUN6RTtnQkFDSSxPQUFPO2FBQ1Y7O2dCQUVHLEtBQUssR0FBRyxJQUFJLFlBQVksZUFBZTtZQUUzQyxJQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUNsRjtnQkFDSSxJQUFHLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLEdBQUcsRUFDaEM7b0JBQ0ksSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztpQkFDL0M7cUJBRUQ7b0JBQ0ksSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNwQzthQUNKO2lCQUNJLElBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxFQUM3QztnQkFDSSxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDcEM7WUFFRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztZQUN6QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztZQUV2QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksT0FBTzs7OztZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUV2QyxJQUFJLENBQUMscUJBQXFCLEdBQUcsT0FBTyxDQUFDO1lBQ3pDLENBQUMsRUFBQyxDQUFDO1FBQ1AsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7Ozs7SUE1Q0QsSUFBVyxZQUFZO1FBRW5CLE9BQU8sSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLE9BQU87Ozs7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUUvQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEIsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7Ozs7OztJQWdETSxRQUFRLENBQUMsVUFBaUIsRUFBRSxTQUFjO1FBRTdDLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBQzVCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFdEUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM3QyxDQUFDOzs7WUExRkosVUFBVSxTQUFDLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBQzs7OztZQU54QixNQUFNOzs7Ozs7Ozs7SUFjVixnQ0FBK0I7Ozs7OztJQUsvQixrQ0FBeUM7Ozs7OztJQUt6QywyQ0FBbUQ7Ozs7OztJQUtuRCxtQ0FBZ0Q7Ozs7O0lBZ0JwQyw2QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1JvdXRlciwgTmF2aWdhdGlvbkVuZCwgTmF2aWdhdGlvbkVycm9yfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQge2lzUHJlc2VudH0gZnJvbSAnQGFzc2Vjby9jb21tb24nO1xyXG5cclxuLyoqXHJcbiAqIFNwZWNpYWwgaW1wbGVtZW50YXRpb24gb2Ygcm91dGVyIHRoYXQgYWxsb3dzIHJvdXRpbmcgd2l0aCBzZW5kaW5nIGNvbXBsZXggZGF0YSB0byByb3V0ZWQgY29tcG9uZW50XHJcbiAqL1xyXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogJ3Jvb3QnfSlcclxuZXhwb3J0IGNsYXNzIERhdGFSb3V0ZXJcclxue1xyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHByaXZhdGUgZmllbGRzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIFZhbHVlIHRoYXQgaXMgZ29pbmcgdG8gYmUgdXNlZCBmb3IgbmV4dCByb3V0ZWQgZGF0YVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9uZXh0VmFsdWU6IGFueSA9IG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcmwgcGF0aCBvZiBuZXh0IHJvdXRlXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX25leHRVcmxQYXRoOiBzdHJpbmd8bnVsbCA9IG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNvbHZlciBmdW5jdGlvbiB0aGF0IGlzIHVzZWQgZm9yIHJlc29sdmluZyByb3V0ZWQgdmFsdWVcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfdmFsdWVQcm9taXNlUmVzb2x2ZXI6IChkYXRhOiBhbnkpID0+IHZvaWQ7XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogUHJvbWlzZSB0aGF0IHJlc29sdmVzIGludG8gdmFsdWUgZm9yIGN1cnJlbnQgcm91dGVcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfdmFsdWVQcm9taXNlOiBQcm9taXNlPGFueT58bnVsbCA9IG51bGw7XHJcblxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHB1YmxpYyBwcm9wZXJ0aWVzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGludG8gdmFsdWUgZm9yIGN1cnJlbnQgcm91dGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCB2YWx1ZVByb21pc2UoKTogUHJvbWlzZTxhbnk+XHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlUHJvbWlzZSB8fCBuZXcgUHJvbWlzZShyZXNvbHZlID0+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXNvbHZlKG51bGwpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBjb25zdHJ1Y3RvciAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9yb3V0ZXI6IFJvdXRlcilcclxuICAgIHtcclxuICAgICAgICB0aGlzLl9yb3V0ZXIuZXZlbnRzLnN1YnNjcmliZShuZXh0ID0+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZighKG5leHQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRW5kKSAmJiAhKG5leHQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRXJyb3IpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBlcnJvciA9IG5leHQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRXJyb3I7XHJcblxyXG4gICAgICAgICAgICBpZihpc1ByZXNlbnQodGhpcy5fdmFsdWVQcm9taXNlUmVzb2x2ZXIpICYmIGlzUHJlc2VudCh0aGlzLl9uZXh0VXJsUGF0aCkgJiYgIWVycm9yKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLl9uZXh0VXJsUGF0aCA9PSBuZXh0LnVybClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZVByb21pc2VSZXNvbHZlcih0aGlzLl9uZXh0VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlUHJvbWlzZVJlc29sdmVyKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYoaXNQcmVzZW50KHRoaXMuX3ZhbHVlUHJvbWlzZVJlc29sdmVyKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVQcm9taXNlUmVzb2x2ZXIobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMuX25leHRVcmxQYXRoID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fbmV4dFZhbHVlID0gbnVsbDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlUHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVQcm9taXNlUmVzb2x2ZXIgPSByZXNvbHZlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIG1ldGhvZHMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTmF2aWdhdGUgYmFzZWQgb24gdGhlIHByb3ZpZGVkIFJvdXRlIExpbmsgRFNMLiBUaGlzIG1ldGhvZCBhbHNvIGFsbG93cyB5b3UgdG8gcHJvdmlkZSBjb21wbGV4IGRhdGEgZm9yIHlvdXIgcm91dGVcclxuICAgICAqIEBwYXJhbSBsaW5rUGFyYW1zIExpbmsgcGFyYW1zIHRoYXQgYXJlIHVzZWQgYXMgZm9yIHN0YW5kYXJkIHJvdXRlclxyXG4gICAgICogQHBhcmFtIHJvdXRlRGF0YSBBbnkgdHlwZSBvZiBvYmplY3QgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHlvdXIgcm91dGVkIGNvbXBvbmVudFxyXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbmF2aWdhdGUobGlua1BhcmFtczogYW55W10sIHJvdXRlRGF0YTogYW55KTogUHJvbWlzZTxhbnk+XHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5fbmV4dFZhbHVlID0gcm91dGVEYXRhO1xyXG4gICAgICAgIHRoaXMuX25leHRVcmxQYXRoID0gdGhpcy5fcm91dGVyLmNyZWF0ZVVybFRyZWUobGlua1BhcmFtcykudG9TdHJpbmcoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JvdXRlci5uYXZpZ2F0ZShsaW5rUGFyYW1zKTtcclxuICAgIH1cclxufVxyXG4iXX0=