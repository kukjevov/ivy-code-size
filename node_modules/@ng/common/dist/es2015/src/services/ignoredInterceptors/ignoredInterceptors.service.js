/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import * as i0 from "@angular/core";
/**
 * Contains id of request, used for IgnoredInterceptorsService
 * @record
 */
export function IgnoredInterceptorId() { }
if (false) {
    /**
     * Identification of request
     * @type {?|undefined}
     */
    IgnoredInterceptorId.prototype.requestId;
}
/**
 * Http request with request id for IgnoredInterceptorsService
 * @record
 * @template TBody
 */
export function HttpRequestIgnoredInterceptorId() { }
/**
 * Service used for disabling specific http client interceptor for one call, if you add interceptor you want to disable before call it will be disabled
 */
export class IgnoredInterceptorsService {
    constructor() {
        //######################### private fields #########################
        /**
         * Array of interceptors that will be ignored
         */
        this._ignoredInterceptors = [];
    }
    //######################### public methods #########################
    /**
     * Clears all ignored interceptors from service
     * @return {?}
     */
    clear() {
        this._ignoredInterceptors = [];
    }
    /**
     * Adds interceptor type that should be ignored for specified url
     * @template TType
     * @param {?} interceptorType Type of interceptor should be ignored
     * @param {?} requestId Object containing request id
     * @return {?}
     */
    addInterceptor(interceptorType, requestId) {
        if (!requestId.requestId) {
            return;
        }
        if (!this._ignoredInterceptors.find((/**
         * @param {?} itm
         * @return {?}
         */
        itm => itm.type == interceptorType && itm.requestId == requestId.requestId))) {
            this._ignoredInterceptors.push({
                type: interceptorType,
                requestId: requestId.requestId
            });
        }
    }
    /**
     * Checks specified interceptor whether is ingored
     * @template TType
     * @param {?} interceptorType Type of interceptor that is checked whether is ignored
     * @param {?} requestId
     * @return {?}
     */
    isIgnored(interceptorType, requestId) {
        if (!requestId.requestId) {
            return false;
        }
        /** @type {?} */
        let item = this._ignoredInterceptors.find((/**
         * @param {?} itm
         * @return {?}
         */
        itm => itm.requestId == requestId.requestId && itm.type == interceptorType));
        if (item) {
            this._ignoredInterceptors.splice(this._ignoredInterceptors.indexOf(item), 1);
            return true;
        }
        return false;
    }
}
IgnoredInterceptorsService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */ IgnoredInterceptorsService.ngInjectableDef = i0.defineInjectable({ factory: function IgnoredInterceptorsService_Factory() { return new IgnoredInterceptorsService(); }, token: IgnoredInterceptorsService, providedIn: "root" });
if (false) {
    /**
     * Array of interceptors that will be ignored
     * @type {?}
     * @private
     */
    IgnoredInterceptorsService.prototype._ignoredInterceptors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdub3JlZEludGVyY2VwdG9ycy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3NlcnZpY2VzL2lnbm9yZWRJbnRlcmNlcHRvcnMvaWdub3JlZEludGVyY2VwdG9ycy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFPLE1BQU0sZUFBZSxDQUFDOzs7Ozs7QUFNL0MsMENBTUM7Ozs7OztJQURHLHlDQUFtQjs7Ozs7OztBQU12QixxREFFQzs7OztBQU1ELE1BQU0sT0FBTywwQkFBMEI7SUFEdkM7Ozs7O1FBUVkseUJBQW9CLEdBQTJDLEVBQUUsQ0FBQztLQXlEN0U7Ozs7OztJQWxEVSxLQUFLO1FBRVIsSUFBSSxDQUFDLG9CQUFvQixHQUFHLEVBQUUsQ0FBQztJQUNuQyxDQUFDOzs7Ozs7OztJQU9NLGNBQWMsQ0FBUSxlQUE0QixFQUFFLFNBQStCO1FBRXRGLElBQUcsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUN2QjtZQUNJLE9BQU87U0FDVjtRQUVELElBQUcsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSTs7OztRQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxlQUFlLElBQUksR0FBRyxDQUFDLFNBQVMsSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFDLEVBQzlHO1lBQ0ksSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FDOUI7Z0JBQ0ksSUFBSSxFQUFFLGVBQWU7Z0JBQ3JCLFNBQVMsRUFBRSxTQUFTLENBQUMsU0FBUzthQUNqQyxDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7Ozs7Ozs7O0lBT00sU0FBUyxDQUFRLGVBQTRCLEVBQUUsU0FBK0I7UUFFakYsSUFBRyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQ3ZCO1lBQ0ksT0FBTyxLQUFLLENBQUM7U0FDaEI7O1lBRUcsSUFBSSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJOzs7O1FBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxJQUFJLFNBQVMsQ0FBQyxTQUFTLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxlQUFlLEVBQUM7UUFFckgsSUFBRyxJQUFJLEVBQ1A7WUFDSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFN0UsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7OztZQWhFSixVQUFVLFNBQUMsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDOzs7Ozs7Ozs7SUFRNUIsMERBQTBFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlLCBUeXBlfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQge0h0dHBSZXF1ZXN0fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCdcclxuXHJcbi8qKlxyXG4gKiBDb250YWlucyBpZCBvZiByZXF1ZXN0LCB1c2VkIGZvciBJZ25vcmVkSW50ZXJjZXB0b3JzU2VydmljZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJZ25vcmVkSW50ZXJjZXB0b3JJZFxyXG57XHJcbiAgICAvKipcclxuICAgICAqIElkZW50aWZpY2F0aW9uIG9mIHJlcXVlc3RcclxuICAgICAqL1xyXG4gICAgcmVxdWVzdElkPzogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogSHR0cCByZXF1ZXN0IHdpdGggcmVxdWVzdCBpZCBmb3IgSWdub3JlZEludGVyY2VwdG9yc1NlcnZpY2VcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSHR0cFJlcXVlc3RJZ25vcmVkSW50ZXJjZXB0b3JJZDxUQm9keT4gZXh0ZW5kcyBIdHRwUmVxdWVzdDxUQm9keT4sIElnbm9yZWRJbnRlcmNlcHRvcklkXHJcbntcclxufVxyXG5cclxuLyoqXHJcbiAqIFNlcnZpY2UgdXNlZCBmb3IgZGlzYWJsaW5nIHNwZWNpZmljIGh0dHAgY2xpZW50IGludGVyY2VwdG9yIGZvciBvbmUgY2FsbCwgaWYgeW91IGFkZCBpbnRlcmNlcHRvciB5b3Ugd2FudCB0byBkaXNhYmxlIGJlZm9yZSBjYWxsIGl0IHdpbGwgYmUgZGlzYWJsZWRcclxuICovXHJcbkBJbmplY3RhYmxlKHtwcm92aWRlZEluOiAncm9vdCd9KVxyXG5leHBvcnQgY2xhc3MgSWdub3JlZEludGVyY2VwdG9yc1NlcnZpY2Vcclxue1xyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHByaXZhdGUgZmllbGRzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFycmF5IG9mIGludGVyY2VwdG9ycyB0aGF0IHdpbGwgYmUgaWdub3JlZFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9pZ25vcmVkSW50ZXJjZXB0b3JzOiB7dHlwZTogVHlwZTxhbnk+LCByZXF1ZXN0SWQ6IHN0cmluZ31bXSA9IFtdO1xyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwdWJsaWMgbWV0aG9kcyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDbGVhcnMgYWxsIGlnbm9yZWQgaW50ZXJjZXB0b3JzIGZyb20gc2VydmljZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2xlYXIoKTogdm9pZFxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuX2lnbm9yZWRJbnRlcmNlcHRvcnMgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgaW50ZXJjZXB0b3IgdHlwZSB0aGF0IHNob3VsZCBiZSBpZ25vcmVkIGZvciBzcGVjaWZpZWQgdXJsXHJcbiAgICAgKiBAcGFyYW0gaW50ZXJjZXB0b3JUeXBlIFR5cGUgb2YgaW50ZXJjZXB0b3Igc2hvdWxkIGJlIGlnbm9yZWRcclxuICAgICAqIEBwYXJhbSByZXF1ZXN0SWQgT2JqZWN0IGNvbnRhaW5pbmcgcmVxdWVzdCBpZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWRkSW50ZXJjZXB0b3I8VFR5cGU+KGludGVyY2VwdG9yVHlwZTogVHlwZTxUVHlwZT4sIHJlcXVlc3RJZDogSWdub3JlZEludGVyY2VwdG9ySWQpOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgaWYoIXJlcXVlc3RJZC5yZXF1ZXN0SWQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZighdGhpcy5faWdub3JlZEludGVyY2VwdG9ycy5maW5kKGl0bSA9PiBpdG0udHlwZSA9PSBpbnRlcmNlcHRvclR5cGUgJiYgaXRtLnJlcXVlc3RJZCA9PSByZXF1ZXN0SWQucmVxdWVzdElkKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lnbm9yZWRJbnRlcmNlcHRvcnMucHVzaChcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogaW50ZXJjZXB0b3JUeXBlLFxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQucmVxdWVzdElkXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyBzcGVjaWZpZWQgaW50ZXJjZXB0b3Igd2hldGhlciBpcyBpbmdvcmVkXHJcbiAgICAgKiBAcGFyYW0gaW50ZXJjZXB0b3JUeXBlIFR5cGUgb2YgaW50ZXJjZXB0b3IgdGhhdCBpcyBjaGVja2VkIHdoZXRoZXIgaXMgaWdub3JlZFxyXG4gICAgICogQHBhcmFtIHVybCBPYmplY3QgY29udGFpbmluZyByZXF1ZXN0IGlkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpc0lnbm9yZWQ8VFR5cGU+KGludGVyY2VwdG9yVHlwZTogVHlwZTxUVHlwZT4sIHJlcXVlc3RJZDogSWdub3JlZEludGVyY2VwdG9ySWQpOiBib29sZWFuXHJcbiAgICB7XHJcbiAgICAgICAgaWYoIXJlcXVlc3RJZC5yZXF1ZXN0SWQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaXRlbSA9IHRoaXMuX2lnbm9yZWRJbnRlcmNlcHRvcnMuZmluZChpdG0gPT4gaXRtLnJlcXVlc3RJZCA9PSByZXF1ZXN0SWQucmVxdWVzdElkICYmIGl0bS50eXBlID09IGludGVyY2VwdG9yVHlwZSk7XHJcblxyXG4gICAgICAgIGlmKGl0ZW0pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9pZ25vcmVkSW50ZXJjZXB0b3JzLnNwbGljZSh0aGlzLl9pZ25vcmVkSW50ZXJjZXB0b3JzLmluZGV4T2YoaXRlbSksIDEpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn0iXX0=