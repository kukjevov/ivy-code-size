/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { PLATFORM_ID, Inject, Optional, Injectable } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { isBlank } from '@asseco/common';
import { SERVER_COOKIE_HEADER } from '../../types/tokens';
import * as i0 from "@angular/core";
import * as i1 from "../../types/tokens";
/**
 * Class that is used as wrapper for working with cookies
 */
export class CookieService {
    //######################### constructor #########################
    /**
     * @param {?} platformId
     * @param {?} _serverCookies
     */
    constructor(platformId, _serverCookies) {
        this._serverCookies = _serverCookies;
        //######################### private fields #########################
        /**
         * Indication that current code is running in browser
         */
        this._isBrowser = false;
        this._isBrowser = isPlatformBrowser(platformId);
    }
    //######################### public methods #########################
    /**
     * Retrieves a single cookie by it's name
     *
     * @param {?} name Identification of the Cookie
     * @return {?} The Cookie's value
     */
    getCookie(name) {
        if (!this._isBrowser && isBlank(this._serverCookies)) {
            return null;
        }
        name = encodeURIComponent(name);
        /** @type {?} */
        let regexp = new RegExp('(?:^' + name + '|;\\s*' + name + ')=(.*?)(?:;|$)', 'g');
        /** @type {?} */
        let result;
        if (isBlank(this._serverCookies)) {
            result = regexp.exec(document.cookie);
        }
        else {
            result = regexp.exec(this._serverCookies);
        }
        return (result === null) ? null : JSON.parse(decodeURIComponent(result[1]));
    }
    /**
     * Save the Cookie
     *
     * @param {?} name Cookie's identification
     * @param {?} value Cookie's value
     * @param {?=} expires Cookie's expiration date in days from now. If it's undefined the cookie is a session Cookie
     * @param {?=} path Path relative to the domain where the cookie should be avaiable. Default /
     * @param {?=} domain Domain where the cookie should be avaiable. Default current domain
     * @return {?}
     */
    setCookie(name, value, expires, path, domain) {
        if (!this._isBrowser) {
            return;
        }
        /** @type {?} */
        let cookieStr = encodeURIComponent(name) + '=' + encodeURIComponent(JSON.stringify(value)) + ';';
        if (expires) {
            /** @type {?} */
            let dtExpires = new Date(new Date().getTime() + expires * 1000 * 60 * 60 * 24);
            cookieStr += 'expires=' + dtExpires.toUTCString() + ';';
        }
        if (path) {
            cookieStr += 'path=' + path + ';';
        }
        if (domain) {
            cookieStr += 'domain=' + domain + ';';
        }
        document.cookie = cookieStr;
    }
    /**
     * Removes specified Cookie
     *
     * @param {?} name Cookie's identification
     * @param {?=} path Path relative to the domain where the cookie should be avaiable. Default /
     * @param {?=} domain Domain where the cookie should be avaiable. Default current domain
     * @return {?}
     */
    deleteCookie(name, path, domain) {
        if (!this._isBrowser) {
            return;
        }
        // If the cookie exists
        if (this.getCookie(name)) {
            this.setCookie(name, '', -1, path, domain);
        }
    }
}
CookieService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
CookieService.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [SERVER_COOKIE_HEADER,] }] }
];
/** @nocollapse */ CookieService.ngInjectableDef = i0.defineInjectable({ factory: function CookieService_Factory() { return new CookieService(i0.inject(i0.PLATFORM_ID), i0.inject(i1.SERVER_COOKIE_HEADER, 8)); }, token: CookieService, providedIn: "root" });
if (false) {
    /**
     * Indication that current code is running in browser
     * @type {?}
     * @private
     */
    CookieService.prototype._isBrowser;
    /**
     * @type {?}
     * @private
     */
    CookieService.prototype._serverCookies;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3NlcnZpY2VzL2Nvb2tpZXMvY29va2llcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsV0FBVyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ2xELE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUV2QyxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQzs7Ozs7O0FBTXhELE1BQU0sT0FBTyxhQUFhOzs7Ozs7SUFVdEIsWUFBaUMsVUFBa0IsRUFDVyxjQUFzQjtRQUF0QixtQkFBYyxHQUFkLGNBQWMsQ0FBUTs7Ozs7UUFKNUUsZUFBVSxHQUFZLEtBQUssQ0FBQztRQU1oQyxJQUFJLENBQUMsVUFBVSxHQUFHLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3BELENBQUM7Ozs7Ozs7O0lBVU0sU0FBUyxDQUFDLElBQVk7UUFFekIsSUFBRyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFDbkQ7WUFDSSxPQUFPLElBQUksQ0FBQztTQUNmO1FBRUQsSUFBSSxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDOztZQUU1QixNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksR0FBRyxRQUFRLEdBQUcsSUFBSSxHQUFHLGdCQUFnQixFQUFFLEdBQUcsQ0FBQzs7WUFDNUUsTUFBTTtRQUVWLElBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFDL0I7WUFDSSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekM7YUFFRDtZQUNJLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUM3QztRQUVELE9BQU8sQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7Ozs7Ozs7Ozs7O0lBV00sU0FBUyxDQUFDLElBQVksRUFBRSxLQUFVLEVBQUUsT0FBZ0IsRUFBRSxJQUFhLEVBQUUsTUFBZTtRQUV2RixJQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFDbkI7WUFDSSxPQUFPO1NBQ1Y7O1lBRUcsU0FBUyxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsR0FBRztRQUVoRyxJQUFJLE9BQU8sRUFDWDs7Z0JBQ1EsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsT0FBTyxHQUFHLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztZQUM5RSxTQUFTLElBQUksVUFBVSxHQUFHLFNBQVMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxHQUFHLENBQUM7U0FDM0Q7UUFFRCxJQUFJLElBQUksRUFDUjtZQUNJLFNBQVMsSUFBSSxPQUFPLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztTQUNyQztRQUVELElBQUksTUFBTSxFQUNWO1lBQ0ksU0FBUyxJQUFJLFNBQVMsR0FBRyxNQUFNLEdBQUcsR0FBRyxDQUFDO1NBQ3pDO1FBRUQsUUFBUSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDaEMsQ0FBQzs7Ozs7Ozs7O0lBU00sWUFBWSxDQUFDLElBQVksRUFBRSxJQUFhLEVBQUUsTUFBZTtRQUU1RCxJQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFDbkI7WUFDSSxPQUFPO1NBQ1Y7UUFFRCx1QkFBdUI7UUFDdkIsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUN4QjtZQUNJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDOUM7SUFDTCxDQUFDOzs7WUF6R0osVUFBVSxTQUFDLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBQzs7OztZQVdpQixNQUFNLHVCQUF0QyxNQUFNLFNBQUMsV0FBVzt5Q0FDbEIsUUFBUSxZQUFJLE1BQU0sU0FBQyxvQkFBb0I7Ozs7Ozs7OztJQUpwRCxtQ0FBb0M7Ozs7O0lBSXhCLHVDQUF3RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UExBVEZPUk1fSUQsIEluamVjdCwgT3B0aW9uYWwsIEluamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge2lzUGxhdGZvcm1Ccm93c2VyfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQge2lzQmxhbmt9IGZyb20gJ0Bhc3NlY28vY29tbW9uJztcclxuXHJcbmltcG9ydCB7U0VSVkVSX0NPT0tJRV9IRUFERVJ9IGZyb20gJy4uLy4uL3R5cGVzL3Rva2Vucyc7XHJcblxyXG4vKipcclxuICogQ2xhc3MgdGhhdCBpcyB1c2VkIGFzIHdyYXBwZXIgZm9yIHdvcmtpbmcgd2l0aCBjb29raWVzXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogJ3Jvb3QnfSlcclxuZXhwb3J0IGNsYXNzIENvb2tpZVNlcnZpY2Vcclxue1xyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHByaXZhdGUgZmllbGRzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIEluZGljYXRpb24gdGhhdCBjdXJyZW50IGNvZGUgaXMgcnVubmluZyBpbiBicm93c2VyXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2lzQnJvd3NlcjogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBjb25zdHJ1Y3RvciAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KFBMQVRGT1JNX0lEKSBwbGF0Zm9ybUlkOiBPYmplY3QsXHJcbiAgICAgICAgICAgICAgICBAT3B0aW9uYWwoKSBASW5qZWN0KFNFUlZFUl9DT09LSUVfSEVBREVSKSBwcml2YXRlIF9zZXJ2ZXJDb29raWVzOiBzdHJpbmcpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5faXNCcm93c2VyID0gaXNQbGF0Zm9ybUJyb3dzZXIocGxhdGZvcm1JZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHB1YmxpYyBtZXRob2RzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHJpZXZlcyBhIHNpbmdsZSBjb29raWUgYnkgaXQncyBuYW1lXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWUgSWRlbnRpZmljYXRpb24gb2YgdGhlIENvb2tpZVxyXG4gICAgICogQHJldHVybnMgVGhlIENvb2tpZSdzIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRDb29raWUobmFtZTogc3RyaW5nKTogYW55XHJcbiAgICB7XHJcbiAgICAgICAgaWYoIXRoaXMuX2lzQnJvd3NlciAmJiBpc0JsYW5rKHRoaXMuX3NlcnZlckNvb2tpZXMpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBuYW1lID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzpeJyArIG5hbWUgKyAnfDtcXFxccyonICsgbmFtZSArICcpPSguKj8pKD86O3wkKScsICdnJyk7XHJcbiAgICAgICAgbGV0IHJlc3VsdDtcclxuXHJcbiAgICAgICAgaWYoaXNCbGFuayh0aGlzLl9zZXJ2ZXJDb29raWVzKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlZ2V4cC5leGVjKGRvY3VtZW50LmNvb2tpZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlZ2V4cC5leGVjKHRoaXMuX3NlcnZlckNvb2tpZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gKHJlc3VsdCA9PT0gbnVsbCkgPyBudWxsIDogSlNPTi5wYXJzZShkZWNvZGVVUklDb21wb25lbnQocmVzdWx0WzFdKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTYXZlIHRoZSBDb29raWVcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBDb29raWUncyBpZGVudGlmaWNhdGlvblxyXG4gICAgICogQHBhcmFtIHZhbHVlIENvb2tpZSdzIHZhbHVlXHJcbiAgICAgKiBAcGFyYW0gZXhwaXJlcyBDb29raWUncyBleHBpcmF0aW9uIGRhdGUgaW4gZGF5cyBmcm9tIG5vdy4gSWYgaXQncyB1bmRlZmluZWQgdGhlIGNvb2tpZSBpcyBhIHNlc3Npb24gQ29va2llXHJcbiAgICAgKiBAcGFyYW0gcGF0aCBQYXRoIHJlbGF0aXZlIHRvIHRoZSBkb21haW4gd2hlcmUgdGhlIGNvb2tpZSBzaG91bGQgYmUgYXZhaWFibGUuIERlZmF1bHQgL1xyXG4gICAgICogQHBhcmFtIGRvbWFpbiBEb21haW4gd2hlcmUgdGhlIGNvb2tpZSBzaG91bGQgYmUgYXZhaWFibGUuIERlZmF1bHQgY3VycmVudCBkb21haW5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldENvb2tpZShuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnksIGV4cGlyZXM/OiBudW1iZXIsIHBhdGg/OiBzdHJpbmcsIGRvbWFpbj86IHN0cmluZylcclxuICAgIHtcclxuICAgICAgICBpZighdGhpcy5faXNCcm93c2VyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGNvb2tpZVN0ciA9IGVuY29kZVVSSUNvbXBvbmVudChuYW1lKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeSh2YWx1ZSkpICsgJzsnO1xyXG5cclxuICAgICAgICBpZiAoZXhwaXJlcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBkdEV4cGlyZXMgPSBuZXcgRGF0ZShuZXcgRGF0ZSgpLmdldFRpbWUoKSArIGV4cGlyZXMgKiAxMDAwICogNjAgKiA2MCAqIDI0KTtcclxuICAgICAgICAgICAgY29va2llU3RyICs9ICdleHBpcmVzPScgKyBkdEV4cGlyZXMudG9VVENTdHJpbmcoKSArICc7JztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHBhdGgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb29raWVTdHIgKz0gJ3BhdGg9JyArIHBhdGggKyAnOyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChkb21haW4pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb29raWVTdHIgKz0gJ2RvbWFpbj0nICsgZG9tYWluICsgJzsnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llU3RyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBzcGVjaWZpZWQgQ29va2llXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWUgQ29va2llJ3MgaWRlbnRpZmljYXRpb25cclxuICAgICAqIEBwYXJhbSBwYXRoIFBhdGggcmVsYXRpdmUgdG8gdGhlIGRvbWFpbiB3aGVyZSB0aGUgY29va2llIHNob3VsZCBiZSBhdmFpYWJsZS4gRGVmYXVsdCAvXHJcbiAgICAgKiBAcGFyYW0gZG9tYWluIERvbWFpbiB3aGVyZSB0aGUgY29va2llIHNob3VsZCBiZSBhdmFpYWJsZS4gRGVmYXVsdCBjdXJyZW50IGRvbWFpblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZGVsZXRlQ29va2llKG5hbWU6IHN0cmluZywgcGF0aD86IHN0cmluZywgZG9tYWluPzogc3RyaW5nKVxyXG4gICAge1xyXG4gICAgICAgIGlmKCF0aGlzLl9pc0Jyb3dzZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiB0aGUgY29va2llIGV4aXN0c1xyXG4gICAgICAgIGlmICh0aGlzLmdldENvb2tpZShuYW1lKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Q29va2llKG5hbWUsICcnLCAtMSwgcGF0aCwgZG9tYWluKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=