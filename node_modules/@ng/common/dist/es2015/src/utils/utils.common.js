/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ApplicationRef, InjectionToken } from "@angular/core";
import { enableDebugTools } from '@angular/platform-browser';
import { filter, first } from 'rxjs/operators';
/**
 * Method used for extraction of resolve method for promise
 * @param {?} appStablePromise Promise which contains resolve method that is going to be extracted
 * @return {?}
 */
export function extractAppStableResolve(appStablePromise) {
    return ((/** @type {?} */ (appStablePromise))).__resolve;
}
/**
 * Factory used for creating APP_STABLE promise
 * @return {?}
 */
export function appStablePromiseFactory() {
    /** @type {?} */
    let appStableResolve;
    /** @type {?} */
    let appStablePromise = new Promise((/**
     * @param {?} resolve
     * @return {?}
     */
    resolve => appStableResolve = resolve));
    ((/** @type {?} */ (appStablePromise))).__resolve = appStableResolve;
    return appStablePromise;
}
/**
 * Injection token used for obtaining promise that is resolved when application is first time stable
 * @type {?}
 */
export const APP_STABLE = new InjectionToken("APP_STABLE", { providedIn: 'root', factory: appStablePromiseFactory });
/**
 * Common utility methods
 */
export default class Common {
    //######################### public methods #########################
    /**
     * Runs callback function when angular module is bootstrapped and stable
     * @param {?} moduleRefPromise Promise for module that was bootstrapped
     * @param {?} callback Callback that is called
     * @param {?=} angularProfiler Indication that angular profiler should be enabled
     * @return {?}
     */
    static runWhenModuleStable(moduleRefPromise, callback, angularProfiler) {
        angularProfiler = angularProfiler || false;
        moduleRefPromise.then((/**
         * @param {?} moduleRef
         * @return {?}
         */
        (moduleRef) => {
            /** @type {?} */
            const appRef = moduleRef.injector.get(ApplicationRef);
            appRef.isStable
                .pipe(filter((/**
             * @param {?} isStable
             * @return {?}
             */
            (isStable) => isStable)), first())
                .subscribe((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                let appStablePromise = moduleRef.injector.get(APP_STABLE);
                if (angularProfiler) {
                    enableDebugTools(appRef.components[0]);
                }
                callback(moduleRef);
                if (appStablePromise) {
                    /** @type {?} */
                    let resolveAsStable = extractAppStableResolve(appStablePromise);
                    resolveAsStable();
                }
            }));
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3V0aWxzL3V0aWxzLmNvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFjLGNBQWMsRUFBRSxjQUFjLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDMUUsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDM0QsT0FBTyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7O0FBTTdDLE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxnQkFBK0I7SUFFbkUsT0FBTyxDQUFDLG1CQUFBLGdCQUFnQixFQUFPLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDL0MsQ0FBQzs7Ozs7QUFLRCxNQUFNLFVBQVUsdUJBQXVCOztRQUUvQixnQkFBZ0I7O1FBQ2hCLGdCQUFnQixHQUFHLElBQUksT0FBTzs7OztJQUFPLE9BQU8sQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEdBQUcsT0FBTyxFQUFDO0lBRS9FLENBQUMsbUJBQUEsZ0JBQWdCLEVBQU8sQ0FBQyxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQztJQUV2RCxPQUFPLGdCQUFnQixDQUFDO0FBQzVCLENBQUM7Ozs7O0FBS0QsTUFBTSxPQUFPLFVBQVUsR0FBa0MsSUFBSSxjQUFjLENBQWdCLFlBQVksRUFBRSxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLHVCQUF1QixFQUFDLENBQUM7Ozs7QUFLaEssTUFBTSxDQUFDLE9BQU8sT0FBTyxNQUFNOzs7Ozs7Ozs7SUFVaEIsTUFBTSxDQUFDLG1CQUFtQixDQUFDLGdCQUEwQyxFQUFFLFFBQThDLEVBQUUsZUFBeUI7UUFFbkosZUFBZSxHQUFHLGVBQWUsSUFBSSxLQUFLLENBQUM7UUFFM0MsZ0JBQWdCLENBQUMsSUFBSTs7OztRQUFDLENBQUMsU0FBMEIsRUFBRSxFQUFFOztrQkFFM0MsTUFBTSxHQUFtQixTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUM7WUFFckUsTUFBTSxDQUFDLFFBQVE7aUJBQ1YsSUFBSSxDQUFDLE1BQU07Ozs7WUFBQyxDQUFDLFFBQWlCLEVBQUUsRUFBRSxDQUFDLFFBQVEsRUFBQyxFQUN2QyxLQUFLLEVBQUUsQ0FBQztpQkFDYixTQUFTOzs7WUFBQyxHQUFHLEVBQUU7O29CQUVSLGdCQUFnQixHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQztnQkFFekQsSUFBRyxlQUFlLEVBQ2xCO29CQUNJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDMUM7Z0JBRUQsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFBO2dCQUVuQixJQUFHLGdCQUFnQixFQUNuQjs7d0JBQ1EsZUFBZSxHQUFHLHVCQUF1QixDQUFDLGdCQUFnQixDQUFDO29CQUUvRCxlQUFlLEVBQUUsQ0FBQztpQkFDckI7WUFDTCxDQUFDLEVBQUMsQ0FBQztRQUNYLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtOZ01vZHVsZVJlZiwgQXBwbGljYXRpb25SZWYsIEluamVjdGlvblRva2VufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQge2VuYWJsZURlYnVnVG9vbHN9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5pbXBvcnQge2ZpbHRlciwgZmlyc3R9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbi8qKlxyXG4gKiBNZXRob2QgdXNlZCBmb3IgZXh0cmFjdGlvbiBvZiByZXNvbHZlIG1ldGhvZCBmb3IgcHJvbWlzZVxyXG4gKiBAcGFyYW0gYXBwU3RhYmxlUHJvbWlzZSBQcm9taXNlIHdoaWNoIGNvbnRhaW5zIHJlc29sdmUgbWV0aG9kIHRoYXQgaXMgZ29pbmcgdG8gYmUgZXh0cmFjdGVkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdEFwcFN0YWJsZVJlc29sdmUoYXBwU3RhYmxlUHJvbWlzZTogUHJvbWlzZTx2b2lkPik6ICgpID0+IHZvaWRcclxue1xyXG4gICAgcmV0dXJuIChhcHBTdGFibGVQcm9taXNlIGFzIGFueSkuX19yZXNvbHZlO1xyXG59XHJcblxyXG4vKipcclxuICogRmFjdG9yeSB1c2VkIGZvciBjcmVhdGluZyBBUFBfU1RBQkxFIHByb21pc2VcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhcHBTdGFibGVQcm9taXNlRmFjdG9yeSgpXHJcbntcclxuICAgIGxldCBhcHBTdGFibGVSZXNvbHZlO1xyXG4gICAgbGV0IGFwcFN0YWJsZVByb21pc2UgPSBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+IGFwcFN0YWJsZVJlc29sdmUgPSByZXNvbHZlKTtcclxuXHJcbiAgICAoYXBwU3RhYmxlUHJvbWlzZSBhcyBhbnkpLl9fcmVzb2x2ZSA9IGFwcFN0YWJsZVJlc29sdmU7XHJcblxyXG4gICAgcmV0dXJuIGFwcFN0YWJsZVByb21pc2U7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbmplY3Rpb24gdG9rZW4gdXNlZCBmb3Igb2J0YWluaW5nIHByb21pc2UgdGhhdCBpcyByZXNvbHZlZCB3aGVuIGFwcGxpY2F0aW9uIGlzIGZpcnN0IHRpbWUgc3RhYmxlXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQVBQX1NUQUJMRTogSW5qZWN0aW9uVG9rZW48UHJvbWlzZTx2b2lkPj4gPSBuZXcgSW5qZWN0aW9uVG9rZW48UHJvbWlzZTx2b2lkPj4oXCJBUFBfU1RBQkxFXCIsIHtwcm92aWRlZEluOiAncm9vdCcsIGZhY3Rvcnk6IGFwcFN0YWJsZVByb21pc2VGYWN0b3J5fSk7XHJcblxyXG4vKipcclxuICogQ29tbW9uIHV0aWxpdHkgbWV0aG9kc1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tbW9uXHJcbntcclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwdWJsaWMgbWV0aG9kcyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogUnVucyBjYWxsYmFjayBmdW5jdGlvbiB3aGVuIGFuZ3VsYXIgbW9kdWxlIGlzIGJvb3RzdHJhcHBlZCBhbmQgc3RhYmxlXHJcbiAgICAgKiBAcGFyYW0gbW9kdWxlUmVmUHJvbWlzZSBQcm9taXNlIGZvciBtb2R1bGUgdGhhdCB3YXMgYm9vdHN0cmFwcGVkXHJcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgQ2FsbGJhY2sgdGhhdCBpcyBjYWxsZWRcclxuICAgICAqIEBwYXJhbSBhbmd1bGFyUHJvZmlsZXIgSW5kaWNhdGlvbiB0aGF0IGFuZ3VsYXIgcHJvZmlsZXIgc2hvdWxkIGJlIGVuYWJsZWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBydW5XaGVuTW9kdWxlU3RhYmxlKG1vZHVsZVJlZlByb21pc2U6IFByb21pc2U8TmdNb2R1bGVSZWY8e30+PiwgY2FsbGJhY2s6IChtb2R1bGVSZWY6IE5nTW9kdWxlUmVmPHt9PikgPT4gdm9pZCwgYW5ndWxhclByb2ZpbGVyPzogYm9vbGVhbik6IHZvaWRcclxuICAgIHtcclxuICAgICAgICBhbmd1bGFyUHJvZmlsZXIgPSBhbmd1bGFyUHJvZmlsZXIgfHwgZmFsc2U7XHJcblxyXG4gICAgICAgIG1vZHVsZVJlZlByb21pc2UudGhlbigobW9kdWxlUmVmOiBOZ01vZHVsZVJlZjx7fT4pID0+IFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgYXBwUmVmOiBBcHBsaWNhdGlvblJlZiA9IG1vZHVsZVJlZi5pbmplY3Rvci5nZXQoQXBwbGljYXRpb25SZWYpO1xyXG5cclxuICAgICAgICAgICAgYXBwUmVmLmlzU3RhYmxlXHJcbiAgICAgICAgICAgICAgICAucGlwZShmaWx0ZXIoKGlzU3RhYmxlOiBib29sZWFuKSA9PiBpc1N0YWJsZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICBmaXJzdCgpKVxyXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiBcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXBwU3RhYmxlUHJvbWlzZSA9IG1vZHVsZVJlZi5pbmplY3Rvci5nZXQoQVBQX1NUQUJMRSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGFuZ3VsYXJQcm9maWxlcilcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZURlYnVnVG9vbHMoYXBwUmVmLmNvbXBvbmVudHNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobW9kdWxlUmVmKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihhcHBTdGFibGVQcm9taXNlKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc29sdmVBc1N0YWJsZSA9IGV4dHJhY3RBcHBTdGFibGVSZXNvbHZlKGFwcFN0YWJsZVByb21pc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUFzU3RhYmxlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iXX0=