/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import RouterHelper from './utils.routerHelper';
import Common from './utils.common';
import Forms from './utils.forms';
/**
 * Helper methods for angular2 router
 * @record
 */
export function IRouterHelper() { }
if (false) {
    /**
     * Extracts route definitions from components if routes are set using decorator ComponentRoute
     * @param {?} components Array of components to be used for extraction
     * @return {?} RouteDefinition Extracted routes
     */
    IRouterHelper.prototype.extractRoutes = function (components) { };
}
/**
 * Common utility methods
 * @record
 */
export function ICommon() { }
if (false) {
    /**
     * Runs callback function when angular module is bootstrapped and stable
     * @param {?} moduleRefPromise Promise for module that was bootstrapped
     * @param {?} callback Callback that is called
     * @param {?=} angularProfiler Indication that angular profiler should be enabled
     * @return {?}
     */
    ICommon.prototype.runWhenModuleStable = function (moduleRefPromise, callback, angularProfiler) { };
}
/**
 * Utility methods form angular 2 forms
 * @record
 */
export function IForms() { }
if (false) {
    /**
     * Gets indication whether controls have errors, with custom indication of submitted
     * @param {?} form Form containing controls
     * @param {?} controls Array of controls names to be checked for errors
     * @param {?=} submitted Indication whether form was submitted, defaults to false
     * @return {?}
     */
    IForms.prototype.hasErrorCustom = function (form, controls, submitted) { };
    /**
     * Gets indication whether hide alerts or not for control, with custom indication of submitted
     * @param {?} form Form containing controls
     * @param {?} control Controls name that will be checked
     * @param {?=} errors Array of validation errors to be checked for existance
     * @param {?=} submitted Indication whether form was submitted, defaults to false
     * @return {?}
     */
    IForms.prototype.alertHiddenCustom = function (form, control, errors, submitted) { };
    /**
     * Gets indication whether controls have errors
     * @param {?} form Form containing controls
     * @param {?} controls Array of controls names to be checked for errors
     * @return {?}
     */
    IForms.prototype.hasError = function (form, controls) { };
    /**
     * Gets indication whether hide alerts or not for control
     * @param {?} form Form containing controls
     * @param {?} control Controls name that will be checked
     * @param {?} errors Array of validation errors to be checked for existance
     * @return {?}
     */
    IForms.prototype.alertHidden = function (form, control, errors) { };
}
/**
 * Utils methods categories
 */
class Utils {
    /**
     * Angular 2 router helper
     * @return {?}
     */
    static get routerHelper() {
        return RouterHelper;
    }
    /**
     * Common utility methods
     * @return {?}
     */
    static get common() {
        return Common;
    }
    /**
     * Utility methods form angular 2 forms
     * @return {?}
     */
    static get forms() {
        return Forms;
    }
}
export { Utils };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdXRpbHMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUlBLE9BQU8sWUFBWSxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sTUFBTSxNQUFNLGdCQUFnQixDQUFDO0FBQ3BDLE9BQU8sS0FBSyxNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFLbEMsbUNBUUM7Ozs7Ozs7SUFERyxrRUFBMEM7Ozs7OztBQU05Qyw2QkFTQzs7Ozs7Ozs7O0lBREcsbUdBQWlKOzs7Ozs7QUFNckosNEJBa0NDOzs7Ozs7Ozs7SUExQkcsMkVBQXlGOzs7Ozs7Ozs7SUFTekYscUZBQTRHOzs7Ozs7O0lBTzVHLDBEQUFvRDs7Ozs7Ozs7SUFTcEQsb0VBQW1FOzs7OztBQU12RSxNQUFNLEtBQUs7Ozs7O0lBS1AsTUFBTSxLQUFLLFlBQVk7UUFFbkIsT0FBTyxZQUFZLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFLRCxNQUFNLEtBQUssTUFBTTtRQUViLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Ozs7O0lBS0QsTUFBTSxLQUFLLEtBQUs7UUFFWixPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0NBQ0o7QUFFRCxPQUFPLEVBQUMsS0FBSyxFQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge05nRm9ybSwgRm9ybUdyb3VwfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7TmdNb2R1bGVSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1JvdXRlfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5cclxuaW1wb3J0IFJvdXRlckhlbHBlciBmcm9tICcuL3V0aWxzLnJvdXRlckhlbHBlcic7XHJcbmltcG9ydCBDb21tb24gZnJvbSAnLi91dGlscy5jb21tb24nO1xyXG5pbXBvcnQgRm9ybXMgZnJvbSAnLi91dGlscy5mb3Jtcyc7XHJcblxyXG4vKipcclxuICogSGVscGVyIG1ldGhvZHMgZm9yIGFuZ3VsYXIyIHJvdXRlclxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJUm91dGVySGVscGVyXHJcbntcclxuICAgIC8qKlxyXG4gICAgICogRXh0cmFjdHMgcm91dGUgZGVmaW5pdGlvbnMgZnJvbSBjb21wb25lbnRzIGlmIHJvdXRlcyBhcmUgc2V0IHVzaW5nIGRlY29yYXRvciBDb21wb25lbnRSb3V0ZVxyXG4gICAgICogQHBhcmFtIGNvbXBvbmVudHMgQXJyYXkgb2YgY29tcG9uZW50cyB0byBiZSB1c2VkIGZvciBleHRyYWN0aW9uXHJcbiAgICAgKiBAcmV0dXJucyBSb3V0ZURlZmluaXRpb24gRXh0cmFjdGVkIHJvdXRlc1xyXG4gICAgICovXHJcbiAgICBleHRyYWN0Um91dGVzKGNvbXBvbmVudHM6IGFueVtdKTogUm91dGVbXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbW1vbiB1dGlsaXR5IG1ldGhvZHNcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUNvbW1vblxyXG57XHJcbiAgICAvKipcclxuICAgICAqIFJ1bnMgY2FsbGJhY2sgZnVuY3Rpb24gd2hlbiBhbmd1bGFyIG1vZHVsZSBpcyBib290c3RyYXBwZWQgYW5kIHN0YWJsZVxyXG4gICAgICogQHBhcmFtIG1vZHVsZVJlZlByb21pc2UgUHJvbWlzZSBmb3IgbW9kdWxlIHRoYXQgd2FzIGJvb3RzdHJhcHBlZFxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIENhbGxiYWNrIHRoYXQgaXMgY2FsbGVkXHJcbiAgICAgKiBAcGFyYW0gYW5ndWxhclByb2ZpbGVyIEluZGljYXRpb24gdGhhdCBhbmd1bGFyIHByb2ZpbGVyIHNob3VsZCBiZSBlbmFibGVkXHJcbiAgICAgKi9cclxuICAgIHJ1bldoZW5Nb2R1bGVTdGFibGUobW9kdWxlUmVmUHJvbWlzZTogUHJvbWlzZTxOZ01vZHVsZVJlZjx7fT4+LCBjYWxsYmFjazogKG1vZHVsZVJlZjogTmdNb2R1bGVSZWY8e30+KSA9PiB2b2lkLCBhbmd1bGFyUHJvZmlsZXI/OiBib29sZWFuKTogdm9pZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFV0aWxpdHkgbWV0aG9kcyBmb3JtIGFuZ3VsYXIgMiBmb3Jtc1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJRm9ybXNcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGluZGljYXRpb24gd2hldGhlciBjb250cm9scyBoYXZlIGVycm9ycywgd2l0aCBjdXN0b20gaW5kaWNhdGlvbiBvZiBzdWJtaXR0ZWRcclxuICAgICAqIEBwYXJhbSBmb3JtIEZvcm0gY29udGFpbmluZyBjb250cm9sc1xyXG4gICAgICogQHBhcmFtIGNvbnRyb2xzIEFycmF5IG9mIGNvbnRyb2xzIG5hbWVzIHRvIGJlIGNoZWNrZWQgZm9yIGVycm9yc1xyXG4gICAgICogQHBhcmFtIHN1Ym1pdHRlZCBJbmRpY2F0aW9uIHdoZXRoZXIgZm9ybSB3YXMgc3VibWl0dGVkLCBkZWZhdWx0cyB0byBmYWxzZVxyXG4gICAgICovXHJcbiAgICBoYXNFcnJvckN1c3RvbShmb3JtOiBOZ0Zvcm18Rm9ybUdyb3VwLCBjb250cm9sczogc3RyaW5nW10sIHN1Ym1pdHRlZD86IGJvb2xlYW4pOiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBpbmRpY2F0aW9uIHdoZXRoZXIgaGlkZSBhbGVydHMgb3Igbm90IGZvciBjb250cm9sLCB3aXRoIGN1c3RvbSBpbmRpY2F0aW9uIG9mIHN1Ym1pdHRlZFxyXG4gICAgICogQHBhcmFtIGZvcm0gRm9ybSBjb250YWluaW5nIGNvbnRyb2xzXHJcbiAgICAgKiBAcGFyYW0gY29udHJvbCBDb250cm9scyBuYW1lIHRoYXQgd2lsbCBiZSBjaGVja2VkXHJcbiAgICAgKiBAcGFyYW0gZXJyb3JzIEFycmF5IG9mIHZhbGlkYXRpb24gZXJyb3JzIHRvIGJlIGNoZWNrZWQgZm9yIGV4aXN0YW5jZVxyXG4gICAgICogQHBhcmFtIHN1Ym1pdHRlZCBJbmRpY2F0aW9uIHdoZXRoZXIgZm9ybSB3YXMgc3VibWl0dGVkLCBkZWZhdWx0cyB0byBmYWxzZVxyXG4gICAgICovXHJcbiAgICBhbGVydEhpZGRlbkN1c3RvbShmb3JtOiBOZ0Zvcm18Rm9ybUdyb3VwLCBjb250cm9sOiBzdHJpbmcsIGVycm9ycz86IHN0cmluZ1tdLCBzdWJtaXR0ZWQ/OiBib29sZWFuKTogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgaW5kaWNhdGlvbiB3aGV0aGVyIGNvbnRyb2xzIGhhdmUgZXJyb3JzXHJcbiAgICAgKiBAcGFyYW0gZm9ybSBGb3JtIGNvbnRhaW5pbmcgY29udHJvbHNcclxuICAgICAqIEBwYXJhbSBjb250cm9scyBBcnJheSBvZiBjb250cm9scyBuYW1lcyB0byBiZSBjaGVja2VkIGZvciBlcnJvcnNcclxuICAgICAqL1xyXG4gICAgaGFzRXJyb3IoZm9ybTogTmdGb3JtLCBjb250cm9sczogc3RyaW5nW10pOiBib29sZWFuO1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgaW5kaWNhdGlvbiB3aGV0aGVyIGhpZGUgYWxlcnRzIG9yIG5vdCBmb3IgY29udHJvbFxyXG4gICAgICogQHBhcmFtIGZvcm0gRm9ybSBjb250YWluaW5nIGNvbnRyb2xzXHJcbiAgICAgKiBAcGFyYW0gY29udHJvbCBDb250cm9scyBuYW1lIHRoYXQgd2lsbCBiZSBjaGVja2VkXHJcbiAgICAgKiBAcGFyYW0gZXJyb3JzIEFycmF5IG9mIHZhbGlkYXRpb24gZXJyb3JzIHRvIGJlIGNoZWNrZWQgZm9yIGV4aXN0YW5jZVxyXG4gICAgICovXHJcbiAgICBhbGVydEhpZGRlbihmb3JtOiBOZ0Zvcm0sIGNvbnRyb2w6IHN0cmluZywgZXJyb3JzOiBzdHJpbmdbXSk6IHZvaWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBVdGlscyBtZXRob2RzIGNhdGVnb3JpZXNcclxuICovXHJcbmNsYXNzIFV0aWxzXHJcbntcclxuICAgIC8qKlxyXG4gICAgICogQW5ndWxhciAyIHJvdXRlciBoZWxwZXJcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldCByb3V0ZXJIZWxwZXIoKTogSVJvdXRlckhlbHBlclxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBSb3V0ZXJIZWxwZXI7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogQ29tbW9uIHV0aWxpdHkgbWV0aG9kc1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0IGNvbW1vbigpOiBJQ29tbW9uXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIENvbW1vbjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBVdGlsaXR5IG1ldGhvZHMgZm9ybSBhbmd1bGFyIDIgZm9ybXNcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldCBmb3JtcygpOiBJRm9ybXNcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gRm9ybXM7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7VXRpbHN9OyJdfQ==