/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Utility methods form angular 2 forms
 */
export default class Forms {
    //######################### public methods #########################
    /**
     * Gets indication whether controls have errors, with custom indication of submitted
     * @param {?} form Form containing controls
     * @param {?} controls Array of controls names to be checked for errors
     * @param {?=} submitted Indication whether form was submitted
     * @return {?}
     */
    static hasErrorCustom(form, controls, submitted = false) {
        /** @type {?} */
        let conditionValid = false;
        /** @type {?} */
        let conditionChanged = false;
        for (var x = 0; x < controls.length; x++) {
            if (!form.controls[controls[x]]) {
                return false;
            }
            conditionValid = conditionValid || !form.controls[controls[x]].valid;
            conditionChanged = conditionChanged || form.controls[controls[x]].dirty;
        }
        return conditionValid && (conditionChanged || submitted);
    }
    /**
     * Gets indication whether hide alerts or not for control, with custom indication of submitted
     * @param {?} form Form containing controls
     * @param {?} control Controls name that will be checked
     * @param {?=} errors Array of validation errors to be checked for existance
     * @param {?=} submitted Indication whether form was submitted
     * @return {?}
     */
    static alertHiddenCustom(form, control, errors = [], submitted = false) {
        if (!form.controls[control]) {
            return true;
        }
        /** @type {?} */
        let requestedErrors = false;
        errors.forEach((/**
         * @param {?} errorType
         * @return {?}
         */
        errorType => {
            requestedErrors = requestedErrors || (!!form.controls[control].errors && !!((/** @type {?} */ (form.controls[control].errors)))[errorType]);
        }));
        return form.controls[control].valid || !requestedErrors || (!form.controls[control].dirty && !submitted);
    }
    /**
     * Gets indication whether controls have errors
     * @param {?} form Form containing controls
     * @param {?} controls Array of controls names to be checked for errors
     * @return {?}
     */
    static hasError(form, controls) {
        /** @type {?} */
        let conditionValid = false;
        /** @type {?} */
        let conditionChanged = false;
        for (var x = 0; x < controls.length; x++) {
            if (!form.controls[controls[x]]) {
                return false;
            }
            conditionValid = conditionValid || !form.controls[controls[x]].valid;
            conditionChanged = conditionChanged || form.controls[controls[x]].dirty;
        }
        return conditionValid && (conditionChanged || form.submitted);
    }
    /**
     * Gets indication whether hide alerts or not for control
     * @param {?} form Form containing controls
     * @param {?} control Controls name that will be checked
     * @param {?=} errors Array of validation errors to be checked for existance
     * @return {?}
     */
    static alertHidden(form, control, errors = []) {
        if (!form.controls[control]) {
            return true;
        }
        /** @type {?} */
        let requestedErrors = false;
        errors.forEach((/**
         * @param {?} errorType
         * @return {?}
         */
        errorType => {
            requestedErrors = requestedErrors || (!!form.controls[control].errors && !!((/** @type {?} */ (form.controls[control].errors)))[errorType]);
        }));
        return form.controls[control].valid || !requestedErrors || (!form.controls[control].dirty && !form.submitted);
    }
}
//# sourceMappingURL=data:application/json;base64,