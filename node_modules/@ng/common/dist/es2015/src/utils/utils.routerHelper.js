/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isPresent } from '@asseco/common';
/**
 * All types of route decorated components
 * @record
 */
function RoutesDecoratedComponent() { }
/**
 * Router helper
 */
export default class RouterHelper {
    //######################### public methods #########################
    /**
     * Extracts route definitions from components if routes are set using decorator ComponentRoute
     * @param {?} components Array of components to be used for extraction
     * @return {?} RouteDefinition Extracted routes
     */
    static extractRoutes(components) {
        /** @type {?} */
        var result = [];
        if (!components) {
            return result;
        }
        components.forEach((/**
         * @param {?} component
         * @return {?}
         */
        (component) => {
            if (isPresent(component.routeValues)) {
                component.routeValues.forEach((/**
                 * @param {?} route
                 * @return {?}
                 */
                route => {
                    result.push(route);
                }));
            }
            if (isPresent(component.redirectRouteValues)) {
                component.redirectRouteValues.forEach((/**
                 * @param {?} route
                 * @return {?}
                 */
                route => {
                    result.push(route);
                }));
            }
        }));
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMucm91dGVySGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3V0aWxzL3V0aWxzLnJvdXRlckhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7OztBQVF6Qyx1Q0FFQzs7OztBQUtELE1BQU0sQ0FBQyxPQUFPLE9BQU8sWUFBWTs7Ozs7OztJQVN0QixNQUFNLENBQUMsYUFBYSxDQUFDLFVBQWlCOztZQUVyQyxNQUFNLEdBQVksRUFBRTtRQUV4QixJQUFHLENBQUMsVUFBVSxFQUNkO1lBQ0ksT0FBTyxNQUFNLENBQUM7U0FDakI7UUFFRCxVQUFVLENBQUMsT0FBTzs7OztRQUFDLENBQUMsU0FBbUMsRUFBRSxFQUFFO1lBRXZELElBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsRUFDbkM7Z0JBQ0ksU0FBUyxDQUFDLFdBQVcsQ0FBQyxPQUFPOzs7O2dCQUFDLEtBQUssQ0FBQyxFQUFFO29CQUVsQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN2QixDQUFDLEVBQUMsQ0FBQzthQUNOO1lBRUQsSUFBRyxTQUFTLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLEVBQzNDO2dCQUNJLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPOzs7O2dCQUFDLEtBQUssQ0FBQyxFQUFFO29CQUUxQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN2QixDQUFDLEVBQUMsQ0FBQzthQUNOO1FBQ0wsQ0FBQyxFQUFDLENBQUM7UUFFSCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1JvdXRlfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQge2lzUHJlc2VudH0gZnJvbSAnQGFzc2Vjby9jb21tb24nO1xyXG5cclxuaW1wb3J0IHtSb3V0ZURlY29yYXRlZENvbXBvbmVudH0gZnJvbSAnLi4vZGVjb3JhdG9ycy9jb21wb25lbnRSb3V0ZS5kZWNvcmF0b3InO1xyXG5pbXBvcnQge1JlZGlyZWN0Um91dGVEZWNvcmF0ZWRDb21wb25lbnR9IGZyb20gJy4uL2RlY29yYXRvcnMvY29tcG9uZW50UmVkaXJlY3RSb3V0ZS5kZWNvcmF0b3InO1xyXG5cclxuLyoqXHJcbiAqIEFsbCB0eXBlcyBvZiByb3V0ZSBkZWNvcmF0ZWQgY29tcG9uZW50c1xyXG4gKi9cclxuaW50ZXJmYWNlIFJvdXRlc0RlY29yYXRlZENvbXBvbmVudCBleHRlbmRzIFJvdXRlRGVjb3JhdGVkQ29tcG9uZW50LCBSZWRpcmVjdFJvdXRlRGVjb3JhdGVkQ29tcG9uZW50XHJcbntcclxufVxyXG5cclxuLyoqXHJcbiAqIFJvdXRlciBoZWxwZXJcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvdXRlckhlbHBlclxyXG57XHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIG1ldGhvZHMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIEV4dHJhY3RzIHJvdXRlIGRlZmluaXRpb25zIGZyb20gY29tcG9uZW50cyBpZiByb3V0ZXMgYXJlIHNldCB1c2luZyBkZWNvcmF0b3IgQ29tcG9uZW50Um91dGVcclxuICAgICAqIEBwYXJhbSBjb21wb25lbnRzIEFycmF5IG9mIGNvbXBvbmVudHMgdG8gYmUgdXNlZCBmb3IgZXh0cmFjdGlvblxyXG4gICAgICogQHJldHVybnMgUm91dGVEZWZpbml0aW9uIEV4dHJhY3RlZCByb3V0ZXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBleHRyYWN0Um91dGVzKGNvbXBvbmVudHM6IGFueVtdKTogUm91dGVbXVxyXG4gICAge1xyXG4gICAgICAgIHZhciByZXN1bHQ6IFJvdXRlW10gPSBbXTtcclxuICAgICAgICBcclxuICAgICAgICBpZighY29tcG9uZW50cylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbXBvbmVudHMuZm9yRWFjaCgoY29tcG9uZW50OiBSb3V0ZXNEZWNvcmF0ZWRDb21wb25lbnQpID0+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihpc1ByZXNlbnQoY29tcG9uZW50LnJvdXRlVmFsdWVzKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50LnJvdXRlVmFsdWVzLmZvckVhY2gocm91dGUgPT5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChyb3V0ZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoaXNQcmVzZW50KGNvbXBvbmVudC5yZWRpcmVjdFJvdXRlVmFsdWVzKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50LnJlZGlyZWN0Um91dGVWYWx1ZXMuZm9yRWFjaChyb3V0ZSA9PlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHJvdXRlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxufSJdfQ==