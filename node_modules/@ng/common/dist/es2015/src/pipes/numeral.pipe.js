/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { isBlank } from '@asseco/common';
import * as numeral from 'numeral';
import { GlobalizationService } from '../services/globalization/globalization.service';
/**
 * Pipe to transform numbers to regional formatting using numeraljs.
 */
export class NumeralPipe {
    //######################### constructors #########################
    /**
     * @param {?} globalizationSvc
     */
    constructor(globalizationSvc) {
        numeral.locale(globalizationSvc.locale);
        this._globalizationChangeSubscription = globalizationSvc
            .localeChange
            .subscribe((/**
         * @return {?}
         */
        () => numeral.locale(globalizationSvc.locale)));
    }
    //######################### public methods #########################
    /**
     * Formats number value as slovak format string
     * @param {?} value Number to format
     * @param {?} format Format string (optional)
     * @return {?}
     */
    transform(value, format) {
        if (isBlank(value)) {
            return "";
        }
        if (isNaN(value)) {
            value = 0;
        }
        return numeral(value).format(format);
    }
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    ngOnDestroy() {
        if (this._globalizationChangeSubscription) {
            this._globalizationChangeSubscription.unsubscribe();
            this._globalizationChangeSubscription = null;
        }
    }
}
NumeralPipe.decorators = [
    { type: Pipe, args: [{ name: 'numeral' },] }
];
/** @nocollapse */
NumeralPipe.ctorParameters = () => [
    { type: GlobalizationService }
];
if (false) {
    /**
     * Subscription for globalization changes
     * @type {?}
     * @private
     */
    NumeralPipe.prototype._globalizationChangeSubscription;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtZXJhbC5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3BpcGVzL251bWVyYWwucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLElBQUksRUFBMkIsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRXZDLE9BQU8sS0FBSyxPQUFPLE1BQU0sU0FBUyxDQUFDO0FBRW5DLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLGlEQUFpRCxDQUFDOzs7O0FBTXJGLE1BQU0sT0FBTyxXQUFXOzs7OztJQVVwQixZQUFZLGdCQUFzQztRQUU5QyxPQUFPLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXhDLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxnQkFBZ0I7YUFDbkQsWUFBWTthQUNaLFNBQVM7OztRQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUMsQ0FBQztJQUNsRSxDQUFDOzs7Ozs7OztJQVNNLFNBQVMsQ0FBQyxLQUFhLEVBQUUsTUFBVztRQUV2QyxJQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFDakI7WUFDSSxPQUFPLEVBQUUsQ0FBQztTQUNiO1FBRUQsSUFBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQ2Y7WUFDSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1NBQ2I7UUFFRCxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekMsQ0FBQzs7Ozs7O0lBT00sV0FBVztRQUVkLElBQUcsSUFBSSxDQUFDLGdDQUFnQyxFQUN4QztZQUNJLElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNwRCxJQUFJLENBQUMsZ0NBQWdDLEdBQUcsSUFBSSxDQUFDO1NBQ2hEO0lBQ0wsQ0FBQzs7O1lBdERKLElBQUksU0FBQyxFQUFDLElBQUksRUFBRSxTQUFTLEVBQUM7Ozs7WUFMZixvQkFBb0I7Ozs7Ozs7O0lBYXhCLHVEQUE0RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UGlwZSwgUGlwZVRyYW5zZm9ybSwgT25EZXN0cm95fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtpc0JsYW5rfSBmcm9tICdAYXNzZWNvL2NvbW1vbic7XHJcbmltcG9ydCB7U3Vic2NyaXB0aW9ufSBmcm9tICdyeGpzJztcclxuaW1wb3J0ICogYXMgbnVtZXJhbCBmcm9tICdudW1lcmFsJztcclxuXHJcbmltcG9ydCB7R2xvYmFsaXphdGlvblNlcnZpY2V9IGZyb20gJy4uL3NlcnZpY2VzL2dsb2JhbGl6YXRpb24vZ2xvYmFsaXphdGlvbi5zZXJ2aWNlJztcclxuXHJcbi8qKlxyXG4gKiBQaXBlIHRvIHRyYW5zZm9ybSBudW1iZXJzIHRvIHJlZ2lvbmFsIGZvcm1hdHRpbmcgdXNpbmcgbnVtZXJhbGpzLlxyXG4gKi9cclxuQFBpcGUoe25hbWU6ICdudW1lcmFsJ30pXHJcbmV4cG9ydCBjbGFzcyBOdW1lcmFsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0sIE9uRGVzdHJveVxyXG57XHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHJpdmF0ZSBmaWVsZHMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFN1YnNjcmlwdGlvbiBmb3IgZ2xvYmFsaXphdGlvbiBjaGFuZ2VzXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2dsb2JhbGl6YXRpb25DaGFuZ2VTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbnxudWxsO1xyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBjb25zdHJ1Y3RvcnMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG4gICAgY29uc3RydWN0b3IoZ2xvYmFsaXphdGlvblN2YzogR2xvYmFsaXphdGlvblNlcnZpY2UpXHJcbiAgICB7XHJcbiAgICAgICAgbnVtZXJhbC5sb2NhbGUoZ2xvYmFsaXphdGlvblN2Yy5sb2NhbGUpO1xyXG5cclxuICAgICAgICB0aGlzLl9nbG9iYWxpemF0aW9uQ2hhbmdlU3Vic2NyaXB0aW9uID0gZ2xvYmFsaXphdGlvblN2Y1xyXG4gICAgICAgICAgICAubG9jYWxlQ2hhbmdlXHJcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKCkgPT4gbnVtZXJhbC5sb2NhbGUoZ2xvYmFsaXphdGlvblN2Yy5sb2NhbGUpKTtcclxuICAgIH1cclxuIFxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHB1YmxpYyBtZXRob2RzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBGb3JtYXRzIG51bWJlciB2YWx1ZSBhcyBzbG92YWsgZm9ybWF0IHN0cmluZ1xyXG4gICAgICogQHBhcmFtIHZhbHVlIE51bWJlciB0byBmb3JtYXRcclxuICAgICAqIEBwYXJhbSBmb3JtYXQgRm9ybWF0IHN0cmluZyAob3B0aW9uYWwpIFxyXG4gICAgICovICAgXHJcbiAgICBwdWJsaWMgdHJhbnNmb3JtKHZhbHVlOiBudW1iZXIsIGZvcm1hdDogYW55KTogc3RyaW5nXHJcbiAgICB7XHJcbiAgICAgICAgaWYoaXNCbGFuayh2YWx1ZSkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYoaXNOYU4odmFsdWUpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFsdWUgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gbnVtZXJhbCh2YWx1ZSkuZm9ybWF0KGZvcm1hdCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHB1YmxpYyBtZXRob2RzIC0gaW1wbGVtZW50YXRpb24gb2YgT25EZXN0cm95ICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgd2hlbiBjb21wb25lbnQgaXMgZGVzdHJveWVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBuZ09uRGVzdHJveSgpXHJcbiAgICB7XHJcbiAgICAgICAgaWYodGhpcy5fZ2xvYmFsaXphdGlvbkNoYW5nZVN1YnNjcmlwdGlvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2dsb2JhbGl6YXRpb25DaGFuZ2VTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgdGhpcy5fZ2xvYmFsaXphdGlvbkNoYW5nZVN1YnNjcmlwdGlvbiA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4iXX0=