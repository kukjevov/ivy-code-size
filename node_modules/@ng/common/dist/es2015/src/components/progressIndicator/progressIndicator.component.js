/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { ProgressIndicatorService } from './progressIndicator.service';
/**
 * Component that is used for displaying progress indicator
 */
export class ProgressIndicatorComponent {
    //######################### constructor #########################
    /**
     * @param {?} _service
     */
    constructor(_service) {
        this._service = _service;
        //######################### public properties - inputs #########################
        /**
         * Applied css classes
         */
        this.appliedClass = { "progress-indicator": true };
        this.running = this._service.running;
        this._subscription = this._service.runningChanged.subscribe((/**
         * @param {?} running
         * @return {?}
         */
        running => this.running = running));
    }
    /**
     * Sets css classes that will be applied to indicator
     * @param {?} cssClass
     * @return {?}
     */
    set cssClass(cssClass) {
        this.appliedClass = {};
        this.appliedClass[cssClass] = true;
    }
    //######################### private properties #########################
    /**
     * Sets indication that progress indicator is running
     * @private
     * @param {?} running
     * @return {?}
     */
    set running(running) {
        this.appliedClass["running"] = running;
    }
    ;
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * Called when component is destroyed
     * @return {?}
     */
    ngOnDestroy() {
        if (this._subscription) {
            this._subscription.unsubscribe();
            this._subscription = null;
        }
    }
}
ProgressIndicatorComponent.decorators = [
    { type: Component, args: [{
                selector: "progress-indicator",
                template: "<div [ngClass]=\"appliedClass\">\r\n    <div></div>\r\n</div>",
                styles: ["\r\n.progress-indicator\r\n{\r\n    -webkit-transition: all 250ms linear;\r\n    -moz-transition: all 250ms linear;\r\n    transition: all 250ms linear;\r\n    background-color: rgba(0, 0, 0, 0.3);\r\n    height: 100%;\r\n    width: 100%;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 23456;\r\n    opacity: 0;\r\n    visibility: hidden;\r\n}\r\n.progress-indicator.running\r\n{\r\n    visibility: visible;\r\n    opacity: 1;\r\n}\r\n.progress-indicator.running > div\r\n{\r\n    border-left: 4px solid #eee;\r\n    border-radius: 25px;\r\n    border-top: 4px solid #eee;\r\n    height: 40px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    position: relative;\r\n    top: 50%;\r\n    width: 40px;\r\n    animation-name: rotate-progress;\r\n    animation-duration: 350ms;\r\n    animation-iteration-count: infinite;\r\n    animation-timing-function: linear;\r\n}\r\n\r\n@keyframes rotate-progress\r\n{\r\n    from\r\n    {\r\n        transform: rotate(0deg);\r\n    }\r\n    to\r\n    {\r\n        transform: rotate(360deg);\r\n    }\r\n}"]
            }] }
];
/** @nocollapse */
ProgressIndicatorComponent.ctorParameters = () => [
    { type: ProgressIndicatorService }
];
ProgressIndicatorComponent.propDecorators = {
    cssClass: [{ type: Input }]
};
if (false) {
    /**
     * Subscription for changes in ProgressIndicatorService
     * @type {?}
     * @private
     */
    ProgressIndicatorComponent.prototype._subscription;
    /**
     * Applied css classes
     * @type {?}
     */
    ProgressIndicatorComponent.prototype.appliedClass;
    /**
     * @type {?}
     * @private
     */
    ProgressIndicatorComponent.prototype._service;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3NJbmRpY2F0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvcHJvZ3Jlc3NJbmRpY2F0b3IvcHJvZ3Jlc3NJbmRpY2F0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUcxRCxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQzs7OztBQVdyRSxNQUFNLE9BQU8sMEJBQTBCOzs7OztJQXFDbkMsWUFBb0IsUUFBa0M7UUFBbEMsYUFBUSxHQUFSLFFBQVEsQ0FBMEI7Ozs7O1FBdkIvQyxpQkFBWSxHQUE2QixFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRSxDQUFDO1FBeUIzRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsU0FBUzs7OztRQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLEVBQUMsQ0FBQztJQUNuRyxDQUFDOzs7Ozs7SUF0QkQsSUFDVyxRQUFRLENBQUMsUUFBZ0I7UUFFaEMsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDdkMsQ0FBQzs7Ozs7Ozs7SUFPRCxJQUFZLE9BQU8sQ0FBQyxPQUFnQjtRQUVoQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLE9BQU8sQ0FBQztJQUMzQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBY0ssV0FBVztRQUVkLElBQUcsSUFBSSxDQUFDLGFBQWEsRUFDckI7WUFDSSxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2pDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1NBQzdCO0lBQ0wsQ0FBQzs7O1lBN0RKLFNBQVMsU0FDVjtnQkFDSSxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5Qix5RUFBK0M7O2FBRWxEOzs7O1lBVk8sd0JBQXdCOzs7dUJBOEIzQixLQUFLOzs7Ozs7OztJQVpOLG1EQUF5Qzs7Ozs7SUFPekMsa0RBQStFOzs7OztJQXVCbkUsOENBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIElucHV0LCBPbkRlc3Ryb3l9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1N1YnNjcmlwdGlvbn0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQge1Byb2dyZXNzSW5kaWNhdG9yU2VydmljZX0gZnJvbSAnLi9wcm9ncmVzc0luZGljYXRvci5zZXJ2aWNlJztcclxuXHJcbi8qKlxyXG4gKiBDb21wb25lbnQgdGhhdCBpcyB1c2VkIGZvciBkaXNwbGF5aW5nIHByb2dyZXNzIGluZGljYXRvclxyXG4gKi9cclxuQENvbXBvbmVudChcclxue1xyXG4gICAgc2VsZWN0b3I6IFwicHJvZ3Jlc3MtaW5kaWNhdG9yXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3Byb2dyZXNzSW5kaWNhdG9yLmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWydwcm9ncmVzc0luZGljYXRvci5jb21wb25lbnQuY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIFByb2dyZXNzSW5kaWNhdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95XHJcbntcclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwdWJsaWMgcHJvcGVydGllcyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogU3Vic2NyaXB0aW9uIGZvciBjaGFuZ2VzIGluIFByb2dyZXNzSW5kaWNhdG9yU2VydmljZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9zdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbnxudWxsO1xyXG4gICAgXHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIHByb3BlcnRpZXMgLSBpbnB1dHMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwbGllZCBjc3MgY2xhc3Nlc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYXBwbGllZENsYXNzOiB7W2tleTogc3RyaW5nXTogYm9vbGVhbn0gPSB7IFwicHJvZ3Jlc3MtaW5kaWNhdG9yXCI6IHRydWUgfTtcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIGNzcyBjbGFzc2VzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIGluZGljYXRvclxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKVxyXG4gICAgcHVibGljIHNldCBjc3NDbGFzcyhjc3NDbGFzczogc3RyaW5nKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuYXBwbGllZENsYXNzID0ge307XHJcbiAgICAgICAgdGhpcy5hcHBsaWVkQ2xhc3NbY3NzQ2xhc3NdID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHJpdmF0ZSBwcm9wZXJ0aWVzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIGluZGljYXRpb24gdGhhdCBwcm9ncmVzcyBpbmRpY2F0b3IgaXMgcnVubmluZ1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHNldCBydW5uaW5nKHJ1bm5pbmc6IGJvb2xlYW4pXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5hcHBsaWVkQ2xhc3NbXCJydW5uaW5nXCJdID0gcnVubmluZztcclxuICAgIH07XHJcblxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIGNvbnN0cnVjdG9yICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX3NlcnZpY2U6IFByb2dyZXNzSW5kaWNhdG9yU2VydmljZSlcclxuICAgIHtcclxuICAgICAgICB0aGlzLnJ1bm5pbmcgPSB0aGlzLl9zZXJ2aWNlLnJ1bm5pbmc7XHJcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uID0gdGhpcy5fc2VydmljZS5ydW5uaW5nQ2hhbmdlZC5zdWJzY3JpYmUocnVubmluZyA9PiB0aGlzLnJ1bm5pbmcgPSBydW5uaW5nKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIG1ldGhvZHMgLSBpbXBsZW1lbnRhdGlvbiBvZiBPbkRlc3Ryb3kgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB3aGVuIGNvbXBvbmVudCBpcyBkZXN0cm95ZWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIG5nT25EZXN0cm95KClcclxuICAgIHtcclxuICAgICAgICBpZih0aGlzLl9zdWJzY3JpcHRpb24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19