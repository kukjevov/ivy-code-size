/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Optional, Injectable, PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { ProgressIndicatorOptions } from './progressIndicatorOptions';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./progressIndicatorOptions";
/**
 * Service that is used for displaying and hiding progress indicator
 */
export class ProgressIndicatorService {
    //######################### constructors #########################
    /**
     * @param {?} platformId
     * @param {?=} config
     */
    constructor(platformId, config) {
        this.config = config;
        //######################### private fields #########################
        /**
         * Indication that current code is running in browser
         */
        this._isBrowser = false;
        /**
         * Number of running requests
         */
        this._runningRequests = 0;
        /**
         * Used for invoking event runningChanged
         */
        this._runningChanged = new Subject();
        //######################### public properties #########################
        /**
         * Indication that progress indicator is running
         */
        this.running = false;
        this._isBrowser = isPlatformBrowser(platformId);
        if (config && !(config instanceof ProgressIndicatorOptions)) {
            this.config = undefined;
            console.warn("Provided configuration for 'ProgressIndicatorService' is not of type 'ProgressIndicatorOptions' and will be ignored!");
        }
        this.config = config || new ProgressIndicatorOptions();
    }
    /**
     * Occurs when 'running' changes
     * @return {?}
     */
    get runningChanged() {
        return this._runningChanged.asObservable();
    }
    //######################### public methods #########################
    /**
     * Displays progress indicator after short delay
     * @return {?}
     */
    showProgress() {
        if (!this._isBrowser) {
            return;
        }
        if (!this._timeout && this._runningRequests < 1) {
            this._timeout = setTimeout((/**
             * @return {?}
             */
            () => {
                this._onRunning(true);
                clearTimeout(this._timeout);
                this._timeout = null;
            }), this.config.timeout);
        }
        this._runningRequests++;
    }
    /**
     * Hides progress indicator
     * @param {?=} force Indication that indicator should be hidden even if some processes are running
     * @return {?}
     */
    hideProgress(force) {
        if (!this._isBrowser) {
            return;
        }
        if (force) {
            this._runningRequests = 0;
        }
        if (this._runningRequests > 0) {
            this._runningRequests--;
        }
        if (this._runningRequests < 1) {
            clearTimeout(this._timeout);
            this._timeout = null;
            this._onRunning(false);
        }
    }
    //######################### private methods #########################
    /**
     * Used for invoking 'runningChanged' event
     * @private
     * @param {?} value
     * @return {?}
     */
    _onRunning(value) {
        this.running = value;
        this._runningChanged.next(value);
    }
}
ProgressIndicatorService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
ProgressIndicatorService.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: ProgressIndicatorOptions, decorators: [{ type: Optional }] }
];
/** @nocollapse */ ProgressIndicatorService.ngInjectableDef = i0.defineInjectable({ factory: function ProgressIndicatorService_Factory() { return new ProgressIndicatorService(i0.inject(i0.PLATFORM_ID), i0.inject(i1.ProgressIndicatorOptions, 8)); }, token: ProgressIndicatorService, providedIn: "root" });
if (false) {
    /**
     * Indication that current code is running in browser
     * @type {?}
     * @private
     */
    ProgressIndicatorService.prototype._isBrowser;
    /**
     * Id of running timeout
     * @type {?}
     * @private
     */
    ProgressIndicatorService.prototype._timeout;
    /**
     * Number of running requests
     * @type {?}
     * @private
     */
    ProgressIndicatorService.prototype._runningRequests;
    /**
     * Used for invoking event runningChanged
     * @type {?}
     * @private
     */
    ProgressIndicatorService.prototype._runningChanged;
    /**
     * Indication that progress indicator is running
     * @type {?}
     */
    ProgressIndicatorService.prototype.running;
    /** @type {?} */
    ProgressIndicatorService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3NJbmRpY2F0b3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3Byb2dyZXNzSW5kaWNhdG9yL3Byb2dyZXNzSW5kaWNhdG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDbEQsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFhLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQzs7Ozs7O0FBTXpDLE1BQU0sT0FBTyx3QkFBd0I7Ozs7OztJQXdDakMsWUFBaUMsVUFBa0IsRUFDcEIsTUFBaUM7UUFBakMsV0FBTSxHQUFOLE1BQU0sQ0FBMkI7Ozs7O1FBbEN4RCxlQUFVLEdBQVksS0FBSyxDQUFDOzs7O1FBVTVCLHFCQUFnQixHQUFXLENBQUMsQ0FBQzs7OztRQUs3QixvQkFBZSxHQUFxQixJQUFJLE9BQU8sRUFBVyxDQUFDOzs7OztRQU81RCxZQUFPLEdBQVksS0FBSyxDQUFDO1FBYzVCLElBQUksQ0FBQyxVQUFVLEdBQUcsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFaEQsSUFBRyxNQUFNLElBQUksQ0FBQyxDQUFDLE1BQU0sWUFBWSx3QkFBd0IsQ0FBQyxFQUMxRDtZQUNJLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1lBQ3hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsc0hBQXNILENBQUMsQ0FBQztTQUN4STtRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxJQUFJLElBQUksd0JBQXdCLEVBQUUsQ0FBQztJQUMzRCxDQUFDOzs7OztJQWxCRCxJQUFXLGNBQWM7UUFFckIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQy9DLENBQUM7Ozs7OztJQXNCTSxZQUFZO1FBRWYsSUFBRyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQ25CO1lBQ0ksT0FBTztTQUNWO1FBRUQsSUFBRyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsRUFDOUM7WUFDSSxJQUFJLENBQUMsUUFBUSxHQUFHLFVBQVU7OztZQUFDLEdBQUcsRUFBRTtnQkFFNUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFFdEIsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDNUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDekIsQ0FBQyxHQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDM0I7UUFFRCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7Ozs7SUFNTSxZQUFZLENBQUMsS0FBZTtRQUUvQixJQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFDbkI7WUFDSSxPQUFPO1NBQ1Y7UUFFRCxJQUFHLEtBQUssRUFDUjtZQUNJLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7U0FDN0I7UUFFRCxJQUFHLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLEVBQzVCO1lBQ0ksSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7U0FDM0I7UUFFRCxJQUFHLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLEVBQzVCO1lBQ0ksWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM1QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztZQUNyQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzFCO0lBQ0wsQ0FBQzs7Ozs7Ozs7SUFPTyxVQUFVLENBQUMsS0FBYztRQUU3QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7WUF2SEosVUFBVSxTQUFDLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBQzs7OztZQXlDaUIsTUFBTSx1QkFBdEMsTUFBTSxTQUFDLFdBQVc7WUEvQzNCLHdCQUF3Qix1QkFnRGYsUUFBUTs7Ozs7Ozs7O0lBbENyQiw4Q0FBb0M7Ozs7OztJQUtwQyw0Q0FBc0I7Ozs7OztJQUt0QixvREFBcUM7Ozs7OztJQUtyQyxtREFBbUU7Ozs7O0lBT25FLDJDQUFnQzs7SUFZcEIsMENBQW9EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPcHRpb25hbCwgSW5qZWN0YWJsZSwgUExBVEZPUk1fSUQsIEluamVjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7aXNQbGF0Zm9ybUJyb3dzZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7UHJvZ3Jlc3NJbmRpY2F0b3JPcHRpb25zfSBmcm9tICcuL3Byb2dyZXNzSW5kaWNhdG9yT3B0aW9ucyc7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZSwgU3ViamVjdH0gZnJvbSAncnhqcyc7XHJcblxyXG4vKipcclxuICogU2VydmljZSB0aGF0IGlzIHVzZWQgZm9yIGRpc3BsYXlpbmcgYW5kIGhpZGluZyBwcm9ncmVzcyBpbmRpY2F0b3JcclxuICovXHJcbkBJbmplY3RhYmxlKHtwcm92aWRlZEluOiAncm9vdCd9KVxyXG5leHBvcnQgY2xhc3MgUHJvZ3Jlc3NJbmRpY2F0b3JTZXJ2aWNlXHJcbntcclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwcml2YXRlIGZpZWxkcyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbmRpY2F0aW9uIHRoYXQgY3VycmVudCBjb2RlIGlzIHJ1bm5pbmcgaW4gYnJvd3NlclxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9pc0Jyb3dzZXI6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIElkIG9mIHJ1bm5pbmcgdGltZW91dFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF90aW1lb3V0OiBhbnk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBOdW1iZXIgb2YgcnVubmluZyByZXF1ZXN0c1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9ydW5uaW5nUmVxdWVzdHM6IG51bWJlciA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIGZvciBpbnZva2luZyBldmVudCBydW5uaW5nQ2hhbmdlZFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9ydW5uaW5nQ2hhbmdlZDogU3ViamVjdDxib29sZWFuPiA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XHJcblxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHB1YmxpYyBwcm9wZXJ0aWVzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIEluZGljYXRpb24gdGhhdCBwcm9ncmVzcyBpbmRpY2F0b3IgaXMgcnVubmluZ1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcnVubmluZzogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogT2NjdXJzIHdoZW4gJ3J1bm5pbmcnIGNoYW5nZXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBydW5uaW5nQ2hhbmdlZCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+XHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3J1bm5pbmdDaGFuZ2VkLmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBjb25zdHJ1Y3RvcnMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG4gICAgY29uc3RydWN0b3IoQEluamVjdChQTEFURk9STV9JRCkgcGxhdGZvcm1JZDogT2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgQE9wdGlvbmFsKCkgcHVibGljIGNvbmZpZz86IFByb2dyZXNzSW5kaWNhdG9yT3B0aW9ucylcclxuICAgIHtcclxuICAgICAgICB0aGlzLl9pc0Jyb3dzZXIgPSBpc1BsYXRmb3JtQnJvd3NlcihwbGF0Zm9ybUlkKTtcclxuXHJcbiAgICAgICAgaWYoY29uZmlnICYmICEoY29uZmlnIGluc3RhbmNlb2YgUHJvZ3Jlc3NJbmRpY2F0b3JPcHRpb25zKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJQcm92aWRlZCBjb25maWd1cmF0aW9uIGZvciAnUHJvZ3Jlc3NJbmRpY2F0b3JTZXJ2aWNlJyBpcyBub3Qgb2YgdHlwZSAnUHJvZ3Jlc3NJbmRpY2F0b3JPcHRpb25zJyBhbmQgd2lsbCBiZSBpZ25vcmVkIVwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnIHx8IG5ldyBQcm9ncmVzc0luZGljYXRvck9wdGlvbnMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIG1ldGhvZHMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGlzcGxheXMgcHJvZ3Jlc3MgaW5kaWNhdG9yIGFmdGVyIHNob3J0IGRlbGF5XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzaG93UHJvZ3Jlc3MoKVxyXG4gICAge1xyXG4gICAgICAgIGlmKCF0aGlzLl9pc0Jyb3dzZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZighdGhpcy5fdGltZW91dCAmJiB0aGlzLl9ydW5uaW5nUmVxdWVzdHMgPCAxKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb25SdW5uaW5nKHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsO1xyXG4gICAgICAgICAgICB9LCB0aGlzLmNvbmZpZy50aW1lb3V0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3J1bm5pbmdSZXF1ZXN0cysrO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGlkZXMgcHJvZ3Jlc3MgaW5kaWNhdG9yXHJcbiAgICAgKiBAcGFyYW0gZm9yY2UgSW5kaWNhdGlvbiB0aGF0IGluZGljYXRvciBzaG91bGQgYmUgaGlkZGVuIGV2ZW4gaWYgc29tZSBwcm9jZXNzZXMgYXJlIHJ1bm5pbmdcclxuICAgICAqL1xyXG4gICAgcHVibGljIGhpZGVQcm9ncmVzcyhmb3JjZT86IGJvb2xlYW4pXHJcbiAgICB7XHJcbiAgICAgICAgaWYoIXRoaXMuX2lzQnJvd3NlcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKGZvcmNlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fcnVubmluZ1JlcXVlc3RzID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKHRoaXMuX3J1bm5pbmdSZXF1ZXN0cyA+IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9ydW5uaW5nUmVxdWVzdHMtLTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKHRoaXMuX3J1bm5pbmdSZXF1ZXN0cyA8IDEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9vblJ1bm5pbmcoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHJpdmF0ZSBtZXRob2RzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgZm9yIGludm9raW5nICdydW5uaW5nQ2hhbmdlZCcgZXZlbnRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfb25SdW5uaW5nKHZhbHVlOiBib29sZWFuKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMucnVubmluZyA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX3J1bm5pbmdDaGFuZ2VkLm5leHQodmFsdWUpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==