/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule as AngularCommonModule } from '@angular/common';
import { NumeralPipe } from './../pipes/numeral.pipe';
import { NumberInputValidatorDirective } from './../directives/numberInput/numberInputValidator.directive';
import { NumberInputControlValueAccessor } from './../directives/numberInput/numberInputControlValueAccessor.directive';
import { MinValueNumberValidatorDirective } from './../directives/numberInput/minValueNumberValidator.directive';
import { MaxValueNumberValidatorDirective } from './../directives/numberInput/maxValueNumberValidator.directive';
import { NgComponentOutletEx } from "../directives/ngComponentOutletEx/ngComponentOutletEx.directive";
/**
 * Module for common components, pipes and directives
 */
var CommonModule = /** @class */ (function () {
    function CommonModule() {
    }
    CommonModule.decorators = [
        { type: NgModule, args: [{
                    imports: [AngularCommonModule],
                    declarations: [MaxValueNumberValidatorDirective,
                        MinValueNumberValidatorDirective,
                        NumberInputControlValueAccessor,
                        NumberInputValidatorDirective,
                        NumeralPipe,
                        NgComponentOutletEx],
                    exports: [MaxValueNumberValidatorDirective,
                        MinValueNumberValidatorDirective,
                        NumberInputControlValueAccessor,
                        NumberInputValidatorDirective,
                        NumeralPipe,
                        NgComponentOutletEx]
                },] }
    ];
    return CommonModule;
}());
export { CommonModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2NvbW1vbi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdkMsT0FBTyxFQUFDLFlBQVksSUFBSSxtQkFBbUIsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRXBFLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsNkJBQTZCLEVBQUMsTUFBTSw0REFBNEQsQ0FBQztBQUN6RyxPQUFPLEVBQUMsK0JBQStCLEVBQUMsTUFBTSx1RUFBdUUsQ0FBQztBQUN0SCxPQUFPLEVBQUMsZ0NBQWdDLEVBQUMsTUFBTSwrREFBK0QsQ0FBQztBQUMvRyxPQUFPLEVBQUMsZ0NBQWdDLEVBQUMsTUFBTSwrREFBK0QsQ0FBQztBQUMvRyxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxpRUFBaUUsQ0FBQzs7OztBQUtwRztJQUFBO0lBa0JBLENBQUM7O2dCQWxCQSxRQUFRLFNBQ1Q7b0JBQ0ksT0FBTyxFQUFFLENBQUMsbUJBQW1CLENBQUM7b0JBQzlCLFlBQVksRUFBRSxDQUFDLGdDQUFnQzt3QkFDaEMsZ0NBQWdDO3dCQUNoQywrQkFBK0I7d0JBQy9CLDZCQUE2Qjt3QkFDN0IsV0FBVzt3QkFDWCxtQkFBbUIsQ0FBQztvQkFDbkMsT0FBTyxFQUFFLENBQUMsZ0NBQWdDO3dCQUNoQyxnQ0FBZ0M7d0JBQ2hDLCtCQUErQjt3QkFDL0IsNkJBQTZCO3dCQUM3QixXQUFXO3dCQUNYLG1CQUFtQixDQUFDO2lCQUNqQzs7SUFHRCxtQkFBQztDQUFBLEFBbEJELElBa0JDO1NBRlksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TmdNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0NvbW1vbk1vZHVsZSBhcyBBbmd1bGFyQ29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5cclxuaW1wb3J0IHtOdW1lcmFsUGlwZX0gZnJvbSAnLi8uLi9waXBlcy9udW1lcmFsLnBpcGUnO1xyXG5pbXBvcnQge051bWJlcklucHV0VmFsaWRhdG9yRGlyZWN0aXZlfSBmcm9tICcuLy4uL2RpcmVjdGl2ZXMvbnVtYmVySW5wdXQvbnVtYmVySW5wdXRWYWxpZGF0b3IuZGlyZWN0aXZlJztcclxuaW1wb3J0IHtOdW1iZXJJbnB1dENvbnRyb2xWYWx1ZUFjY2Vzc29yfSBmcm9tICcuLy4uL2RpcmVjdGl2ZXMvbnVtYmVySW5wdXQvbnVtYmVySW5wdXRDb250cm9sVmFsdWVBY2Nlc3Nvci5kaXJlY3RpdmUnO1xyXG5pbXBvcnQge01pblZhbHVlTnVtYmVyVmFsaWRhdG9yRGlyZWN0aXZlfSBmcm9tICcuLy4uL2RpcmVjdGl2ZXMvbnVtYmVySW5wdXQvbWluVmFsdWVOdW1iZXJWYWxpZGF0b3IuZGlyZWN0aXZlJztcclxuaW1wb3J0IHtNYXhWYWx1ZU51bWJlclZhbGlkYXRvckRpcmVjdGl2ZX0gZnJvbSAnLi8uLi9kaXJlY3RpdmVzL251bWJlcklucHV0L21heFZhbHVlTnVtYmVyVmFsaWRhdG9yLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7TmdDb21wb25lbnRPdXRsZXRFeH0gZnJvbSBcIi4uL2RpcmVjdGl2ZXMvbmdDb21wb25lbnRPdXRsZXRFeC9uZ0NvbXBvbmVudE91dGxldEV4LmRpcmVjdGl2ZVwiO1xyXG5cclxuLyoqXHJcbiAqIE1vZHVsZSBmb3IgY29tbW9uIGNvbXBvbmVudHMsIHBpcGVzIGFuZCBkaXJlY3RpdmVzXHJcbiAqL1xyXG5ATmdNb2R1bGUoXHJcbntcclxuICAgIGltcG9ydHM6IFtBbmd1bGFyQ29tbW9uTW9kdWxlXSxcclxuICAgIGRlY2xhcmF0aW9uczogW01heFZhbHVlTnVtYmVyVmFsaWRhdG9yRGlyZWN0aXZlLFxyXG4gICAgICAgICAgICAgICAgICAgTWluVmFsdWVOdW1iZXJWYWxpZGF0b3JEaXJlY3RpdmUsXHJcbiAgICAgICAgICAgICAgICAgICBOdW1iZXJJbnB1dENvbnRyb2xWYWx1ZUFjY2Vzc29yLFxyXG4gICAgICAgICAgICAgICAgICAgTnVtYmVySW5wdXRWYWxpZGF0b3JEaXJlY3RpdmUsXHJcbiAgICAgICAgICAgICAgICAgICBOdW1lcmFsUGlwZSxcclxuICAgICAgICAgICAgICAgICAgIE5nQ29tcG9uZW50T3V0bGV0RXhdLFxyXG4gICAgZXhwb3J0czogW01heFZhbHVlTnVtYmVyVmFsaWRhdG9yRGlyZWN0aXZlLFxyXG4gICAgICAgICAgICAgIE1pblZhbHVlTnVtYmVyVmFsaWRhdG9yRGlyZWN0aXZlLFxyXG4gICAgICAgICAgICAgIE51bWJlcklucHV0Q29udHJvbFZhbHVlQWNjZXNzb3IsXHJcbiAgICAgICAgICAgICAgTnVtYmVySW5wdXRWYWxpZGF0b3JEaXJlY3RpdmUsXHJcbiAgICAgICAgICAgICAgTnVtZXJhbFBpcGUsXHJcbiAgICAgICAgICAgICAgTmdDb21wb25lbnRPdXRsZXRFeF1cclxufSlcclxuZXhwb3J0IGNsYXNzIENvbW1vbk1vZHVsZVxyXG57XHJcbn0iXX0=