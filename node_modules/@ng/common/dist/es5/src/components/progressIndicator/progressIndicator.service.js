/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Optional, Injectable, PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { ProgressIndicatorOptions } from './progressIndicatorOptions';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./progressIndicatorOptions";
/**
 * Service that is used for displaying and hiding progress indicator
 */
var ProgressIndicatorService = /** @class */ (function () {
    //######################### constructors #########################
    function ProgressIndicatorService(platformId, config) {
        this.config = config;
        //######################### private fields #########################
        /**
         * Indication that current code is running in browser
         */
        this._isBrowser = false;
        /**
         * Number of running requests
         */
        this._runningRequests = 0;
        /**
         * Used for invoking event runningChanged
         */
        this._runningChanged = new Subject();
        //######################### public properties #########################
        /**
         * Indication that progress indicator is running
         */
        this.running = false;
        this._isBrowser = isPlatformBrowser(platformId);
        if (config && !(config instanceof ProgressIndicatorOptions)) {
            this.config = undefined;
            console.warn("Provided configuration for 'ProgressIndicatorService' is not of type 'ProgressIndicatorOptions' and will be ignored!");
        }
        this.config = config || new ProgressIndicatorOptions();
    }
    Object.defineProperty(ProgressIndicatorService.prototype, "runningChanged", {
        /**
         * Occurs when 'running' changes
         */
        get: /**
         * Occurs when 'running' changes
         * @return {?}
         */
        function () {
            return this._runningChanged.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    //######################### public methods #########################
    /**
     * Displays progress indicator after short delay
     */
    //######################### public methods #########################
    /**
     * Displays progress indicator after short delay
     * @return {?}
     */
    ProgressIndicatorService.prototype.showProgress = 
    //######################### public methods #########################
    /**
     * Displays progress indicator after short delay
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._isBrowser) {
            return;
        }
        if (!this._timeout && this._runningRequests < 1) {
            this._timeout = setTimeout((/**
             * @return {?}
             */
            function () {
                _this._onRunning(true);
                clearTimeout(_this._timeout);
                _this._timeout = null;
            }), this.config.timeout);
        }
        this._runningRequests++;
    };
    /**
     * Hides progress indicator
     * @param force Indication that indicator should be hidden even if some processes are running
     */
    /**
     * Hides progress indicator
     * @param {?=} force Indication that indicator should be hidden even if some processes are running
     * @return {?}
     */
    ProgressIndicatorService.prototype.hideProgress = /**
     * Hides progress indicator
     * @param {?=} force Indication that indicator should be hidden even if some processes are running
     * @return {?}
     */
    function (force) {
        if (!this._isBrowser) {
            return;
        }
        if (force) {
            this._runningRequests = 0;
        }
        if (this._runningRequests > 0) {
            this._runningRequests--;
        }
        if (this._runningRequests < 1) {
            clearTimeout(this._timeout);
            this._timeout = null;
            this._onRunning(false);
        }
    };
    //######################### private methods #########################
    /**
     * Used for invoking 'runningChanged' event
     */
    //######################### private methods #########################
    /**
     * Used for invoking 'runningChanged' event
     * @private
     * @param {?} value
     * @return {?}
     */
    ProgressIndicatorService.prototype._onRunning = 
    //######################### private methods #########################
    /**
     * Used for invoking 'runningChanged' event
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.running = value;
        this._runningChanged.next(value);
    };
    ProgressIndicatorService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    ProgressIndicatorService.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: ProgressIndicatorOptions, decorators: [{ type: Optional }] }
    ]; };
    /** @nocollapse */ ProgressIndicatorService.ngInjectableDef = i0.defineInjectable({ factory: function ProgressIndicatorService_Factory() { return new ProgressIndicatorService(i0.inject(i0.PLATFORM_ID), i0.inject(i1.ProgressIndicatorOptions, 8)); }, token: ProgressIndicatorService, providedIn: "root" });
    return ProgressIndicatorService;
}());
export { ProgressIndicatorService };
if (false) {
    /**
     * Indication that current code is running in browser
     * @type {?}
     * @private
     */
    ProgressIndicatorService.prototype._isBrowser;
    /**
     * Id of running timeout
     * @type {?}
     * @private
     */
    ProgressIndicatorService.prototype._timeout;
    /**
     * Number of running requests
     * @type {?}
     * @private
     */
    ProgressIndicatorService.prototype._runningRequests;
    /**
     * Used for invoking event runningChanged
     * @type {?}
     * @private
     */
    ProgressIndicatorService.prototype._runningChanged;
    /**
     * Indication that progress indicator is running
     * @type {?}
     */
    ProgressIndicatorService.prototype.running;
    /** @type {?} */
    ProgressIndicatorService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3NJbmRpY2F0b3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3Byb2dyZXNzSW5kaWNhdG9yL3Byb2dyZXNzSW5kaWNhdG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDbEQsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFhLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQzs7Ozs7O0FBS3pDO0lBd0NJLGtFQUFrRTtJQUNsRSxrQ0FBaUMsVUFBa0IsRUFDcEIsTUFBaUM7UUFBakMsV0FBTSxHQUFOLE1BQU0sQ0FBMkI7Ozs7O1FBbEN4RCxlQUFVLEdBQVksS0FBSyxDQUFDOzs7O1FBVTVCLHFCQUFnQixHQUFXLENBQUMsQ0FBQzs7OztRQUs3QixvQkFBZSxHQUFxQixJQUFJLE9BQU8sRUFBVyxDQUFDOzs7OztRQU81RCxZQUFPLEdBQVksS0FBSyxDQUFDO1FBYzVCLElBQUksQ0FBQyxVQUFVLEdBQUcsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFaEQsSUFBRyxNQUFNLElBQUksQ0FBQyxDQUFDLE1BQU0sWUFBWSx3QkFBd0IsQ0FBQyxFQUMxRDtZQUNJLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1lBQ3hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsc0hBQXNILENBQUMsQ0FBQztTQUN4STtRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxJQUFJLElBQUksd0JBQXdCLEVBQUUsQ0FBQztJQUMzRCxDQUFDO0lBbEJELHNCQUFXLG9EQUFjO1FBSHpCOztXQUVHOzs7OztRQUNIO1lBRUksT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQy9DLENBQUM7OztPQUFBO0lBaUJELG9FQUFvRTtJQUVwRTs7T0FFRzs7Ozs7O0lBQ0ksK0NBQVk7Ozs7OztJQUFuQjtRQUFBLGlCQW1CQztRQWpCRyxJQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFDbkI7WUFDSSxPQUFPO1NBQ1Y7UUFFRCxJQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxFQUM5QztZQUNJLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVTs7O1lBQUM7Z0JBRXZCLEtBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBRXRCLFlBQVksQ0FBQyxLQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzVCLEtBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1lBQ3pCLENBQUMsR0FBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzNCO1FBRUQsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7T0FHRzs7Ozs7O0lBQ0ksK0NBQVk7Ozs7O0lBQW5CLFVBQW9CLEtBQWU7UUFFL0IsSUFBRyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQ25CO1lBQ0ksT0FBTztTQUNWO1FBRUQsSUFBRyxLQUFLLEVBQ1I7WUFDSSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO1NBQzdCO1FBRUQsSUFBRyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxFQUM1QjtZQUNJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1NBQzNCO1FBRUQsSUFBRyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxFQUM1QjtZQUNJLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDNUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDckIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMxQjtJQUNMLENBQUM7SUFFRCxxRUFBcUU7SUFFckU7O09BRUc7Ozs7Ozs7O0lBQ0ssNkNBQVU7Ozs7Ozs7O0lBQWxCLFVBQW1CLEtBQWM7UUFFN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDckIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckMsQ0FBQzs7Z0JBdkhKLFVBQVUsU0FBQyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUM7Ozs7Z0JBeUNpQixNQUFNLHVCQUF0QyxNQUFNLFNBQUMsV0FBVztnQkEvQzNCLHdCQUF3Qix1QkFnRGYsUUFBUTs7O21DQWxEekI7Q0FnSUMsQUF4SEQsSUF3SEM7U0F2SFksd0JBQXdCOzs7Ozs7O0lBT2pDLDhDQUFvQzs7Ozs7O0lBS3BDLDRDQUFzQjs7Ozs7O0lBS3RCLG9EQUFxQzs7Ozs7O0lBS3JDLG1EQUFtRTs7Ozs7SUFPbkUsMkNBQWdDOztJQVlwQiwwQ0FBb0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge09wdGlvbmFsLCBJbmplY3RhYmxlLCBQTEFURk9STV9JRCwgSW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtpc1BsYXRmb3JtQnJvd3Nlcn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHtQcm9ncmVzc0luZGljYXRvck9wdGlvbnN9IGZyb20gJy4vcHJvZ3Jlc3NJbmRpY2F0b3JPcHRpb25zJztcclxuaW1wb3J0IHtPYnNlcnZhYmxlLCBTdWJqZWN0fSBmcm9tICdyeGpzJztcclxuXHJcbi8qKlxyXG4gKiBTZXJ2aWNlIHRoYXQgaXMgdXNlZCBmb3IgZGlzcGxheWluZyBhbmQgaGlkaW5nIHByb2dyZXNzIGluZGljYXRvclxyXG4gKi9cclxuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXHJcbmV4cG9ydCBjbGFzcyBQcm9ncmVzc0luZGljYXRvclNlcnZpY2Vcclxue1xyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHByaXZhdGUgZmllbGRzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIEluZGljYXRpb24gdGhhdCBjdXJyZW50IGNvZGUgaXMgcnVubmluZyBpbiBicm93c2VyXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2lzQnJvd3NlcjogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSWQgb2YgcnVubmluZyB0aW1lb3V0XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX3RpbWVvdXQ6IGFueTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE51bWJlciBvZiBydW5uaW5nIHJlcXVlc3RzXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX3J1bm5pbmdSZXF1ZXN0czogbnVtYmVyID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgZm9yIGludm9raW5nIGV2ZW50IHJ1bm5pbmdDaGFuZ2VkXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX3J1bm5pbmdDaGFuZ2VkOiBTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcclxuXHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIHByb3BlcnRpZXMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5kaWNhdGlvbiB0aGF0IHByb2dyZXNzIGluZGljYXRvciBpcyBydW5uaW5nXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBydW5uaW5nOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPY2N1cnMgd2hlbiAncnVubmluZycgY2hhbmdlc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHJ1bm5pbmdDaGFuZ2VkKCk6IE9ic2VydmFibGU8Ym9vbGVhbj5cclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcnVubmluZ0NoYW5nZWQuYXNPYnNlcnZhYmxlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIGNvbnN0cnVjdG9ycyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KFBMQVRGT1JNX0lEKSBwbGF0Zm9ybUlkOiBPYmplY3QsXHJcbiAgICAgICAgICAgICAgICBAT3B0aW9uYWwoKSBwdWJsaWMgY29uZmlnPzogUHJvZ3Jlc3NJbmRpY2F0b3JPcHRpb25zKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuX2lzQnJvd3NlciA9IGlzUGxhdGZvcm1Ccm93c2VyKHBsYXRmb3JtSWQpO1xyXG5cclxuICAgICAgICBpZihjb25maWcgJiYgIShjb25maWcgaW5zdGFuY2VvZiBQcm9ncmVzc0luZGljYXRvck9wdGlvbnMpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5jb25maWcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlByb3ZpZGVkIGNvbmZpZ3VyYXRpb24gZm9yICdQcm9ncmVzc0luZGljYXRvclNlcnZpY2UnIGlzIG5vdCBvZiB0eXBlICdQcm9ncmVzc0luZGljYXRvck9wdGlvbnMnIGFuZCB3aWxsIGJlIGlnbm9yZWQhXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWcgfHwgbmV3IFByb2dyZXNzSW5kaWNhdG9yT3B0aW9ucygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwdWJsaWMgbWV0aG9kcyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEaXNwbGF5cyBwcm9ncmVzcyBpbmRpY2F0b3IgYWZ0ZXIgc2hvcnQgZGVsYXlcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNob3dQcm9ncmVzcygpXHJcbiAgICB7XHJcbiAgICAgICAgaWYoIXRoaXMuX2lzQnJvd3NlcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKCF0aGlzLl90aW1lb3V0ICYmIHRoaXMuX3J1bm5pbmdSZXF1ZXN0cyA8IDEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vblJ1bm5pbmcodHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGltZW91dCA9IG51bGw7XHJcbiAgICAgICAgICAgIH0sIHRoaXMuY29uZmlnLnRpbWVvdXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fcnVubmluZ1JlcXVlc3RzKys7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIaWRlcyBwcm9ncmVzcyBpbmRpY2F0b3JcclxuICAgICAqIEBwYXJhbSBmb3JjZSBJbmRpY2F0aW9uIHRoYXQgaW5kaWNhdG9yIHNob3VsZCBiZSBoaWRkZW4gZXZlbiBpZiBzb21lIHByb2Nlc3NlcyBhcmUgcnVubmluZ1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaGlkZVByb2dyZXNzKGZvcmNlPzogYm9vbGVhbilcclxuICAgIHtcclxuICAgICAgICBpZighdGhpcy5faXNCcm93c2VyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoZm9yY2UpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9ydW5uaW5nUmVxdWVzdHMgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYodGhpcy5fcnVubmluZ1JlcXVlc3RzID4gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX3J1bm5pbmdSZXF1ZXN0cy0tO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYodGhpcy5fcnVubmluZ1JlcXVlc3RzIDwgMSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KTtcclxuICAgICAgICAgICAgdGhpcy5fdGltZW91dCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX29uUnVubmluZyhmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwcml2YXRlIG1ldGhvZHMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCBmb3IgaW52b2tpbmcgJ3J1bm5pbmdDaGFuZ2VkJyBldmVudFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9vblJ1bm5pbmcodmFsdWU6IGJvb2xlYW4pXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5ydW5uaW5nID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fcnVubmluZ0NoYW5nZWQubmV4dCh2YWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuIl19