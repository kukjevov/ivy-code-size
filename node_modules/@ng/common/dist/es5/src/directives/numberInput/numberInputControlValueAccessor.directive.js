/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, forwardRef, Renderer2, ElementRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { isBlank } from '@asseco/common';
/**
 * Value accessor provider for number inputs
 * @type {?}
 */
var NUMBER_INPUT_VALUE_ACCESSOR = (/** @type {?} */ ({
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return NumberInputControlValueAccessor; })),
    multi: true
}));
/**
 * Value accessor for getting and setting values for number inputs
 */
var NumberInputControlValueAccessor = /** @class */ (function () {
    //######################### constructor #########################
    function NumberInputControlValueAccessor(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        //######################### public properties #########################
        this.onChange = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) { });
        /**
         * Method that is called when picker was touched
         */
        this.onTouched = (/**
         * @return {?}
         */
        function () { });
    }
    //######################### public methods - implementation of ControlValueAccessor #########################
    /**
     * Sets value to select
     */
    //######################### public methods - implementation of ControlValueAccessor #########################
    /**
     * Sets value to select
     * @param {?} value
     * @return {?}
     */
    NumberInputControlValueAccessor.prototype.writeValue = 
    //######################### public methods - implementation of ControlValueAccessor #########################
    /**
     * Sets value to select
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);
    };
    /**
     * Registers callback that is called when value of select changes
     */
    /**
     * Registers callback that is called when value of select changes
     * @param {?} fn
     * @return {?}
     */
    NumberInputControlValueAccessor.prototype.registerOnChange = /**
     * Registers callback that is called when value of select changes
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = (/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isBlank(value) || value == '') {
                fn(null);
                return;
            }
            if (!/^[+-]?\d+(?:[,.]\d+)?$/g.test(value)) {
                fn(NaN);
                return;
            }
            ;
            fn(parseFloat(value.replace(",", ".")));
        });
    };
    /**
     * Registers callback that is called when select is closed
     */
    /**
     * Registers callback that is called when select is closed
     * @param {?} fn
     * @return {?}
     */
    NumberInputControlValueAccessor.prototype.registerOnTouched = /**
     * Registers callback that is called when select is closed
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    NumberInputControlValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',
                    providers: [NUMBER_INPUT_VALUE_ACCESSOR],
                    host: {
                        '(change)': 'onChange($event.target.value)',
                        '(input)': 'onChange($event.target.value)',
                        '(blur)': 'onTouched()'
                    }
                },] }
    ];
    /** @nocollapse */
    NumberInputControlValueAccessor.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    return NumberInputControlValueAccessor;
}());
export { NumberInputControlValueAccessor };
if (false) {
    /** @type {?} */
    NumberInputControlValueAccessor.prototype.onChange;
    /**
     * Method that is called when picker was touched
     * @type {?}
     */
    NumberInputControlValueAccessor.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    NumberInputControlValueAccessor.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    NumberInputControlValueAccessor.prototype._elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVySW5wdXRDb250cm9sVmFsdWVBY2Nlc3Nvci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZGlyZWN0aXZlcy9udW1iZXJJbnB1dC9udW1iZXJJbnB1dENvbnRyb2xWYWx1ZUFjY2Vzc29yLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBb0IsVUFBVSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDN0YsT0FBTyxFQUFDLGlCQUFpQixFQUF1QixNQUFNLGdCQUFnQixDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7SUFLakMsMkJBQTJCLEdBQUcsbUJBQ3BDO0lBQ0ksT0FBTyxFQUFFLGlCQUFpQjtJQUMxQixXQUFXLEVBQUUsVUFBVTs7O0lBQUMsY0FBTSxPQUFBLCtCQUErQixFQUEvQixDQUErQixFQUFDO0lBQzlELEtBQUssRUFBRSxJQUFJO0NBQ2QsRUFBQTs7OztBQUtEO0lBc0JJLGlFQUFpRTtJQUNqRSx5Q0FBb0IsU0FBb0IsRUFBVSxXQUF1QjtRQUFyRCxjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQVUsZ0JBQVcsR0FBWCxXQUFXLENBQVk7O1FBUmxFLGFBQVE7Ozs7UUFBRyxVQUFDLENBQU0sSUFBTSxDQUFDLEVBQUM7Ozs7UUFLMUIsY0FBUzs7O1FBQUcsY0FBTyxDQUFDLEVBQUM7SUFLNUIsQ0FBQztJQUVELDZHQUE2RztJQUU3Rzs7T0FFRzs7Ozs7OztJQUNJLG9EQUFVOzs7Ozs7O0lBQWpCLFVBQWtCLEtBQVU7UUFFeEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFRDs7T0FFRzs7Ozs7O0lBQ0ksMERBQWdCOzs7OztJQUF2QixVQUF3QixFQUFzQjtRQUUxQyxJQUFJLENBQUMsUUFBUTs7OztRQUFHLFVBQUMsS0FBYTtZQUUxQixJQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRSxFQUNoQztnQkFDSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBRVQsT0FBTzthQUNWO1lBRUQsSUFBRyxDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFDekM7Z0JBQ0ksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUVSLE9BQU87YUFDVjtZQUFBLENBQUM7WUFFRixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QyxDQUFDLENBQUEsQ0FBQztJQUNOLENBQUM7SUFFRDs7T0FFRzs7Ozs7O0lBQ0ksMkRBQWlCOzs7OztJQUF4QixVQUF5QixFQUFhO1FBRWxDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3hCLENBQUM7O2dCQXBFSixTQUFTLFNBQ1Y7b0JBQ0ksUUFBUSxFQUFFLGtGQUFrRjtvQkFDNUYsU0FBUyxFQUFFLENBQUMsMkJBQTJCLENBQUM7b0JBQ3hDLElBQUksRUFDSjt3QkFDSSxVQUFVLEVBQUUsK0JBQStCO3dCQUMzQyxTQUFTLEVBQUUsK0JBQStCO3dCQUMxQyxRQUFRLEVBQUUsYUFBYTtxQkFDMUI7aUJBQ0o7Ozs7Z0JBM0JnRCxTQUFTO2dCQUFFLFVBQVU7O0lBc0Z0RSxzQ0FBQztDQUFBLEFBckVELElBcUVDO1NBMURZLCtCQUErQjs7O0lBSXhDLG1EQUFpQzs7Ozs7SUFLakMsb0RBQTRCOzs7OztJQUdoQixvREFBNEI7Ozs7O0lBQUUsc0RBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEV4aXN0aW5nUHJvdmlkZXIsIGZvcndhcmRSZWYsIFJlbmRlcmVyMiwgRWxlbWVudFJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7TkdfVkFMVUVfQUNDRVNTT1IsIENvbnRyb2xWYWx1ZUFjY2Vzc29yfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7aXNCbGFua30gZnJvbSAnQGFzc2Vjby9jb21tb24nO1xyXG5cclxuLyoqXHJcbiAqIFZhbHVlIGFjY2Vzc29yIHByb3ZpZGVyIGZvciBudW1iZXIgaW5wdXRzXHJcbiAqL1xyXG5jb25zdCBOVU1CRVJfSU5QVVRfVkFMVUVfQUNDRVNTT1IgPSA8RXhpc3RpbmdQcm92aWRlcj5cclxue1xyXG4gICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsIFxyXG4gICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTnVtYmVySW5wdXRDb250cm9sVmFsdWVBY2Nlc3NvciksIFxyXG4gICAgbXVsdGk6IHRydWVcclxufTtcclxuXHJcbi8qKlxyXG4gKiBWYWx1ZSBhY2Nlc3NvciBmb3IgZ2V0dGluZyBhbmQgc2V0dGluZyB2YWx1ZXMgZm9yIG51bWJlciBpbnB1dHNcclxuICovXHJcbkBEaXJlY3RpdmUoXHJcbntcclxuICAgIHNlbGVjdG9yOiAnaW5wdXRbbnVtYmVyXVtmb3JtQ29udHJvbE5hbWVdLGlucHV0W251bWJlcl1bZm9ybUNvbnRyb2xdLGlucHV0W251bWJlcl1bbmdNb2RlbF0nLFxyXG4gICAgcHJvdmlkZXJzOiBbTlVNQkVSX0lOUFVUX1ZBTFVFX0FDQ0VTU09SXSxcclxuICAgIGhvc3Q6IFxyXG4gICAge1xyXG4gICAgICAgICcoY2hhbmdlKSc6ICdvbkNoYW5nZSgkZXZlbnQudGFyZ2V0LnZhbHVlKScsXHJcbiAgICAgICAgJyhpbnB1dCknOiAnb25DaGFuZ2UoJGV2ZW50LnRhcmdldC52YWx1ZSknLFxyXG4gICAgICAgICcoYmx1ciknOiAnb25Ub3VjaGVkKCknXHJcbiAgICB9XHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOdW1iZXJJbnB1dENvbnRyb2xWYWx1ZUFjY2Vzc29yIGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3Jcclxue1xyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHB1YmxpYyBwcm9wZXJ0aWVzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgIFxyXG4gICAgcHVibGljIG9uQ2hhbmdlID0gKF86IGFueSkgPT4ge307XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogTWV0aG9kIHRoYXQgaXMgY2FsbGVkIHdoZW4gcGlja2VyIHdhcyB0b3VjaGVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvblRvdWNoZWQgPSAoKSA9PiB7fTtcclxuICAgIFxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIGNvbnN0cnVjdG9yICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYpXHJcbiAgICB7XHJcbiAgICB9XHJcblxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHB1YmxpYyBtZXRob2RzIC0gaW1wbGVtZW50YXRpb24gb2YgQ29udHJvbFZhbHVlQWNjZXNzb3IgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB2YWx1ZSB0byBzZWxlY3RcclxuICAgICAqL1xyXG4gICAgcHVibGljIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWRcclxuICAgIHtcclxuICAgICAgICB0aGlzLl9yZW5kZXJlci5zZXRQcm9wZXJ0eSh0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICd2YWx1ZScsIHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVycyBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHZhbHVlIG9mIHNlbGVjdCBjaGFuZ2VzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoZGF0YTogYW55KSA9PiBhbnkpOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9ICh2YWx1ZTogc3RyaW5nKSA9PiBcclxuICAgICAgICB7IFxyXG4gICAgICAgICAgICBpZihpc0JsYW5rKHZhbHVlKSB8fCB2YWx1ZSA9PSAnJylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm4obnVsbCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoIS9eWystXT9cXGQrKD86WywuXVxcZCspPyQvZy50ZXN0KHZhbHVlKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm4oTmFOKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm4ocGFyc2VGbG9hdCh2YWx1ZS5yZXBsYWNlKFwiLFwiLCBcIi5cIikpKTsgXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVycyBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHNlbGVjdCBpcyBjbG9zZWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiBhbnkpOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5vblRvdWNoZWQgPSBmbjtcclxuICAgIH1cclxufVxyXG4iXX0=