/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NG_VALIDATORS } from '@angular/forms';
import { forwardRef, Directive } from '@angular/core';
import { Validators } from '../../misc';
/**
 * Validator that is injected with directive NumberInputValidatorDirective
 * @type {?}
 */
var NUMBER_VALIDATOR = (/** @type {?} */ ({
    provide: NG_VALIDATORS,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return NumberInputValidatorDirective; })),
    multi: true
}));
/**
 * Is number directive injecting checking for number validator
 */
var NumberInputValidatorDirective = /** @class */ (function () {
    function NumberInputValidatorDirective() {
    }
    //######################### public methods - implementation of Validator #########################
    /**
     * Validates input and returns validation result
     * @param control Control that is being validated
     * @returns validation results
     */
    //######################### public methods - implementation of Validator #########################
    /**
     * Validates input and returns validation result
     * @param {?} control Control that is being validated
     * @return {?} validation results
     */
    NumberInputValidatorDirective.prototype.validate = 
    //######################### public methods - implementation of Validator #########################
    /**
     * Validates input and returns validation result
     * @param {?} control Control that is being validated
     * @return {?} validation results
     */
    function (control) {
        return Validators.number(control);
    };
    NumberInputValidatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: "input[number][formControlName],input[number][formControl],input[number][ngModel]",
                    providers: [NUMBER_VALIDATOR]
                },] }
    ];
    return NumberInputValidatorDirective;
}());
export { NumberInputValidatorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVySW5wdXRWYWxpZGF0b3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2RpcmVjdGl2ZXMvbnVtYmVySW5wdXQvbnVtYmVySW5wdXRWYWxpZGF0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsYUFBYSxFQUErQyxNQUFNLGdCQUFnQixDQUFDO0FBQzNGLE9BQU8sRUFBbUIsVUFBVSxFQUFFLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV0RSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sWUFBWSxDQUFDOzs7OztJQUtoQyxnQkFBZ0IsR0FBRyxtQkFDekI7SUFDSSxPQUFPLEVBQUUsYUFBYTtJQUN0QixXQUFXLEVBQUUsVUFBVTs7O0lBQUMsY0FBTSxPQUFBLDZCQUE2QixFQUE3QixDQUE2QixFQUFDO0lBQzVELEtBQUssRUFBRSxJQUFJO0NBQ2QsRUFBQTs7OztBQUtEO0lBQUE7SUFrQkEsQ0FBQztJQVhHLGtHQUFrRztJQUVsRzs7OztPQUlHOzs7Ozs7O0lBQ0ksZ0RBQVE7Ozs7Ozs7SUFBZixVQUFnQixPQUF3QjtRQUVwQyxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7Z0JBakJKLFNBQVMsU0FDVjtvQkFDSSxRQUFRLEVBQUUsa0ZBQWtGO29CQUM1RixTQUFTLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztpQkFDaEM7O0lBY0Qsb0NBQUM7Q0FBQSxBQWxCRCxJQWtCQztTQWJZLDZCQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TkdfVkFMSURBVE9SUywgQWJzdHJhY3RDb250cm9sLCBWYWxpZGF0b3IsIFZhbGlkYXRpb25FcnJvcnN9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHtFeGlzdGluZ1Byb3ZpZGVyLCBmb3J3YXJkUmVmLCBEaXJlY3RpdmV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHtWYWxpZGF0b3JzfSBmcm9tICcuLi8uLi9taXNjJztcclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0b3IgdGhhdCBpcyBpbmplY3RlZCB3aXRoIGRpcmVjdGl2ZSBOdW1iZXJJbnB1dFZhbGlkYXRvckRpcmVjdGl2ZVxyXG4gKi9cclxuY29uc3QgTlVNQkVSX1ZBTElEQVRPUiA9IDxFeGlzdGluZ1Byb3ZpZGVyPlxyXG57XHJcbiAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxyXG4gICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTnVtYmVySW5wdXRWYWxpZGF0b3JEaXJlY3RpdmUpLFxyXG4gICAgbXVsdGk6IHRydWVcclxufTtcclxuXHJcbi8qKlxyXG4gKiBJcyBudW1iZXIgZGlyZWN0aXZlIGluamVjdGluZyBjaGVja2luZyBmb3IgbnVtYmVyIHZhbGlkYXRvclxyXG4gKi9cclxuQERpcmVjdGl2ZShcclxue1xyXG4gICAgc2VsZWN0b3I6IFwiaW5wdXRbbnVtYmVyXVtmb3JtQ29udHJvbE5hbWVdLGlucHV0W251bWJlcl1bZm9ybUNvbnRyb2xdLGlucHV0W251bWJlcl1bbmdNb2RlbF1cIixcclxuICAgIHByb3ZpZGVyczogW05VTUJFUl9WQUxJREFUT1JdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOdW1iZXJJbnB1dFZhbGlkYXRvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIFZhbGlkYXRvclxyXG57XHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIG1ldGhvZHMgLSBpbXBsZW1lbnRhdGlvbiBvZiBWYWxpZGF0b3IgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVmFsaWRhdGVzIGlucHV0IGFuZCByZXR1cm5zIHZhbGlkYXRpb24gcmVzdWx0XHJcbiAgICAgKiBAcGFyYW0gY29udHJvbCBDb250cm9sIHRoYXQgaXMgYmVpbmcgdmFsaWRhdGVkXHJcbiAgICAgKiBAcmV0dXJucyB2YWxpZGF0aW9uIHJlc3VsdHNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHZhbGlkYXRlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnN8bnVsbFxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBWYWxpZGF0b3JzLm51bWJlcihjb250cm9sKTtcclxuICAgIH1cclxufSJdfQ==