/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NG_VALIDATORS } from '@angular/forms';
import { Input, forwardRef, Directive, Attribute } from '@angular/core';
import { isBlank, isPresent } from '@asseco/common';
import { Validators } from '../../misc';
/**
 * Validator that is injected with directive MaxValueNumberValidatorDirective
 * @type {?}
 */
var MAX_NUMBER_VALIDATOR = (/** @type {?} */ ({
    provide: NG_VALIDATORS,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return MaxValueNumberValidatorDirective; })),
    multi: true
}));
/**
 * Directive injecting checking for number max value validator
 */
var MaxValueNumberValidatorDirective = /** @class */ (function () {
    //######################### constructor #########################
    function MaxValueNumberValidatorDirective(maxValue) {
        /**
         * Indication whether validator was initialized
         */
        this._initialized = false;
        /** @type {?} */
        var value;
        if (isBlank(maxValue) || maxValue.length < 1 || isNaN(value = parseFloat(maxValue.replace(",", ".")))) {
            value = null;
        }
        this._maxValue = value;
    }
    //######################### public methods - implementation of OnChanges #########################
    //######################### public methods - implementation of OnChanges #########################
    /**
     * @param {?} changes
     * @return {?}
     */
    MaxValueNumberValidatorDirective.prototype.ngOnChanges = 
    //######################### public methods - implementation of OnChanges #########################
    /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!this._initialized) {
            this._initialized = true;
            this._validator = Validators.max(this._maxValue);
        }
        if ('maxValue' in changes) {
            this._validator = Validators.max(isPresent(this.maxValue) ? (/** @type {?} */ ((/** @type {?} */ (this.maxValue)))) : this._maxValue);
        }
    };
    //######################### public methods - implementation of Validator #########################
    /**
     * Validates input and returns validation result
     * @param control Control that is being validated
     * @returns validation results
     */
    //######################### public methods - implementation of Validator #########################
    /**
     * Validates input and returns validation result
     * @param {?} control Control that is being validated
     * @return {?} validation results
     */
    MaxValueNumberValidatorDirective.prototype.validate = 
    //######################### public methods - implementation of Validator #########################
    /**
     * Validates input and returns validation result
     * @param {?} control Control that is being validated
     * @return {?} validation results
     */
    function (control) {
        return this._validator(control);
    };
    MaxValueNumberValidatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: "input[number][maxValue][formControlName],input[number][maxValue][formControl],input[number][maxValue][ngModel]",
                    providers: [MAX_NUMBER_VALIDATOR]
                },] }
    ];
    /** @nocollapse */
    MaxValueNumberValidatorDirective.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Attribute, args: ["maxValue",] }] }
    ]; };
    MaxValueNumberValidatorDirective.propDecorators = {
        maxValue: [{ type: Input }]
    };
    return MaxValueNumberValidatorDirective;
}());
export { MaxValueNumberValidatorDirective };
if (false) {
    /**
     * Current max value that is allowed
     * @type {?}
     * @private
     */
    MaxValueNumberValidatorDirective.prototype._maxValue;
    /**
     * Function used for validations
     * @type {?}
     * @private
     */
    MaxValueNumberValidatorDirective.prototype._validator;
    /**
     * Indication whether validator was initialized
     * @type {?}
     * @private
     */
    MaxValueNumberValidatorDirective.prototype._initialized;
    /**
     * Bound max value that is allowed, which overrides value set to attribute maxValue
     * @type {?}
     */
    MaxValueNumberValidatorDirective.prototype.maxValue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF4VmFsdWVOdW1iZXJWYWxpZGF0b3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2RpcmVjdGl2ZXMvbnVtYmVySW5wdXQvbWF4VmFsdWVOdW1iZXJWYWxpZGF0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsYUFBYSxFQUE0RCxNQUFNLGdCQUFnQixDQUFDO0FBQ3hHLE9BQU8sRUFBbUIsS0FBSyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUEyQixNQUFNLGVBQWUsQ0FBQztBQUNsSCxPQUFPLEVBQUMsT0FBTyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRWxELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxZQUFZLENBQUM7Ozs7O0lBS2hDLG9CQUFvQixHQUFHLG1CQUM3QjtJQUNJLE9BQU8sRUFBRSxhQUFhO0lBQ3RCLFdBQVcsRUFBRSxVQUFVOzs7SUFBQyxjQUFNLE9BQUEsZ0NBQWdDLEVBQWhDLENBQWdDLEVBQUM7SUFDL0QsS0FBSyxFQUFFLElBQUk7Q0FDZCxFQUFBOzs7O0FBS0Q7SUFnQ0ksaUVBQWlFO0lBQ2pFLDBDQUFtQyxRQUFnQjs7OztRQVgzQyxpQkFBWSxHQUFZLEtBQUssQ0FBQzs7WUFhOUIsS0FBSztRQUVULElBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFDcEc7WUFDSSxLQUFLLEdBQUcsSUFBSSxDQUFDO1NBQ2hCO1FBRUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFDM0IsQ0FBQztJQUVELGtHQUFrRzs7Ozs7O0lBRTNGLHNEQUFXOzs7Ozs7SUFBbEIsVUFBbUIsT0FBc0I7UUFFckMsSUFBRyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQ3JCO1lBQ0ksSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7WUFFekIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNwRDtRQUVELElBQUksVUFBVSxJQUFJLE9BQU8sRUFDekI7WUFDSSxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQVEsbUJBQUEsSUFBSSxDQUFDLFFBQVEsRUFBQyxFQUFBLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN4RztJQUNMLENBQUM7SUFFRCxrR0FBa0c7SUFFbEc7Ozs7T0FJRzs7Ozs7OztJQUNJLG1EQUFROzs7Ozs7O0lBQWYsVUFBZ0IsT0FBd0I7UUFFcEMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BDLENBQUM7O2dCQXhFSixTQUFTLFNBQ1Y7b0JBQ0ksUUFBUSxFQUFFLGdIQUFnSDtvQkFDMUgsU0FBUyxFQUFFLENBQUMsb0JBQW9CLENBQUM7aUJBQ3BDOzs7OzZDQTZCZ0IsU0FBUyxTQUFDLFVBQVU7OzsyQkFKaEMsS0FBSzs7SUE0Q1YsdUNBQUM7Q0FBQSxBQXpFRCxJQXlFQztTQXBFWSxnQ0FBZ0M7Ozs7Ozs7SUFPekMscURBQStCOzs7Ozs7SUFLL0Isc0RBQWdDOzs7Ozs7SUFLaEMsd0RBQXNDOzs7OztJQU90QyxvREFDeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge05HX1ZBTElEQVRPUlMsIEFic3RyYWN0Q29udHJvbCwgVmFsaWRhdG9yLCBWYWxpZGF0b3JGbiwgVmFsaWRhdGlvbkVycm9yc30gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQge0V4aXN0aW5nUHJvdmlkZXIsIElucHV0LCBmb3J3YXJkUmVmLCBEaXJlY3RpdmUsIEF0dHJpYnV0ZSwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtpc0JsYW5rLCBpc1ByZXNlbnR9IGZyb20gJ0Bhc3NlY28vY29tbW9uJztcclxuXHJcbmltcG9ydCB7VmFsaWRhdG9yc30gZnJvbSAnLi4vLi4vbWlzYyc7XHJcblxyXG4vKipcclxuICogVmFsaWRhdG9yIHRoYXQgaXMgaW5qZWN0ZWQgd2l0aCBkaXJlY3RpdmUgTWF4VmFsdWVOdW1iZXJWYWxpZGF0b3JEaXJlY3RpdmVcclxuICovXHJcbmNvbnN0IE1BWF9OVU1CRVJfVkFMSURBVE9SID0gPEV4aXN0aW5nUHJvdmlkZXI+XHJcbntcclxuICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXHJcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBNYXhWYWx1ZU51bWJlclZhbGlkYXRvckRpcmVjdGl2ZSksXHJcbiAgICBtdWx0aTogdHJ1ZVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIERpcmVjdGl2ZSBpbmplY3RpbmcgY2hlY2tpbmcgZm9yIG51bWJlciBtYXggdmFsdWUgdmFsaWRhdG9yXHJcbiAqL1xyXG5ARGlyZWN0aXZlKFxyXG57XHJcbiAgICBzZWxlY3RvcjogXCJpbnB1dFtudW1iZXJdW21heFZhbHVlXVtmb3JtQ29udHJvbE5hbWVdLGlucHV0W251bWJlcl1bbWF4VmFsdWVdW2Zvcm1Db250cm9sXSxpbnB1dFtudW1iZXJdW21heFZhbHVlXVtuZ01vZGVsXVwiLFxyXG4gICAgcHJvdmlkZXJzOiBbTUFYX05VTUJFUl9WQUxJREFUT1JdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBNYXhWYWx1ZU51bWJlclZhbGlkYXRvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIFZhbGlkYXRvciwgT25DaGFuZ2VzXHJcbntcclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwcml2YXRlIGZpZWxkcyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDdXJyZW50IG1heCB2YWx1ZSB0aGF0IGlzIGFsbG93ZWRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfbWF4VmFsdWU6IG51bWJlcnxudWxsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRnVuY3Rpb24gdXNlZCBmb3IgdmFsaWRhdGlvbnNcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfdmFsaWRhdG9yOiBWYWxpZGF0b3JGbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEluZGljYXRpb24gd2hldGhlciB2YWxpZGF0b3Igd2FzIGluaXRpYWxpemVkXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2luaXRpYWxpemVkOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHB1YmxpYyBwcm9wZXJ0aWVzIC0gaW5wdXRzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIEJvdW5kIG1heCB2YWx1ZSB0aGF0IGlzIGFsbG93ZWQsIHdoaWNoIG92ZXJyaWRlcyB2YWx1ZSBzZXQgdG8gYXR0cmlidXRlIG1heFZhbHVlXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpXHJcbiAgICBwdWJsaWMgbWF4VmFsdWU/OiBudW1iZXI7XHJcblxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIGNvbnN0cnVjdG9yICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgIGNvbnN0cnVjdG9yKEBBdHRyaWJ1dGUoXCJtYXhWYWx1ZVwiKSBtYXhWYWx1ZTogc3RyaW5nKVxyXG4gICAge1xyXG4gICAgICAgIHZhciB2YWx1ZTtcclxuXHJcbiAgICAgICAgaWYoaXNCbGFuayhtYXhWYWx1ZSkgfHwgbWF4VmFsdWUubGVuZ3RoIDwgMSB8fCBpc05hTih2YWx1ZSA9IHBhcnNlRmxvYXQobWF4VmFsdWUucmVwbGFjZShcIixcIiwgXCIuXCIpKSkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9tYXhWYWx1ZSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwdWJsaWMgbWV0aG9kcyAtIGltcGxlbWVudGF0aW9uIG9mIE9uQ2hhbmdlcyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblxyXG4gICAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgaWYoIXRoaXMuX2luaXRpYWxpemVkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fdmFsaWRhdG9yID0gVmFsaWRhdG9ycy5tYXgodGhpcy5fbWF4VmFsdWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCdtYXhWYWx1ZScgaW4gY2hhbmdlcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbGlkYXRvciA9IFZhbGlkYXRvcnMubWF4KGlzUHJlc2VudCh0aGlzLm1heFZhbHVlKSA/IDxudW1iZXI+dGhpcy5tYXhWYWx1ZSEgOiB0aGlzLl9tYXhWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBwdWJsaWMgbWV0aG9kcyAtIGltcGxlbWVudGF0aW9uIG9mIFZhbGlkYXRvciAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBWYWxpZGF0ZXMgaW5wdXQgYW5kIHJldHVybnMgdmFsaWRhdGlvbiByZXN1bHRcclxuICAgICAqIEBwYXJhbSBjb250cm9sIENvbnRyb2wgdGhhdCBpcyBiZWluZyB2YWxpZGF0ZWRcclxuICAgICAqIEByZXR1cm5zIHZhbGlkYXRpb24gcmVzdWx0c1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdmFsaWRhdGUoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9yc3xudWxsXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRvcihjb250cm9sKTtcclxuICAgIH1cclxufSJdfQ==