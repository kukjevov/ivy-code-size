/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NG_VALIDATORS } from '@angular/forms';
import { forwardRef, Directive, Attribute, Input } from '@angular/core';
import { isBlank, isPresent } from '@asseco/common';
import { Validators } from '../../misc';
/**
 * Validator that is injected with directive MinValueNumberValidatorDirective
 * @type {?}
 */
var MIN_NUMBER_VALIDATOR = (/** @type {?} */ ({
    provide: NG_VALIDATORS,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return MinValueNumberValidatorDirective; })),
    multi: true
}));
/**
 * Directive injecting checking for number min value validator
 */
var MinValueNumberValidatorDirective = /** @class */ (function () {
    //######################### constructor #########################
    function MinValueNumberValidatorDirective(minValue) {
        /**
         * Indication whether validator was initialized
         */
        this._initialized = false;
        /** @type {?} */
        var value;
        if (isBlank(minValue) || minValue.length < 1 || isNaN(value = parseFloat(minValue.replace(",", ".")))) {
            value = null;
        }
        this._minValue = value;
    }
    //######################### public methods - implementation of OnChanges #########################
    //######################### public methods - implementation of OnChanges #########################
    /**
     * @param {?} changes
     * @return {?}
     */
    MinValueNumberValidatorDirective.prototype.ngOnChanges = 
    //######################### public methods - implementation of OnChanges #########################
    /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!this._initialized) {
            this._initialized = true;
            this._validator = Validators.min(this._minValue);
        }
        if ('minValue' in changes) {
            this._validator = Validators.min(isPresent(this.minValue) ? (/** @type {?} */ ((/** @type {?} */ (this.minValue)))) : this._minValue);
        }
    };
    //######################### public methods - implementation of Validator #########################
    /**
     * Validates input and returns validation result
     * @param control Control that is being validated
     * @returns validation results
     */
    //######################### public methods - implementation of Validator #########################
    /**
     * Validates input and returns validation result
     * @param {?} control Control that is being validated
     * @return {?} validation results
     */
    MinValueNumberValidatorDirective.prototype.validate = 
    //######################### public methods - implementation of Validator #########################
    /**
     * Validates input and returns validation result
     * @param {?} control Control that is being validated
     * @return {?} validation results
     */
    function (control) {
        return this._validator(control);
    };
    MinValueNumberValidatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: "input[number][minValue][formControlName],input[number][minValue][formControl],input[number][minValue][ngModel]",
                    providers: [MIN_NUMBER_VALIDATOR]
                },] }
    ];
    /** @nocollapse */
    MinValueNumberValidatorDirective.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Attribute, args: ["minValue",] }] }
    ]; };
    MinValueNumberValidatorDirective.propDecorators = {
        minValue: [{ type: Input }]
    };
    return MinValueNumberValidatorDirective;
}());
export { MinValueNumberValidatorDirective };
if (false) {
    /**
     * Current min value that is allowed
     * @type {?}
     * @private
     */
    MinValueNumberValidatorDirective.prototype._minValue;
    /**
     * Function used for validations
     * @type {?}
     * @private
     */
    MinValueNumberValidatorDirective.prototype._validator;
    /**
     * Indication whether validator was initialized
     * @type {?}
     * @private
     */
    MinValueNumberValidatorDirective.prototype._initialized;
    /**
     * Bound min value that is allowed, which overrides value set to attribute minValue
     * @type {?}
     */
    MinValueNumberValidatorDirective.prototype.minValue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWluVmFsdWVOdW1iZXJWYWxpZGF0b3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2RpcmVjdGl2ZXMvbnVtYmVySW5wdXQvbWluVmFsdWVOdW1iZXJWYWxpZGF0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsYUFBYSxFQUE0RCxNQUFNLGdCQUFnQixDQUFDO0FBQ3hHLE9BQU8sRUFBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQTZDLE1BQU0sZUFBZSxDQUFDO0FBQ2xILE9BQU8sRUFBQyxPQUFPLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFbEQsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLFlBQVksQ0FBQzs7Ozs7SUFLaEMsb0JBQW9CLEdBQUcsbUJBQzdCO0lBQ0ksT0FBTyxFQUFFLGFBQWE7SUFDdEIsV0FBVyxFQUFFLFVBQVU7OztJQUFDLGNBQU0sT0FBQSxnQ0FBZ0MsRUFBaEMsQ0FBZ0MsRUFBQztJQUMvRCxLQUFLLEVBQUUsSUFBSTtDQUNkLEVBQUE7Ozs7QUFLRDtJQStCSSxpRUFBaUU7SUFDakUsMENBQW1DLFFBQWdCOzs7O1FBVjNDLGlCQUFZLEdBQVksS0FBSyxDQUFDOztZQVk5QixLQUFLO1FBRVQsSUFBRyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUNwRztZQUNJLEtBQUssR0FBRyxJQUFJLENBQUM7U0FDaEI7UUFFRCxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUMzQixDQUFDO0lBRUQsa0dBQWtHOzs7Ozs7SUFFM0Ysc0RBQVc7Ozs7OztJQUFsQixVQUFtQixPQUFzQjtRQUVyQyxJQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksRUFDckI7WUFDSSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztZQUV6QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3BEO1FBRUQsSUFBSSxVQUFVLElBQUksT0FBTyxFQUN6QjtZQUNJLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBUSxtQkFBQSxJQUFJLENBQUMsUUFBUSxFQUFDLEVBQUEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3hHO0lBQ0wsQ0FBQztJQUVELGtHQUFrRztJQUVsRzs7OztPQUlHOzs7Ozs7O0lBQ0ksbURBQVE7Ozs7Ozs7SUFBZixVQUFnQixPQUF3QjtRQUVwQyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEMsQ0FBQzs7Z0JBdkVKLFNBQVMsU0FDVjtvQkFDSSxRQUFRLEVBQUUsZ0hBQWdIO29CQUMxSCxTQUFTLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztpQkFDcEM7Ozs7NkNBNEJnQixTQUFTLFNBQUMsVUFBVTs7OzJCQUpoQyxLQUFLOztJQTRDVix1Q0FBQztDQUFBLEFBeEVELElBd0VDO1NBbkVZLGdDQUFnQzs7Ozs7OztJQU96QyxxREFBK0I7Ozs7OztJQUsvQixzREFBZ0M7Ozs7OztJQUtoQyx3REFBc0M7Ozs7O0lBTXRDLG9EQUN5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TkdfVkFMSURBVE9SUywgQWJzdHJhY3RDb250cm9sLCBWYWxpZGF0b3IsIFZhbGlkYXRvckZuLCBWYWxpZGF0aW9uRXJyb3JzfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7Zm9yd2FyZFJlZiwgRGlyZWN0aXZlLCBBdHRyaWJ1dGUsIElucHV0LCBFeGlzdGluZ1Byb3ZpZGVyLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge2lzQmxhbmssIGlzUHJlc2VudH0gZnJvbSAnQGFzc2Vjby9jb21tb24nO1xyXG5cclxuaW1wb3J0IHtWYWxpZGF0b3JzfSBmcm9tICcuLi8uLi9taXNjJztcclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0b3IgdGhhdCBpcyBpbmplY3RlZCB3aXRoIGRpcmVjdGl2ZSBNaW5WYWx1ZU51bWJlclZhbGlkYXRvckRpcmVjdGl2ZVxyXG4gKi9cclxuY29uc3QgTUlOX05VTUJFUl9WQUxJREFUT1IgPSA8RXhpc3RpbmdQcm92aWRlcj5cclxue1xyXG4gICAgcHJvdmlkZTogTkdfVkFMSURBVE9SUyxcclxuICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE1pblZhbHVlTnVtYmVyVmFsaWRhdG9yRGlyZWN0aXZlKSxcclxuICAgIG11bHRpOiB0cnVlXHJcbn07XHJcblxyXG4vKipcclxuICogRGlyZWN0aXZlIGluamVjdGluZyBjaGVja2luZyBmb3IgbnVtYmVyIG1pbiB2YWx1ZSB2YWxpZGF0b3JcclxuICovXHJcbkBEaXJlY3RpdmUoXHJcbntcclxuICAgIHNlbGVjdG9yOiBcImlucHV0W251bWJlcl1bbWluVmFsdWVdW2Zvcm1Db250cm9sTmFtZV0saW5wdXRbbnVtYmVyXVttaW5WYWx1ZV1bZm9ybUNvbnRyb2xdLGlucHV0W251bWJlcl1bbWluVmFsdWVdW25nTW9kZWxdXCIsXHJcbiAgICBwcm92aWRlcnM6IFtNSU5fTlVNQkVSX1ZBTElEQVRPUl1cclxufSlcclxuZXhwb3J0IGNsYXNzIE1pblZhbHVlTnVtYmVyVmFsaWRhdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yLCBPbkNoYW5nZXNcclxue1xyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHByaXZhdGUgZmllbGRzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIEN1cnJlbnQgbWluIHZhbHVlIHRoYXQgaXMgYWxsb3dlZFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9taW5WYWx1ZTogbnVtYmVyfG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGdW5jdGlvbiB1c2VkIGZvciB2YWxpZGF0aW9uc1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF92YWxpZGF0b3I6IFZhbGlkYXRvckZuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5kaWNhdGlvbiB3aGV0aGVyIHZhbGlkYXRvciB3YXMgaW5pdGlhbGl6ZWRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfaW5pdGlhbGl6ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIHByb3BlcnRpZXMgLSBpbnB1dHMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG4gICAgLyoqXHJcbiAgICAgKiBCb3VuZCBtaW4gdmFsdWUgdGhhdCBpcyBhbGxvd2VkLCB3aGljaCBvdmVycmlkZXMgdmFsdWUgc2V0IHRvIGF0dHJpYnV0ZSBtaW5WYWx1ZVxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKVxyXG4gICAgcHVibGljIG1pblZhbHVlPzogbnVtYmVyO1xyXG5cclxuICAgIC8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBjb25zdHJ1Y3RvciAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcbiAgICBjb25zdHJ1Y3RvcihAQXR0cmlidXRlKFwibWluVmFsdWVcIikgbWluVmFsdWU6IHN0cmluZylcclxuICAgIHtcclxuICAgICAgICB2YXIgdmFsdWU7XHJcblxyXG4gICAgICAgIGlmKGlzQmxhbmsobWluVmFsdWUpIHx8IG1pblZhbHVlLmxlbmd0aCA8IDEgfHwgaXNOYU4odmFsdWUgPSBwYXJzZUZsb2F0KG1pblZhbHVlLnJlcGxhY2UoXCIsXCIsIFwiLlwiKSkpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFsdWUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fbWluVmFsdWUgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIG1ldGhvZHMgLSBpbXBsZW1lbnRhdGlvbiBvZiBPbkNoYW5nZXMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZFxyXG4gICAge1xyXG4gICAgICAgIGlmKCF0aGlzLl9pbml0aWFsaXplZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbGlkYXRvciA9IFZhbGlkYXRvcnMubWluKHRoaXMuX21pblZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgnbWluVmFsdWUnIGluIGNoYW5nZXMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl92YWxpZGF0b3IgPSBWYWxpZGF0b3JzLm1pbihpc1ByZXNlbnQodGhpcy5taW5WYWx1ZSkgPyA8bnVtYmVyPnRoaXMubWluVmFsdWUhIDogdGhpcy5fbWluVmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIG1ldGhvZHMgLSBpbXBsZW1lbnRhdGlvbiBvZiBWYWxpZGF0b3IgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVmFsaWRhdGVzIGlucHV0IGFuZCByZXR1cm5zIHZhbGlkYXRpb24gcmVzdWx0XHJcbiAgICAgKiBAcGFyYW0gY29udHJvbCBDb250cm9sIHRoYXQgaXMgYmVpbmcgdmFsaWRhdGVkXHJcbiAgICAgKiBAcmV0dXJucyB2YWxpZGF0aW9uIHJlc3VsdHNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHZhbGlkYXRlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnN8bnVsbFxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWxpZGF0b3IoY29udHJvbCk7XHJcbiAgICB9XHJcbn0iXX0=