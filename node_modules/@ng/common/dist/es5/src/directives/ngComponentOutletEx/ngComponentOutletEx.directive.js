/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, EventEmitter, Directive, Injector, Input, NgModuleFactory, NgModuleRef, Type, ViewContainerRef, Output } from '@angular/core';
import { nameof } from '@asseco/common';
/**
 * Instantiates a single {\@link Component} type and inserts its Host View into current View.
 * @template TComponent
 */
var NgComponentOutletEx = /** @class */ (function () {
    //######################### constructor #########################
    function NgComponentOutletEx(_viewContainerRef) {
        this._viewContainerRef = _viewContainerRef;
        //######################### private fields #########################
        /**
         * Created component reference
         */
        this._componentRef = null;
        /**
         * Created custom module reference
         */
        this._moduleRef = null;
        //######################### public properties - outputs #########################
        /**
         * Occurs when component is created or destroyed, it can send instance of component, or null
         */
        this.ngComponentOutletExCreated = new EventEmitter();
    }
    Object.defineProperty(NgComponentOutletEx.prototype, "component", {
        //######################### public properties #########################
        /**
         * Instance of dynamically created component
         */
        get: 
        //######################### public properties #########################
        /**
         * Instance of dynamically created component
         * @return {?}
         */
        function () {
            if (!this._componentRef) {
                return null;
            }
            return this._componentRef.instance;
        },
        enumerable: true,
        configurable: true
    });
    //######################### public methods - implementation of OnChanges #########################
    //######################### public methods - implementation of OnChanges #########################
    /**
     * @param {?} changes
     * @return {?}
     */
    NgComponentOutletEx.prototype.ngOnChanges = 
    //######################### public methods - implementation of OnChanges #########################
    /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this._viewContainerRef.clear();
        this._componentRef = null;
        if (this.ngComponentOutletEx) {
            /** @type {?} */
            var elInjector = this.ngComponentOutletExInjector || this._viewContainerRef.parentInjector;
            if (changes[nameof('ngComponentOutletExNgModuleFactory')]) {
                if (this._moduleRef) {
                    this._moduleRef.destroy();
                }
                if (this.ngComponentOutletExNgModuleFactory) {
                    /** @type {?} */
                    var parentModule = elInjector.get(NgModuleRef);
                    this._moduleRef = this.ngComponentOutletExNgModuleFactory.create(parentModule.injector);
                }
                else {
                    this._moduleRef = null;
                }
            }
            /** @type {?} */
            var componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver : elInjector.get(ComponentFactoryResolver);
            /** @type {?} */
            var componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutletEx);
            this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletExContent);
        }
        this.ngComponentOutletExCreated.emit(this.component);
    };
    //######################### public methods - implementation of OnDestroy #########################
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * @return {?}
     */
    NgComponentOutletEx.prototype.ngOnDestroy = 
    //######################### public methods - implementation of OnDestroy #########################
    /**
     * @return {?}
     */
    function () {
        if (this._moduleRef) {
            this._moduleRef.destroy();
        }
    };
    NgComponentOutletEx.decorators = [
        { type: Directive, args: [{
                    selector: '[ngComponentOutletEx]',
                    exportAs: 'ngComponentOutletEx'
                },] }
    ];
    /** @nocollapse */
    NgComponentOutletEx.ctorParameters = function () { return [
        { type: ViewContainerRef }
    ]; };
    NgComponentOutletEx.propDecorators = {
        ngComponentOutletEx: [{ type: Input }],
        ngComponentOutletExInjector: [{ type: Input }],
        ngComponentOutletExContent: [{ type: Input }],
        ngComponentOutletExNgModuleFactory: [{ type: Input }],
        ngComponentOutletExCreated: [{ type: Output }]
    };
    return NgComponentOutletEx;
}());
export { NgComponentOutletEx };
if (false) {
    /**
     * Created component reference
     * @type {?}
     * @private
     */
    NgComponentOutletEx.prototype._componentRef;
    /**
     * Created custom module reference
     * @type {?}
     * @private
     */
    NgComponentOutletEx.prototype._moduleRef;
    /**
     * Type that should be dynamically created into current container
     * @type {?}
     */
    NgComponentOutletEx.prototype.ngComponentOutletEx;
    /**
     * Custom injector that will be used for newly created component
     * @type {?}
     */
    NgComponentOutletEx.prototype.ngComponentOutletExInjector;
    /**
     * Projectable nodes that can be injected into component
     * @type {?}
     */
    NgComponentOutletEx.prototype.ngComponentOutletExContent;
    /**
     * Different module factory that is used for creation of new component
     * @type {?}
     */
    NgComponentOutletEx.prototype.ngComponentOutletExNgModuleFactory;
    /**
     * Occurs when component is created or destroyed, it can send instance of component, or null
     * @type {?}
     */
    NgComponentOutletEx.prototype.ngComponentOutletExCreated;
    /**
     * @type {?}
     * @private
     */
    NgComponentOutletEx.prototype._viewContainerRef;
}
//# sourceMappingURL=data:application/json;base64,