/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import * as i0 from "@angular/core";
/**
 * Contains id of request, used for IgnoredInterceptorsService
 * @record
 */
export function IgnoredInterceptorId() { }
if (false) {
    /**
     * Identification of request
     * @type {?|undefined}
     */
    IgnoredInterceptorId.prototype.requestId;
}
/**
 * Http request with request id for IgnoredInterceptorsService
 * @record
 * @template TBody
 */
export function HttpRequestIgnoredInterceptorId() { }
/**
 * Service used for disabling specific http client interceptor for one call, if you add interceptor you want to disable before call it will be disabled
 */
var IgnoredInterceptorsService = /** @class */ (function () {
    function IgnoredInterceptorsService() {
        //######################### private fields #########################
        /**
         * Array of interceptors that will be ignored
         */
        this._ignoredInterceptors = [];
    }
    //######################### public methods #########################
    /**
     * Clears all ignored interceptors from service
     */
    //######################### public methods #########################
    /**
     * Clears all ignored interceptors from service
     * @return {?}
     */
    IgnoredInterceptorsService.prototype.clear = 
    //######################### public methods #########################
    /**
     * Clears all ignored interceptors from service
     * @return {?}
     */
    function () {
        this._ignoredInterceptors = [];
    };
    /**
     * Adds interceptor type that should be ignored for specified url
     * @param interceptorType Type of interceptor should be ignored
     * @param requestId Object containing request id
     */
    /**
     * Adds interceptor type that should be ignored for specified url
     * @template TType
     * @param {?} interceptorType Type of interceptor should be ignored
     * @param {?} requestId Object containing request id
     * @return {?}
     */
    IgnoredInterceptorsService.prototype.addInterceptor = /**
     * Adds interceptor type that should be ignored for specified url
     * @template TType
     * @param {?} interceptorType Type of interceptor should be ignored
     * @param {?} requestId Object containing request id
     * @return {?}
     */
    function (interceptorType, requestId) {
        if (!requestId.requestId) {
            return;
        }
        if (!this._ignoredInterceptors.find((/**
         * @param {?} itm
         * @return {?}
         */
        function (itm) { return itm.type == interceptorType && itm.requestId == requestId.requestId; }))) {
            this._ignoredInterceptors.push({
                type: interceptorType,
                requestId: requestId.requestId
            });
        }
    };
    /**
     * Checks specified interceptor whether is ingored
     * @param interceptorType Type of interceptor that is checked whether is ignored
     * @param url Object containing request id
     */
    /**
     * Checks specified interceptor whether is ingored
     * @template TType
     * @param {?} interceptorType Type of interceptor that is checked whether is ignored
     * @param {?} requestId
     * @return {?}
     */
    IgnoredInterceptorsService.prototype.isIgnored = /**
     * Checks specified interceptor whether is ingored
     * @template TType
     * @param {?} interceptorType Type of interceptor that is checked whether is ignored
     * @param {?} requestId
     * @return {?}
     */
    function (interceptorType, requestId) {
        if (!requestId.requestId) {
            return false;
        }
        /** @type {?} */
        var item = this._ignoredInterceptors.find((/**
         * @param {?} itm
         * @return {?}
         */
        function (itm) { return itm.requestId == requestId.requestId && itm.type == interceptorType; }));
        if (item) {
            this._ignoredInterceptors.splice(this._ignoredInterceptors.indexOf(item), 1);
            return true;
        }
        return false;
    };
    IgnoredInterceptorsService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */ IgnoredInterceptorsService.ngInjectableDef = i0.defineInjectable({ factory: function IgnoredInterceptorsService_Factory() { return new IgnoredInterceptorsService(); }, token: IgnoredInterceptorsService, providedIn: "root" });
    return IgnoredInterceptorsService;
}());
export { IgnoredInterceptorsService };
if (false) {
    /**
     * Array of interceptors that will be ignored
     * @type {?}
     * @private
     */
    IgnoredInterceptorsService.prototype._ignoredInterceptors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdub3JlZEludGVyY2VwdG9ycy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3NlcnZpY2VzL2lnbm9yZWRJbnRlcmNlcHRvcnMvaWdub3JlZEludGVyY2VwdG9ycy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFPLE1BQU0sZUFBZSxDQUFDOzs7Ozs7QUFNL0MsMENBTUM7Ozs7OztJQURHLHlDQUFtQjs7Ozs7OztBQU12QixxREFFQzs7OztBQUtEO0lBQUE7Ozs7O1FBUVkseUJBQW9CLEdBQTJDLEVBQUUsQ0FBQztLQXlEN0U7SUF2REcsb0VBQW9FO0lBRXBFOztPQUVHOzs7Ozs7SUFDSSwwQ0FBSzs7Ozs7O0lBQVo7UUFFSSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFFRDs7OztPQUlHOzs7Ozs7OztJQUNJLG1EQUFjOzs7Ozs7O0lBQXJCLFVBQTZCLGVBQTRCLEVBQUUsU0FBK0I7UUFFdEYsSUFBRyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQ3ZCO1lBQ0ksT0FBTztTQUNWO1FBRUQsSUFBRyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJOzs7O1FBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLENBQUMsSUFBSSxJQUFJLGVBQWUsSUFBSSxHQUFHLENBQUMsU0FBUyxJQUFJLFNBQVMsQ0FBQyxTQUFTLEVBQW5FLENBQW1FLEVBQUMsRUFDOUc7WUFDSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUM5QjtnQkFDSSxJQUFJLEVBQUUsZUFBZTtnQkFDckIsU0FBUyxFQUFFLFNBQVMsQ0FBQyxTQUFTO2FBQ2pDLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQztJQUVEOzs7O09BSUc7Ozs7Ozs7O0lBQ0ksOENBQVM7Ozs7Ozs7SUFBaEIsVUFBd0IsZUFBNEIsRUFBRSxTQUErQjtRQUVqRixJQUFHLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFDdkI7WUFDSSxPQUFPLEtBQUssQ0FBQztTQUNoQjs7WUFFRyxJQUFJLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUk7Ozs7UUFBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLEdBQUcsQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDLFNBQVMsSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLGVBQWUsRUFBbkUsQ0FBbUUsRUFBQztRQUVySCxJQUFHLElBQUksRUFDUDtZQUNJLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUU3RSxPQUFPLElBQUksQ0FBQztTQUNmO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQzs7Z0JBaEVKLFVBQVUsU0FBQyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUM7OztxQ0F4QmhDO0NBeUZDLEFBakVELElBaUVDO1NBaEVZLDBCQUEwQjs7Ozs7OztJQU9uQywwREFBMEUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGUsIFR5cGV9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7SHR0cFJlcXVlc3R9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJ1xyXG5cclxuLyoqXHJcbiAqIENvbnRhaW5zIGlkIG9mIHJlcXVlc3QsIHVzZWQgZm9yIElnbm9yZWRJbnRlcmNlcHRvcnNTZXJ2aWNlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElnbm9yZWRJbnRlcmNlcHRvcklkXHJcbntcclxuICAgIC8qKlxyXG4gICAgICogSWRlbnRpZmljYXRpb24gb2YgcmVxdWVzdFxyXG4gICAgICovXHJcbiAgICByZXF1ZXN0SWQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBIdHRwIHJlcXVlc3Qgd2l0aCByZXF1ZXN0IGlkIGZvciBJZ25vcmVkSW50ZXJjZXB0b3JzU2VydmljZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBIdHRwUmVxdWVzdElnbm9yZWRJbnRlcmNlcHRvcklkPFRCb2R5PiBleHRlbmRzIEh0dHBSZXF1ZXN0PFRCb2R5PiwgSWdub3JlZEludGVyY2VwdG9ySWRcclxue1xyXG59XHJcblxyXG4vKipcclxuICogU2VydmljZSB1c2VkIGZvciBkaXNhYmxpbmcgc3BlY2lmaWMgaHR0cCBjbGllbnQgaW50ZXJjZXB0b3IgZm9yIG9uZSBjYWxsLCBpZiB5b3UgYWRkIGludGVyY2VwdG9yIHlvdSB3YW50IHRvIGRpc2FibGUgYmVmb3JlIGNhbGwgaXQgd2lsbCBiZSBkaXNhYmxlZFxyXG4gKi9cclxuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXHJcbmV4cG9ydCBjbGFzcyBJZ25vcmVkSW50ZXJjZXB0b3JzU2VydmljZVxyXG57XHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHJpdmF0ZSBmaWVsZHMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXJyYXkgb2YgaW50ZXJjZXB0b3JzIHRoYXQgd2lsbCBiZSBpZ25vcmVkXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2lnbm9yZWRJbnRlcmNlcHRvcnM6IHt0eXBlOiBUeXBlPGFueT4sIHJlcXVlc3RJZDogc3RyaW5nfVtdID0gW107XHJcblxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHB1YmxpYyBtZXRob2RzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAvKipcclxuICAgICAqIENsZWFycyBhbGwgaWdub3JlZCBpbnRlcmNlcHRvcnMgZnJvbSBzZXJ2aWNlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjbGVhcigpOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5faWdub3JlZEludGVyY2VwdG9ycyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBpbnRlcmNlcHRvciB0eXBlIHRoYXQgc2hvdWxkIGJlIGlnbm9yZWQgZm9yIHNwZWNpZmllZCB1cmxcclxuICAgICAqIEBwYXJhbSBpbnRlcmNlcHRvclR5cGUgVHlwZSBvZiBpbnRlcmNlcHRvciBzaG91bGQgYmUgaWdub3JlZFxyXG4gICAgICogQHBhcmFtIHJlcXVlc3RJZCBPYmplY3QgY29udGFpbmluZyByZXF1ZXN0IGlkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhZGRJbnRlcmNlcHRvcjxUVHlwZT4oaW50ZXJjZXB0b3JUeXBlOiBUeXBlPFRUeXBlPiwgcmVxdWVzdElkOiBJZ25vcmVkSW50ZXJjZXB0b3JJZCk6IHZvaWRcclxuICAgIHtcclxuICAgICAgICBpZighcmVxdWVzdElkLnJlcXVlc3RJZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKCF0aGlzLl9pZ25vcmVkSW50ZXJjZXB0b3JzLmZpbmQoaXRtID0+IGl0bS50eXBlID09IGludGVyY2VwdG9yVHlwZSAmJiBpdG0ucmVxdWVzdElkID09IHJlcXVlc3RJZC5yZXF1ZXN0SWQpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5faWdub3JlZEludGVyY2VwdG9ycy5wdXNoKFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBpbnRlcmNlcHRvclR5cGUsXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZC5yZXF1ZXN0SWRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIHNwZWNpZmllZCBpbnRlcmNlcHRvciB3aGV0aGVyIGlzIGluZ29yZWRcclxuICAgICAqIEBwYXJhbSBpbnRlcmNlcHRvclR5cGUgVHlwZSBvZiBpbnRlcmNlcHRvciB0aGF0IGlzIGNoZWNrZWQgd2hldGhlciBpcyBpZ25vcmVkXHJcbiAgICAgKiBAcGFyYW0gdXJsIE9iamVjdCBjb250YWluaW5nIHJlcXVlc3QgaWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGlzSWdub3JlZDxUVHlwZT4oaW50ZXJjZXB0b3JUeXBlOiBUeXBlPFRUeXBlPiwgcmVxdWVzdElkOiBJZ25vcmVkSW50ZXJjZXB0b3JJZCk6IGJvb2xlYW5cclxuICAgIHtcclxuICAgICAgICBpZighcmVxdWVzdElkLnJlcXVlc3RJZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBpdGVtID0gdGhpcy5faWdub3JlZEludGVyY2VwdG9ycy5maW5kKGl0bSA9PiBpdG0ucmVxdWVzdElkID09IHJlcXVlc3RJZC5yZXF1ZXN0SWQgJiYgaXRtLnR5cGUgPT0gaW50ZXJjZXB0b3JUeXBlKTtcclxuXHJcbiAgICAgICAgaWYoaXRlbSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lnbm9yZWRJbnRlcmNlcHRvcnMuc3BsaWNlKHRoaXMuX2lnbm9yZWRJbnRlcmNlcHRvcnMuaW5kZXhPZihpdGVtKSwgMSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufSJdfQ==