/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { PLATFORM_ID, Inject, Optional, Injectable } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { isBlank } from '@asseco/common';
import { SERVER_COOKIE_HEADER } from '../../types/tokens';
import * as i0 from "@angular/core";
import * as i1 from "../../types/tokens";
/**
 * Class that is used as wrapper for working with cookies
 */
var CookieService = /** @class */ (function () {
    //######################### constructor #########################
    function CookieService(platformId, _serverCookies) {
        this._serverCookies = _serverCookies;
        //######################### private fields #########################
        /**
         * Indication that current code is running in browser
         */
        this._isBrowser = false;
        this._isBrowser = isPlatformBrowser(platformId);
    }
    //######################### public methods #########################
    /**
     * Retrieves a single cookie by it's name
     *
     * @param name Identification of the Cookie
     * @returns The Cookie's value
     */
    //######################### public methods #########################
    /**
     * Retrieves a single cookie by it's name
     *
     * @param {?} name Identification of the Cookie
     * @return {?} The Cookie's value
     */
    CookieService.prototype.getCookie = 
    //######################### public methods #########################
    /**
     * Retrieves a single cookie by it's name
     *
     * @param {?} name Identification of the Cookie
     * @return {?} The Cookie's value
     */
    function (name) {
        if (!this._isBrowser && isBlank(this._serverCookies)) {
            return null;
        }
        name = encodeURIComponent(name);
        /** @type {?} */
        var regexp = new RegExp('(?:^' + name + '|;\\s*' + name + ')=(.*?)(?:;|$)', 'g');
        /** @type {?} */
        var result;
        if (isBlank(this._serverCookies)) {
            result = regexp.exec(document.cookie);
        }
        else {
            result = regexp.exec(this._serverCookies);
        }
        return (result === null) ? null : JSON.parse(decodeURIComponent(result[1]));
    };
    /**
     * Save the Cookie
     *
     * @param name Cookie's identification
     * @param value Cookie's value
     * @param expires Cookie's expiration date in days from now. If it's undefined the cookie is a session Cookie
     * @param path Path relative to the domain where the cookie should be avaiable. Default /
     * @param domain Domain where the cookie should be avaiable. Default current domain
     */
    /**
     * Save the Cookie
     *
     * @param {?} name Cookie's identification
     * @param {?} value Cookie's value
     * @param {?=} expires Cookie's expiration date in days from now. If it's undefined the cookie is a session Cookie
     * @param {?=} path Path relative to the domain where the cookie should be avaiable. Default /
     * @param {?=} domain Domain where the cookie should be avaiable. Default current domain
     * @return {?}
     */
    CookieService.prototype.setCookie = /**
     * Save the Cookie
     *
     * @param {?} name Cookie's identification
     * @param {?} value Cookie's value
     * @param {?=} expires Cookie's expiration date in days from now. If it's undefined the cookie is a session Cookie
     * @param {?=} path Path relative to the domain where the cookie should be avaiable. Default /
     * @param {?=} domain Domain where the cookie should be avaiable. Default current domain
     * @return {?}
     */
    function (name, value, expires, path, domain) {
        if (!this._isBrowser) {
            return;
        }
        /** @type {?} */
        var cookieStr = encodeURIComponent(name) + '=' + encodeURIComponent(JSON.stringify(value)) + ';';
        if (expires) {
            /** @type {?} */
            var dtExpires = new Date(new Date().getTime() + expires * 1000 * 60 * 60 * 24);
            cookieStr += 'expires=' + dtExpires.toUTCString() + ';';
        }
        if (path) {
            cookieStr += 'path=' + path + ';';
        }
        if (domain) {
            cookieStr += 'domain=' + domain + ';';
        }
        document.cookie = cookieStr;
    };
    /**
     * Removes specified Cookie
     *
     * @param name Cookie's identification
     * @param path Path relative to the domain where the cookie should be avaiable. Default /
     * @param domain Domain where the cookie should be avaiable. Default current domain
     */
    /**
     * Removes specified Cookie
     *
     * @param {?} name Cookie's identification
     * @param {?=} path Path relative to the domain where the cookie should be avaiable. Default /
     * @param {?=} domain Domain where the cookie should be avaiable. Default current domain
     * @return {?}
     */
    CookieService.prototype.deleteCookie = /**
     * Removes specified Cookie
     *
     * @param {?} name Cookie's identification
     * @param {?=} path Path relative to the domain where the cookie should be avaiable. Default /
     * @param {?=} domain Domain where the cookie should be avaiable. Default current domain
     * @return {?}
     */
    function (name, path, domain) {
        if (!this._isBrowser) {
            return;
        }
        // If the cookie exists
        if (this.getCookie(name)) {
            this.setCookie(name, '', -1, path, domain);
        }
    };
    CookieService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    CookieService.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [SERVER_COOKIE_HEADER,] }] }
    ]; };
    /** @nocollapse */ CookieService.ngInjectableDef = i0.defineInjectable({ factory: function CookieService_Factory() { return new CookieService(i0.inject(i0.PLATFORM_ID), i0.inject(i1.SERVER_COOKIE_HEADER, 8)); }, token: CookieService, providedIn: "root" });
    return CookieService;
}());
export { CookieService };
if (false) {
    /**
     * Indication that current code is running in browser
     * @type {?}
     * @private
     */
    CookieService.prototype._isBrowser;
    /**
     * @type {?}
     * @private
     */
    CookieService.prototype._serverCookies;
}
//# sourceMappingURL=data:application/json;base64,