/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Utility methods form angular 2 forms
 */
var /**
 * Utility methods form angular 2 forms
 */
Forms = /** @class */ (function () {
    function Forms() {
    }
    //######################### public methods #########################
    /**
     * Gets indication whether controls have errors, with custom indication of submitted
     * @param form Form containing controls
     * @param controls Array of controls names to be checked for errors
     * @param submitted Indication whether form was submitted
     */
    //######################### public methods #########################
    /**
     * Gets indication whether controls have errors, with custom indication of submitted
     * @param {?} form Form containing controls
     * @param {?} controls Array of controls names to be checked for errors
     * @param {?=} submitted Indication whether form was submitted
     * @return {?}
     */
    Forms.hasErrorCustom = 
    //######################### public methods #########################
    /**
     * Gets indication whether controls have errors, with custom indication of submitted
     * @param {?} form Form containing controls
     * @param {?} controls Array of controls names to be checked for errors
     * @param {?=} submitted Indication whether form was submitted
     * @return {?}
     */
    function (form, controls, submitted) {
        if (submitted === void 0) { submitted = false; }
        /** @type {?} */
        var conditionValid = false;
        /** @type {?} */
        var conditionChanged = false;
        for (var x = 0; x < controls.length; x++) {
            if (!form.controls[controls[x]]) {
                return false;
            }
            conditionValid = conditionValid || !form.controls[controls[x]].valid;
            conditionChanged = conditionChanged || form.controls[controls[x]].dirty;
        }
        return conditionValid && (conditionChanged || submitted);
    };
    /**
     * Gets indication whether hide alerts or not for control, with custom indication of submitted
     * @param form Form containing controls
     * @param control Controls name that will be checked
     * @param errors Array of validation errors to be checked for existance
     * @param submitted Indication whether form was submitted
     */
    /**
     * Gets indication whether hide alerts or not for control, with custom indication of submitted
     * @param {?} form Form containing controls
     * @param {?} control Controls name that will be checked
     * @param {?=} errors Array of validation errors to be checked for existance
     * @param {?=} submitted Indication whether form was submitted
     * @return {?}
     */
    Forms.alertHiddenCustom = /**
     * Gets indication whether hide alerts or not for control, with custom indication of submitted
     * @param {?} form Form containing controls
     * @param {?} control Controls name that will be checked
     * @param {?=} errors Array of validation errors to be checked for existance
     * @param {?=} submitted Indication whether form was submitted
     * @return {?}
     */
    function (form, control, errors, submitted) {
        if (errors === void 0) { errors = []; }
        if (submitted === void 0) { submitted = false; }
        if (!form.controls[control]) {
            return true;
        }
        /** @type {?} */
        var requestedErrors = false;
        errors.forEach((/**
         * @param {?} errorType
         * @return {?}
         */
        function (errorType) {
            requestedErrors = requestedErrors || (!!form.controls[control].errors && !!((/** @type {?} */ (form.controls[control].errors)))[errorType]);
        }));
        return form.controls[control].valid || !requestedErrors || (!form.controls[control].dirty && !submitted);
    };
    /**
     * Gets indication whether controls have errors
     * @param form Form containing controls
     * @param controls Array of controls names to be checked for errors
     */
    /**
     * Gets indication whether controls have errors
     * @param {?} form Form containing controls
     * @param {?} controls Array of controls names to be checked for errors
     * @return {?}
     */
    Forms.hasError = /**
     * Gets indication whether controls have errors
     * @param {?} form Form containing controls
     * @param {?} controls Array of controls names to be checked for errors
     * @return {?}
     */
    function (form, controls) {
        /** @type {?} */
        var conditionValid = false;
        /** @type {?} */
        var conditionChanged = false;
        for (var x = 0; x < controls.length; x++) {
            if (!form.controls[controls[x]]) {
                return false;
            }
            conditionValid = conditionValid || !form.controls[controls[x]].valid;
            conditionChanged = conditionChanged || form.controls[controls[x]].dirty;
        }
        return conditionValid && (conditionChanged || form.submitted);
    };
    /**
     * Gets indication whether hide alerts or not for control
     * @param form Form containing controls
     * @param control Controls name that will be checked
     * @param errors Array of validation errors to be checked for existance
     */
    /**
     * Gets indication whether hide alerts or not for control
     * @param {?} form Form containing controls
     * @param {?} control Controls name that will be checked
     * @param {?=} errors Array of validation errors to be checked for existance
     * @return {?}
     */
    Forms.alertHidden = /**
     * Gets indication whether hide alerts or not for control
     * @param {?} form Form containing controls
     * @param {?} control Controls name that will be checked
     * @param {?=} errors Array of validation errors to be checked for existance
     * @return {?}
     */
    function (form, control, errors) {
        if (errors === void 0) { errors = []; }
        if (!form.controls[control]) {
            return true;
        }
        /** @type {?} */
        var requestedErrors = false;
        errors.forEach((/**
         * @param {?} errorType
         * @return {?}
         */
        function (errorType) {
            requestedErrors = requestedErrors || (!!form.controls[control].errors && !!((/** @type {?} */ (form.controls[control].errors)))[errorType]);
        }));
        return form.controls[control].valid || !requestedErrors || (!form.controls[control].dirty && !form.submitted);
    };
    return Forms;
}());
/**
 * Utility methods form angular 2 forms
 */
export default Forms;
//# sourceMappingURL=data:application/json;base64,