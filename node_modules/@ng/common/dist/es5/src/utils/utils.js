/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import RouterHelper from './utils.routerHelper';
import Common from './utils.common';
import Forms from './utils.forms';
/**
 * Helper methods for angular2 router
 * @record
 */
export function IRouterHelper() { }
if (false) {
    /**
     * Extracts route definitions from components if routes are set using decorator ComponentRoute
     * @param {?} components Array of components to be used for extraction
     * @return {?} RouteDefinition Extracted routes
     */
    IRouterHelper.prototype.extractRoutes = function (components) { };
}
/**
 * Common utility methods
 * @record
 */
export function ICommon() { }
if (false) {
    /**
     * Runs callback function when angular module is bootstrapped and stable
     * @param {?} moduleRefPromise Promise for module that was bootstrapped
     * @param {?} callback Callback that is called
     * @param {?=} angularProfiler Indication that angular profiler should be enabled
     * @return {?}
     */
    ICommon.prototype.runWhenModuleStable = function (moduleRefPromise, callback, angularProfiler) { };
}
/**
 * Utility methods form angular 2 forms
 * @record
 */
export function IForms() { }
if (false) {
    /**
     * Gets indication whether controls have errors, with custom indication of submitted
     * @param {?} form Form containing controls
     * @param {?} controls Array of controls names to be checked for errors
     * @param {?=} submitted Indication whether form was submitted, defaults to false
     * @return {?}
     */
    IForms.prototype.hasErrorCustom = function (form, controls, submitted) { };
    /**
     * Gets indication whether hide alerts or not for control, with custom indication of submitted
     * @param {?} form Form containing controls
     * @param {?} control Controls name that will be checked
     * @param {?=} errors Array of validation errors to be checked for existance
     * @param {?=} submitted Indication whether form was submitted, defaults to false
     * @return {?}
     */
    IForms.prototype.alertHiddenCustom = function (form, control, errors, submitted) { };
    /**
     * Gets indication whether controls have errors
     * @param {?} form Form containing controls
     * @param {?} controls Array of controls names to be checked for errors
     * @return {?}
     */
    IForms.prototype.hasError = function (form, controls) { };
    /**
     * Gets indication whether hide alerts or not for control
     * @param {?} form Form containing controls
     * @param {?} control Controls name that will be checked
     * @param {?} errors Array of validation errors to be checked for existance
     * @return {?}
     */
    IForms.prototype.alertHidden = function (form, control, errors) { };
}
/**
 * Utils methods categories
 */
var /**
 * Utils methods categories
 */
Utils = /** @class */ (function () {
    function Utils() {
    }
    Object.defineProperty(Utils, "routerHelper", {
        /**
         * Angular 2 router helper
         */
        get: /**
         * Angular 2 router helper
         * @return {?}
         */
        function () {
            return RouterHelper;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Utils, "common", {
        /**
         * Common utility methods
         */
        get: /**
         * Common utility methods
         * @return {?}
         */
        function () {
            return Common;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Utils, "forms", {
        /**
         * Utility methods form angular 2 forms
         */
        get: /**
         * Utility methods form angular 2 forms
         * @return {?}
         */
        function () {
            return Forms;
        },
        enumerable: true,
        configurable: true
    });
    return Utils;
}());
export { Utils };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdXRpbHMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUlBLE9BQU8sWUFBWSxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sTUFBTSxNQUFNLGdCQUFnQixDQUFDO0FBQ3BDLE9BQU8sS0FBSyxNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFLbEMsbUNBUUM7Ozs7Ozs7SUFERyxrRUFBMEM7Ozs7OztBQU05Qyw2QkFTQzs7Ozs7Ozs7O0lBREcsbUdBQWlKOzs7Ozs7QUFNckosNEJBa0NDOzs7Ozs7Ozs7SUExQkcsMkVBQXlGOzs7Ozs7Ozs7SUFTekYscUZBQTRHOzs7Ozs7O0lBTzVHLDBEQUFvRDs7Ozs7Ozs7SUFTcEQsb0VBQW1FOzs7OztBQU12RTs7OztJQUFBO0lBeUJBLENBQUM7SUFwQkcsc0JBQVcscUJBQVk7UUFIdkI7O1dBRUc7Ozs7O1FBQ0g7WUFFSSxPQUFPLFlBQVksQ0FBQztRQUN4QixDQUFDOzs7T0FBQTtJQUtELHNCQUFXLGVBQU07UUFIakI7O1dBRUc7Ozs7O1FBQ0g7WUFFSSxPQUFPLE1BQU0sQ0FBQztRQUNsQixDQUFDOzs7T0FBQTtJQUtELHNCQUFXLGNBQUs7UUFIaEI7O1dBRUc7Ozs7O1FBQ0g7WUFFSSxPQUFPLEtBQUssQ0FBQztRQUNqQixDQUFDOzs7T0FBQTtJQUNMLFlBQUM7QUFBRCxDQUFDLEFBekJELElBeUJDO0FBRUQsT0FBTyxFQUFDLEtBQUssRUFBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtOZ0Zvcm0sIEZvcm1Hcm91cH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQge05nTW9kdWxlUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtSb3V0ZX0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuXHJcbmltcG9ydCBSb3V0ZXJIZWxwZXIgZnJvbSAnLi91dGlscy5yb3V0ZXJIZWxwZXInO1xyXG5pbXBvcnQgQ29tbW9uIGZyb20gJy4vdXRpbHMuY29tbW9uJztcclxuaW1wb3J0IEZvcm1zIGZyb20gJy4vdXRpbHMuZm9ybXMnO1xyXG5cclxuLyoqXHJcbiAqIEhlbHBlciBtZXRob2RzIGZvciBhbmd1bGFyMiByb3V0ZXJcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVJvdXRlckhlbHBlclxyXG57XHJcbiAgICAvKipcclxuICAgICAqIEV4dHJhY3RzIHJvdXRlIGRlZmluaXRpb25zIGZyb20gY29tcG9uZW50cyBpZiByb3V0ZXMgYXJlIHNldCB1c2luZyBkZWNvcmF0b3IgQ29tcG9uZW50Um91dGVcclxuICAgICAqIEBwYXJhbSBjb21wb25lbnRzIEFycmF5IG9mIGNvbXBvbmVudHMgdG8gYmUgdXNlZCBmb3IgZXh0cmFjdGlvblxyXG4gICAgICogQHJldHVybnMgUm91dGVEZWZpbml0aW9uIEV4dHJhY3RlZCByb3V0ZXNcclxuICAgICAqL1xyXG4gICAgZXh0cmFjdFJvdXRlcyhjb21wb25lbnRzOiBhbnlbXSk6IFJvdXRlW107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb21tb24gdXRpbGl0eSBtZXRob2RzXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElDb21tb25cclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiBSdW5zIGNhbGxiYWNrIGZ1bmN0aW9uIHdoZW4gYW5ndWxhciBtb2R1bGUgaXMgYm9vdHN0cmFwcGVkIGFuZCBzdGFibGVcclxuICAgICAqIEBwYXJhbSBtb2R1bGVSZWZQcm9taXNlIFByb21pc2UgZm9yIG1vZHVsZSB0aGF0IHdhcyBib290c3RyYXBwZWRcclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBDYWxsYmFjayB0aGF0IGlzIGNhbGxlZFxyXG4gICAgICogQHBhcmFtIGFuZ3VsYXJQcm9maWxlciBJbmRpY2F0aW9uIHRoYXQgYW5ndWxhciBwcm9maWxlciBzaG91bGQgYmUgZW5hYmxlZFxyXG4gICAgICovXHJcbiAgICBydW5XaGVuTW9kdWxlU3RhYmxlKG1vZHVsZVJlZlByb21pc2U6IFByb21pc2U8TmdNb2R1bGVSZWY8e30+PiwgY2FsbGJhY2s6IChtb2R1bGVSZWY6IE5nTW9kdWxlUmVmPHt9PikgPT4gdm9pZCwgYW5ndWxhclByb2ZpbGVyPzogYm9vbGVhbik6IHZvaWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBVdGlsaXR5IG1ldGhvZHMgZm9ybSBhbmd1bGFyIDIgZm9ybXNcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUZvcm1zXHJcbntcclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBpbmRpY2F0aW9uIHdoZXRoZXIgY29udHJvbHMgaGF2ZSBlcnJvcnMsIHdpdGggY3VzdG9tIGluZGljYXRpb24gb2Ygc3VibWl0dGVkXHJcbiAgICAgKiBAcGFyYW0gZm9ybSBGb3JtIGNvbnRhaW5pbmcgY29udHJvbHNcclxuICAgICAqIEBwYXJhbSBjb250cm9scyBBcnJheSBvZiBjb250cm9scyBuYW1lcyB0byBiZSBjaGVja2VkIGZvciBlcnJvcnNcclxuICAgICAqIEBwYXJhbSBzdWJtaXR0ZWQgSW5kaWNhdGlvbiB3aGV0aGVyIGZvcm0gd2FzIHN1Ym1pdHRlZCwgZGVmYXVsdHMgdG8gZmFsc2VcclxuICAgICAqL1xyXG4gICAgaGFzRXJyb3JDdXN0b20oZm9ybTogTmdGb3JtfEZvcm1Hcm91cCwgY29udHJvbHM6IHN0cmluZ1tdLCBzdWJtaXR0ZWQ/OiBib29sZWFuKTogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgaW5kaWNhdGlvbiB3aGV0aGVyIGhpZGUgYWxlcnRzIG9yIG5vdCBmb3IgY29udHJvbCwgd2l0aCBjdXN0b20gaW5kaWNhdGlvbiBvZiBzdWJtaXR0ZWRcclxuICAgICAqIEBwYXJhbSBmb3JtIEZvcm0gY29udGFpbmluZyBjb250cm9sc1xyXG4gICAgICogQHBhcmFtIGNvbnRyb2wgQ29udHJvbHMgbmFtZSB0aGF0IHdpbGwgYmUgY2hlY2tlZFxyXG4gICAgICogQHBhcmFtIGVycm9ycyBBcnJheSBvZiB2YWxpZGF0aW9uIGVycm9ycyB0byBiZSBjaGVja2VkIGZvciBleGlzdGFuY2VcclxuICAgICAqIEBwYXJhbSBzdWJtaXR0ZWQgSW5kaWNhdGlvbiB3aGV0aGVyIGZvcm0gd2FzIHN1Ym1pdHRlZCwgZGVmYXVsdHMgdG8gZmFsc2VcclxuICAgICAqL1xyXG4gICAgYWxlcnRIaWRkZW5DdXN0b20oZm9ybTogTmdGb3JtfEZvcm1Hcm91cCwgY29udHJvbDogc3RyaW5nLCBlcnJvcnM/OiBzdHJpbmdbXSwgc3VibWl0dGVkPzogYm9vbGVhbik6IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGluZGljYXRpb24gd2hldGhlciBjb250cm9scyBoYXZlIGVycm9yc1xyXG4gICAgICogQHBhcmFtIGZvcm0gRm9ybSBjb250YWluaW5nIGNvbnRyb2xzXHJcbiAgICAgKiBAcGFyYW0gY29udHJvbHMgQXJyYXkgb2YgY29udHJvbHMgbmFtZXMgdG8gYmUgY2hlY2tlZCBmb3IgZXJyb3JzXHJcbiAgICAgKi9cclxuICAgIGhhc0Vycm9yKGZvcm06IE5nRm9ybSwgY29udHJvbHM6IHN0cmluZ1tdKTogYm9vbGVhbjtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGluZGljYXRpb24gd2hldGhlciBoaWRlIGFsZXJ0cyBvciBub3QgZm9yIGNvbnRyb2xcclxuICAgICAqIEBwYXJhbSBmb3JtIEZvcm0gY29udGFpbmluZyBjb250cm9sc1xyXG4gICAgICogQHBhcmFtIGNvbnRyb2wgQ29udHJvbHMgbmFtZSB0aGF0IHdpbGwgYmUgY2hlY2tlZFxyXG4gICAgICogQHBhcmFtIGVycm9ycyBBcnJheSBvZiB2YWxpZGF0aW9uIGVycm9ycyB0byBiZSBjaGVja2VkIGZvciBleGlzdGFuY2VcclxuICAgICAqL1xyXG4gICAgYWxlcnRIaWRkZW4oZm9ybTogTmdGb3JtLCBjb250cm9sOiBzdHJpbmcsIGVycm9yczogc3RyaW5nW10pOiB2b2lkO1xyXG59XHJcblxyXG4vKipcclxuICogVXRpbHMgbWV0aG9kcyBjYXRlZ29yaWVzXHJcbiAqL1xyXG5jbGFzcyBVdGlsc1xyXG57XHJcbiAgICAvKipcclxuICAgICAqIEFuZ3VsYXIgMiByb3V0ZXIgaGVscGVyXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXQgcm91dGVySGVscGVyKCk6IElSb3V0ZXJIZWxwZXJcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gUm91dGVySGVscGVyO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIENvbW1vbiB1dGlsaXR5IG1ldGhvZHNcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldCBjb21tb24oKTogSUNvbW1vblxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBDb21tb247XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogVXRpbGl0eSBtZXRob2RzIGZvcm0gYW5ndWxhciAyIGZvcm1zXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXQgZm9ybXMoKTogSUZvcm1zXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIEZvcm1zO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQge1V0aWxzfTsiXX0=