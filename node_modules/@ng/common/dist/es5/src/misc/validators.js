/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isPresent } from "@asseco/common";
/**
 * Validations functions
 */
var /**
 * Validations functions
 */
Validators = /** @class */ (function () {
    function Validators() {
    }
    /**
     * Validates control if its value is number
     * @param control Control which value to be validated
     */
    /**
     * Validates control if its value is number
     * @param {?} control Control which value to be validated
     * @return {?}
     */
    Validators.number = /**
     * Validates control if its value is number
     * @param {?} control Control which value to be validated
     * @return {?}
     */
    function (control) {
        if (isNaN(control.value)) {
            return {
                "number": true
            };
        }
        return null;
    };
    /**
     * Creates validator function that validates control if its value is higher than max value
     * @param max Max value that should be validated
     */
    /**
     * Creates validator function that validates control if its value is higher than max value
     * @param {?} max Max value that should be validated
     * @return {?}
     */
    Validators.max = /**
     * Creates validator function that validates control if its value is higher than max value
     * @param {?} max Max value that should be validated
     * @return {?}
     */
    function (max) {
        return (/**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            if (!isNaN(control.value) && isPresent(control.value) && isPresent(max) && control.value > (/** @type {?} */ (max))) {
                return {
                    "maxValue": max,
                    'actualValue': control.value
                };
            }
            return null;
        });
    };
    /**
     * Creates validator function that validates control if its value is lower than min value
     * @param min Min value that should be validated
     */
    /**
     * Creates validator function that validates control if its value is lower than min value
     * @param {?} min Min value that should be validated
     * @return {?}
     */
    Validators.min = /**
     * Creates validator function that validates control if its value is lower than min value
     * @param {?} min Min value that should be validated
     * @return {?}
     */
    function (min) {
        return (/**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            if (!isNaN(control.value) && isPresent(control.value) && isPresent(min) && control.value < (/** @type {?} */ (min))) {
                return {
                    "minValue": min,
                    'actualValue': control.value
                };
            }
            return null;
        });
    };
    return Validators;
}());
/**
 * Validations functions
 */
export { Validators };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9taXNjL3ZhbGlkYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUt6Qzs7OztJQUFBO0lBeURBLENBQUM7SUF2REc7OztPQUdHOzs7Ozs7SUFDVyxpQkFBTTs7Ozs7SUFBcEIsVUFBcUIsT0FBd0I7UUFFekMsSUFBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUN2QjtZQUNJLE9BQU87Z0JBQ0gsUUFBUSxFQUFFLElBQUk7YUFDakIsQ0FBQztTQUNMO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVEOzs7T0FHRzs7Ozs7O0lBQ1csY0FBRzs7Ozs7SUFBakIsVUFBa0IsR0FBZ0I7UUFFOUI7Ozs7UUFBTyxVQUFDLE9BQXdCO1lBRTVCLElBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLEdBQUcsbUJBQUEsR0FBRyxFQUFDLEVBQzlGO2dCQUNJLE9BQU87b0JBQ0gsVUFBVSxFQUFFLEdBQUc7b0JBQ2YsYUFBYSxFQUFFLE9BQU8sQ0FBQyxLQUFLO2lCQUMvQixDQUFDO2FBQ0w7WUFFRCxPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDLEVBQUM7SUFDTixDQUFDO0lBRUQ7OztPQUdHOzs7Ozs7SUFDVyxjQUFHOzs7OztJQUFqQixVQUFrQixHQUFnQjtRQUU5Qjs7OztRQUFPLFVBQUMsT0FBd0I7WUFFNUIsSUFBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksT0FBTyxDQUFDLEtBQUssR0FBRyxtQkFBQSxHQUFHLEVBQUMsRUFDOUY7Z0JBQ0ksT0FBTztvQkFDSCxVQUFVLEVBQUUsR0FBRztvQkFDZixhQUFhLEVBQUUsT0FBTyxDQUFDLEtBQUs7aUJBQy9CLENBQUM7YUFDTDtZQUVELE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUMsRUFBQztJQUNOLENBQUM7SUFDTCxpQkFBQztBQUFELENBQUMsQUF6REQsSUF5REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Fic3RyYWN0Q29udHJvbCwgVmFsaWRhdGlvbkVycm9ycywgVmFsaWRhdG9yRm59IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xyXG5cclxuaW1wb3J0IHtpc1ByZXNlbnR9IGZyb20gXCJAYXNzZWNvL2NvbW1vblwiO1xyXG5cclxuLyoqXHJcbiAqIFZhbGlkYXRpb25zIGZ1bmN0aW9uc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFZhbGlkYXRvcnNcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiBWYWxpZGF0ZXMgY29udHJvbCBpZiBpdHMgdmFsdWUgaXMgbnVtYmVyXHJcbiAgICAgKiBAcGFyYW0gY29udHJvbCBDb250cm9sIHdoaWNoIHZhbHVlIHRvIGJlIHZhbGlkYXRlZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIG51bWJlcihjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzfG51bGxcclxuICAgIHtcclxuICAgICAgICBpZihpc05hTihjb250cm9sLnZhbHVlKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBcIm51bWJlclwiOiB0cnVlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgdmFsaWRhdG9yIGZ1bmN0aW9uIHRoYXQgdmFsaWRhdGVzIGNvbnRyb2wgaWYgaXRzIHZhbHVlIGlzIGhpZ2hlciB0aGFuIG1heCB2YWx1ZVxyXG4gICAgICogQHBhcmFtIG1heCBNYXggdmFsdWUgdGhhdCBzaG91bGQgYmUgdmFsaWRhdGVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgbWF4KG1heDogbnVtYmVyfG51bGwpOiBWYWxpZGF0b3JGblxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9yc3xudWxsID0+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZighaXNOYU4oY29udHJvbC52YWx1ZSkgJiYgaXNQcmVzZW50KGNvbnRyb2wudmFsdWUpICYmIGlzUHJlc2VudChtYXgpICYmIGNvbnRyb2wudmFsdWUgPiBtYXghKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIFwibWF4VmFsdWVcIjogbWF4LFxyXG4gICAgICAgICAgICAgICAgICAgICdhY3R1YWxWYWx1ZSc6IGNvbnRyb2wudmFsdWVcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIHZhbGlkYXRvciBmdW5jdGlvbiB0aGF0IHZhbGlkYXRlcyBjb250cm9sIGlmIGl0cyB2YWx1ZSBpcyBsb3dlciB0aGFuIG1pbiB2YWx1ZVxyXG4gICAgICogQHBhcmFtIG1pbiBNaW4gdmFsdWUgdGhhdCBzaG91bGQgYmUgdmFsaWRhdGVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgbWluKG1pbjogbnVtYmVyfG51bGwpOiBWYWxpZGF0b3JGblxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9yc3xudWxsID0+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZighaXNOYU4oY29udHJvbC52YWx1ZSkgJiYgaXNQcmVzZW50KGNvbnRyb2wudmFsdWUpICYmIGlzUHJlc2VudChtaW4pICYmIGNvbnRyb2wudmFsdWUgPCBtaW4hKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIFwibWluVmFsdWVcIjogbWluLFxyXG4gICAgICAgICAgICAgICAgICAgICdhY3R1YWxWYWx1ZSc6IGNvbnRyb2wudmFsdWVcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn0iXX0=