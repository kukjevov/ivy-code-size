/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { HttpEventType, HTTP_INTERCEPTORS } from '@angular/common/http';
import { tap } from 'rxjs/operators';
import { ProgressIndicatorService } from '../../components/progressIndicator/progressIndicator.service';
import { IgnoredInterceptorsService } from '../../services/ignoredInterceptors/ignoredInterceptors.service';
/**
 * ProgressInterceptor used for intercepting http requests and displaying progress indicatior
 */
var ProgressInterceptor = /** @class */ (function () {
    //######################### constructors #########################
    function ProgressInterceptor(_indicatorSvc, _ignoredInterceptorsService) {
        this._indicatorSvc = _indicatorSvc;
        this._ignoredInterceptorsService = _ignoredInterceptorsService;
    }
    //######################### public methods - implementation of HttpInterceptor #########################
    /**
     * Intercepts http request
     * @param req Request to be intercepted
     * @param next Next middleware that can be called for next processing
     */
    //######################### public methods - implementation of HttpInterceptor #########################
    /**
     * Intercepts http request
     * @param {?} req Request to be intercepted
     * @param {?} next Next middleware that can be called for next processing
     * @return {?}
     */
    ProgressInterceptor.prototype.intercept = 
    //######################### public methods - implementation of HttpInterceptor #########################
    /**
     * Intercepts http request
     * @param {?} req Request to be intercepted
     * @param {?} next Next middleware that can be called for next processing
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        return next.handle(req)
            .pipe(tap((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (_this._ignoredInterceptorsService && _this._ignoredInterceptorsService.isIgnored(ProgressInterceptor, req)) {
                return;
            }
            //request started
            if (event.type == HttpEventType.Sent) {
                _this._indicatorSvc.showProgress();
            }
            //response received
            else if (event.type == HttpEventType.Response) {
                _this._indicatorSvc.hideProgress();
            }
        }), (/**
         * @return {?}
         */
        function () { return _this._indicatorSvc.hideProgress(); })));
    };
    ProgressInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ProgressInterceptor.ctorParameters = function () { return [
        { type: ProgressIndicatorService },
        { type: IgnoredInterceptorsService, decorators: [{ type: Optional }] }
    ]; };
    return ProgressInterceptor;
}());
export { ProgressInterceptor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ProgressInterceptor.prototype._indicatorSvc;
    /**
     * @type {?}
     * @private
     */
    ProgressInterceptor.prototype._ignoredInterceptorsService;
}
/**
 * Progress interceptor provider
 * @type {?}
 */
export var PROGRESS_INTERCEPTOR_PROVIDER = {
    provide: HTTP_INTERCEPTORS,
    useClass: ProgressInterceptor,
    multi: true
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3NJbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9pbnRlcmNlcHRvcnMvcHJvZ3Jlc3NJbnRlcmNlcHRvci9wcm9ncmVzc0ludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFpQixRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbEUsT0FBTyxFQUEwQyxhQUFhLEVBQUUsaUJBQWlCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUUvRyxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFbkMsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sOERBQThELENBQUM7QUFDdEcsT0FBTyxFQUFDLDBCQUEwQixFQUFrQyxNQUFNLGdFQUFnRSxDQUFDOzs7O0FBSzNJO0lBR0ksa0VBQWtFO0lBQ2xFLDZCQUFvQixhQUF1QyxFQUMzQiwyQkFBd0Q7UUFEcEUsa0JBQWEsR0FBYixhQUFhLENBQTBCO1FBQzNCLGdDQUEyQixHQUEzQiwyQkFBMkIsQ0FBNkI7SUFFeEYsQ0FBQztJQUVELHdHQUF3RztJQUV4Rzs7OztPQUlHOzs7Ozs7OztJQUNJLHVDQUFTOzs7Ozs7OztJQUFoQixVQUFpQixHQUF5QyxFQUFFLElBQWlCO1FBQTdFLGlCQXFCQztRQW5CRyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO2FBQ2xCLElBQUksQ0FBQyxHQUFHOzs7O1FBQUMsVUFBQSxLQUFLO1lBRVgsSUFBSSxLQUFJLENBQUMsMkJBQTJCLElBQUksS0FBSSxDQUFDLDJCQUEyQixDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLENBQUMsRUFDNUc7Z0JBQ0ksT0FBTzthQUNWO1lBRUQsaUJBQWlCO1lBQ2pCLElBQUcsS0FBSyxDQUFDLElBQUksSUFBSSxhQUFhLENBQUMsSUFBSSxFQUNuQztnQkFDSSxLQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxDQUFDO2FBQ3JDO1lBQ0QsbUJBQW1CO2lCQUNkLElBQUcsS0FBSyxDQUFDLElBQUksSUFBSSxhQUFhLENBQUMsUUFBUSxFQUM1QztnQkFDSSxLQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxDQUFDO2FBQ3JDO1FBQ0wsQ0FBQzs7O1FBQUUsY0FBTSxPQUFBLEtBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLEVBQWpDLENBQWlDLEVBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7O2dCQXJDSixVQUFVOzs7O2dCQU5ILHdCQUF3QjtnQkFDeEIsMEJBQTBCLHVCQVVqQixRQUFROztJQWlDekIsMEJBQUM7Q0FBQSxBQXRDRCxJQXNDQztTQXJDWSxtQkFBbUI7Ozs7OztJQUdoQiw0Q0FBK0M7Ozs7O0lBQy9DLDBEQUE0RTs7Ozs7O0FBc0M1RixNQUFNLEtBQU8sNkJBQTZCLEdBQzFDO0lBQ0ksT0FBTyxFQUFFLGlCQUFpQjtJQUMxQixRQUFRLEVBQUUsbUJBQW1CO0lBQzdCLEtBQUssRUFBRSxJQUFJO0NBQ2QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGUsIENsYXNzUHJvdmlkZXIsIE9wdGlvbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtIdHRwRXZlbnQsIEh0dHBJbnRlcmNlcHRvciwgSHR0cEhhbmRsZXIsIEh0dHBFdmVudFR5cGUsIEhUVFBfSU5URVJDRVBUT1JTfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7dGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQge1Byb2dyZXNzSW5kaWNhdG9yU2VydmljZX0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9wcm9ncmVzc0luZGljYXRvci9wcm9ncmVzc0luZGljYXRvci5zZXJ2aWNlJztcclxuaW1wb3J0IHtJZ25vcmVkSW50ZXJjZXB0b3JzU2VydmljZSwgSHR0cFJlcXVlc3RJZ25vcmVkSW50ZXJjZXB0b3JJZH0gZnJvbSAnLi4vLi4vc2VydmljZXMvaWdub3JlZEludGVyY2VwdG9ycy9pZ25vcmVkSW50ZXJjZXB0b3JzLnNlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIFByb2dyZXNzSW50ZXJjZXB0b3IgdXNlZCBmb3IgaW50ZXJjZXB0aW5nIGh0dHAgcmVxdWVzdHMgYW5kIGRpc3BsYXlpbmcgcHJvZ3Jlc3MgaW5kaWNhdGlvclxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgUHJvZ3Jlc3NJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvclxyXG57XHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgY29uc3RydWN0b3JzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2luZGljYXRvclN2YzogUHJvZ3Jlc3NJbmRpY2F0b3JTZXJ2aWNlLFxyXG4gICAgICAgICAgICAgICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBfaWdub3JlZEludGVyY2VwdG9yc1NlcnZpY2U/OiBJZ25vcmVkSW50ZXJjZXB0b3JzU2VydmljZSlcclxuICAgIHtcclxuICAgIH1cclxuXHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIG1ldGhvZHMgLSBpbXBsZW1lbnRhdGlvbiBvZiBIdHRwSW50ZXJjZXB0b3IgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW50ZXJjZXB0cyBodHRwIHJlcXVlc3RcclxuICAgICAqIEBwYXJhbSByZXEgUmVxdWVzdCB0byBiZSBpbnRlcmNlcHRlZFxyXG4gICAgICogQHBhcmFtIG5leHQgTmV4dCBtaWRkbGV3YXJlIHRoYXQgY2FuIGJlIGNhbGxlZCBmb3IgbmV4dCBwcm9jZXNzaW5nXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdElnbm9yZWRJbnRlcmNlcHRvcklkPGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj5cclxuICAgIHtcclxuICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKVxyXG4gICAgICAgICAgICAucGlwZSh0YXAoZXZlbnQgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lnbm9yZWRJbnRlcmNlcHRvcnNTZXJ2aWNlICYmIHRoaXMuX2lnbm9yZWRJbnRlcmNlcHRvcnNTZXJ2aWNlLmlzSWdub3JlZChQcm9ncmVzc0ludGVyY2VwdG9yLCByZXEpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL3JlcXVlc3Qgc3RhcnRlZFxyXG4gICAgICAgICAgICAgICAgaWYoZXZlbnQudHlwZSA9PSBIdHRwRXZlbnRUeXBlLlNlbnQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5kaWNhdG9yU3ZjLnNob3dQcm9ncmVzcygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy9yZXNwb25zZSByZWNlaXZlZFxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZihldmVudC50eXBlID09IEh0dHBFdmVudFR5cGUuUmVzcG9uc2UpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5kaWNhdG9yU3ZjLmhpZGVQcm9ncmVzcygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCAoKSA9PiB0aGlzLl9pbmRpY2F0b3JTdmMuaGlkZVByb2dyZXNzKCkpKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFByb2dyZXNzIGludGVyY2VwdG9yIHByb3ZpZGVyXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgUFJPR1JFU1NfSU5URVJDRVBUT1JfUFJPVklERVI6IENsYXNzUHJvdmlkZXIgPSBcclxue1xyXG4gICAgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsIFxyXG4gICAgdXNlQ2xhc3M6IFByb2dyZXNzSW50ZXJjZXB0b3IsIFxyXG4gICAgbXVsdGk6IHRydWVcclxufTsiXX0=