import * as ɵngcc0 from '@angular/core';
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, Input, EventEmitter, QueryList, ViewChildren } from "@angular/core";
import { OptionComponent } from "./option.component";
/**
 * Component used for options group in select component
 * @template TValue
 */
var OptGroupComponent = /** @class */ (function () {
    function OptGroupComponent() {
        //######################### private fields #########################
        //######################### private fields #########################
        /**
         * Instance of event emitter for optionsChange
         */
        this._optionsChange = new EventEmitter();
    }
    Object.defineProperty(OptGroupComponent.prototype, "options", {
        //######################### public properties #########################
        /**
         * Options assigned to this options group
         */
        get: 
        //######################### public properties #########################
        /**
         * Options assigned to this options group
         * @return {?}
         */
        function () {
            return this.optionsChildren.toArray();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OptGroupComponent.prototype, "optionsChange", {
        /**
         * Occurs when options in this group change
         */
        get: /**
         * Occurs when options in this group change
         * @return {?}
         */
        function () {
            return this._optionsChange;
        },
        enumerable: true,
        configurable: true
    });
    //######################### public methods - implementation of AfterViewInit #########################
    /**
     * Called when view was initialized
     */
    //######################### public methods - implementation of AfterViewInit #########################
    /**
     * Called when view was initialized
     * @return {?}
     */
    OptGroupComponent.prototype.ngAfterViewInit = 
    //######################### public methods - implementation of AfterViewInit #########################
    /**
     * Called when view was initialized
     * @return {?}
     */
    function () {
        var _this = this;
        this.optionsChildren.changes.subscribe((/**
         * @return {?}
         */
        function () {
            _this._optionsChange.emit();
        }));
    };
    OptGroupComponent.propDecorators = {
        optionsChildren: [{ type: ViewChildren, args: [OptionComponent,] }],
        text: [{ type: Input }]
    };
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(OptGroupComponent, [{
        type: Component,
        args: [{
                selector: 'ng-select>optgroup',
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return []; }, { _optionsChange: [], options: [], optionsChange: [], ngAfterViewInit: [], optionsChildren: [{
            type: ViewChildren,
            args: [OptionComponent]
        }], text: [{
            type: Input
        }] });
OptGroupComponent.ngComponentDef = ɵngcc0.ɵdefineComponent({ type: OptGroupComponent, selectors: [["optgroup"]], factory: function OptGroupComponent_Factory(t) { return new (t || OptGroupComponent)(); }, inputs: { text: "text" }, viewQuery: function OptGroupComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵviewQuery(OptionComponent, true, null);
    } if (rf & 2) {
        var _t;
        (ɵngcc0.ɵqueryRefresh(_t = ɵngcc0.ɵloadViewQuery()) && (ctx.optionsChildren = _t));
    } }, consts: 0, vars: 0, template: function OptGroupComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
    return OptGroupComponent;
}());
export { OptGroupComponent };
if (false) {
    /**
     * Instance of event emitter for optionsChange
     * @type {?}
     * @private
     */
    OptGroupComponent.prototype._optionsChange;
    /**
     * Children options in this group
     * \@internal
     * @type {?}
     */
    OptGroupComponent.prototype.optionsChildren;
    /**
     * Text that is displayed for this options group
     * @type {?}
     */
    OptGroupComponent.prototype.text;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkY6L2dpdC9pdnktY29kZS1zaXplL25vZGVfbW9kdWxlcy9Abmcvc2FtcGxlL2Rpc3QvZXM1L3NyYy9jb21wb25lbnRzL29wdGlvbi9vcHRncm91cC5jb21wb25lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01BeUVNLEFBT0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lJQUlBIiwiZmlsZSI6IkY6L2dpdC9pdnktY29kZS1zaXplL25vZGVfbW9kdWxlcy9Abmcvc2FtcGxlL2Rpc3QvZXM1L3NyYy9jb21wb25lbnRzL29wdGlvbi9vcHRncm91cC5jb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXHJcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxleHRyYVJlcXVpcmUsbWlzc2luZ092ZXJyaWRlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXHJcbiAqL1xyXG5pbXBvcnQgeyBDb21wb25lbnQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBJbnB1dCwgRXZlbnRFbWl0dGVyLCBRdWVyeUxpc3QsIFZpZXdDaGlsZHJlbiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IE9wdGlvbkNvbXBvbmVudCB9IGZyb20gXCIuL29wdGlvbi5jb21wb25lbnRcIjtcclxuLyoqXHJcbiAqIENvbXBvbmVudCB1c2VkIGZvciBvcHRpb25zIGdyb3VwIGluIHNlbGVjdCBjb21wb25lbnRcclxuICogQHRlbXBsYXRlIFRWYWx1ZVxyXG4gKi9cclxudmFyIE9wdEdyb3VwQ29tcG9uZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gT3B0R3JvdXBDb21wb25lbnQoKSB7XHJcbiAgICAgICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHByaXZhdGUgZmllbGRzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgICAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHJpdmF0ZSBmaWVsZHMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEluc3RhbmNlIG9mIGV2ZW50IGVtaXR0ZXIgZm9yIG9wdGlvbnNDaGFuZ2VcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9vcHRpb25zQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9wdEdyb3VwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJvcHRpb25zXCIsIHtcclxuICAgICAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIHByb3BlcnRpZXMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE9wdGlvbnMgYXNzaWduZWQgdG8gdGhpcyBvcHRpb25zIGdyb3VwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBcclxuICAgICAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIHByb3BlcnRpZXMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE9wdGlvbnMgYXNzaWduZWQgdG8gdGhpcyBvcHRpb25zIGdyb3VwXHJcbiAgICAgICAgICogQHJldHVybiB7P31cclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNDaGlsZHJlbi50b0FycmF5KCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT3B0R3JvdXBDb21wb25lbnQucHJvdG90eXBlLCBcIm9wdGlvbnNDaGFuZ2VcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE9jY3VycyB3aGVuIG9wdGlvbnMgaW4gdGhpcyBncm91cCBjaGFuZ2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IC8qKlxyXG4gICAgICAgICAqIE9jY3VycyB3aGVuIG9wdGlvbnMgaW4gdGhpcyBncm91cCBjaGFuZ2VcclxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnNDaGFuZ2U7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIG1ldGhvZHMgLSBpbXBsZW1lbnRhdGlvbiBvZiBBZnRlclZpZXdJbml0ICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGVkIHdoZW4gdmlldyB3YXMgaW5pdGlhbGl6ZWRcclxuICAgICAqL1xyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHB1YmxpYyBtZXRob2RzIC0gaW1wbGVtZW50YXRpb24gb2YgQWZ0ZXJWaWV3SW5pdCAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB3aGVuIHZpZXcgd2FzIGluaXRpYWxpemVkXHJcbiAgICAgKiBAcmV0dXJuIHs/fVxyXG4gICAgICovXHJcbiAgICBPcHRHcm91cENvbXBvbmVudC5wcm90b3R5cGUubmdBZnRlclZpZXdJbml0ID0gXHJcbiAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHVibGljIG1ldGhvZHMgLSBpbXBsZW1lbnRhdGlvbiBvZiBBZnRlclZpZXdJbml0ICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGVkIHdoZW4gdmlldyB3YXMgaW5pdGlhbGl6ZWRcclxuICAgICAqIEByZXR1cm4gez99XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMub3B0aW9uc0NoaWxkcmVuLmNoYW5nZXMuc3Vic2NyaWJlKCgvKipcclxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuX29wdGlvbnNDaGFuZ2UuZW1pdCgpO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH07XHJcbiAgICBPcHRHcm91cENvbXBvbmVudC5kZWNvcmF0b3JzID0gW1xyXG4gICAgICAgIHsgdHlwZTogQ29tcG9uZW50LCBhcmdzOiBbe1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnbmctc2VsZWN0Pm9wdGdyb3VwJyxcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcclxuICAgICAgICAgICAgICAgIH0sXSB9LFxyXG4gICAgXTtcclxuICAgIE9wdEdyb3VwQ29tcG9uZW50LnByb3BEZWNvcmF0b3JzID0ge1xyXG4gICAgICAgIG9wdGlvbnNDaGlsZHJlbjogW3sgdHlwZTogVmlld0NoaWxkcmVuLCBhcmdzOiBbT3B0aW9uQ29tcG9uZW50LF0gfV0sXHJcbiAgICAgICAgdGV4dDogW3sgdHlwZTogSW5wdXQgfV1cclxuICAgIH07XHJcbiAgICByZXR1cm4gT3B0R3JvdXBDb21wb25lbnQ7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IE9wdEdyb3VwQ29tcG9uZW50IH07XHJcbmlmIChmYWxzZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbnN0YW5jZSBvZiBldmVudCBlbWl0dGVyIGZvciBvcHRpb25zQ2hhbmdlXHJcbiAgICAgKiBAdHlwZSB7P31cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIE9wdEdyb3VwQ29tcG9uZW50LnByb3RvdHlwZS5fb3B0aW9uc0NoYW5nZTtcclxuICAgIC8qKlxyXG4gICAgICogQ2hpbGRyZW4gb3B0aW9ucyBpbiB0aGlzIGdyb3VwXHJcbiAgICAgKiBcXEBpbnRlcm5hbFxyXG4gICAgICogQHR5cGUgez99XHJcbiAgICAgKi9cclxuICAgIE9wdEdyb3VwQ29tcG9uZW50LnByb3RvdHlwZS5vcHRpb25zQ2hpbGRyZW47XHJcbiAgICAvKipcclxuICAgICAqIFRleHQgdGhhdCBpcyBkaXNwbGF5ZWQgZm9yIHRoaXMgb3B0aW9ucyBncm91cFxyXG4gICAgICogQHR5cGUgez99XHJcbiAgICAgKi9cclxuICAgIE9wdEdyb3VwQ29tcG9uZW50LnByb3RvdHlwZS50ZXh0O1xyXG59XHIiXX0=