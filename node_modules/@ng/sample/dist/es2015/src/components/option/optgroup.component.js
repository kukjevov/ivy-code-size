import * as ɵngcc0 from '@angular/core';
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, Input, EventEmitter, QueryList, ViewChildren } from "@angular/core";
import { OptionComponent } from "./option.component";
/**
 * Component used for options group in select component
 * @template TValue
 */
export class OptGroupComponent {
    constructor() {
        //######################### private fields #########################
        //######################### private fields #########################
        /**
         * Instance of event emitter for optionsChange
         */
        this._optionsChange = new EventEmitter();
    }
    //######################### public properties #########################
    /**
     * Options assigned to this options group
     * @return {?}
     */
    get options() {
        return this.optionsChildren.toArray();
    }
    /**
     * Occurs when options in this group change
     * @return {?}
     */
    get optionsChange() {
        return this._optionsChange;
    }
    //######################### public methods - implementation of AfterViewInit #########################
    /**
     * Called when view was initialized
     * @return {?}
     */
    ngAfterViewInit() {
        this.optionsChildren.changes.subscribe((/**
         * @return {?}
         */
        () => {
            this._optionsChange.emit();
        }));
    }
}
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(OptGroupComponent, [{
        type: Component,
        args: [{
                selector: 'ng-select>optgroup',
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return []; }, { constructor: [], _optionsChange: [], options: [], optionsChange: [], ngAfterViewInit: [], optionsChildren: [{
            type: ViewChildren,
            args: [OptionComponent]
        }], text: [{
            type: Input
        }] });
OptGroupComponent.ngComponentDef = ɵngcc0.ɵdefineComponent({ type: OptGroupComponent, selectors: [["optgroup"]], factory: function OptGroupComponent_Factory(t) { return new (t || OptGroupComponent)(); }, viewQuery: function OptGroupComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵviewQuery(OptionComponent, true, null);
    } if (rf & 2) {
        var _t;
        (ɵngcc0.ɵqueryRefresh(_t = ɵngcc0.ɵloadViewQuery()) && (ctx.optionsChildren = _t));
    } }, inputs: { text: "text" }, consts: 0, vars: 0, template: function OptGroupComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
OptGroupComponent.propDecorators = {
    optionsChildren: [{ type: ViewChildren, args: [OptionComponent,] }],
    text: [{ type: Input }]
};
if (false) {
    /**
     * Instance of event emitter for optionsChange
     * @type {?}
     * @private
     */
    OptGroupComponent.prototype._optionsChange;
    /**
     * Children options in this group
     * \@internal
     * @type {?}
     */
    OptGroupComponent.prototype.optionsChildren;
    /**
     * Text that is displayed for this options group
     * @type {?}
     */
    OptGroupComponent.prototype.text;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkY6L2dpdC9pdnktY29kZS1zaXplL25vZGVfbW9kdWxlcy9Abmcvc2FtcGxlL2Rpc3QvZXMyMDE1L3NyYy9jb21wb25lbnRzL29wdGlvbi9vcHRncm91cC5jb21wb25lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0ErQ0MsMEpBT0MiLCJmaWxlIjoiRjovZ2l0L2l2eS1jb2RlLXNpemUvbm9kZV9tb2R1bGVzL0BuZy9zYW1wbGUvZGlzdC9lczIwMTUvc3JjL2NvbXBvbmVudHMvb3B0aW9uL29wdGdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcclxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcclxuICovXHJcbmltcG9ydCB7IENvbXBvbmVudCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIElucHV0LCBFdmVudEVtaXR0ZXIsIFF1ZXJ5TGlzdCwgVmlld0NoaWxkcmVuIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgT3B0aW9uQ29tcG9uZW50IH0gZnJvbSBcIi4vb3B0aW9uLmNvbXBvbmVudFwiO1xyXG4vKipcclxuICogQ29tcG9uZW50IHVzZWQgZm9yIG9wdGlvbnMgZ3JvdXAgaW4gc2VsZWN0IGNvbXBvbmVudFxyXG4gKiBAdGVtcGxhdGUgVFZhbHVlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgT3B0R3JvdXBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHByaXZhdGUgZmllbGRzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgICAgICAvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgcHJpdmF0ZSBmaWVsZHMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEluc3RhbmNlIG9mIGV2ZW50IGVtaXR0ZXIgZm9yIG9wdGlvbnNDaGFuZ2VcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9vcHRpb25zQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgfVxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHB1YmxpYyBwcm9wZXJ0aWVzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgIC8qKlxyXG4gICAgICogT3B0aW9ucyBhc3NpZ25lZCB0byB0aGlzIG9wdGlvbnMgZ3JvdXBcclxuICAgICAqIEByZXR1cm4gez99XHJcbiAgICAgKi9cclxuICAgIGdldCBvcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNDaGlsZHJlbi50b0FycmF5KCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE9jY3VycyB3aGVuIG9wdGlvbnMgaW4gdGhpcyBncm91cCBjaGFuZ2VcclxuICAgICAqIEByZXR1cm4gez99XHJcbiAgICAgKi9cclxuICAgIGdldCBvcHRpb25zQ2hhbmdlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zQ2hhbmdlO1xyXG4gICAgfVxyXG4gICAgLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIHB1YmxpYyBtZXRob2RzIC0gaW1wbGVtZW50YXRpb24gb2YgQWZ0ZXJWaWV3SW5pdCAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB3aGVuIHZpZXcgd2FzIGluaXRpYWxpemVkXHJcbiAgICAgKiBAcmV0dXJuIHs/fVxyXG4gICAgICovXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zQ2hpbGRyZW4uY2hhbmdlcy5zdWJzY3JpYmUoKC8qKlxyXG4gICAgICAgICAqIEByZXR1cm4gez99XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zQ2hhbmdlLmVtaXQoKTtcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn1cclxuT3B0R3JvdXBDb21wb25lbnQuZGVjb3JhdG9ycyA9IFtcclxuICAgIHsgdHlwZTogQ29tcG9uZW50LCBhcmdzOiBbe1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICduZy1zZWxlY3Q+b3B0Z3JvdXAnLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6ICcnLFxyXG4gICAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcclxuICAgICAgICAgICAgfV0gfVxyXG5dO1xyXG5PcHRHcm91cENvbXBvbmVudC5wcm9wRGVjb3JhdG9ycyA9IHtcclxuICAgIG9wdGlvbnNDaGlsZHJlbjogW3sgdHlwZTogVmlld0NoaWxkcmVuLCBhcmdzOiBbT3B0aW9uQ29tcG9uZW50LF0gfV0sXHJcbiAgICB0ZXh0OiBbeyB0eXBlOiBJbnB1dCB9XVxyXG59O1xyXG5pZiAoZmFsc2UpIHtcclxuICAgIC8qKlxyXG4gICAgICogSW5zdGFuY2Ugb2YgZXZlbnQgZW1pdHRlciBmb3Igb3B0aW9uc0NoYW5nZVxyXG4gICAgICogQHR5cGUgez99XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBPcHRHcm91cENvbXBvbmVudC5wcm90b3R5cGUuX29wdGlvbnNDaGFuZ2U7XHJcbiAgICAvKipcclxuICAgICAqIENoaWxkcmVuIG9wdGlvbnMgaW4gdGhpcyBncm91cFxyXG4gICAgICogXFxAaW50ZXJuYWxcclxuICAgICAqIEB0eXBlIHs/fVxyXG4gICAgICovXHJcbiAgICBPcHRHcm91cENvbXBvbmVudC5wcm90b3R5cGUub3B0aW9uc0NoaWxkcmVuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUZXh0IHRoYXQgaXMgZGlzcGxheWVkIGZvciB0aGlzIG9wdGlvbnMgZ3JvdXBcclxuICAgICAqIEB0eXBlIHs/fVxyXG4gICAgICovXHJcbiAgICBPcHRHcm91cENvbXBvbmVudC5wcm90b3R5cGUudGV4dDtcclxufVxyIl19