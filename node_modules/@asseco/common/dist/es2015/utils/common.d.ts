import { ValueNamePair } from '../types';
/**
 * Reverse current string and returns new reverse string
 * @param  {string} str String to be reversed
 * @returns string Reverse string
 */
export declare function reverseString(str: string): string;
/**
 * Extends one object with additional properties from other objects, supports deep extend
 * @param  {boolean|Object} deepOrObject Object to be extended or indication that deep copy should be performed
 * @param  {Object[]} objectN Objects that will be used for extending, if deep is used first here is target object
 * @returns Object Extended object with properties from other objects
 */
export declare function extend<TResult>(deepOrObject: boolean | Object, ...objectN: Object[]): TResult;
/**
 * Merges properties of two separate object into new third one
 * @param  {{[key: string]: any}} source1 First source object
 * @param  {{[key: string]: any}} source2 Second source object
 * @returns Object Object containing properties from source1 and source2 objects
 */
export declare function merge(source1: {
    [key: string]: any;
}, source2: {
    [key: string]: any;
}): Object;
/**
 * Generates random string consisting from lowercase letters
 * @param  {number} length Length of generated string
 * @returns number Generated string
 */
export declare function generateId(length: number): string;
/**
 * Converts string in that way that first letter will be lowerCase
 * @param  {string} text Text to be converted
 */
export declare function firstToLowerCase(text: string): string;
/**
 * Gets indication whether is child descendand of parent
 * @param parent Parent to be tested
 * @param child Child to be looked for
 */
export declare function isDescendant(parent: HTMLElement, child: HTMLElement): boolean;
/**
 * Computes offset of element against document
 * @param element Html element which offset is counted
 * @param doc Html document to be used for extracting scroll offset
 */
export declare function offset(element: HTMLElement, doc?: HTMLDocument): {
    top: number;
    left: number;
    bottom: number;
    right: number;
};
/**
 * Converts html string into html DOM
 * @param html Html string to be converted to DOM
 * @param doc Optional html document to be used
 */
export declare function htmlToElement(html: string, doc?: HTMLDocument): HTMLElement;
/**
 * Extract values from enum type
 * @param enumType Enum type that will have extracted values
 */
export declare function getEnumValues(enumType: any): ValueNamePair[];
/**
 * Safely returns value from object property using string expression
 * @param object Object which property value will be obtained
 * @param expression Expression for obtaining value
 */
export declare function getValue(object: any, expression: string): any;
/**
 * Sets value to objects property using string expression
 * @param object Object which property value will be set
 * @param value Value that will be set
 * @param expression Expression for setting value
 */
export declare function setValue(object: any, value: any, expression: string): void;
