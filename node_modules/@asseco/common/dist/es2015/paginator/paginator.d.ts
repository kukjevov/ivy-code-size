/**
 * Class for paging evaluation
 */
export declare class Paginator {
    /**
     * First page set to paginator
     */
    private _base;
    /**
     * Number of items per page
     */
    private _itemsPerPage;
    /**
     * Index of current page
     */
    private _page;
    /**
     * Number of all items to be used for counting paging
     */
    private _itemCount;
    /**
     * Sets current page number.
     * @param  {number} page Page number
     * @returns Paginator Provides a fluent interface
     */
    setPage(page: number): Paginator;
    /**
     * Returns current page number.
     * @returns number Current page number
     */
    getPage(): number;
    GetFirstPage(): number;
    /**
     * Returns last page number.
     * @returns number Number of last page
     */
    getLastPage(): number;
    /**
     * Sets first page (base) number.
     * @param  {number} baseVal Index of base page
     * @returns Paginator Provides a fluent interface
     */
    setBase(baseVal: number): Paginator;
    /**
     * Returns first page (base) number.
     * @returns number Index of base page
     */
    getBase(): number;
    /**
     * Gets indication whether is the current page the first one?
     * @returns boolean True if current page is first one
     */
    isFirst(): boolean;
    /**
     * Gets indication whether is the current page the last one?
     * @returns boolean True if current page is last one, otherwise false
     */
    isLast(): boolean;
    /**
     * Returns the total number of pages.
     * @returns number Total number of pages
     */
    getPageCount(): number;
    /**
     * Sets the number of items to display on a single page.
     * @param  {number} itemsPerPage Number of items per page
     * @returns Paginator Provides a fluent interface
     */
    setItemsPerPage(itemsPerPage: number): Paginator;
    /**
     * Returns the number of items to display on a single page.
     * @returns number Number of items per one page
     */
    getItemsPerPage(): number;
    /**
     * Sets the total number of items.
     * @param  {number} itemCount Count of items or -1 for infinity
     * @returns Paginator Provides a fluent interface
     */
    setItemCount(itemCount: number): Paginator;
    /**
     * Returns the total number of items.
     * @returns number Total number of items
     */
    getItemCount(): number;
    /**
     * Returns the absolute index of the first item on current page.
     * @returns number Absolute index of first item
     */
    getOffset(): number;
    /**
     * Returns the absolute index of the first item on current page in countdown paging.
     * @returns number Countdown offset of first item
     */
    getCountdownOffset(): number;
    /**
     * Returns the number of items on current page.
     * @returns number Number of items on page
     */
    getLength(): number;
    /**
     * Gets indexes for items on current page (zero-based indexes)
     * @returns number Array of items indexes
     */
    getIndexesPerPage(): number[];
    /**
     * Gets list of page numbers with specified dispersion
     * @param  {number} dispersion Number identifying dispersion
     * @returns number Page numbers according specified dispersion
     */
    getPagesWithDispersion(dispersion: number): number[];
    /**
     * Gets list of page numbers with specified dispersion, pages are trimmed if current page is near beginning or end
     * @param  {number} dispersion Number identifying dispersion
     * @returns number Page numbers according specified dispersion
     */
    getPagesWithTrimDispersion(dispersion: number): number[];
    /**
     * Gets list of page numbers generated with uniform distribution
     * @param  {number} numberOfPages Number of pages that are going to be uniformly distributed between first and last page (including)
     * @returns number Uniformly distributed page numbers
     */
    getPagesWithUniformDistribution(numberOfPages: number): number[];
    /**
     * Returns zero-based page number.
     * @returns number Zero-based page number
     */
    protected getPageIndex(): number;
}
