{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@angular/core/esm2015/src/util/global.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/@angular/core/esm2015/src/change_detection/constants.js","webpack:///./node_modules/@angular/core/esm2015/src/util/property.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/fields.js","webpack:///./node_modules/@angular/core/esm2015/src/compiler/compiler_facade.js","webpack:///./node_modules/@angular/core/esm2015/src/util/stringify.js","webpack:///./node_modules/@angular/core/esm2015/src/di/forward_ref.js","webpack:///./node_modules/@angular/core/esm2015/src/interface/type.js","webpack:///./node_modules/@angular/core/esm2015/src/util/decorators.js","webpack:///./node_modules/@angular/core/esm2015/src/reflection/reflection_capabilities.js","webpack:///./node_modules/@angular/core/esm2015/src/di/metadata.js","webpack:///./node_modules/@angular/core/esm2015/src/di/jit/util.js","webpack:///./node_modules/@angular/core/esm2015/src/metadata/resource_loading.js","webpack:///./node_modules/@angular/core/esm2015/src/metadata/view.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/empty.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/util/misc_utils.js","webpack:///./node_modules/@angular/core/esm2015/src/di/interface/defs.js","webpack:///./node_modules/@angular/core/esm2015/src/di/interface/injector.js","webpack:///./node_modules/@angular/core/esm2015/src/di/injector_compatibility.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/definition.js","webpack:///./node_modules/@angular/core/esm2015/src/util/closure.js","webpack:///./node_modules/@angular/core/esm2015/src/util/errors.js","webpack:///./node_modules/@angular/core/esm2015/src/errors.js","webpack:///./node_modules/@angular/core/esm2015/src/error_handler.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/bindings.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/interfaces/context.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/interfaces/view.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/interfaces/container.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/util/view_utils.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/context_discovery.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/interfaces/injector.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/hooks.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/state.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/util/injector_utils.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/util/view_traversal_utils.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/di.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/errors.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/interfaces/renderer.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/interfaces/projection.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/node_manipulation.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/tokens.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/styling/player_factory.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/styling/core_player_handler.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/styling/util.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/styling/class_and_style_bindings.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/node_selector_matcher.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/node_util.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/util/attrs_utils.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/instructions.js","webpack:///./node_modules/@angular/core/esm2015/src/linker/ng_module_factory.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/view_ref.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/view_engine_compatibility.js","webpack:///./node_modules/@angular/core/esm2015/src/linker/element_ref.js","webpack:///./node_modules/@angular/core/esm2015/src/linker/template_ref.js","webpack:///./node_modules/@angular/core/esm2015/src/interface/simple_change.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/features/ng_onchanges_feature.js","webpack:///./node_modules/@angular/core/esm2015/src/di/injection_token.js","webpack:///./node_modules/@angular/core/esm2015/src/di/injector.js","webpack:///./node_modules/@angular/core/esm2015/src/di/r3_injector.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/di_setup.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/features/inherit_definition_feature.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/pure_function.js","webpack:///./node_modules/@angular/core/esm2015/src/di/scope.js","webpack:///./node_modules/@angular/core/esm2015/src/util/symbol.js","webpack:///./node_modules/@angular/core/esm2015/src/change_detection/change_detection_util.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/pipe.js","webpack:///./node_modules/tslib/tslib.es6.js","webpack:///./node_modules/rxjs/_esm5/internal/util/isFunction.js","webpack:///./node_modules/rxjs/_esm5/internal/config.js","webpack:///./node_modules/rxjs/_esm5/internal/util/hostReportError.js","webpack:///./node_modules/rxjs/_esm5/internal/Observer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/tryCatch.js","webpack:///./node_modules/rxjs/_esm5/internal/util/isArray.js","webpack:///./node_modules/rxjs/_esm5/internal/util/errorObject.js","webpack:///./node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js","webpack:///./node_modules/rxjs/_esm5/internal/Subscription.js","webpack:///./node_modules/rxjs/_esm5/internal/util/isObject.js","webpack:///./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js","webpack:///./node_modules/rxjs/_esm5/internal/Subscriber.js","webpack:///./node_modules/rxjs/_esm5/internal/symbol/observable.js","webpack:///./node_modules/rxjs/_esm5/internal/Observable.js","webpack:///./node_modules/rxjs/_esm5/internal/util/toSubscriber.js","webpack:///./node_modules/rxjs/_esm5/internal/util/canReportError.js","webpack:///./node_modules/rxjs/_esm5/internal/util/pipe.js","webpack:///./node_modules/rxjs/_esm5/internal/util/noop.js","webpack:///./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js","webpack:///./node_modules/rxjs/_esm5/internal/SubjectSubscription.js","webpack:///./node_modules/rxjs/_esm5/internal/Subject.js","webpack:///./node_modules/@angular/core/esm2015/src/event_emitter.js","webpack:///./node_modules/@angular/core/esm2015/src/linker/query_list.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/query.js","webpack:///./node_modules/@angular/core/esm2015/src/util/is_dev_mode.js","webpack:///./node_modules/@angular/core/esm2015/src/sanitization/inert_body.js","webpack:///./node_modules/@angular/core/esm2015/src/sanitization/url_sanitizer.js","webpack:///./node_modules/@angular/core/esm2015/src/sanitization/html_sanitizer.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/interfaces/i18n.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/util/array_utils.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/i18n.js","webpack:///./node_modules/@angular/core/esm2015/src/util/assert.js","webpack:///./node_modules/@angular/core/esm2015/src/sanitization/bypass.js","webpack:///./node_modules/@angular/core/esm2015/src/sanitization/security.js","webpack:///./node_modules/@angular/core/esm2015/src/sanitization/style_sanitizer.js","webpack:///./node_modules/@angular/core/esm2015/src/sanitization/sanitization.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/jit/environment.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/view_engine_compatibility_prebound.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/features/providers_feature.js","webpack:///./node_modules/@angular/core/esm2015/src/linker/component_factory.js","webpack:///./node_modules/@angular/core/esm2015/src/linker/component_factory_resolver.js","webpack:///./node_modules/@angular/core/esm2015/src/render/api.js","webpack:///./node_modules/@angular/core/esm2015/src/version.js","webpack:///./node_modules/@angular/core/esm2015/src/change_detection/change_detector_ref.js","webpack:///./node_modules/@angular/core/esm2015/src/linker/view_container_ref.js","webpack:///./node_modules/@angular/core/esm2015/src/view/util.js","webpack:///./node_modules/@angular/core/esm2015/src/view/ng_module.js","webpack:///./node_modules/@angular/core/esm2015/src/view/provider.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/component.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/component_ref.js","webpack:///./node_modules/@angular/core/esm2015/src/linker/ng_module_factory_loader.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/jit/module.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/jit/directive.js","webpack:///./node_modules/@angular/core/esm2015/src/metadata/directives.js","webpack:///./node_modules/@angular/core/esm2015/src/render3/jit/pipe.js","webpack:///./node_modules/@angular/common/esm2015/src/directives/ng_if.js","webpack:///./lib/hello-world.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","global","__webpack_exports__","_global","__globalThis","globalThis","__window","window","__self","self","WorkerGlobalScope","getGlobal","g","this","Function","eval","e","ChangeDetectionStrategy","OnPush","Default","ChangeDetectorStatus","CheckOnce","Checked","CheckAlways","Detached","Errored","Destroyed","getClosureSafeProperty","objWithPropertyToExtract","Error","fillProperties","target","source","NG_COMPONENT_DEF","ngComponentDef","NG_DIRECTIVE_DEF","ngDirectiveDef","NG_PIPE_DEF","ngPipeDef","NG_MODULE_DEF","ngModuleDef","NG_BASE_DEF","ngBaseDef","NG_ELEMENT_ID","__NG_ELEMENT_ID__","getCompilerFacade","globalNg","ɵcompilerFacade","stringify","token","Array","map","join","overriddenName","res","newLineIndex","indexOf","substring","__forward_ref__","forwardRef","forwardRefFn","toString","resolveForwardRef","type","fn","Type","isType","v","ANNOTATIONS","PARAMETERS","PROP_METADATA","makeDecorator","props","parentClass","additionalProcessing","typeFn","metaCtor","makeMetadataCtor","DecoratorFactory","args","annotationInstance","cls","push","ngMetadataName","annotationCls","values","propName","makeParamDecorator","ParamDecoratorFactory","apply","ParamDecorator","annotation","unusedKey","index","parameters","length","makePropDecorator","PropDecoratorFactory","decoratorInstance","constructor","meta","unshift","DELEGATE_CTOR","INHERITED_CLASS","INHERITED_CLASS_WITH_CTOR","reflection_capabilities_ReflectionCapabilities","[object Object]","reflect","_reflect","paramTypes","paramAnnotations","result","concat","parentCtor","typeStr","exec","tsickleCtorParams","ctorParameters","ctorParam","convertTsickleDecoratorIntoMetadata","decorators","_zipTypesAndAnnotations","getOwnMetadata","fill","undefined","getParentCtor","_ownParameters","typeOrFunc","annotations","ownAnnotations","_ownAnnotations","propMetadata","propDecorators","keys","forEach","prop","parentPropMetadata","ownPropMetadata","_ownPropMetadata","lcProperty","moduleUrl","members","runtime","enumIdentifier","decoratorInvocations","decoratorInvocation","ctor","parentProto","getPrototypeOf","Inject","Optional","Self","SkipSelf","Host","Attribute","attributeName","getReflect","reflectDependencies","deps","compiler","dep","host","optional","resolved","R3ResolvedDependencyType","Token","skipSelf","setTokenAndResolvedType","isArray","j","param","__proto__","reflectDependency","convertDependencies","componentResourceResolutionQueue","Set","componentNeedsResolution","component","templateUrl","template","styleUrls","ViewEncapsulation","Emulated","Native","None","ShadowDom","EMPTY_OBJ","EMPTY_ARRAY","renderStringify","defaultScheduler","requestAnimationFrame","setTimeout","INTERPOLATION_DELIMITER","defineInjectable","opts","providedIn","factory","getInjectableDef","NG_INJECTABLE_DEF","getInjectorDef","NG_INJECTOR_DEF","ngInjectableDef","ngInjectorDef","InjectFlags","_injectImplementation","_currentInjector","setInjectImplementation","impl","previous","inject","flags","injectRootLimpMode","notFoundValue","injectableDef","injectArgs","types","arg","_renderCompCount","defineComponent","componentDefinition","typePrototype","declaredInputs","def","providersResolver","consts","vars","ngContentSelectors","hostBindings","contentQueries","inputs","outputs","exportAs","onChanges","onInit","ngOnInit","doCheck","ngDoCheck","afterContentInit","ngAfterContentInit","afterContentChecked","ngAfterContentChecked","afterViewInit","ngAfterViewInit","afterViewChecked","ngAfterViewChecked","onDestroy","ngOnDestroy","onPush","changeDetection","directiveDefs","pipeDefs","selectors","viewQuery","features","data","encapsulation","id","styles","_","setInput","schemas","directiveTypes","feature","pipeTypes","invertObject","extractDirectiveDef","extractPipeDef","getComponentDef","getDirectiveDef","getPipeDef","obj","secondary","newLookup","minifiedKey","publicName","declaredName","defineDirective","getNgModuleDef","throwNotFound","ERROR_DEBUG_CONTEXT","ERROR_ORIGINAL_ERROR","ERROR_LOGGER","getDebugContext","error","getOriginalError","defaultErrorLogger","console","error_handler_ErrorHandler","_console","originalError","_findOriginalError","context","_findContext","errorLogger","getErrorLogger","updateBinding","lView","bindingIndex","getBinding","bindingUpdated","b","a","bindingUpdated2","exp1","exp2","different","bindingUpdated3","exp3","bindingUpdated4","exp4","MONKEY_PATCH_KEY_NAME","HOST","TVIEW","FLAGS","PARENT","NEXT","QUERIES","T_HOST","BINDING_INDEX","CLEANUP","CONTEXT","INJECTOR","RENDERER_FACTORY","RENDERER","SANITIZER","CHILD_HEAD","CHILD_TAIL","CONTENT_QUERIES","DECLARATION_VIEW","PREORDER_HOOK_FLAGS","HEADER_OFFSET","TYPE","ACTIVE_INDEX","VIEWS","NATIVE","unwrapRNode","isLView","isLContainer","getNativeByIndex","getNativeByTNode","tNode","hostView","getTNode","view","loadInternal","getComponentViewByIndex","nodeIndex","slotValue","view_utils_isComponent","isComponentDef","isRootView","readPatchedLView","readPatchedData","viewAttachedToContainer","resetPreOrderHookFlags","attachPatchData","TNODE","PARENT_INJECTOR","INJECTOR_BLOOM_PARENT_SIZE","NO_PARENT_INJECTOR","NodeInjectorFactory","isViewProvider","injectImplementation","resolving","canSeeViewProviders","injectImpl","FactoryPrototype","registerPreOrderHooks","directiveIndex","directiveDef","tView","initialPreOrderHooksLength","initialPreOrderCheckHooksLength","preOrderHooks","preOrderCheckHooks","registerPostOrderHooks","firstTemplatePass","directiveStart","end","directiveEnd","contentHooks","contentCheckHooks","viewHooks","viewCheckHooks","destroyHooks","executePreOrderHooks","currentView","checkNoChangesMode","currentNodeIndex","executeHooks","firstPassHooks","checkHooks","initPhaseState","hooksToCall","arr","initPhase","nodeIndexLimit","lastNodeIndexFound","callHook","callHooks","isInitHook","hook","directive","elementDepthCount","bindingsEnabled","state_previousOrParentTNode","state_isParent","state_lView","currentDirectiveDef","setCurrentDirectiveDef","getLView","getPreviousOrParentTNode","setPreviousOrParentTNode","setTNodeAndViewData","getIsParent","setIsParent","isCreationMode","state_contextLView","state_checkNoChangesMode","getCheckNoChangesMode","setCheckNoChangesMode","state_bindingRootIndex","getBindingRoot","setBindingRoot","currentQueryIndex","getCurrentQueryIndex","setCurrentQueryIndex","enterView","newView","hostTNode","oldView","bindingStartIndex","leaveView","hasParentInjector","parentLocation","getParentInjectorIndex","getParentInjectorViewOffset","getParentInjectorView","location","startView","viewOffset","parentView","getLViewParent","parent","findComponentView","rootTNode","getRootContext","viewOrComponent","componentOrLView","getRootView","includeViewProviders","setIncludeViewProviders","oldValue","BLOOM_MASK","BLOOM_SIZE","nextNgElementId","getOrCreateNodeInjectorForNode","existingInjectorIndex","getInjectorIndex","injectorIndex","insertBloom","blueprint","parentLoc","getParentInjectorLocation","parentIndex","parentLView","parentData","footer","diPublicInInjector","charCodeAt","bloomBit","mask","b6","b5","tData","bloomAdd","getOrCreateInjectable","bloomHash","tokenId","bloomHashBitOrFactory","savePreviousOrParentTNode","saveLView","NodeInjector","previousTView","hostTElementNode","shouldSearchParent","bloomHasToken","instance","searchTokensOnInjector","NOT_FOUND","moduleInjector","previousInjectImplementation","currentTView","injectableIdx","locateDirectiveOrProvider","getNodeInjectable","canAccessViewProviders","isHostSpecialCase","nodeProviderIndexes","providerIndexes","tInjectables","injectablesStart","directivesStart","cptViewProvidersCount","endIndex","providerTokenOrDef","dirDef","lData","previousIncludeViewProviders","injectorView","isFirstHostTNode","_tNode","_lView","getFactoryOf","typeAny","throwMultipleComponentError","tagName","RendererStyleFlags3","Important","DashCase","isProceduralRenderer","renderer","domRendererFactory3","createRenderer","document","NG_PROJECT_AS_ATTR_NAME","getLContainer","embeddedView","container","getContainerRenderParent","tViewNode","nativeParentNode","projectionNodeStack","walkTNodeTree","viewToWalk","action","renderParent","beforeNode","projectionNodeIndex","nextTNode","executeNodeAction","nodeOrContainer","lContainer","node","componentView","head","nativeNode","child","next","nativeInsertBefore","nativeRemoveNode","createTextNode","createText","addRemoveViewFromContainer","insertMode","insertView","views","splice","detachView","removeIndex","viewToDetach","removeView","destroyLView","destroyNode","rootView","lViewOrLContainer","cleanUpView","getParentState","destroyViewTree","executeOnDestroys","tCleanup","lCleanup","idxOrTargetGetter","useCaptureOrSubIdx","removeEventListener","unsubscribe","cleanupFn","removeListeners","destroy","insertBefore","nativeAppendOrInsertBefore","appendChild","nativeAppendChild","parentNode","childEl","childTNode","getHighestElementOrICUContainer","getHostNative","getRenderParent","anchorNode","parentTNode","getBeforeNodeForView","getNativeAnchorNode","containerNative","viewTNode","rNode","isHostElement","nativeParent","removeChild","nativeRemoveChild","appendProjectedNode","projectedTNode","tProjectionNode","projectionView","native","ngContainerChildTNode","NO_CHANGE","BoundPlayerFactory","CorePlayerHandler","_players","player","state","play","ANIMATION_PROP_PREFIX","createEmptyStylingContext","wrappedElement","sanitizer","initialStyles","initialClasses","allocateDirectiveIntoContext","directiveRef","dirs","getStylingContext","viewData","storageIndex","wrapper","stylingTemplate","element","templateStyleContext","slice","allocStylingContext","isAnimationProp","hasClassInput","hasStyleInput","addPlayerInternal","playerContext","rootContext","playerContextIndex","ref","addEventListener","playerHandler","queuePlayer","initializeStaticContext","attrs","stylingStartIndex","patchContextWithStaticAttrs","attrsStylingStartIndex","detectedIndex","getDirectiveRegistryValuesIndexOf","attr","patchInitialStylingValue","initialStyling","directiveOwnerIndex","allowValueChange","addOrUpdateStaticStyle","renderInitialStyles","renderInitialStylingValues","renderInitialClasses","initialStylingValues","isEntryClassBased","setClass","setStyle","getMatchingBindingIndex","bindingName","start","class_and_style_bindings_getProp","patchStylingMapIntoContext","playerBuilderIndex","ctxStart","ctxEnd","cacheValue","entryIsClassBased","dirty","cacheIndex","cachedValues","ownershipValuesStartIndex","existingCachedValueCount","valuesEntryShapeChange","totalUniqueValues","totalNewAllocatedSlots","applyAllProps","ctxIndex","totalRemainingProperties","currentProp","mapProp","normalizedProp","hyphenate","currentValue","getValue","currentDirectiveIndex","getDirectiveIndexFromEntry","currentFlag","getPointers","hasValueChanged","setValue","setPlayerBuilderIndex","hasInitialValueChanged","setDirty","getStyleSanitizer","propertiesLoop","isInsideOwnershipArea","distantCtxDirectiveIndex","distantCtxPlayerBuilderIndex","getPlayerBuilderIndex","distantCtxValue","distantCtxFlag","swapMultiContextEntries","flag","prepareInitialFlag","insertNewMultiProperty","ctxValue","ctxFlag","startPosition","endPosition","totalValues","dirtyFutureValues","nextStartPosition","totalStylingEntries","classCache","diffInStartPosition","updateCachedMapValue","setContextDirty","setDirectiveDirty","updateSingleStylingValue","offset","input","isClassBased","forceOverride","getDirectiveIndexFromRegistry","singleIndex","singlePropOffsetRegistryIndex","offsets","getSinglePropIndexValue","currValue","currFlag","currDirective","playerBuilder","ClassAndStylePlayerBuilder","currPlayerIndex","playerBuildersAreDirty","hasPlayerBuilderChanged","newIndex","setPlayerBuilder","setSanitizeFlag","indexForMulti","getMultiOrSingleIndex","valueForMulti","multiDirty","singleDirty","valueExists","setContextPlayersDirty","store","style","setProperty","removeStyle","removeProperty","className","add","addClass","removeClass","remove","isDirtyYes","adjustedIndex","isDirty","isClassBasedValue","isSanitizable","pointers","configFlag","staticIndex","dynamicIndex","getInitialValue","getInitialIndex","getMultiClassesStartIndex","getMultiStylesStartIndex","setProp","builder","insertionIndex","directiveOwnerPointers","getPlayerBuilder","setFlag","indexA","indexB","tmpValue","tmpProp","tmpFlag","tmpPlayerBuilderIndex","tmpDirectiveIndex","flagA","flagB","singleIndexA","_flag","singleIndexB","classBased","playerIndex","doShift","initialIndexForSingle","updateSinglePointerValues","initialIndex","getInitialStylingValuesIndexOf","newValue","initialValue","_element","_type","_values","_dirty","_factory","currentPlayer","isFirstRender","classesStartIndex","registerMultiMapEntry","directives","keyValues","dirtyYes","currentDirectiveOwner","newDirectiveOwner","getInitialClassNameValue","initialClassValues","readCachedMapValue","isMultiValueCacheHit","replace","match","charAt","toLowerCase","count","limit","staticStyles","NG_TEMPLATE_SELECTOR","isCssClassMatching","nodeClassAttrVal","cssClassToMatch","nodeClassesLen","matchIndex","matchEndIdx","hasTagAndTypeMatch","currentSelector","isProjectionMode","isNodeMatchingSelector","selector","nodeAttrs","selectOnlyMarkerIdx","skipToNextSelector","current","isPositive","selectorAttrValue","readClassValueFromTNode","attrIndexInNode","findAttrIndexInNode","nodeAttrValue","compareAgainstClassName","selectOnlyMode","maybeAttrName","isNodeMatchingSelectorList","matchingSelectorIndex","textSelectors","ngProjectAsAttrVal","ngProjectAsAttrIdx","getProjectAsAttrValue","applyOnCreateInstructions","fns","onElementCreationFns","setUpAttributes","isProc","namespaceURI","attrName","attrVal","setAttribute","setAttributeNS","attrsStylingIndexOf","startIndex","val","_CLEAN_PROMISE","Promise","resolve","refreshDescendantViews","creationMode","dynamicViewData","renderEmbeddedTemplate","refreshDynamicEmbeddedViews","refreshContentQueries","expandoInstructions","bindingRootIndex","expandoStartIndex","currentElementIndex","instruction","providerCount","setHostBindings","staticContentQueries","components","componentRefresh","refreshChildComponents","directiveDefIdx","createLView","tHostNode","rendererFactory","injector","createNodeAtIndex","previousOrParentTNode","isParent","createTNode","firstChild","assignTViewNodeToLView","tParentNode","viewToRender","_isParent","_previousOrParentTNode","tickRootContext","namespaceHTML","getRenderFlags","renderComponentOrTemplate","templateFn","normalExecutionPath","creationModeIsActive","begin","_currentNamespace","executeContentQueries","isContentQueryHost","elementStart","localRefs","elementCreate","lastAttrIndex","stylingAttrsStartIndex","createDirectivesAndLocals","inputData","initializeTNodeInputs","currentQueries","addNode","clone","overriddenRenderer","rendererToUse","createElement","createElementNS","localRefExtractor","exportsMap","","initNodeFlags","generateExpandoInstructionBlock","baseResolveDirective","saveNameToExportMap","localNames","cacheMatchingLocalNames","resolveDirectives","registry","directiveRegistry","matches","findDirectiveMatches","addComponentLogic","postProcessDirective","instantiateAllDirectives","expando","invokeHostBindingsInCreationMode","invokeDirectivesHostBindings","localIndex","saveResolvedLocalsInData","getOrCreateTView","pipes","ngPrivateData","createTView","viewIndex","initialViewLength","createViewBlueprint","viewQueryStartIndex","staticViewQueries","cleanup","pipeRegistry","locateHostElement","elementOrSelector","defaultRenderer","selectRootElement","querySelector","instructions_listener","eventName","listenerFn","useCapture","eventTargetResolver","listenerInternal","loadRendererFn","getCleanup","lCleanupIndex","wrapListener","listen","generatePropertyAliases","propsLength","subscription","subscribe","idx","elementEnd","stylingContext","setInputsForProperty","initialStyleValues","styleString","getInitialStyleStringValue","flushHooksUpTo","elementAttribute","namespace","removeAttribute","strValue","elementProperty","nativeOnly","elementPropertyInternal","ATTR_TO_PROP","class","for","formaction","innerHtml","readonly","tabindex","dataValue","childComponentLView","markDirtyIfOnPush","lastBindingIndex","bindingMetadata","propertyMetadataStartIndex","propertyMetadataEndIndex","savePropertyDebugData","tParent","initialInputs","tViews","projection","privateName","direction","propStore","isInput","defs","propertyAliasMap","internalName","initElementStyling","classBindingNames","styleBindingNames","styleSanitizer","directiveRefs","nextOffsetInsertionIndex","findOrPatchDirectiveIntoRegistry","entries","newEntries","hyphenateEntries","singlePropOffsetValues","totalCurrentClassBindings","totalCurrentStyleBindings","cachedClassMapValues","cachedStyleMapValues","stylesOffset","singleClassesStartIndex","multiStylesStartIndex","multiClassesStartIndex","currentSinglePropsLength","insertionOffset","filteredStyleBindingNames","singlePropIndex","filteredClassBindingNames","totalStyles","totalClasses","totalNewEntries","isMultiBased","singleOrMultiIndex","multiIndex","initialValuesToLookup","indexForInitial","initialFlag","newStylesSpaceAllocationSize","newClassesSpaceAllocationSize","cachedStyleMapIndex","cachedClassMapIndex","updateContextWithBindings","instructions_text","textNative","textBinding","textContent","previousExpandoLength","directiveCount","elementIndex","postProcessBaseDirective","initialInputData","minifiedInputName","attrValue","generateInitialInputs","setInputsFromAttrs","queueComponentIndexForCheck","numberOfDirectives","directiveFactory","nodeInjectorFactory","addToViewTree","createLContainer","hostNative","isForViewContainerRef","tContainerNode","containerInternal","addTContainerToQueries","comment","createComment","queries","adjustedElementIndex","componentTView","syncViewWithBlueprint","checkView","wrapWithPreventDefault","markViewDirty","preventDefault","returnValue","handleError","rootComponent","detectChangesInternal","detectChangesInRootView","hostTView","executeViewQueryFn","storeBindingMetadata","interpolation1","prefix","v0","suffix","instructions_store","load","directiveInject","CLEAN_PROMISE","getTViewCleanup","loadComponentRenderer","errorHandler","ng_module_factory_NgModuleRef","view_ref_ViewRef","_context","_componentIndex","_appRef","_viewContainerRef","_tViewNode","rootNodes","collectNativeNodes","tNodeChild","componentHost","currentProjectedNode","_lookUpContext","destroyed","detach","callback","checkNoChangesInternal","vcRef","appRef","view_ref_RootViewRef","_view","super","checkNoChangesInRootView","R3ElementRef","R3TemplateRef","R3ViewContainerRef","createElementRef","ElementRefToken","createTemplateRef","TemplateRefToken","_declarationParentView","elementRef","_tView","_hostLContainer","_injectorIndex","declarationView","createView","createEmbeddedViewAndNode","viewRef","hostContainer","ElementRef","nativeElement","SWITCH_ELEMENT_REF_FACTORY","TemplateRef","SWITCH_TEMPLATE_REF_FACTORY","SimpleChange","previousValue","firstChange","NgOnChangesFeature","ngInherit","NgOnChangesFeatureImpl","definition","ngOnChanges","ngOnChangesSetInput","simpleChangesStore","getSimpleChangesStore","SIMPLE_CHANGES_STORE","setSimpleChangesStore","previousChange","injection_token_InjectionToken","_desc","options","SOURCE","_THROW_IF_NOT_FOUND","injector_INJECTOR","Injector","injector_StaticInjector","providers","THROW_IF_NOT_FOUND","NULL","IDENT","EMPTY","CIRCULAR","MULTI_PROVIDER_FN","arguments","USE_VALUE","provide","String","useValue","NG_TOKEN_PATH","NG_TEMP_TOKEN_PATH","NULL_INJECTOR","NEW_LINE","NO_NEW_LINE","records","_records","Map","set","useNew","recursivelyProcessProviders","provider","staticError","resolvedProvider","providerDeps","useExisting","computeDeps","useFactory","useClass","resolveProvider","multi","multiProvider","multiProviderMixError","record","tryResolveToken","depRecords","depRecord","childRecord","resolveToken","injectorErrorName","tokenPath","message","formatError","catchInjectorError","tokens","text","substr","parts","JSON","injectableDefOrInjectorDefFactory","injectorDef","paramLength","isTypeProvider","di_setup_resolveProvider","lInjectablesBlueprint","isComponent","providerFactory","ngModuleType","classRef","ngModuleDetail","providerToFactory","beginIndex","existingFactoryIndex","existingProvidersFactoryIndex","existingViewProvidersFactoryIndex","doesViewProvidersFactoryExist","factoryFn","f","componentProviders","multiFactoryAdd","multiFactory","multiViewProvidersFactoryResolver","multiProvidersFactoryResolver","isComponentProvider","item","multiResolve","factories","componentCount","multiProviders","maybeUnwrapEmpty","pureFunction1","slotOffset","pureFn","exp","thisArg","pureFunction2","pureFunction3","pureFunction4","pureFunctionV","exps","_symbolIterator","getSymbolIterator","iterator","getOwnPropertyNames","WrappedValue","wrapped","isWrapped","isPure","pure","unwrapValue","unwrap","extendStatics","setPrototypeOf","__extends","__","isFunction","x","_enable_super_gross_mode_that_will_cause_bad_things","config","useDeprecatedSynchronousErrorHandling","hostReportError","err","tryCatchTarget","empty","closed","complete","errorObject","tryCatcher","tryCatch","UnsubscriptionErrorImpl","errors","UnsubscriptionError","Subscription_Subscription","Subscription","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","len","flattenUnsubscriptionErrors","sub","teardown","_addParent","tmp","subscriptions","subscriptionIndex","reduce","errs","rxSubscriber","Math","random","Subscriber_Subscriber","_super","Subscriber","destinationOrNext","_this","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","_parentSubscription","destination","Subscriber_SafeSubscriber","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","SafeSubscriber","_parentSubscriber","observerOrNext","__tryOrSetError","__tryOrUnsub","wrappedComplete","observable_observable","observable","Observable_Observable","Observable","_isScalar","_subscribe","lift","operator","sink","nextOrObserver","toSubscriber","_trySubscribe","observer","canReportError","warn","promiseCtor","getPromiseCtor","reject","pipe","operations","_i","prev","toPromise","ObjectUnsubscribedErrorImpl","ObjectUnsubscribedError","SubjectSubscription_SubjectSubscription","SubjectSubscription","subject","observers","subscriberIndex","Subject_SubjectSubscriber","SubjectSubscriber","Subject_Subject","Subject","hasError","thrownError","Subject_AnonymousSubject","copy","asObservable","AnonymousSubject","event_emitter_EventEmitter","isAsync","__isAsync","generatorOrNext","schedulerFn","errorFn","completeFn","query_list_QueryList","_results","changes","filter","find","init","some","flatten","list","flat","flatItem","last","first","emit","LQueries_","shallow","deep","queryList","predicate","descend","read","createQuery","shallowResults","copyQueriesToContainer","deepResults","copyQueriesToView","query_insertView","query_add","query_removeView","query","containerValues","viewValuesIdx","getIdxOfMatchingSelector","queryByReadToken","matchingIdx","queryByTemplateRef","templateRefToken","templateRefResult","queryRead","queryByTNodeType","addMatch","matchingValue","createPredicate","_valuesTree","query_query","_static","track","storeCleanupWithContext","query_viewQuery","query_contentQuery","contentQuery","tViewContentQueries","_devMode","_runModeLocked","isDevMode","InertBodyHelper","defaultDoc","inertDocument","implementation","createHTMLDocument","inertBodyElement","body","inertHtml","innerHTML","getInertBodyElement","DOMParser","_a","isDOMParserAvailable","getInertBodyElement_DOMParser","getInertBodyElement_InertDocument","getInertBodyElement_XHR","html","encodeURI","xhr","XMLHttpRequest","responseType","open","send","response","parseFromString","templateEl","documentMode","stripCustomNsAttrs","el","elAttrs","attributes","childNode","nodeType","Node","ELEMENT_NODE","nextSibling","SAFE_URL_PATTERN","DATA_URL_PATTERN","_sanitizeUrl","url","sanitizeSrcset","srcset","split","trim","tagSet","tags","merge","sets","VOID_ELEMENTS","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","BLOCK_ELEMENTS","INLINE_ELEMENTS","VALID_ELEMENTS","URI_ATTRS","SRCSET_ATTRS","HTML_ATTRS","VALID_ATTRS","SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","encodeEntities","html_sanitizer_inertBodyHelper","getTemplateContent","nodeName","isTemplateElement","content","ELEMENT_MARKER","marker","COMMENT_MARKER","addAllToArray","items","MARKER","ICU_BLOCK_REGEXP","SUBTEMPLATE_REGEXP","PH_REGEXP","BINDING_REGEXP","ICU_REGEXP","PP_MULTI_VALUE_PLACEHOLDERS_REGEXP","PP_PLACEHOLDERS_REGEXP","PP_ICU_VARS_REGEXP","PP_ICUS_REGEXP","PP_CLOSE_TEMPLATE_REGEXP","PP_TEMPLATE_ID_REGEXP","extractParts","pattern","prevPos","braceStack","results","braces","lastIndex","pos","pop","block","test","parseICUBlock","cases","icuType","mainBinding","str","binding","parseInt","blocks","throwError","removeInnerTemplateTranslation","tagMatched","inTemplate","generateBindingUpdateOpCodes","destinationNode","sanitizeFn","updateOpCodes","textParts","textValue","toMaskBit","getBindingMask","icuExpression","valueArr","i18nIndexStack","i18nIndexStackPointer","min","parentIndexStack","i18nStart","subTemplateIndex","i18nVarsCount","parentIndexPointer","createOpCodes","icuExpressions","msgParts","search","RegExp","getTranslationForTemplate","phIndex","icuNodeIndex","icuStart","tIcuIndex","hasBinding","textNodeIndex","numSlotsToAlloc","allocExpando","update","icus","i18nStartFirstPass","appendI18nNode","previousTNode","nextNode","cursor","i18nEnd","rootIndex","tI18n","visitedNodes","readCreateOpCodes","lastCreatedNode","findLastNode","removeNode","i18nEndFirstPass","createDynamicNodeAtIndex","currentTNode","opCode","textRNode","destinationNodeIndex","destinationTNode","commentValue","commentNodeIndex","commentRNode","activeCaseIndex","tagNameValue","elementNodeIndex","removedPhTNode","removedPhRNode","i18n_changeMask","shiftsCounter","Plural","Zero","One","Two","Few","Many","Other","getCaseIndex","bindingValue","resolvedCase","locale","nLike","nDecimal","floor","abs","getPluralCase","getPluralCategory","tIcus","createCodes","removeCodes","updateCodes","childIcus","nestedIcus","icuIndex","icuCase","parseIcuCase","max","unsafeHtml","opCodes","parseNodes","currentNode","nestedIcusToCreate","lowerAttrName","TEXT_NODE","COMMENT_NODE","NESTED_ICU","nestedIcuIndex","nestedIcu","nestedIcuNodeIndex","nestTIcuIndex","BRAND","allowSanitizationBypass","SecurityContext","NONE","HTML","STYLE","SCRIPT","URL","RESOURCE_URL","Sanitizer","SAFE_STYLE_VALUE","URL_RE","sanitizeStyle","unsafeStyle","getSanitizer","sanitize","urlMatch","outsideSingle","outsideDouble","hasBalancedQuotes","_sanitizeStyle","sanitizeUrl","unsafeUrl","sanitizeResourceUrl","unsafeResourceUrl","angularCoreEnv","ɵdefineBase","baseDefinition","ɵdefineComponent","ɵdefineDirective","defineInjector","imports","ɵdefineNgModule","bootstrap","declarations","transitiveCompileScopes","ɵdefinePipe","pipeDef","ɵdirectiveInject","ɵgetFactoryOf","ɵgetInheritedFactory","ɵinjectAttribute","attrNameToInject","injectAttributeImpl","ɵtemplateRefExtractor","ɵNgOnChangesFeature","ɵProvidersFeature","viewProviders","ɵInheritDefinitionFeature","superType","superDef","baseDef","writeableDef","prevHostBindings","superHostBindings","rf","ctx","prevViewQuery","superViewQuery","prevContentQueries","superContentQueries","superPrototype","ɵelementAttribute","ɵbind","ɵcontainer","ɵnextContext","level","nestingLevel","walkUpViews","nextContextImpl","ɵcontainerRefreshStart","ɵcontainerRefreshEnd","nextIndex","ɵnamespaceHTML","ɵnamespaceMathML","ɵnamespaceSVG","ɵenableBindings","ɵdisableBindings","ɵallocHostVars","hostVars","queueHostBindingForCheck","totalHostVars","prefillHostVars","ɵelementStart","ɵelementEnd","ɵelement","ɵelementContainerStart","ɵelementContainerEnd","ɵpureFunction0","ɵpureFunction1","ɵpureFunction2","ɵpureFunction3","ɵpureFunction4","ɵpureFunction5","exp5","ɵpureFunction6","exp6","ɵpureFunction7","exp7","ɵpureFunction8","exp8","ɵpureFunctionV","ɵgetCurrentView","ɵrestoreView","viewToRestore","ɵinterpolation1","ɵinterpolation2","i0","v1","ɵinterpolation3","i1","v2","ɵinterpolation4","i2","v3","ɵinterpolation5","i3","v4","ɵinterpolation6","i4","v5","ɵinterpolation7","i5","v6","ɵinterpolation8","i6","v7","ɵinterpolationV","ɵelementClassProp","classIndex","booleanOrNull","updateClassProp","ɵlistener","ɵload","ɵprojection","selectorIndex","appendProjectedNodes","projectedView","nodeToProject","ɵelementProperty","ɵcomponentHostSyntheticProperty","ɵcomponentHostSyntheticListener","ɵpipeBind1","pipeInstance","transform","ɵpipeBind2","ɵpipeBind3","ɵpipeBind4","ɵpipeBindV","ɵprojectionDef","componentNode","pData","tails","componentChild","bucketIndex","ɵpipe","pipeName","pipe_getPipeDef","ɵqueryRefresh","queryListImpl","reset","notifyOnChanges","ɵviewQuery","ɵstaticViewQuery","ɵstaticContentQuery","ɵloadViewQuery","ɵcontentQuery","ɵloadContentQuery","ɵreference","ɵelementStyling","ɵelementHostAttrs","ɵelementStylingMap","classes","classInputVal","forceClassesAsString","styleInputVal","forceStylesAsString","classesInput","stylesInput","ignoreAllClassUpdates","ignoreAllStyleUpdates","classesPlayerBuilder","stylesPlayerBuilder","classesValue","stylesValue","classNames","applyAllClasses","classesPlayerBuilderIndex","stylesPlayerBuilderIndex","multiClassesEndIndex","updateStylingMap","ɵelementStyleProp","styleIndex","valueToAdd","updateStyleProp","ɵelementStylingApply","rootOrView","totalPlayersQueued","targetDirectiveIndex","isContextDirty","isDirectiveDirty","flushPlayerBuilders","multiStartIndex","stillDirty","valueToApply","playersStartIndex","playerInsertionIndex","oldPlayer","buildPlayer","renderStyling","nothingScheduled","clean","scheduler","flushPlayers","scheduleTick","ɵflushHooksUpTo","ɵtemplate","ɵtext","ɵtextBinding","ɵembeddedViewStart","viewBlockId","containerTNode","startIdx","viewAtPositionId","scanForView","containerTViews","getOrCreateEmbeddedTView","ɵembeddedViewEnd","viewHost","ɵi18n","ɵi18nAttributes","previousElementIndex","i18nAttributesFirstPass","ɵi18nExp","expression","ɵi18nStart","ɵi18nEnd","ɵi18nApply","readUpdateOpCodes","bindingsStartIndex","changeMask","bypassCheckBit","caseCreated","checkBit","skipCodes","tIcu","icuTNode","k","removeOpCode","activeIndex","caseIndex","ɵi18nPostprocess","replacements","templateIdsStack","phs","tmpl","placeholders","placeholder","templateId","isCloseTemplateTag","currentTemplateId","_idx","shift","ɵresolveWindow","ownerDocument","defaultView","ɵresolveDocument","ɵresolveBody","ɵsetComponentScope","ɵsanitizeHtml","unsafeHtmlInput","mXSSAttempts","parsedHtml","sanitizedSomething","buf","traverseContent","startElement","chars","endElement","checkClobberedElement","elAttr","lower","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","safeHtml","sanitizeChildren","_sanitizeHtml","ɵsanitizeStyle","ɵdefaultStyleSanitizer","ɵsanitizeResourceUrl","ɵsanitizeScript","unsafeScript","ɵsanitizeUrl","ɵsanitizeUrlOrResourceUrl","tag","getUrlSanitizer","component_factory_ComponentRef","component_factory_ComponentFactory","component_factory_resolver_ComponentFactoryResolver","noComponentFactoryError","RendererFactory2","RendererStyleFlags2","Renderer2","SWITCH_RENDERER2_FACTORY","getOrCreateRenderer2","VERSION","full","major","minor","patch","ChangeDetectorRef","SWITCH_CHANGE_DETECTOR_REF_FACTORY","componentIndex","hostComponentView","createViewRef","ViewContainerRef","SWITCH_VIEW_CONTAINER_REF_FACTORY","ViewContainerRefToken","_lContainer","_hostTNode","_hostView","_viewRefs","parentInjector","startTNode","getParentInjectorTNode","templateRef","adjustedIdx","_adjustIndex","createEmbeddedView","attachToViewContainerRef","componentFactory","projectableNodes","ngModuleRef","contextInjector","ngModule","componentRef","insert","move","commentNode","createContainerRef","_tokenKeyCache","util_tokenKey","size","WeakMap","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","createRootComponentView","createRootComponent","componentDef","hostFeatures","instantiateRootComponent","createRootContext","LifecycleHooksFeature","rootTView","dirIndex","toRefArray","array","nonMinified","templateName","ROOT_CONTEXT","SCHEDULER","componentType","isBoundToModule","rootSelectorOrNode","isInternalRootView","rootViewInjector","createChainedInjector","hostRNode","rootFlags","rootLView","oldLView","tElementNode","nodesforSlot","from","component_ref_ComponentRef","_rootLView","destroyCbs","changeDetectorRef","module_EMPTY_ARRAY","moduleQueue","flushingModuleQueue","isResolvedDeclaration","declaration","every","setScopeOnDeclaredComponents","moduleType","module_flatten","mapFn","out","transitiveScopes","transitiveScopesFor","patchComponentDefWithScope","ngSelectorScope","compilation","dir","processNgModuleFn","isNgModule","scopes","exported","declared","imported","importedType","importedScope","entry","exportedType","exportedScope","directiveMetadata","metadata","typeArgumentCount","extractQueriesMetadata","isContentQuery","lifecycle","usesOnChanges","typeSourceSpan","usesInheritance","extendsDirectlyFromObject","part","isQueryAnn","queriesMeta","field","ann","isInputAnn","propertyName","piece","descendants","static","isViewQuery","assign","SWITCH_COMPILE_DIRECTIVE","SWITCH_COMPILE_COMPONENT","SWITCH_COMPILE_PIPE","updateBaseDefFromIOProp","getProp","inheritedBaseDef","initializeBaseDef","Input","bindingPropertyName","hostPropertyName","maybeQueueResolutionOfComponentResources","createParseSourceSpan","preserveWhitespaces","animations","viewQueries","interpolation","compileComponent","flushModuleScopingQueueAsMuchAsPossible","configurable","sourceMapUrl","facade","compileDirective","compilePipe","NgIf","_viewContainer","NgIfContext","_thenTemplateRef","_elseTemplateRef","_thenViewRef","_elseViewRef","ngIf","condition","$implicit","_updateView","ngIfThen","assertTemplate","ngIfElse","clear","expr","HelloWorld","_c0","_c1","HelloWorld_div_0_Template","_changeDetector","cond","detectChanges","invalidateVisuals","renderComponent"],"mappings":"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S,IAAQkxC,GAG1C,MAAA1vC,EAAyC2vB,GAAIz/B,GACrCoP,GAAYU,IAGpB,IAAAyvC,EAAArhD,MACYue,GAAgByE,EAAU5S,IAFtC,EAE4DW,KA6F5D,IAAIwwC,GAAU,EAEdC,GAAA,EAmDA,MAAAC,IACAC,KAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,KAAA,EACAC,MAAA,GAqaA,SAAAC,GAAA/D,EAAAgE,GAEA,IAAAngD,EAAAm8C,EAAAnB,MAAAr9C,QAAAwiD,GACA,QAAAngD,EACA,OAAAm8C,EAAAj+C,MACA,QAGA,MAEAkiD,EAnCA,WAGA,OA7XA,SAAAC,EAAAC,GACA,iBAAAA,IACAA,EAAAjF,SAAA,EAAuC,KAGvC,MAAAxhD,EAAA,EAEA0mD,GAAA1mD,MAAAyzB,QAAA,gBAEAl1B,EAAA40C,KAAAwT,MAAAxT,KAAAyT,IAAA5mD,IAEAyE,EAAAiiD,EAAArgD,OAEAqoC,EAAA8S,SAAAkF,EAAA,IAEAjnD,EAAA+hD,UAAAxhD,MAAAyzB,QAAA,4BAGA,OADA+yB,EAAA5I,MAAA,QAAAhqB,eAEA,SACA,UACA,SACA,UACA,UACA,SACA,UACA,SACA,UACA,UACA,UACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,SACA,UACA,SACA,UACA,UACA,SACA,SACA,UACA,SACA,SACA,UACA,SACA,SACA,SACA,UACA,UACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,SACA,SACA,SACA,SACA,SACA,UACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,WAAA5zB,EACA8lD,GAAAE,IACAF,GAAAM,MACA,SACA,SACA,SACA,SACA,SACA,OAAApmD,IAAAmzC,KAAAwT,MAAA3mD,OAAA,GAAAA,GAAA,EACA8lD,GAAAE,IACAF,GAAAM,MACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,WAAA7nD,GAAA,IAAAyB,EACA8lD,GAAAE,IACAF,GAAAM,MACA,SACA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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction getGlobal() {\n    const __globalThis = typeof globalThis !== 'undefined' && globalThis;\n    const __window = typeof window !== 'undefined' && window;\n    const __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n        self instanceof WorkerGlobalScope && self;\n    const __global = typeof global !== 'undefined' && global;\n    // Always use __globalThis if available, which is the spec-defined global variable across all\n    // environments, then fallback to __global first, because in Node tests both __global and\n    // __window may be defined and _global should be __global in that case.\n    return __globalThis || __global || __window || __self;\n}\nconst _global = getGlobal();\n/**\n * Attention: whenever providing a new value, be sure to add an\n * entry into the corresponding `....externs.js` file,\n * so that closure won't use that global for its purposes.\n */\nexport { _global as global };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvdXRpbC9nbG9iYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBV0gsU0FBUyxTQUFTO0lBQ2hCLE1BQU0sWUFBWSxHQUFHLE9BQU8sVUFBVSxLQUFLLFdBQVcsSUFBSSxVQUFVLENBQUM7SUFDckUsTUFBTSxRQUFRLEdBQUcsT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQztJQUN6RCxNQUFNLE1BQU0sR0FBRyxPQUFPLElBQUksS0FBSyxXQUFXLElBQUksT0FBTyxpQkFBaUIsS0FBSyxXQUFXO1FBQ2xGLElBQUksWUFBWSxpQkFBaUIsSUFBSSxJQUFJLENBQUM7SUFDOUMsTUFBTSxRQUFRLEdBQUcsT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQztJQUV6RCw2RkFBNkY7SUFDN0YseUZBQXlGO0lBQ3pGLHVFQUF1RTtJQUN2RSxPQUFPLFlBQVksSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLE1BQU0sQ0FBQztBQUN4RCxDQUFDO0FBRUQsTUFBTSxPQUFPLEdBQUcsU0FBUyxFQUFFLENBQUM7QUFFNUI7Ozs7R0FJRztBQUNILE9BQU8sRUFBQyxPQUFPLElBQUksTUFBTSxFQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8vIFRPRE8oanRlcGxpdHo2MDIpOiBMb2FkIFdvcmtlckdsb2JhbFNjb3BlIGZyb20gbGliLndlYndvcmtlci5kLnRzIGZpbGUgIzM0OTJcbmRlY2xhcmUgdmFyIFdvcmtlckdsb2JhbFNjb3BlOiBhbnkgLyoqIFRPRE8gIzkxMDAgKi87XG4vLyBDb21tb25KUyAvIE5vZGUgaGF2ZSBnbG9iYWwgY29udGV4dCBleHBvc2VkIGFzIFwiZ2xvYmFsXCIgdmFyaWFibGUuXG4vLyBXZSBkb24ndCB3YW50IHRvIGluY2x1ZGUgdGhlIHdob2xlIG5vZGUuZC50cyB0aGlzIHRoaXMgY29tcGlsYXRpb24gdW5pdCBzbyB3ZSdsbCBqdXN0IGZha2Vcbi8vIHRoZSBnbG9iYWwgXCJnbG9iYWxcIiB2YXIgZm9yIG5vdy5cbmRlY2xhcmUgdmFyIGdsb2JhbDogYW55IC8qKiBUT0RPICM5MTAwICovO1xuLy8gTm90IHlldCBhdmFpbGFibGUgaW4gVHlwZVNjcmlwdDogaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L3B1bGwvMjkzMzJcbmRlY2xhcmUgdmFyIGdsb2JhbFRoaXM6IGFueSAvKiogVE9ETyAjOTEwMCAqLztcblxuZnVuY3Rpb24gZ2V0R2xvYmFsKCk6IGFueSB7XG4gIGNvbnN0IF9fZ2xvYmFsVGhpcyA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzO1xuICBjb25zdCBfX3dpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdztcbiAgY29uc3QgX19zZWxmID0gdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSAmJiBzZWxmO1xuICBjb25zdCBfX2dsb2JhbCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbDtcblxuICAvLyBBbHdheXMgdXNlIF9fZ2xvYmFsVGhpcyBpZiBhdmFpbGFibGUsIHdoaWNoIGlzIHRoZSBzcGVjLWRlZmluZWQgZ2xvYmFsIHZhcmlhYmxlIGFjcm9zcyBhbGxcbiAgLy8gZW52aXJvbm1lbnRzLCB0aGVuIGZhbGxiYWNrIHRvIF9fZ2xvYmFsIGZpcnN0LCBiZWNhdXNlIGluIE5vZGUgdGVzdHMgYm90aCBfX2dsb2JhbCBhbmRcbiAgLy8gX193aW5kb3cgbWF5IGJlIGRlZmluZWQgYW5kIF9nbG9iYWwgc2hvdWxkIGJlIF9fZ2xvYmFsIGluIHRoYXQgY2FzZS5cbiAgcmV0dXJuIF9fZ2xvYmFsVGhpcyB8fCBfX2dsb2JhbCB8fCBfX3dpbmRvdyB8fCBfX3NlbGY7XG59XG5cbmNvbnN0IF9nbG9iYWwgPSBnZXRHbG9iYWwoKTtcblxuLyoqXG4gKiBBdHRlbnRpb246IHdoZW5ldmVyIHByb3ZpZGluZyBhIG5ldyB2YWx1ZSwgYmUgc3VyZSB0byBhZGQgYW5cbiAqIGVudHJ5IGludG8gdGhlIGNvcnJlc3BvbmRpbmcgYC4uLi5leHRlcm5zLmpzYCBmaWxlLFxuICogc28gdGhhdCBjbG9zdXJlIHdvbid0IHVzZSB0aGF0IGdsb2JhbCBmb3IgaXRzIHB1cnBvc2VzLlxuICovXG5leHBvcnQge19nbG9iYWwgYXMgZ2xvYmFsfTtcbiJdfQ==","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst ChangeDetectionStrategy = {\n    /**\n     * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n     * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n     * Change detection can still be explicitly invoked.\n     */\n    OnPush: 0,\n    /**\n     * Use the default `CheckAlways` strategy, in which change detection is automatic until\n     * explicitly deactivated.\n     */\n    Default: 1,\n};\nexport { ChangeDetectionStrategy };\nChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = 'OnPush';\nChangeDetectionStrategy[ChangeDetectionStrategy.Default] = 'Default';\n/** @enum {number} */\nconst ChangeDetectorStatus = {\n    /**\n     * A state in which, after calling `detectChanges()`, the change detector\n     * state becomes `Checked`, and must be explicitly invoked or reactivated.\n     */\n    CheckOnce: 0,\n    /**\n     * A state in which change detection is skipped until the change detector mode\n     * becomes `CheckOnce`.\n     */\n    Checked: 1,\n    /**\n     * A state in which change detection continues automatically until explicitly\n     * deactivated.\n     */\n    CheckAlways: 2,\n    /**\n     * A state in which a change detector sub tree is not a part of the main tree and\n     * should be skipped.\n     */\n    Detached: 3,\n    /**\n     * Indicates that the change detector encountered an error checking a binding\n     * or calling a directive lifecycle method and is now in an inconsistent state. Change\n     * detectors in this state do not detect changes.\n     */\n    Errored: 4,\n    /**\n     * Indicates that the change detector has been destroyed.\n     */\n    Destroyed: 5,\n};\nexport { ChangeDetectorStatus };\nChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = 'CheckOnce';\nChangeDetectorStatus[ChangeDetectorStatus.Checked] = 'Checked';\nChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = 'CheckAlways';\nChangeDetectorStatus[ChangeDetectorStatus.Detached] = 'Detached';\nChangeDetectorStatus[ChangeDetectorStatus.Errored] = 'Errored';\nChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = 'Destroyed';\n/**\n * Reports whether a given strategy is currently the default for change detection.\n * @see `ChangeDetectorStatus` / `ChangeDetectorRef`\n * @param {?} changeDetectionStrategy The strategy to check.\n * @return {?} True if the given strategy is the current default, false otherwise.\n */\nexport function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n    return changeDetectionStrategy == null ||\n        changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvY2hhbmdlX2RldGVjdGlvbi9jb25zdGFudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztJQWdCRTs7OztPQUlHO0lBQ0gsU0FBVTtJQUVWOzs7T0FHRztJQUNILFVBQVc7Ozs7Ozs7SUFRWDs7O09BR0c7SUFDSCxZQUFTO0lBRVQ7OztPQUdHO0lBQ0gsVUFBTztJQUVQOzs7T0FHRztJQUNILGNBQVc7SUFFWDs7O09BR0c7SUFDSCxXQUFRO0lBRVI7Ozs7T0FJRztJQUNILFVBQU87SUFFUDs7T0FFRztJQUNILFlBQVM7Ozs7Ozs7Ozs7Ozs7OztBQVVYLE1BQU0sVUFBVSxnQ0FBZ0MsQ0FBQyx1QkFBZ0Q7SUFFL0YsT0FBTyx1QkFBdUIsSUFBSSxJQUFJO1FBQ2xDLHVCQUF1QixLQUFLLHVCQUF1QixDQUFDLE9BQU8sQ0FBQztBQUNsRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5cbi8qKlxuICogVGhlIHN0cmF0ZWd5IHRoYXQgdGhlIGRlZmF1bHQgY2hhbmdlIGRldGVjdG9yIHVzZXMgdG8gZGV0ZWN0IGNoYW5nZXMuXG4gKiBXaGVuIHNldCwgdGFrZXMgZWZmZWN0IHRoZSBuZXh0IHRpbWUgY2hhbmdlIGRldGVjdGlvbiBpcyB0cmlnZ2VyZWQuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgZW51bSBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB7XG4gIC8qKlxuICAgKiBVc2UgdGhlIGBDaGVja09uY2VgIHN0cmF0ZWd5LCBtZWFuaW5nIHRoYXQgYXV0b21hdGljIGNoYW5nZSBkZXRlY3Rpb24gaXMgZGVhY3RpdmF0ZWRcbiAgICogdW50aWwgcmVhY3RpdmF0ZWQgYnkgc2V0dGluZyB0aGUgc3RyYXRlZ3kgdG8gYERlZmF1bHRgIChgQ2hlY2tBbHdheXNgKS5cbiAgICogQ2hhbmdlIGRldGVjdGlvbiBjYW4gc3RpbGwgYmUgZXhwbGljaXRseSBpbnZva2VkLlxuICAgKi9cbiAgT25QdXNoID0gMCxcblxuICAvKipcbiAgICogVXNlIHRoZSBkZWZhdWx0IGBDaGVja0Fsd2F5c2Agc3RyYXRlZ3ksIGluIHdoaWNoIGNoYW5nZSBkZXRlY3Rpb24gaXMgYXV0b21hdGljIHVudGlsXG4gICAqIGV4cGxpY2l0bHkgZGVhY3RpdmF0ZWQuXG4gICAqL1xuICBEZWZhdWx0ID0gMSxcbn1cblxuLyoqXG4gKiBEZWZpbmVzIHRoZSBwb3NzaWJsZSBzdGF0ZXMgb2YgdGhlIGRlZmF1bHQgY2hhbmdlIGRldGVjdG9yLlxuICogQHNlZSBgQ2hhbmdlRGV0ZWN0b3JSZWZgXG4gKi9cbmV4cG9ydCBlbnVtIENoYW5nZURldGVjdG9yU3RhdHVzIHtcbiAgLyoqXG4gICAqIEEgc3RhdGUgaW4gd2hpY2gsIGFmdGVyIGNhbGxpbmcgYGRldGVjdENoYW5nZXMoKWAsIHRoZSBjaGFuZ2UgZGV0ZWN0b3JcbiAgICogc3RhdGUgYmVjb21lcyBgQ2hlY2tlZGAsIGFuZCBtdXN0IGJlIGV4cGxpY2l0bHkgaW52b2tlZCBvciByZWFjdGl2YXRlZC5cbiAgICovXG4gIENoZWNrT25jZSxcblxuICAvKipcbiAgICogQSBzdGF0ZSBpbiB3aGljaCBjaGFuZ2UgZGV0ZWN0aW9uIGlzIHNraXBwZWQgdW50aWwgdGhlIGNoYW5nZSBkZXRlY3RvciBtb2RlXG4gICAqIGJlY29tZXMgYENoZWNrT25jZWAuXG4gICAqL1xuICBDaGVja2VkLFxuXG4gIC8qKlxuICAgKiBBIHN0YXRlIGluIHdoaWNoIGNoYW5nZSBkZXRlY3Rpb24gY29udGludWVzIGF1dG9tYXRpY2FsbHkgdW50aWwgZXhwbGljaXRseVxuICAgKiBkZWFjdGl2YXRlZC5cbiAgICovXG4gIENoZWNrQWx3YXlzLFxuXG4gIC8qKlxuICAgKiBBIHN0YXRlIGluIHdoaWNoIGEgY2hhbmdlIGRldGVjdG9yIHN1YiB0cmVlIGlzIG5vdCBhIHBhcnQgb2YgdGhlIG1haW4gdHJlZSBhbmRcbiAgICogc2hvdWxkIGJlIHNraXBwZWQuXG4gICAqL1xuICBEZXRhY2hlZCxcblxuICAvKipcbiAgICogSW5kaWNhdGVzIHRoYXQgdGhlIGNoYW5nZSBkZXRlY3RvciBlbmNvdW50ZXJlZCBhbiBlcnJvciBjaGVja2luZyBhIGJpbmRpbmdcbiAgICogb3IgY2FsbGluZyBhIGRpcmVjdGl2ZSBsaWZlY3ljbGUgbWV0aG9kIGFuZCBpcyBub3cgaW4gYW4gaW5jb25zaXN0ZW50IHN0YXRlLiBDaGFuZ2VcbiAgICogZGV0ZWN0b3JzIGluIHRoaXMgc3RhdGUgZG8gbm90IGRldGVjdCBjaGFuZ2VzLlxuICAgKi9cbiAgRXJyb3JlZCxcblxuICAvKipcbiAgICogSW5kaWNhdGVzIHRoYXQgdGhlIGNoYW5nZSBkZXRlY3RvciBoYXMgYmVlbiBkZXN0cm95ZWQuXG4gICAqL1xuICBEZXN0cm95ZWQsXG59XG5cbi8qKlxuICogUmVwb3J0cyB3aGV0aGVyIGEgZ2l2ZW4gc3RyYXRlZ3kgaXMgY3VycmVudGx5IHRoZSBkZWZhdWx0IGZvciBjaGFuZ2UgZGV0ZWN0aW9uLlxuICogQHBhcmFtIGNoYW5nZURldGVjdGlvblN0cmF0ZWd5IFRoZSBzdHJhdGVneSB0byBjaGVjay5cbiAqIEByZXR1cm5zIFRydWUgaWYgdGhlIGdpdmVuIHN0cmF0ZWd5IGlzIHRoZSBjdXJyZW50IGRlZmF1bHQsIGZhbHNlIG90aGVyd2lzZS5cbiAqIEBzZWUgYENoYW5nZURldGVjdG9yU3RhdHVzYFxuICogQHNlZSBgQ2hhbmdlRGV0ZWN0b3JSZWZgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmF1bHRDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneShjaGFuZ2VEZXRlY3Rpb25TdHJhdGVneTogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kpOlxuICAgIGJvb2xlYW4ge1xuICByZXR1cm4gY2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgPT0gbnVsbCB8fFxuICAgICAgY2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgPT09IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LkRlZmF1bHQ7XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport function getClosureSafeProperty(objWithPropertyToExtract) {\n    for (let key in objWithPropertyToExtract) {\n        if (objWithPropertyToExtract[key] === getClosureSafeProperty) {\n            return key;\n        }\n    }\n    throw Error('Could not find renamed property on target object.');\n}\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nexport function fillProperties(target, source) {\n    for (const key in source) {\n        if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n            target[key] = source[key];\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy91dGlsL3Byb3BlcnR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE1BQU0sVUFBVSxzQkFBc0IsQ0FBSSx3QkFBMkI7SUFDbkUsS0FBSyxJQUFJLEdBQUcsSUFBSSx3QkFBd0IsRUFBRTtRQUN4QyxJQUFJLHdCQUF3QixDQUFDLEdBQUcsQ0FBQyxLQUFLLHNCQUE2QixFQUFFO1lBQ25FLE9BQU8sR0FBRyxDQUFDO1NBQ1o7S0FDRjtJQUNELE1BQU0sS0FBSyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7QUFDbkUsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FBQyxNQUErQixFQUFFLE1BQStCO0lBQzdGLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFO1FBQ3hCLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDN0QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMzQjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENsb3N1cmVTYWZlUHJvcGVydHk8VD4ob2JqV2l0aFByb3BlcnR5VG9FeHRyYWN0OiBUKTogc3RyaW5nIHtcbiAgZm9yIChsZXQga2V5IGluIG9ialdpdGhQcm9wZXJ0eVRvRXh0cmFjdCkge1xuICAgIGlmIChvYmpXaXRoUHJvcGVydHlUb0V4dHJhY3Rba2V5XSA9PT0gZ2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eSBhcyBhbnkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG4gIHRocm93IEVycm9yKCdDb3VsZCBub3QgZmluZCByZW5hbWVkIHByb3BlcnR5IG9uIHRhcmdldCBvYmplY3QuJyk7XG59XG5cbi8qKlxuICogU2V0cyBwcm9wZXJ0aWVzIG9uIGEgdGFyZ2V0IG9iamVjdCBmcm9tIGEgc291cmNlIG9iamVjdCwgYnV0IG9ubHkgaWZcbiAqIHRoZSBwcm9wZXJ0eSBkb2Vzbid0IGFscmVhZHkgZXhpc3Qgb24gdGhlIHRhcmdldCBvYmplY3QuXG4gKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgdG8gc2V0IHByb3BlcnRpZXMgb25cbiAqIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvZiB0aGUgcHJvcGVydHkga2V5cyBhbmQgdmFsdWVzIHRvIHNldFxuICovXG5leHBvcnQgZnVuY3Rpb24gZmlsbFByb3BlcnRpZXModGFyZ2V0OiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSwgc291cmNlOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSkge1xuICBmb3IgKGNvbnN0IGtleSBpbiBzb3VyY2UpIHtcbiAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KGtleSkgJiYgIXRhcmdldC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxufVxuIl19","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getClosureSafeProperty } from '../util/property';\n/** @type {?} */\nexport const NG_COMPONENT_DEF = getClosureSafeProperty({ ngComponentDef: getClosureSafeProperty });\n/** @type {?} */\nexport const NG_DIRECTIVE_DEF = getClosureSafeProperty({ ngDirectiveDef: getClosureSafeProperty });\n/** @type {?} */\nexport const NG_PIPE_DEF = getClosureSafeProperty({ ngPipeDef: getClosureSafeProperty });\n/** @type {?} */\nexport const NG_MODULE_DEF = getClosureSafeProperty({ ngModuleDef: getClosureSafeProperty });\n/** @type {?} */\nexport const NG_BASE_DEF = getClosureSafeProperty({ ngBaseDef: getClosureSafeProperty });\n// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n * @type {?}\n */\nexport const NG_ELEMENT_ID = getClosureSafeProperty({ __NG_ELEMENT_ID__: getClosureSafeProperty });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvcmVuZGVyMy9maWVsZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFeEQsTUFBTSxPQUFPLGdCQUFnQixHQUFHLHNCQUFzQixDQUFDLEVBQUMsY0FBYyxFQUFFLHNCQUFzQixFQUFDLENBQUM7O0FBQ2hHLE1BQU0sT0FBTyxnQkFBZ0IsR0FBRyxzQkFBc0IsQ0FBQyxFQUFDLGNBQWMsRUFBRSxzQkFBc0IsRUFBQyxDQUFDOztBQUNoRyxNQUFNLE9BQU8sV0FBVyxHQUFHLHNCQUFzQixDQUFDLEVBQUMsU0FBUyxFQUFFLHNCQUFzQixFQUFDLENBQUM7O0FBQ3RGLE1BQU0sT0FBTyxhQUFhLEdBQUcsc0JBQXNCLENBQUMsRUFBQyxXQUFXLEVBQUUsc0JBQXNCLEVBQUMsQ0FBQzs7QUFDMUYsTUFBTSxPQUFPLFdBQVcsR0FBRyxzQkFBc0IsQ0FBQyxFQUFDLFNBQVMsRUFBRSxzQkFBc0IsRUFBQyxDQUFDOzs7Ozs7OztBQVF0RixNQUFNLE9BQU8sYUFBYSxHQUFHLHNCQUFzQixDQUFDLEVBQUMsaUJBQWlCLEVBQUUsc0JBQXNCLEVBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtnZXRDbG9zdXJlU2FmZVByb3BlcnR5fSBmcm9tICcuLi91dGlsL3Byb3BlcnR5JztcblxuZXhwb3J0IGNvbnN0IE5HX0NPTVBPTkVOVF9ERUYgPSBnZXRDbG9zdXJlU2FmZVByb3BlcnR5KHtuZ0NvbXBvbmVudERlZjogZ2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eX0pO1xuZXhwb3J0IGNvbnN0IE5HX0RJUkVDVElWRV9ERUYgPSBnZXRDbG9zdXJlU2FmZVByb3BlcnR5KHtuZ0RpcmVjdGl2ZURlZjogZ2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eX0pO1xuZXhwb3J0IGNvbnN0IE5HX1BJUEVfREVGID0gZ2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eSh7bmdQaXBlRGVmOiBnZXRDbG9zdXJlU2FmZVByb3BlcnR5fSk7XG5leHBvcnQgY29uc3QgTkdfTU9EVUxFX0RFRiA9IGdldENsb3N1cmVTYWZlUHJvcGVydHkoe25nTW9kdWxlRGVmOiBnZXRDbG9zdXJlU2FmZVByb3BlcnR5fSk7XG5leHBvcnQgY29uc3QgTkdfQkFTRV9ERUYgPSBnZXRDbG9zdXJlU2FmZVByb3BlcnR5KHtuZ0Jhc2VEZWY6IGdldENsb3N1cmVTYWZlUHJvcGVydHl9KTtcblxuLyoqXG4gKiBJZiBhIGRpcmVjdGl2ZSBpcyBkaVB1YmxpYywgYmxvb21BZGQgc2V0cyBhIHByb3BlcnR5IG9uIHRoZSB0eXBlIHdpdGggdGhpcyBjb25zdGFudCBhc1xuICogdGhlIGtleSBhbmQgdGhlIGRpcmVjdGl2ZSdzIHVuaXF1ZSBJRCBhcyB0aGUgdmFsdWUuIFRoaXMgYWxsb3dzIHVzIHRvIG1hcCBkaXJlY3RpdmVzIHRvIHRoZWlyXG4gKiBibG9vbSBmaWx0ZXIgYml0IGZvciBESS5cbiAqL1xuLy8gVE9ETyhtaXNrbyk6IFRoaXMgaXMgd3JvbmcuIFRoZSBOR19FTEVNRU5UX0lEIHNob3VsZCBuZXZlciBiZSBtaW5pZmllZC5cbmV4cG9ydCBjb25zdCBOR19FTEVNRU5UX0lEID0gZ2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eSh7X19OR19FTEVNRU5UX0lEX186IGdldENsb3N1cmVTYWZlUHJvcGVydHl9KTtcbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { global } from '../util/global';\nexport * from './compiler_facade_interface';\nexport function getCompilerFacade() {\n    const globalNg = global['ng'];\n    if (!globalNg || !globalNg.ɵcompilerFacade) {\n        throw new Error(`Angular JIT compilation failed: '@angular/compiler' not loaded!\\n` +\n            `  - JIT compilation is discouraged for production use-cases! Consider AOT mode instead.\\n` +\n            `  - Did you bootstrap using '@angular/platform-browser-dynamic' or '@angular/platform-server'?\\n` +\n            `  - Alternatively provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.`);\n    }\n    return globalNg.ɵcompilerFacade;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZXJfZmFjYWRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvY29tcGlsZXIvY29tcGlsZXJfZmFjYWRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUNILE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUV0QyxjQUFjLDZCQUE2QixDQUFDO0FBRTVDLE1BQU0sVUFBVSxpQkFBaUI7SUFDL0IsTUFBTSxRQUFRLEdBQTJCLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0RCxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRTtRQUMxQyxNQUFNLElBQUksS0FBSyxDQUNYLG1FQUFtRTtZQUNuRSwyRkFBMkY7WUFDM0Ysa0dBQWtHO1lBQ2xHLGlHQUFpRyxDQUFDLENBQUM7S0FDeEc7SUFDRCxPQUFPLFFBQVEsQ0FBQyxlQUFlLENBQUM7QUFDbEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7Z2xvYmFsfSBmcm9tICcuLi91dGlsL2dsb2JhbCc7XG5pbXBvcnQge0NvbXBpbGVyRmFjYWRlLCBFeHBvcnRlZENvbXBpbGVyRmFjYWRlfSBmcm9tICcuL2NvbXBpbGVyX2ZhY2FkZV9pbnRlcmZhY2UnO1xuZXhwb3J0ICogZnJvbSAnLi9jb21waWxlcl9mYWNhZGVfaW50ZXJmYWNlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbXBpbGVyRmFjYWRlKCk6IENvbXBpbGVyRmFjYWRlIHtcbiAgY29uc3QgZ2xvYmFsTmc6IEV4cG9ydGVkQ29tcGlsZXJGYWNhZGUgPSBnbG9iYWxbJ25nJ107XG4gIGlmICghZ2xvYmFsTmcgfHwgIWdsb2JhbE5nLsm1Y29tcGlsZXJGYWNhZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBBbmd1bGFyIEpJVCBjb21waWxhdGlvbiBmYWlsZWQ6ICdAYW5ndWxhci9jb21waWxlcicgbm90IGxvYWRlZCFcXG5gICtcbiAgICAgICAgYCAgLSBKSVQgY29tcGlsYXRpb24gaXMgZGlzY291cmFnZWQgZm9yIHByb2R1Y3Rpb24gdXNlLWNhc2VzISBDb25zaWRlciBBT1QgbW9kZSBpbnN0ZWFkLlxcbmAgK1xuICAgICAgICBgICAtIERpZCB5b3UgYm9vdHN0cmFwIHVzaW5nICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMnIG9yICdAYW5ndWxhci9wbGF0Zm9ybS1zZXJ2ZXInP1xcbmAgK1xuICAgICAgICBgICAtIEFsdGVybmF0aXZlbHkgcHJvdmlkZSB0aGUgY29tcGlsZXIgd2l0aCAnaW1wb3J0IFwiQGFuZ3VsYXIvY29tcGlsZXJcIjsnIGJlZm9yZSBib290c3RyYXBwaW5nLmApO1xuICB9XG4gIHJldHVybiBnbG9iYWxOZy7JtWNvbXBpbGVyRmFjYWRlO1xufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport function stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (token instanceof Array) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return `${token.overriddenName}`;\n    }\n    if (token.name) {\n        return `${token.name}`;\n    }\n    const res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    const newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5naWZ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvdXRpbC9zdHJpbmdpZnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsTUFBTSxVQUFVLFNBQVMsQ0FBQyxLQUFVO0lBQ2xDLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1FBQzdCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxJQUFJLEtBQUssWUFBWSxLQUFLLEVBQUU7UUFDMUIsT0FBTyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO0tBQ3BEO0lBRUQsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFO1FBQ2pCLE9BQU8sRUFBRSxHQUFHLEtBQUssQ0FBQztLQUNuQjtJQUVELElBQUksS0FBSyxDQUFDLGNBQWMsRUFBRTtRQUN4QixPQUFPLEdBQUcsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO0tBQ2xDO0lBRUQsSUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFO1FBQ2QsT0FBTyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUN4QjtJQUVELE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUU3QixJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7UUFDZixPQUFPLEVBQUUsR0FBRyxHQUFHLENBQUM7S0FDakI7SUFFRCxNQUFNLFlBQVksR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLE9BQU8sWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQ3BFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkodG9rZW46IGFueSk6IHN0cmluZyB7XG4gIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHRva2VuO1xuICB9XG5cbiAgaWYgKHRva2VuIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICByZXR1cm4gJ1snICsgdG9rZW4ubWFwKHN0cmluZ2lmeSkuam9pbignLCAnKSArICddJztcbiAgfVxuXG4gIGlmICh0b2tlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnICsgdG9rZW47XG4gIH1cblxuICBpZiAodG9rZW4ub3ZlcnJpZGRlbk5hbWUpIHtcbiAgICByZXR1cm4gYCR7dG9rZW4ub3ZlcnJpZGRlbk5hbWV9YDtcbiAgfVxuXG4gIGlmICh0b2tlbi5uYW1lKSB7XG4gICAgcmV0dXJuIGAke3Rva2VuLm5hbWV9YDtcbiAgfVxuXG4gIGNvbnN0IHJlcyA9IHRva2VuLnRvU3RyaW5nKCk7XG5cbiAgaWYgKHJlcyA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnICsgcmVzO1xuICB9XG5cbiAgY29uc3QgbmV3TGluZUluZGV4ID0gcmVzLmluZGV4T2YoJ1xcbicpO1xuICByZXR1cm4gbmV3TGluZUluZGV4ID09PSAtMSA/IHJlcyA6IHJlcy5zdWJzdHJpbmcoMCwgbmV3TGluZUluZGV4KTtcbn1cbiJdfQ==","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getClosureSafeProperty } from '../util/property';\nimport { stringify } from '../util/stringify';\n/**\n * An interface that a function passed into {\\@link forwardRef} has to implement.\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * \\@publicApi\n * @record\n */\nexport function ForwardRefFn() { }\n/** @type {?} */\nconst __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * \\@usageNotes\n * ### Example\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * \\@publicApi\n * @param {?} forwardRefFn\n * @return {?}\n */\nexport function forwardRef(forwardRefFn) {\n    ((/** @type {?} */ (forwardRefFn))).__forward_ref__ = forwardRef;\n    ((/** @type {?} */ (forwardRefFn))).toString = function () { return stringify(this()); };\n    return ((/** @type {?} */ ((/** @type {?} */ (forwardRefFn)))));\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * \\@publicApi\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function resolveForwardRef(type) {\n    /** @type {?} */\n    const fn = type;\n    if (typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n        fn.__forward_ref__ === forwardRef) {\n        return fn();\n    }\n    else {\n        return type;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yd2FyZF9yZWYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9kaS9mb3J3YXJkX3JlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQVNBLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBQ3hELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQzs7Ozs7Ozs7Ozs7QUFhNUMsa0NBQTBDOztNQUVwQyxlQUFlLEdBQUcsc0JBQXNCLENBQUMsRUFBQyxlQUFlLEVBQUUsc0JBQXNCLEVBQUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7O0FBY3pGLE1BQU0sVUFBVSxVQUFVLENBQUMsWUFBMEI7SUFDbkQsQ0FBQyxtQkFBSyxZQUFZLEVBQUEsQ0FBQyxDQUFDLGVBQWUsR0FBRyxVQUFVLENBQUM7SUFDakQsQ0FBQyxtQkFBSyxZQUFZLEVBQUEsQ0FBQyxDQUFDLFFBQVEsR0FBRyxjQUFhLE9BQU8sU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEUsT0FBTyxDQUFDLG1CQUFXLG1CQUFLLFlBQVksRUFBQSxFQUFBLENBQUMsQ0FBQztBQUN4QyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7OztBQWVELE1BQU0sVUFBVSxpQkFBaUIsQ0FBSSxJQUFPOztVQUNwQyxFQUFFLEdBQVEsSUFBSTtJQUNwQixJQUFJLE9BQU8sRUFBRSxLQUFLLFVBQVUsSUFBSSxFQUFFLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQztRQUM5RCxFQUFFLENBQUMsZUFBZSxLQUFLLFVBQVUsRUFBRTtRQUNyQyxPQUFPLEVBQUUsRUFBRSxDQUFDO0tBQ2I7U0FBTTtRQUNMLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge1R5cGV9IGZyb20gJy4uL2ludGVyZmFjZS90eXBlJztcbmltcG9ydCB7Z2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eX0gZnJvbSAnLi4vdXRpbC9wcm9wZXJ0eSc7XG5pbXBvcnQge3N0cmluZ2lmeX0gZnJvbSAnLi4vdXRpbC9zdHJpbmdpZnknO1xuXG5cblxuLyoqXG4gKiBBbiBpbnRlcmZhY2UgdGhhdCBhIGZ1bmN0aW9uIHBhc3NlZCBpbnRvIHtAbGluayBmb3J3YXJkUmVmfSBoYXMgdG8gaW1wbGVtZW50LlxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIHtAZXhhbXBsZSBjb3JlL2RpL3RzL2ZvcndhcmRfcmVmL2ZvcndhcmRfcmVmX3NwZWMudHMgcmVnaW9uPSdmb3J3YXJkX3JlZl9mbid9XG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRm9yd2FyZFJlZkZuIHsgKCk6IGFueTsgfVxuXG5jb25zdCBfX2ZvcndhcmRfcmVmX18gPSBnZXRDbG9zdXJlU2FmZVByb3BlcnR5KHtfX2ZvcndhcmRfcmVmX186IGdldENsb3N1cmVTYWZlUHJvcGVydHl9KTtcblxuLyoqXG4gKiBBbGxvd3MgdG8gcmVmZXIgdG8gcmVmZXJlbmNlcyB3aGljaCBhcmUgbm90IHlldCBkZWZpbmVkLlxuICpcbiAqIEZvciBpbnN0YW5jZSwgYGZvcndhcmRSZWZgIGlzIHVzZWQgd2hlbiB0aGUgYHRva2VuYCB3aGljaCB3ZSBuZWVkIHRvIHJlZmVyIHRvIGZvciB0aGUgcHVycG9zZXMgb2ZcbiAqIERJIGlzIGRlY2xhcmVkLCBidXQgbm90IHlldCBkZWZpbmVkLiBJdCBpcyBhbHNvIHVzZWQgd2hlbiB0aGUgYHRva2VuYCB3aGljaCB3ZSB1c2Ugd2hlbiBjcmVhdGluZ1xuICogYSBxdWVyeSBpcyBub3QgeWV0IGRlZmluZWQuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKiB7QGV4YW1wbGUgY29yZS9kaS90cy9mb3J3YXJkX3JlZi9mb3J3YXJkX3JlZl9zcGVjLnRzIHJlZ2lvbj0nZm9yd2FyZF9yZWYnfVxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZFJlZihmb3J3YXJkUmVmRm46IEZvcndhcmRSZWZGbik6IFR5cGU8YW55PiB7XG4gICg8YW55PmZvcndhcmRSZWZGbikuX19mb3J3YXJkX3JlZl9fID0gZm9yd2FyZFJlZjtcbiAgKDxhbnk+Zm9yd2FyZFJlZkZuKS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3RyaW5naWZ5KHRoaXMoKSk7IH07XG4gIHJldHVybiAoPFR5cGU8YW55Pj48YW55PmZvcndhcmRSZWZGbik7XG59XG5cbi8qKlxuICogTGF6aWx5IHJldHJpZXZlcyB0aGUgcmVmZXJlbmNlIHZhbHVlIGZyb20gYSBmb3J3YXJkUmVmLlxuICpcbiAqIEFjdHMgYXMgdGhlIGlkZW50aXR5IGZ1bmN0aW9uIHdoZW4gZ2l2ZW4gYSBub24tZm9yd2FyZC1yZWYgdmFsdWUuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKlxuICoge0BleGFtcGxlIGNvcmUvZGkvdHMvZm9yd2FyZF9yZWYvZm9yd2FyZF9yZWZfc3BlYy50cyByZWdpb249J3Jlc29sdmVfZm9yd2FyZF9yZWYnfVxuICpcbiAqIEBzZWUgYGZvcndhcmRSZWZgXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlRm9yd2FyZFJlZjxUPih0eXBlOiBUKTogVCB7XG4gIGNvbnN0IGZuOiBhbnkgPSB0eXBlO1xuICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nICYmIGZuLmhhc093blByb3BlcnR5KF9fZm9yd2FyZF9yZWZfXykgJiZcbiAgICAgIGZuLl9fZm9yd2FyZF9yZWZfXyA9PT0gZm9yd2FyZFJlZikge1xuICAgIHJldHVybiBmbigpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0eXBlO1xuICB9XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n * the `MyCustomComponent` constructor function.\n *\n * @publicApi\n */\nexport const Type = Function;\nexport function isType(v) {\n    return typeof v === 'function';\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2ludGVyZmFjZS90eXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVIOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUM7QUFFN0IsTUFBTSxVQUFVLE1BQU0sQ0FBQyxDQUFNO0lBQzNCLE9BQU8sT0FBTyxDQUFDLEtBQUssVUFBVSxDQUFDO0FBQ2pDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVwcmVzZW50cyBhIHR5cGUgdGhhdCBhIENvbXBvbmVudCBvciBvdGhlciBvYmplY3QgaXMgaW5zdGFuY2VzIG9mLlxuICpcbiAqIEFuIGV4YW1wbGUgb2YgYSBgVHlwZWAgaXMgYE15Q3VzdG9tQ29tcG9uZW50YCBjbGFzcywgd2hpY2ggaW4gSmF2YVNjcmlwdCBpcyBiZSByZXByZXNlbnRlZCBieVxuICogdGhlIGBNeUN1c3RvbUNvbXBvbmVudGAgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgY29uc3QgVHlwZSA9IEZ1bmN0aW9uO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNUeXBlKHY6IGFueSk6IHYgaXMgVHlwZTxhbnk+IHtcbiAgcmV0dXJuIHR5cGVvZiB2ID09PSAnZnVuY3Rpb24nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFR5cGU8VD4gZXh0ZW5kcyBGdW5jdGlvbiB7IG5ldyAoLi4uYXJnczogYW55W10pOiBUOyB9XG5cbmV4cG9ydCB0eXBlIE11dGFibGU8VCBleHRlbmRze1t4OiBzdHJpbmddOiBhbnl9LCBLIGV4dGVuZHMgc3RyaW5nPiA9IHtcbiAgW1AgaW4gS106IFRbUF07XG59O1xuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport const ANNOTATIONS = '__annotations__';\nexport const PARAMETERS = '__parameters__';\nexport const PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n */\nexport function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n    const metaCtor = makeMetadataCtor(props);\n    function DecoratorFactory(...args) {\n        if (this instanceof DecoratorFactory) {\n            metaCtor.call(this, ...args);\n            return this;\n        }\n        const annotationInstance = new DecoratorFactory(...args);\n        return function TypeDecorator(cls) {\n            if (typeFn)\n                typeFn(cls, ...args);\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            const annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n                cls[ANNOTATIONS] :\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\n            annotations.push(annotationInstance);\n            if (additionalProcessing)\n                additionalProcessing(cls);\n            return cls;\n        };\n    }\n    if (parentClass) {\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    DecoratorFactory.prototype.ngMetadataName = name;\n    DecoratorFactory.annotationCls = DecoratorFactory;\n    return DecoratorFactory;\n}\nfunction makeMetadataCtor(props) {\n    return function ctor(...args) {\n        if (props) {\n            const values = props(...args);\n            for (const propName in values) {\n                this[propName] = values[propName];\n            }\n        }\n    };\n}\nexport function makeParamDecorator(name, props, parentClass) {\n    const metaCtor = makeMetadataCtor(props);\n    function ParamDecoratorFactory(...args) {\n        if (this instanceof ParamDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        const annotationInstance = new ParamDecoratorFactory(...args);\n        ParamDecorator.annotation = annotationInstance;\n        return ParamDecorator;\n        function ParamDecorator(cls, unusedKey, index) {\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            const parameters = cls.hasOwnProperty(PARAMETERS) ?\n                cls[PARAMETERS] :\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\n            // there might be gaps if some in between parameters do not have annotations.\n            // we pad with nulls.\n            while (parameters.length <= index) {\n                parameters.push(null);\n            }\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\n            return cls;\n        }\n    }\n    if (parentClass) {\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n}\nexport function makePropDecorator(name, props, parentClass, additionalProcessing) {\n    const metaCtor = makeMetadataCtor(props);\n    function PropDecoratorFactory(...args) {\n        if (this instanceof PropDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        const decoratorInstance = new PropDecoratorFactory(...args);\n        function PropDecorator(target, name) {\n            const constructor = target.constructor;\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            const meta = constructor.hasOwnProperty(PROP_METADATA) ?\n                constructor[PROP_METADATA] :\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n            meta[name].unshift(decoratorInstance);\n            if (additionalProcessing)\n                additionalProcessing(target, name, ...args);\n        }\n        return PropDecorator;\n    }\n    if (parentClass) {\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    PropDecoratorFactory.annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type, isType } from '../interface/type';\nimport { ANNOTATIONS, PARAMETERS, PROP_METADATA } from '../util/decorators';\nimport { global } from '../util/global';\nimport { stringify } from '../util/stringify';\n/**\n * Attention: These regex has to hold even if the code is minified!\n */\nexport const DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\nexport const INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\nexport const INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\nexport class ReflectionCapabilities {\n    constructor(reflect) { this._reflect = reflect || global['Reflect']; }\n    isReflectionEnabled() { return true; }\n    factory(t) { return (...args) => new t(...args); }\n    /** @internal */\n    _zipTypesAndAnnotations(paramTypes, paramAnnotations) {\n        let result;\n        if (typeof paramTypes === 'undefined') {\n            result = new Array(paramAnnotations.length);\n        }\n        else {\n            result = new Array(paramTypes.length);\n        }\n        for (let i = 0; i < result.length; i++) {\n            // TS outputs Object for parameters without types, while Traceur omits\n            // the annotations. For now we preserve the Traceur behavior to aid\n            // migration, but this can be revisited.\n            if (typeof paramTypes === 'undefined') {\n                result[i] = [];\n            }\n            else if (paramTypes[i] != Object) {\n                result[i] = [paramTypes[i]];\n            }\n            else {\n                result[i] = [];\n            }\n            if (paramAnnotations && paramAnnotations[i] != null) {\n                result[i] = result[i].concat(paramAnnotations[i]);\n            }\n        }\n        return result;\n    }\n    _ownParameters(type, parentCtor) {\n        const typeStr = type.toString();\n        // If we have no decorators, we only have function.length as metadata.\n        // In that case, to detect whether a child class declared an own constructor or not,\n        // we need to look inside of that constructor to check whether it is\n        // just calling the parent.\n        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n        // that sets 'design:paramtypes' to []\n        // if a class inherits from another class but has no ctor declared itself.\n        if (DELEGATE_CTOR.exec(typeStr) ||\n            (INHERITED_CLASS.exec(typeStr) && !INHERITED_CLASS_WITH_CTOR.exec(typeStr))) {\n            return null;\n        }\n        // Prefer the direct API.\n        if (type.parameters && type.parameters !== parentCtor.parameters) {\n            return type.parameters;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        const tsickleCtorParams = type.ctorParameters;\n        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n            // Newer tsickle uses a function closure\n            // Retain the non-function case for compatibility with older tsickle\n            const ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n            const paramTypes = ctorParameters.map((ctorParam) => ctorParam && ctorParam.type);\n            const paramAnnotations = ctorParameters.map((ctorParam) => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // API for metadata created by invoking the decorators.\n        const paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];\n        const paramTypes = this._reflect && this._reflect.getOwnMetadata &&\n            this._reflect.getOwnMetadata('design:paramtypes', type);\n        if (paramTypes || paramAnnotations) {\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // If a class has no decorators, at least create metadata\n        // based on function.length.\n        // Note: We know that this is a real constructor as we checked\n        // the content of the constructor above.\n        return new Array(type.length).fill(undefined);\n    }\n    parameters(type) {\n        // Note: only report metadata if we have at least one class decorator\n        // to stay in sync with the static reflector.\n        if (!isType(type)) {\n            return [];\n        }\n        const parentCtor = getParentCtor(type);\n        let parameters = this._ownParameters(type, parentCtor);\n        if (!parameters && parentCtor !== Object) {\n            parameters = this.parameters(parentCtor);\n        }\n        return parameters || [];\n    }\n    _ownAnnotations(typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {\n            let annotations = typeOrFunc.annotations;\n            if (typeof annotations === 'function' && annotations.annotations) {\n                annotations = annotations.annotations;\n            }\n            return annotations;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {\n            return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n            return typeOrFunc[ANNOTATIONS];\n        }\n        return null;\n    }\n    annotations(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return [];\n        }\n        const parentCtor = getParentCtor(typeOrFunc);\n        const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n        const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n        return parentAnnotations.concat(ownAnnotations);\n    }\n    _ownPropMetadata(typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if (typeOrFunc.propMetadata &&\n            typeOrFunc.propMetadata !== parentCtor.propMetadata) {\n            let propMetadata = typeOrFunc.propMetadata;\n            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n                propMetadata = propMetadata.propMetadata;\n            }\n            return propMetadata;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if (typeOrFunc.propDecorators &&\n            typeOrFunc.propDecorators !== parentCtor.propDecorators) {\n            const propDecorators = typeOrFunc.propDecorators;\n            const propMetadata = {};\n            Object.keys(propDecorators).forEach(prop => {\n                propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n            });\n            return propMetadata;\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n            return typeOrFunc[PROP_METADATA];\n        }\n        return null;\n    }\n    propMetadata(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        const parentCtor = getParentCtor(typeOrFunc);\n        const propMetadata = {};\n        if (parentCtor !== Object) {\n            const parentPropMetadata = this.propMetadata(parentCtor);\n            Object.keys(parentPropMetadata).forEach((propName) => {\n                propMetadata[propName] = parentPropMetadata[propName];\n            });\n        }\n        const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n        if (ownPropMetadata) {\n            Object.keys(ownPropMetadata).forEach((propName) => {\n                const decorators = [];\n                if (propMetadata.hasOwnProperty(propName)) {\n                    decorators.push(...propMetadata[propName]);\n                }\n                decorators.push(...ownPropMetadata[propName]);\n                propMetadata[propName] = decorators;\n            });\n        }\n        return propMetadata;\n    }\n    ownPropMetadata(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        return this._ownPropMetadata(typeOrFunc, Object) || {};\n    }\n    hasLifecycleHook(type, lcProperty) {\n        return type instanceof Type && lcProperty in type.prototype;\n    }\n    guards(type) { return {}; }\n    getter(name) { return new Function('o', 'return o.' + name + ';'); }\n    setter(name) {\n        return new Function('o', 'v', 'return o.' + name + ' = v;');\n    }\n    method(name) {\n        const functionBody = `if (!o.${name}) throw new Error('\"${name}\" is undefined');\n        return o.${name}.apply(o, args);`;\n        return new Function('o', 'args', functionBody);\n    }\n    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\n    importUri(type) {\n        // StaticSymbol\n        if (typeof type === 'object' && type['filePath']) {\n            return type['filePath'];\n        }\n        // Runtime type\n        return `./${stringify(type)}`;\n    }\n    resourceUri(type) { return `./${stringify(type)}`; }\n    resolveIdentifier(name, moduleUrl, members, runtime) {\n        return runtime;\n    }\n    resolveEnum(enumIdentifier, name) { return enumIdentifier[name]; }\n}\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n    if (!decoratorInvocations) {\n        return [];\n    }\n    return decoratorInvocations.map(decoratorInvocation => {\n        const decoratorType = decoratorInvocation.type;\n        const annotationCls = decoratorType.annotationCls;\n        const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n        return new annotationCls(...annotationArgs);\n    });\n}\nfunction getParentCtor(ctor) {\n    const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n    const parentCtor = parentProto ? parentProto.constructor : null;\n    // Note: We always use `Object` as the null value\n    // to simplify checking later on.\n    return parentCtor || Object;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { makeParamDecorator } from '../util/decorators';\n/**\n * Type of the Inject decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nexport function InjectDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Inject decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nexport const Inject = makeParamDecorator('Inject', (token) => ({ token }));\n/**\n * Type of the Optional decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nexport function OptionalDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Optional decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nexport const Optional = makeParamDecorator('Optional');\n/**\n * Type of the Self decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nexport function SelfDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Self decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nexport const Self = makeParamDecorator('Self');\n/**\n * Type of the SkipSelf decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nexport function SkipSelfDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * SkipSelf decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nexport const SkipSelf = makeParamDecorator('SkipSelf');\n/**\n * Type of the Host decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nexport function HostDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Host decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nexport const Host = makeParamDecorator('Host');\n/**\n * Type of the Attribute decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nexport function AttributeDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Attribute decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nexport const Attribute = makeParamDecorator('Attribute', (attributeName) => ({ attributeName }));\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getCompilerFacade } from '../../compiler/compiler_facade';\nimport { ReflectionCapabilities } from '../../reflection/reflection_capabilities';\nimport { Attribute, Host, Inject, Optional, Self, SkipSelf } from '../metadata';\n/** @type {?} */\nlet _reflect = null;\n/**\n * @return {?}\n */\nexport function getReflect() {\n    return (_reflect = _reflect || new ReflectionCapabilities());\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function reflectDependencies(type) {\n    return convertDependencies(getReflect().parameters(type));\n}\n/**\n * @param {?} deps\n * @return {?}\n */\nexport function convertDependencies(deps) {\n    /** @type {?} */\n    const compiler = getCompilerFacade();\n    return deps.map(dep => reflectDependency(compiler, dep));\n}\n/**\n * @param {?} compiler\n * @param {?} dep\n * @return {?}\n */\nfunction reflectDependency(compiler, dep) {\n    /** @type {?} */\n    const meta = {\n        token: null,\n        host: false,\n        optional: false,\n        resolved: compiler.R3ResolvedDependencyType.Token,\n        self: false,\n        skipSelf: false,\n    };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    function setTokenAndResolvedType(token) {\n        meta.resolved = compiler.R3ResolvedDependencyType.Token;\n        meta.token = token;\n    }\n    if (Array.isArray(dep)) {\n        if (dep.length === 0) {\n            throw new Error('Dependency array must have arguments.');\n        }\n        for (let j = 0; j < dep.length; j++) {\n            /** @type {?} */\n            const param = dep[j];\n            if (param === undefined) {\n                // param may be undefined if type of dep is not set by ngtsc\n                continue;\n            }\n            else if (param instanceof Optional || param.__proto__.ngMetadataName === 'Optional') {\n                meta.optional = true;\n            }\n            else if (param instanceof SkipSelf || param.__proto__.ngMetadataName === 'SkipSelf') {\n                meta.skipSelf = true;\n            }\n            else if (param instanceof Self || param.__proto__.ngMetadataName === 'Self') {\n                meta.self = true;\n            }\n            else if (param instanceof Host || param.__proto__.ngMetadataName === 'Host') {\n                meta.host = true;\n            }\n            else if (param instanceof Inject) {\n                meta.token = param.token;\n            }\n            else if (param instanceof Attribute) {\n                if (param.attributeName === undefined) {\n                    throw new Error(`Attribute name must be defined.`);\n                }\n                meta.token = param.attributeName;\n                meta.resolved = compiler.R3ResolvedDependencyType.Attribute;\n            }\n            else {\n                setTokenAndResolvedType(param);\n            }\n        }\n    }\n    else {\n        setTokenAndResolvedType(dep);\n    }\n    return meta;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2RpL2ppdC91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUE2QyxpQkFBaUIsRUFBQyxNQUFNLGdDQUFnQyxDQUFDO0FBRTdHLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLDBDQUEwQyxDQUFDO0FBQ2hGLE9BQU8sRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBQyxNQUFNLGFBQWEsQ0FBQzs7SUFFMUUsUUFBUSxHQUFnQyxJQUFJOzs7O0FBRWhELE1BQU0sVUFBVSxVQUFVO0lBQ3hCLE9BQU8sQ0FBQyxRQUFRLEdBQUcsUUFBUSxJQUFJLElBQUksc0JBQXNCLEVBQUUsQ0FBQyxDQUFDO0FBQy9ELENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLG1CQUFtQixDQUFDLElBQWU7SUFDakQsT0FBTyxtQkFBbUIsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUM1RCxDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxJQUFXOztVQUN2QyxRQUFRLEdBQUcsaUJBQWlCLEVBQUU7SUFDcEMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDM0QsQ0FBQzs7Ozs7O0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxRQUF3QixFQUFFLEdBQWdCOztVQUM3RCxJQUFJLEdBQStCO1FBQ3ZDLEtBQUssRUFBRSxJQUFJO1FBQ1gsSUFBSSxFQUFFLEtBQUs7UUFDWCxRQUFRLEVBQUUsS0FBSztRQUNmLFFBQVEsRUFBRSxRQUFRLENBQUMsd0JBQXdCLENBQUMsS0FBSztRQUNqRCxJQUFJLEVBQUUsS0FBSztRQUNYLFFBQVEsRUFBRSxLQUFLO0tBQ2hCOzs7OztJQUVELFNBQVMsdUJBQXVCLENBQUMsS0FBVTtRQUN6QyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLENBQUM7UUFDeEQsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUN0QixJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsdUNBQXVDLENBQUMsQ0FBQztTQUMxRDtRQUNELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFOztrQkFDN0IsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDcEIsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO2dCQUN2Qiw0REFBNEQ7Z0JBQzVELFNBQVM7YUFDVjtpQkFBTSxJQUFJLEtBQUssWUFBWSxRQUFRLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEtBQUssVUFBVSxFQUFFO2dCQUNyRixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQzthQUN0QjtpQkFBTSxJQUFJLEtBQUssWUFBWSxRQUFRLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEtBQUssVUFBVSxFQUFFO2dCQUNyRixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQzthQUN0QjtpQkFBTSxJQUFJLEtBQUssWUFBWSxJQUFJLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEtBQUssTUFBTSxFQUFFO2dCQUM3RSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQzthQUNsQjtpQkFBTSxJQUFJLEtBQUssWUFBWSxJQUFJLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEtBQUssTUFBTSxFQUFFO2dCQUM3RSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQzthQUNsQjtpQkFBTSxJQUFJLEtBQUssWUFBWSxNQUFNLEVBQUU7Z0JBQ2xDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQzthQUMxQjtpQkFBTSxJQUFJLEtBQUssWUFBWSxTQUFTLEVBQUU7Z0JBQ3JDLElBQUksS0FBSyxDQUFDLGFBQWEsS0FBSyxTQUFTLEVBQUU7b0JBQ3JDLE1BQU0sSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztpQkFDcEQ7Z0JBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDO2dCQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQyxTQUFTLENBQUM7YUFDN0Q7aUJBQU07Z0JBQ0wsdUJBQXVCLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDaEM7U0FDRjtLQUNGO1NBQU07UUFDTCx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUM5QjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtDb21waWxlckZhY2FkZSwgUjNEZXBlbmRlbmN5TWV0YWRhdGFGYWNhZGUsIGdldENvbXBpbGVyRmFjYWRlfSBmcm9tICcuLi8uLi9jb21waWxlci9jb21waWxlcl9mYWNhZGUnO1xuaW1wb3J0IHtUeXBlfSBmcm9tICcuLi8uLi9pbnRlcmZhY2UvdHlwZSc7XG5pbXBvcnQge1JlZmxlY3Rpb25DYXBhYmlsaXRpZXN9IGZyb20gJy4uLy4uL3JlZmxlY3Rpb24vcmVmbGVjdGlvbl9jYXBhYmlsaXRpZXMnO1xuaW1wb3J0IHtBdHRyaWJ1dGUsIEhvc3QsIEluamVjdCwgT3B0aW9uYWwsIFNlbGYsIFNraXBTZWxmfSBmcm9tICcuLi9tZXRhZGF0YSc7XG5cbmxldCBfcmVmbGVjdDogUmVmbGVjdGlvbkNhcGFiaWxpdGllc3xudWxsID0gbnVsbDtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlZmxlY3QoKTogUmVmbGVjdGlvbkNhcGFiaWxpdGllcyB7XG4gIHJldHVybiAoX3JlZmxlY3QgPSBfcmVmbGVjdCB8fCBuZXcgUmVmbGVjdGlvbkNhcGFiaWxpdGllcygpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZmxlY3REZXBlbmRlbmNpZXModHlwZTogVHlwZTxhbnk+KTogUjNEZXBlbmRlbmN5TWV0YWRhdGFGYWNhZGVbXSB7XG4gIHJldHVybiBjb252ZXJ0RGVwZW5kZW5jaWVzKGdldFJlZmxlY3QoKS5wYXJhbWV0ZXJzKHR5cGUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnREZXBlbmRlbmNpZXMoZGVwczogYW55W10pOiBSM0RlcGVuZGVuY3lNZXRhZGF0YUZhY2FkZVtdIHtcbiAgY29uc3QgY29tcGlsZXIgPSBnZXRDb21waWxlckZhY2FkZSgpO1xuICByZXR1cm4gZGVwcy5tYXAoZGVwID0+IHJlZmxlY3REZXBlbmRlbmN5KGNvbXBpbGVyLCBkZXApKTtcbn1cblxuZnVuY3Rpb24gcmVmbGVjdERlcGVuZGVuY3koY29tcGlsZXI6IENvbXBpbGVyRmFjYWRlLCBkZXA6IGFueSB8IGFueVtdKTogUjNEZXBlbmRlbmN5TWV0YWRhdGFGYWNhZGUge1xuICBjb25zdCBtZXRhOiBSM0RlcGVuZGVuY3lNZXRhZGF0YUZhY2FkZSA9IHtcbiAgICB0b2tlbjogbnVsbCxcbiAgICBob3N0OiBmYWxzZSxcbiAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgcmVzb2x2ZWQ6IGNvbXBpbGVyLlIzUmVzb2x2ZWREZXBlbmRlbmN5VHlwZS5Ub2tlbixcbiAgICBzZWxmOiBmYWxzZSxcbiAgICBza2lwU2VsZjogZmFsc2UsXG4gIH07XG5cbiAgZnVuY3Rpb24gc2V0VG9rZW5BbmRSZXNvbHZlZFR5cGUodG9rZW46IGFueSk6IHZvaWQge1xuICAgIG1ldGEucmVzb2x2ZWQgPSBjb21waWxlci5SM1Jlc29sdmVkRGVwZW5kZW5jeVR5cGUuVG9rZW47XG4gICAgbWV0YS50b2tlbiA9IHRva2VuO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoZGVwKSkge1xuICAgIGlmIChkZXAubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RlcGVuZGVuY3kgYXJyYXkgbXVzdCBoYXZlIGFyZ3VtZW50cy4nKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBkZXAubGVuZ3RoOyBqKyspIHtcbiAgICAgIGNvbnN0IHBhcmFtID0gZGVwW2pdO1xuICAgICAgaWYgKHBhcmFtID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gcGFyYW0gbWF5IGJlIHVuZGVmaW5lZCBpZiB0eXBlIG9mIGRlcCBpcyBub3Qgc2V0IGJ5IG5ndHNjXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbSBpbnN0YW5jZW9mIE9wdGlvbmFsIHx8IHBhcmFtLl9fcHJvdG9fXy5uZ01ldGFkYXRhTmFtZSA9PT0gJ09wdGlvbmFsJykge1xuICAgICAgICBtZXRhLm9wdGlvbmFsID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAocGFyYW0gaW5zdGFuY2VvZiBTa2lwU2VsZiB8fCBwYXJhbS5fX3Byb3RvX18ubmdNZXRhZGF0YU5hbWUgPT09ICdTa2lwU2VsZicpIHtcbiAgICAgICAgbWV0YS5za2lwU2VsZiA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtIGluc3RhbmNlb2YgU2VsZiB8fCBwYXJhbS5fX3Byb3RvX18ubmdNZXRhZGF0YU5hbWUgPT09ICdTZWxmJykge1xuICAgICAgICBtZXRhLnNlbGYgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbSBpbnN0YW5jZW9mIEhvc3QgfHwgcGFyYW0uX19wcm90b19fLm5nTWV0YWRhdGFOYW1lID09PSAnSG9zdCcpIHtcbiAgICAgICAgbWV0YS5ob3N0ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAocGFyYW0gaW5zdGFuY2VvZiBJbmplY3QpIHtcbiAgICAgICAgbWV0YS50b2tlbiA9IHBhcmFtLnRva2VuO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbSBpbnN0YW5jZW9mIEF0dHJpYnV0ZSkge1xuICAgICAgICBpZiAocGFyYW0uYXR0cmlidXRlTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBdHRyaWJ1dGUgbmFtZSBtdXN0IGJlIGRlZmluZWQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgbWV0YS50b2tlbiA9IHBhcmFtLmF0dHJpYnV0ZU5hbWU7XG4gICAgICAgIG1ldGEucmVzb2x2ZWQgPSBjb21waWxlci5SM1Jlc29sdmVkRGVwZW5kZW5jeVR5cGUuQXR0cmlidXRlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0VG9rZW5BbmRSZXNvbHZlZFR5cGUocGFyYW0pO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzZXRUb2tlbkFuZFJlc29sdmVkVHlwZShkZXApO1xuICB9XG4gIHJldHVybiBtZXRhO1xufVxuIl19","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to resolve resource URLs on `\\@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * \\@Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n * // and `MyComponent`'s `\\@Component.templateUrl` needs to be resolved asynchronously.\n *\n * // Calling `resolveComponentResources()` will resolve `\\@Component.templateUrl` into\n * // `\\@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n *\n * // Use browser's `fetch()` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into `template` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param {?} resourceResolver a function which is responsible for returning a `Promise` to the\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n * @return {?}\n */\nexport function resolveComponentResources(resourceResolver) {\n    // Store all promises which are fetching the resources.\n    /** @type {?} */\n    const urlFetches = [];\n    // Cache so that we don't fetch the same resource more than once.\n    /** @type {?} */\n    const urlMap = new Map();\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    function cachedResourceResolve(url) {\n        /** @type {?} */\n        let promise = urlMap.get(url);\n        if (!promise) {\n            /** @type {?} */\n            const resp = resourceResolver(url);\n            urlMap.set(url, promise = resp.then(unwrapResponse));\n            urlFetches.push(promise);\n        }\n        return promise;\n    }\n    componentResourceResolutionQueue.forEach((component) => {\n        if (component.templateUrl) {\n            cachedResourceResolve(component.templateUrl).then((template) => {\n                component.template = template;\n            });\n        }\n        /** @type {?} */\n        const styleUrls = component.styleUrls;\n        /** @type {?} */\n        const styles = component.styles || (component.styles = []);\n        /** @type {?} */\n        const styleOffset = component.styles.length;\n        styleUrls && styleUrls.forEach((styleUrl, index) => {\n            styles.push(''); // pre-allocate array.\n            cachedResourceResolve(styleUrl).then((style) => {\n                styles[styleOffset + index] = style;\n                styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                if (styleUrls.length == 0) {\n                    component.styleUrls = undefined;\n                }\n            });\n        });\n    });\n    clearResolutionOfComponentResourcesQueue();\n    return Promise.all(urlFetches).then(() => null);\n}\n/** @type {?} */\nconst componentResourceResolutionQueue = new Set();\n/**\n * @param {?} metadata\n * @return {?}\n */\nexport function maybeQueueResolutionOfComponentResources(metadata) {\n    if (componentNeedsResolution(metadata)) {\n        componentResourceResolutionQueue.add(metadata);\n    }\n}\n/**\n * @param {?} component\n * @return {?}\n */\nexport function componentNeedsResolution(component) {\n    return !!((component.templateUrl && !component.template) ||\n        component.styleUrls && component.styleUrls.length);\n}\n/**\n * @return {?}\n */\nexport function clearResolutionOfComponentResourcesQueue() {\n    componentResourceResolutionQueue.clear();\n}\n/**\n * @param {?} response\n * @return {?}\n */\nfunction unwrapResponse(response) {\n    return typeof response == 'string' ? response : response.text();\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2VfbG9hZGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL21ldGFkYXRhL3Jlc291cmNlX2xvYWRpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEyQ0EsTUFBTSxVQUFVLHlCQUF5QixDQUNyQyxnQkFBOEU7OztVQUUxRSxVQUFVLEdBQXNCLEVBQUU7OztVQUdsQyxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQTJCOzs7OztJQUNqRCxTQUFTLHFCQUFxQixDQUFDLEdBQVc7O1lBQ3BDLE9BQU8sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztRQUM3QixJQUFJLENBQUMsT0FBTyxFQUFFOztrQkFDTixJQUFJLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxDQUFDO1lBQ2xDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFDckQsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMxQjtRQUNELE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxnQ0FBZ0MsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFvQixFQUFFLEVBQUU7UUFDaEUsSUFBSSxTQUFTLENBQUMsV0FBVyxFQUFFO1lBQ3pCLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtnQkFDN0QsU0FBUyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7WUFDaEMsQ0FBQyxDQUFDLENBQUM7U0FDSjs7Y0FDSyxTQUFTLEdBQUcsU0FBUyxDQUFDLFNBQVM7O2NBQy9CLE1BQU0sR0FBRyxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7O2NBQ3BELFdBQVcsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU07UUFDM0MsU0FBUyxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDakQsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFFLHNCQUFzQjtZQUN4QyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDN0MsTUFBTSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBQ3BDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDakQsSUFBSSxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtvQkFDekIsU0FBUyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7aUJBQ2pDO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0gsd0NBQXdDLEVBQUUsQ0FBQztJQUMzQyxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xELENBQUM7O01BRUssZ0NBQWdDLEdBQW1CLElBQUksR0FBRyxFQUFFOzs7OztBQUVsRSxNQUFNLFVBQVUsd0NBQXdDLENBQUMsUUFBbUI7SUFDMUUsSUFBSSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUN0QyxnQ0FBZ0MsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDaEQ7QUFDSCxDQUFDOzs7OztBQUVELE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxTQUFvQjtJQUMzRCxPQUFPLENBQUMsQ0FBQyxDQUNMLENBQUMsU0FBUyxDQUFDLFdBQVcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7UUFDOUMsU0FBUyxDQUFDLFNBQVMsSUFBSSxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3pELENBQUM7Ozs7QUFDRCxNQUFNLFVBQVUsd0NBQXdDO0lBQ3RELGdDQUFnQyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQzNDLENBQUM7Ozs7O0FBRUQsU0FBUyxjQUFjLENBQUMsUUFBNEM7SUFDbEUsT0FBTyxPQUFPLFFBQVEsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2xFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7Q29tcG9uZW50fSBmcm9tICcuL2RpcmVjdGl2ZXMnO1xuXG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHJlc291cmNlIFVSTHMgb24gYEBDb21wb25lbnRgIHdoZW4gdXNlZCB3aXRoIEpJVCBjb21waWxhdGlvbi5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgXG4gKiBAQ29tcG9uZW50KHtcbiAqICAgc2VsZWN0b3I6ICdteS1jb21wJyxcbiAqICAgdGVtcGxhdGVVcmw6ICdteS1jb21wLmh0bWwnLCAvLyBUaGlzIHJlcXVpcmVzIGFzeW5jaHJvbm91cyByZXNvbHV0aW9uXG4gKiB9KVxuICogY2xhc3MgTXlDb21wb25lbnR7XG4gKiB9XG4gKlxuICogLy8gQ2FsbGluZyBgcmVuZGVyQ29tcG9uZW50YCB3aWxsIGZhaWwgYmVjYXVzZSBgcmVuZGVyQ29tcG9uZW50YCBpcyBhIHN5bmNocm9ub3VzIHByb2Nlc3NcbiAqIC8vIGFuZCBgTXlDb21wb25lbnRgJ3MgYEBDb21wb25lbnQudGVtcGxhdGVVcmxgIG5lZWRzIHRvIGJlIHJlc29sdmVkIGFzeW5jaHJvbm91c2x5LlxuICpcbiAqIC8vIENhbGxpbmcgYHJlc29sdmVDb21wb25lbnRSZXNvdXJjZXMoKWAgd2lsbCByZXNvbHZlIGBAQ29tcG9uZW50LnRlbXBsYXRlVXJsYCBpbnRvXG4gKiAvLyBgQENvbXBvbmVudC50ZW1wbGF0ZWAsIHdoaWNoIGFsbG93cyBgcmVuZGVyQ29tcG9uZW50YCB0byBwcm9jZWVkIGluIGEgc3luY2hyb25vdXMgbWFubmVyLlxuICpcbiAqIC8vIFVzZSBicm93c2VyJ3MgYGZldGNoKClgIGZ1bmN0aW9uIGFzIHRoZSBkZWZhdWx0IHJlc291cmNlIHJlc29sdXRpb24gc3RyYXRlZ3kuXG4gKiByZXNvbHZlQ29tcG9uZW50UmVzb3VyY2VzKGZldGNoKS50aGVuKCgpID0+IHtcbiAqICAgLy8gQWZ0ZXIgcmVzb2x1dGlvbiBhbGwgVVJMcyBoYXZlIGJlZW4gY29udmVydGVkIGludG8gYHRlbXBsYXRlYCBzdHJpbmdzLlxuICogICByZW5kZXJDb21wb25lbnQoTXlDb21wb25lbnQpO1xuICogfSk7XG4gKlxuICogYGBgXG4gKlxuICogTk9URTogSW4gQU9UIHRoZSByZXNvbHV0aW9uIGhhcHBlbnMgZHVyaW5nIGNvbXBpbGF0aW9uLCBhbmQgc28gdGhlcmUgc2hvdWxkIGJlIG5vIG5lZWRcbiAqIHRvIGNhbGwgdGhpcyBtZXRob2Qgb3V0c2lkZSBKSVQgbW9kZS5cbiAqXG4gKiBAcGFyYW0gcmVzb3VyY2VSZXNvbHZlciBhIGZ1bmN0aW9uIHdoaWNoIGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgYSBgUHJvbWlzZWAgdG8gdGhlXG4gKiBjb250ZW50cyBvZiB0aGUgcmVzb2x2ZWQgVVJMLiBCcm93c2VyJ3MgYGZldGNoKClgIG1ldGhvZCBpcyBhIGdvb2QgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVDb21wb25lbnRSZXNvdXJjZXMoXG4gICAgcmVzb3VyY2VSZXNvbHZlcjogKHVybDogc3RyaW5nKSA9PiAoUHJvbWlzZTxzdHJpbmd8e3RleHQoKTogUHJvbWlzZTxzdHJpbmc+fT4pKTogUHJvbWlzZTxudWxsPiB7XG4gIC8vIFN0b3JlIGFsbCBwcm9taXNlcyB3aGljaCBhcmUgZmV0Y2hpbmcgdGhlIHJlc291cmNlcy5cbiAgY29uc3QgdXJsRmV0Y2hlczogUHJvbWlzZTxzdHJpbmc+W10gPSBbXTtcblxuICAvLyBDYWNoZSBzbyB0aGF0IHdlIGRvbid0IGZldGNoIHRoZSBzYW1lIHJlc291cmNlIG1vcmUgdGhhbiBvbmNlLlxuICBjb25zdCB1cmxNYXAgPSBuZXcgTWFwPHN0cmluZywgUHJvbWlzZTxzdHJpbmc+PigpO1xuICBmdW5jdGlvbiBjYWNoZWRSZXNvdXJjZVJlc29sdmUodXJsOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGxldCBwcm9taXNlID0gdXJsTWFwLmdldCh1cmwpO1xuICAgIGlmICghcHJvbWlzZSkge1xuICAgICAgY29uc3QgcmVzcCA9IHJlc291cmNlUmVzb2x2ZXIodXJsKTtcbiAgICAgIHVybE1hcC5zZXQodXJsLCBwcm9taXNlID0gcmVzcC50aGVuKHVud3JhcFJlc3BvbnNlKSk7XG4gICAgICB1cmxGZXRjaGVzLnB1c2gocHJvbWlzZSk7XG4gICAgfVxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgY29tcG9uZW50UmVzb3VyY2VSZXNvbHV0aW9uUXVldWUuZm9yRWFjaCgoY29tcG9uZW50OiBDb21wb25lbnQpID0+IHtcbiAgICBpZiAoY29tcG9uZW50LnRlbXBsYXRlVXJsKSB7XG4gICAgICBjYWNoZWRSZXNvdXJjZVJlc29sdmUoY29tcG9uZW50LnRlbXBsYXRlVXJsKS50aGVuKCh0ZW1wbGF0ZSkgPT4ge1xuICAgICAgICBjb21wb25lbnQudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBzdHlsZVVybHMgPSBjb21wb25lbnQuc3R5bGVVcmxzO1xuICAgIGNvbnN0IHN0eWxlcyA9IGNvbXBvbmVudC5zdHlsZXMgfHwgKGNvbXBvbmVudC5zdHlsZXMgPSBbXSk7XG4gICAgY29uc3Qgc3R5bGVPZmZzZXQgPSBjb21wb25lbnQuc3R5bGVzLmxlbmd0aDtcbiAgICBzdHlsZVVybHMgJiYgc3R5bGVVcmxzLmZvckVhY2goKHN0eWxlVXJsLCBpbmRleCkgPT4ge1xuICAgICAgc3R5bGVzLnB1c2goJycpOyAgLy8gcHJlLWFsbG9jYXRlIGFycmF5LlxuICAgICAgY2FjaGVkUmVzb3VyY2VSZXNvbHZlKHN0eWxlVXJsKS50aGVuKChzdHlsZSkgPT4ge1xuICAgICAgICBzdHlsZXNbc3R5bGVPZmZzZXQgKyBpbmRleF0gPSBzdHlsZTtcbiAgICAgICAgc3R5bGVVcmxzLnNwbGljZShzdHlsZVVybHMuaW5kZXhPZihzdHlsZVVybCksIDEpO1xuICAgICAgICBpZiAoc3R5bGVVcmxzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgY29tcG9uZW50LnN0eWxlVXJscyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuICBjbGVhclJlc29sdXRpb25PZkNvbXBvbmVudFJlc291cmNlc1F1ZXVlKCk7XG4gIHJldHVybiBQcm9taXNlLmFsbCh1cmxGZXRjaGVzKS50aGVuKCgpID0+IG51bGwpO1xufVxuXG5jb25zdCBjb21wb25lbnRSZXNvdXJjZVJlc29sdXRpb25RdWV1ZTogU2V0PENvbXBvbmVudD4gPSBuZXcgU2V0KCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXliZVF1ZXVlUmVzb2x1dGlvbk9mQ29tcG9uZW50UmVzb3VyY2VzKG1ldGFkYXRhOiBDb21wb25lbnQpIHtcbiAgaWYgKGNvbXBvbmVudE5lZWRzUmVzb2x1dGlvbihtZXRhZGF0YSkpIHtcbiAgICBjb21wb25lbnRSZXNvdXJjZVJlc29sdXRpb25RdWV1ZS5hZGQobWV0YWRhdGEpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wb25lbnROZWVkc1Jlc29sdXRpb24oY29tcG9uZW50OiBDb21wb25lbnQpOiBib29sZWFuIHtcbiAgcmV0dXJuICEhKFxuICAgICAgKGNvbXBvbmVudC50ZW1wbGF0ZVVybCAmJiAhY29tcG9uZW50LnRlbXBsYXRlKSB8fFxuICAgICAgY29tcG9uZW50LnN0eWxlVXJscyAmJiBjb21wb25lbnQuc3R5bGVVcmxzLmxlbmd0aCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2xlYXJSZXNvbHV0aW9uT2ZDb21wb25lbnRSZXNvdXJjZXNRdWV1ZSgpIHtcbiAgY29tcG9uZW50UmVzb3VyY2VSZXNvbHV0aW9uUXVldWUuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwUmVzcG9uc2UocmVzcG9uc2U6IHN0cmluZyB8IHt0ZXh0KCk6IFByb21pc2U8c3RyaW5nPn0pOiBzdHJpbmd8UHJvbWlzZTxzdHJpbmc+IHtcbiAgcmV0dXJuIHR5cGVvZiByZXNwb25zZSA9PSAnc3RyaW5nJyA/IHJlc3BvbnNlIDogcmVzcG9uc2UudGV4dCgpO1xufVxuIl19","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst ViewEncapsulation = {\n    /**\n     * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n     * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n     * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n     * selectors.\n     *\n     * This is the default option.\n     */\n    Emulated: 0,\n    /**\n     * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.\n     * Use the native encapsulation mechanism of the renderer.\n     *\n     * For the DOM this means using the deprecated [Shadow DOM\n     * v0](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * creating a ShadowRoot for Component's Host Element.\n     */\n    Native: 1,\n    /**\n     * Don't provide any template or style encapsulation.\n     */\n    None: 2,\n    /**\n     * Use Shadow DOM to encapsulate styles.\n     *\n     * For the DOM this means using modern [Shadow\n     * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * creating a ShadowRoot for Component's Host Element.\n     */\n    ShadowDom: 3,\n};\nexport { ViewEncapsulation };\nViewEncapsulation[ViewEncapsulation.Emulated] = 'Emulated';\nViewEncapsulation[ViewEncapsulation.Native] = 'Native';\nViewEncapsulation[ViewEncapsulation.None] = 'None';\nViewEncapsulation[ViewEncapsulation.ShadowDom] = 'ShadowDom';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL21ldGFkYXRhL3ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztJQXFCRTs7Ozs7OztPQU9HO0lBQ0gsV0FBWTtJQUNaOzs7Ozs7O09BT0c7SUFDSCxTQUFVO0lBQ1Y7O09BRUc7SUFDSCxPQUFRO0lBRVI7Ozs7OztPQU1HO0lBQ0gsWUFBYSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLyoqXG4gKiBEZWZpbmVzIHRlbXBsYXRlIGFuZCBzdHlsZSBlbmNhcHN1bGF0aW9uIG9wdGlvbnMgYXZhaWxhYmxlIGZvciBDb21wb25lbnQncyB7QGxpbmsgQ29tcG9uZW50fS5cbiAqXG4gKiBTZWUge0BsaW5rIENvbXBvbmVudCNlbmNhcHN1bGF0aW9uIGVuY2Fwc3VsYXRpb259LlxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIHtAZXhhbXBsZSBjb3JlL3RzL21ldGFkYXRhL2VuY2Fwc3VsYXRpb24udHMgcmVnaW9uPSdsb25nZm9ybSd9XG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgZW51bSBWaWV3RW5jYXBzdWxhdGlvbiB7XG4gIC8qKlxuICAgKiBFbXVsYXRlIGBOYXRpdmVgIHNjb3Bpbmcgb2Ygc3R5bGVzIGJ5IGFkZGluZyBhbiBhdHRyaWJ1dGUgY29udGFpbmluZyBzdXJyb2dhdGUgaWQgdG8gdGhlIEhvc3RcbiAgICogRWxlbWVudCBhbmQgcHJlLXByb2Nlc3NpbmcgdGhlIHN0eWxlIHJ1bGVzIHByb3ZpZGVkIHZpYSB7QGxpbmsgQ29tcG9uZW50I3N0eWxlcyBzdHlsZXN9IG9yXG4gICAqIHtAbGluayBDb21wb25lbnQjc3R5bGVVcmxzIHN0eWxlVXJsc30sIGFuZCBhZGRpbmcgdGhlIG5ldyBIb3N0IEVsZW1lbnQgYXR0cmlidXRlIHRvIGFsbFxuICAgKiBzZWxlY3RvcnMuXG4gICAqXG4gICAqIFRoaXMgaXMgdGhlIGRlZmF1bHQgb3B0aW9uLlxuICAgKi9cbiAgRW11bGF0ZWQgPSAwLFxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgdjYuMS4wIC0gdXNlIHtWaWV3RW5jYXBzdWxhdGlvbi5TaGFkb3dEb219IGluc3RlYWQuXG4gICAqIFVzZSB0aGUgbmF0aXZlIGVuY2Fwc3VsYXRpb24gbWVjaGFuaXNtIG9mIHRoZSByZW5kZXJlci5cbiAgICpcbiAgICogRm9yIHRoZSBET00gdGhpcyBtZWFucyB1c2luZyB0aGUgZGVwcmVjYXRlZCBbU2hhZG93IERPTVxuICAgKiB2MF0oaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmNvbXBvbmVudHMvc3BlYy9zaGFkb3cvKSBhbmRcbiAgICogY3JlYXRpbmcgYSBTaGFkb3dSb290IGZvciBDb21wb25lbnQncyBIb3N0IEVsZW1lbnQuXG4gICAqL1xuICBOYXRpdmUgPSAxLFxuICAvKipcbiAgICogRG9uJ3QgcHJvdmlkZSBhbnkgdGVtcGxhdGUgb3Igc3R5bGUgZW5jYXBzdWxhdGlvbi5cbiAgICovXG4gIE5vbmUgPSAyLFxuXG4gIC8qKlxuICAgKiBVc2UgU2hhZG93IERPTSB0byBlbmNhcHN1bGF0ZSBzdHlsZXMuXG4gICAqXG4gICAqIEZvciB0aGUgRE9NIHRoaXMgbWVhbnMgdXNpbmcgbW9kZXJuIFtTaGFkb3dcbiAgICogRE9NXShodHRwczovL3czYy5naXRodWIuaW8vd2ViY29tcG9uZW50cy9zcGVjL3NoYWRvdy8pIGFuZFxuICAgKiBjcmVhdGluZyBhIFNoYWRvd1Jvb3QgZm9yIENvbXBvbmVudCdzIEhvc3QgRWxlbWVudC5cbiAgICovXG4gIFNoYWRvd0RvbSA9IDNcbn1cbiJdfQ==","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n*/\nimport '../util/ng_dev_mode';\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n * @type {?}\n */\nexport const EMPTY_OBJ = {};\n/** @type {?} */\nexport const EMPTY_ARRAY = [];\n// freezing the values prevents any code from accidentally inserting new values in\nif (typeof ngDevMode !== 'undefined' && ngDevMode) {\n    Object.freeze(EMPTY_OBJ);\n    Object.freeze(EMPTY_ARRAY);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1wdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL2VtcHR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBT0EsT0FBTyxxQkFBcUIsQ0FBQzs7Ozs7Ozs7QUFTN0IsTUFBTSxPQUFPLFNBQVMsR0FBTyxFQUFFOztBQUMvQixNQUFNLE9BQU8sV0FBVyxHQUFVLEVBQUU7O0FBR3BDLElBQUksT0FBTyxTQUFTLEtBQUssV0FBVyxJQUFJLFNBQVMsRUFBRTtJQUNqRCxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3pCLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7Q0FDNUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiogQGxpY2Vuc2VcbiogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4qXG4qIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4qIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiovXG5pbXBvcnQgJy4uL3V0aWwvbmdfZGV2X21vZGUnO1xuXG4vKipcbiAqIFRoaXMgZmlsZSBjb250YWlucyByZXVzZWFibGUgXCJlbXB0eVwiIHN5bWJvbHMgdGhhdCBjYW4gYmUgdXNlZCBhcyBkZWZhdWx0IHJldHVybiB2YWx1ZXNcbiAqIGluIGRpZmZlcmVudCBwYXJ0cyBvZiB0aGUgcmVuZGVyaW5nIGNvZGUuIEJlY2F1c2UgdGhlIHNhbWUgc3ltYm9scyBhcmUgcmV0dXJuZWQsIHRoaXNcbiAqIGFsbG93cyBmb3IgaWRlbnRpdHkgY2hlY2tzIGFnYWluc3QgdGhlc2UgdmFsdWVzIHRvIGJlIGNvbnNpc3RlbnRseSB1c2VkIGJ5IHRoZSBmcmFtZXdvcmtcbiAqIGNvZGUuXG4gKi9cblxuZXhwb3J0IGNvbnN0IEVNUFRZX09CSjoge30gPSB7fTtcbmV4cG9ydCBjb25zdCBFTVBUWV9BUlJBWTogYW55W10gPSBbXTtcblxuLy8gZnJlZXppbmcgdGhlIHZhbHVlcyBwcmV2ZW50cyBhbnkgY29kZSBmcm9tIGFjY2lkZW50YWxseSBpbnNlcnRpbmcgbmV3IHZhbHVlcyBpblxuaWYgKHR5cGVvZiBuZ0Rldk1vZGUgIT09ICd1bmRlZmluZWQnICYmIG5nRGV2TW9kZSkge1xuICBPYmplY3QuZnJlZXplKEVNUFRZX09CSik7XG4gIE9iamVjdC5mcmVlemUoRU1QVFlfQVJSQVkpO1xufVxuIl19","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { global } from '../../util/global';\n/**\n * Returns whether the values are different from a change detection stand point.\n *\n * Constraints are relaxed in checkNoChanges mode. See `devModeEqual` for details.\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function isDifferent(a, b) {\n    // NaN is the only value that is not equal to itself so the first\n    // test checks if both a and b are not NaN\n    return !(a !== a && b !== b) && a !== b;\n}\n/**\n * Used for stringify render output in Ivy.\n * @param {?} value\n * @return {?}\n */\nexport function renderStringify(value) {\n    if (typeof value == 'function')\n        return value.name || value;\n    if (typeof value == 'string')\n        return value;\n    if (value == null)\n        return '';\n    if (typeof value == 'object' && typeof value.type == 'function')\n        return value.type.name || value.type;\n    return '' + value;\n}\n/** @type {?} */\nexport const defaultScheduler = (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame || // browser only\n    setTimeout // everything else\n).bind(global);\n/**\n * @param {?} element\n * @return {?}\n */\nexport function resolveWindow(element) {\n    return { name: 'window', target: element.ownerDocument.defaultView };\n}\n/**\n * @param {?} element\n * @return {?}\n */\nexport function resolveDocument(element) {\n    return { name: 'document', target: element.ownerDocument };\n}\n/**\n * @param {?} element\n * @return {?}\n */\nexport function resolveBody(element) {\n    return { name: 'body', target: element.ownerDocument.body };\n}\n/**\n * The special delimiter we use to separate property names, prefixes, and suffixes\n * in property binding metadata. See storeBindingMetadata().\n *\n * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\n * because it is a very uncommon character that is unlikely to be part of a user's\n * property names or interpolation strings. If it is in fact used in a property\n * binding, DebugElement.properties will not return the correct value for that\n * binding. However, there should be no runtime effect for real applications.\n *\n * This character is typically rendered as a question mark inside of a diamond.\n * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\n *\n * @type {?}\n */\nexport const INTERPOLATION_DELIMITER = `�`;\n/**\n * Determines whether or not the given string is a property metadata string.\n * See storeBindingMetadata().\n * @param {?} str\n * @return {?}\n */\nexport function isPropMetadataString(str) {\n    return str.indexOf(INTERPOLATION_DELIMITER) >= 0;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlzY191dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3JlbmRlcjMvdXRpbC9taXNjX3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBU0EsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLG1CQUFtQixDQUFDOzs7Ozs7Ozs7QUFVekMsTUFBTSxVQUFVLFdBQVcsQ0FBQyxDQUFNLEVBQUUsQ0FBTTtJQUN4QyxpRUFBaUU7SUFDakUsMENBQTBDO0lBQzFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUMsQ0FBQzs7Ozs7O0FBS0QsTUFBTSxVQUFVLGVBQWUsQ0FBQyxLQUFVO0lBQ3hDLElBQUksT0FBTyxLQUFLLElBQUksVUFBVTtRQUFFLE9BQU8sS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUM7SUFDM0QsSUFBSSxPQUFPLEtBQUssSUFBSSxRQUFRO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFDM0MsSUFBSSxLQUFLLElBQUksSUFBSTtRQUFFLE9BQU8sRUFBRSxDQUFDO0lBQzdCLElBQUksT0FBTyxLQUFLLElBQUksUUFBUSxJQUFJLE9BQU8sS0FBSyxDQUFDLElBQUksSUFBSSxVQUFVO1FBQzdELE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQztJQUN2QyxPQUFPLEVBQUUsR0FBRyxLQUFLLENBQUM7QUFDcEIsQ0FBQzs7QUFHRCxNQUFNLE9BQU8sZ0JBQWdCLEdBQ3pCLENBQUMsT0FBTyxxQkFBcUIsS0FBSyxXQUFXLElBQUkscUJBQXFCLElBQUssZUFBZTtJQUN6RixVQUFVLENBQWdFLGtCQUFrQjtDQUMzRixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7Ozs7O0FBRW5CLE1BQU0sVUFBVSxhQUFhLENBQUMsT0FBNkM7SUFDekUsT0FBTyxFQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFDLENBQUM7QUFDckUsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUFDLE9BQTZDO0lBQzNFLE9BQU8sRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsYUFBYSxFQUFDLENBQUM7QUFDM0QsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLE9BQTZDO0lBQ3ZFLE9BQU8sRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksRUFBQyxDQUFDO0FBQzVELENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQkQsTUFBTSxPQUFPLHVCQUF1QixHQUFHLEdBQUc7Ozs7Ozs7QUFNMUMsTUFBTSxVQUFVLG9CQUFvQixDQUFDLEdBQVc7SUFDOUMsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ25ELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7YXNzZXJ0RGVmaW5lZH0gZnJvbSAnLi4vLi4vdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHtnbG9iYWx9IGZyb20gJy4uLy4uL3V0aWwvZ2xvYmFsJztcbmltcG9ydCB7UkVsZW1lbnR9IGZyb20gJy4uL2ludGVyZmFjZXMvcmVuZGVyZXInO1xuaW1wb3J0IHtDT05URVhULCBMVmlldywgUm9vdENvbnRleHR9IGZyb20gJy4uL2ludGVyZmFjZXMvdmlldyc7XG5pbXBvcnQge2dldFJvb3RWaWV3fSBmcm9tICcuL3ZpZXdfdHJhdmVyc2FsX3V0aWxzJztcblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHZhbHVlcyBhcmUgZGlmZmVyZW50IGZyb20gYSBjaGFuZ2UgZGV0ZWN0aW9uIHN0YW5kIHBvaW50LlxuICpcbiAqIENvbnN0cmFpbnRzIGFyZSByZWxheGVkIGluIGNoZWNrTm9DaGFuZ2VzIG1vZGUuIFNlZSBgZGV2TW9kZUVxdWFsYCBmb3IgZGV0YWlscy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRGlmZmVyZW50KGE6IGFueSwgYjogYW55KTogYm9vbGVhbiB7XG4gIC8vIE5hTiBpcyB0aGUgb25seSB2YWx1ZSB0aGF0IGlzIG5vdCBlcXVhbCB0byBpdHNlbGYgc28gdGhlIGZpcnN0XG4gIC8vIHRlc3QgY2hlY2tzIGlmIGJvdGggYSBhbmQgYiBhcmUgbm90IE5hTlxuICByZXR1cm4gIShhICE9PSBhICYmIGIgIT09IGIpICYmIGEgIT09IGI7XG59XG5cbi8qKlxuICogVXNlZCBmb3Igc3RyaW5naWZ5IHJlbmRlciBvdXRwdXQgaW4gSXZ5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyU3RyaW5naWZ5KHZhbHVlOiBhbnkpOiBzdHJpbmcge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHJldHVybiB2YWx1ZS5uYW1lIHx8IHZhbHVlO1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSByZXR1cm4gdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gJyc7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLnR5cGUgPT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdmFsdWUudHlwZS5uYW1lIHx8IHZhbHVlLnR5cGU7XG4gIHJldHVybiAnJyArIHZhbHVlO1xufVxuXG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0U2NoZWR1bGVyID1cbiAgICAodHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZSAhPT0gJ3VuZGVmaW5lZCcgJiYgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8ICAvLyBicm93c2VyIG9ubHlcbiAgICAgc2V0VGltZW91dCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBldmVyeXRoaW5nIGVsc2VcbiAgICAgKS5iaW5kKGdsb2JhbCk7XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlV2luZG93KGVsZW1lbnQ6IFJFbGVtZW50ICYge293bmVyRG9jdW1lbnQ6IERvY3VtZW50fSkge1xuICByZXR1cm4ge25hbWU6ICd3aW5kb3cnLCB0YXJnZXQ6IGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld307XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlRG9jdW1lbnQoZWxlbWVudDogUkVsZW1lbnQgJiB7b3duZXJEb2N1bWVudDogRG9jdW1lbnR9KSB7XG4gIHJldHVybiB7bmFtZTogJ2RvY3VtZW50JywgdGFyZ2V0OiBlbGVtZW50Lm93bmVyRG9jdW1lbnR9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUJvZHkoZWxlbWVudDogUkVsZW1lbnQgJiB7b3duZXJEb2N1bWVudDogRG9jdW1lbnR9KSB7XG4gIHJldHVybiB7bmFtZTogJ2JvZHknLCB0YXJnZXQ6IGVsZW1lbnQub3duZXJEb2N1bWVudC5ib2R5fTtcbn1cblxuLyoqXG4gKiBUaGUgc3BlY2lhbCBkZWxpbWl0ZXIgd2UgdXNlIHRvIHNlcGFyYXRlIHByb3BlcnR5IG5hbWVzLCBwcmVmaXhlcywgYW5kIHN1ZmZpeGVzXG4gKiBpbiBwcm9wZXJ0eSBiaW5kaW5nIG1ldGFkYXRhLiBTZWUgc3RvcmVCaW5kaW5nTWV0YWRhdGEoKS5cbiAqXG4gKiBXZSBpbnRlbnRpb25hbGx5IHVzZSB0aGUgVW5pY29kZSBcIlJFUExBQ0VNRU5UIENIQVJBQ1RFUlwiIChVK0ZGRkQpIGFzIGEgZGVsaW1pdGVyXG4gKiBiZWNhdXNlIGl0IGlzIGEgdmVyeSB1bmNvbW1vbiBjaGFyYWN0ZXIgdGhhdCBpcyB1bmxpa2VseSB0byBiZSBwYXJ0IG9mIGEgdXNlcidzXG4gKiBwcm9wZXJ0eSBuYW1lcyBvciBpbnRlcnBvbGF0aW9uIHN0cmluZ3MuIElmIGl0IGlzIGluIGZhY3QgdXNlZCBpbiBhIHByb3BlcnR5XG4gKiBiaW5kaW5nLCBEZWJ1Z0VsZW1lbnQucHJvcGVydGllcyB3aWxsIG5vdCByZXR1cm4gdGhlIGNvcnJlY3QgdmFsdWUgZm9yIHRoYXRcbiAqIGJpbmRpbmcuIEhvd2V2ZXIsIHRoZXJlIHNob3VsZCBiZSBubyBydW50aW1lIGVmZmVjdCBmb3IgcmVhbCBhcHBsaWNhdGlvbnMuXG4gKlxuICogVGhpcyBjaGFyYWN0ZXIgaXMgdHlwaWNhbGx5IHJlbmRlcmVkIGFzIGEgcXVlc3Rpb24gbWFyayBpbnNpZGUgb2YgYSBkaWFtb25kLlxuICogU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NwZWNpYWxzXyhVbmljb2RlX2Jsb2NrKVxuICpcbiAqL1xuZXhwb3J0IGNvbnN0IElOVEVSUE9MQVRJT05fREVMSU1JVEVSID0gYO+/vWA7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0aGUgZ2l2ZW4gc3RyaW5nIGlzIGEgcHJvcGVydHkgbWV0YWRhdGEgc3RyaW5nLlxuICogU2VlIHN0b3JlQmluZGluZ01ldGFkYXRhKCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3BNZXRhZGF0YVN0cmluZyhzdHI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gc3RyLmluZGV4T2YoSU5URVJQT0xBVElPTl9ERUxJTUlURVIpID49IDA7XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getClosureSafeProperty } from '../../util/property';\n/**\n * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\n * in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ngInjectableDef` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * @publicApi\n */\nexport function defineInjectable(opts) {\n    return {\n        providedIn: opts.providedIn || null, factory: opts.factory, value: undefined,\n    };\n}\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static `ngInjectorDef` field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\n *   create the type must be provided. If that factory function needs to inject arguments, it can\n *   use the `inject` function.\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has an `ngInjectableDef` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @publicApi\n */\nexport function defineInjector(options) {\n    return {\n        factory: options.factory, providers: options.providers || [], imports: options.imports || [],\n    };\n}\n/**\n * Read the `ngInjectableDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have `ngInjectableDef`\n */\nexport function getInjectableDef(type) {\n    return type && type.hasOwnProperty(NG_INJECTABLE_DEF) ? type[NG_INJECTABLE_DEF] : null;\n}\n/**\n * Read the `ngInjectorDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have `ngInjectorDef`\n */\nexport function getInjectorDef(type) {\n    return type && type.hasOwnProperty(NG_INJECTOR_DEF) ? type[NG_INJECTOR_DEF] : null;\n}\nexport const NG_INJECTABLE_DEF = getClosureSafeProperty({ ngInjectableDef: getClosureSafeProperty });\nexport const NG_INJECTOR_DEF = getClosureSafeProperty({ ngInjectorDef: getClosureSafeProperty });\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection flags for DI.\n *\n * @publicApi\n */\nexport var InjectFlags;\n(function (InjectFlags) {\n    // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.\n    /** Check self and check parent injector if needed */\n    InjectFlags[InjectFlags[\"Default\"] = 0] = \"Default\";\n    /**\n     * Specifies that an injector should retrieve a dependency from any injector until reaching the\n     * host element of the current component. (Only used with Element Injector)\n     */\n    InjectFlags[InjectFlags[\"Host\"] = 1] = \"Host\";\n    /** Don't ascend to ancestors of the node requesting injection. */\n    InjectFlags[InjectFlags[\"Self\"] = 2] = \"Self\";\n    /** Skip the node that is requesting injection. */\n    InjectFlags[InjectFlags[\"SkipSelf\"] = 4] = \"SkipSelf\";\n    /** Inject `defaultValue` instead if token not found. */\n    InjectFlags[InjectFlags[\"Optional\"] = 8] = \"Optional\";\n})(InjectFlags || (InjectFlags = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9kaS9pbnRlcmZhY2UvaW5qZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBR0g7Ozs7R0FJRztBQUNILE1BQU0sQ0FBTixJQUFZLFdBZ0JYO0FBaEJELFdBQVksV0FBVztJQUNyQixnR0FBZ0c7SUFFaEcscURBQXFEO0lBQ3JELG1EQUFnQixDQUFBO0lBQ2hCOzs7T0FHRztJQUNILDZDQUFhLENBQUE7SUFDYixrRUFBa0U7SUFDbEUsNkNBQWEsQ0FBQTtJQUNiLGtEQUFrRDtJQUNsRCxxREFBaUIsQ0FBQTtJQUNqQix3REFBd0Q7SUFDeEQscURBQWlCLENBQUE7QUFDbkIsQ0FBQyxFQWhCVyxXQUFXLEtBQVgsV0FBVyxRQWdCdEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cblxuLyoqXG4gKiBJbmplY3Rpb24gZmxhZ3MgZm9yIERJLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGVudW0gSW5qZWN0RmxhZ3Mge1xuICAvLyBUT0RPKGFseGh1Yik6IG1ha2UgdGhpcyAnY29uc3QnIHdoZW4gbmdjIG5vIGxvbmdlciB3cml0ZXMgZXhwb3J0cyBvZiBpdCBpbnRvIG5nZmFjdG9yeSBmaWxlcy5cblxuICAvKiogQ2hlY2sgc2VsZiBhbmQgY2hlY2sgcGFyZW50IGluamVjdG9yIGlmIG5lZWRlZCAqL1xuICBEZWZhdWx0ID0gMGIwMDAwLFxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoYXQgYW4gaW5qZWN0b3Igc2hvdWxkIHJldHJpZXZlIGEgZGVwZW5kZW5jeSBmcm9tIGFueSBpbmplY3RvciB1bnRpbCByZWFjaGluZyB0aGVcbiAgICogaG9zdCBlbGVtZW50IG9mIHRoZSBjdXJyZW50IGNvbXBvbmVudC4gKE9ubHkgdXNlZCB3aXRoIEVsZW1lbnQgSW5qZWN0b3IpXG4gICAqL1xuICBIb3N0ID0gMGIwMDAxLFxuICAvKiogRG9uJ3QgYXNjZW5kIHRvIGFuY2VzdG9ycyBvZiB0aGUgbm9kZSByZXF1ZXN0aW5nIGluamVjdGlvbi4gKi9cbiAgU2VsZiA9IDBiMDAxMCxcbiAgLyoqIFNraXAgdGhlIG5vZGUgdGhhdCBpcyByZXF1ZXN0aW5nIGluamVjdGlvbi4gKi9cbiAgU2tpcFNlbGYgPSAwYjAxMDAsXG4gIC8qKiBJbmplY3QgYGRlZmF1bHRWYWx1ZWAgaW5zdGVhZCBpZiB0b2tlbiBub3QgZm91bmQuICovXG4gIE9wdGlvbmFsID0gMGIxMDAwLFxufVxuIl19","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util/stringify';\nimport { getInjectableDef } from './interface/defs';\nimport { InjectFlags } from './interface/injector';\nimport { Inject, Optional, Self, SkipSelf } from './metadata';\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n * @type {?}\n */\nlet _currentInjector = undefined;\n/**\n * @param {?} injector\n * @return {?}\n */\nexport function setCurrentInjector(injector) {\n    /** @type {?} */\n    const former = _currentInjector;\n    _currentInjector = injector;\n    return former;\n}\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n * @type {?}\n */\nlet _injectImplementation;\n/**\n * Sets the current inject implementation.\n * @param {?} impl\n * @return {?}\n */\nexport function setInjectImplementation(impl) {\n    /** @type {?} */\n    const previous = _injectImplementation;\n    _injectImplementation = impl;\n    return previous;\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nexport function injectInjectorOnly(token, flags = InjectFlags.Default) {\n    if (_currentInjector === undefined) {\n        throw new Error(`inject() must be called from an injection context`);\n    }\n    else if (_currentInjector === null) {\n        return injectRootLimpMode(token, undefined, flags);\n    }\n    else {\n        return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n    }\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nexport function inject(token, flags = InjectFlags.Default) {\n    return (_injectImplementation || injectInjectorOnly)(token, flags);\n}\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * `InjectableDef`.\n * @template T\n * @param {?} token\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nexport function injectRootLimpMode(token, notFoundValue, flags) {\n    /** @type {?} */\n    const injectableDef = getInjectableDef(token);\n    if (injectableDef && injectableDef.providedIn == 'root') {\n        return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n            injectableDef.value;\n    }\n    if (flags & InjectFlags.Optional)\n        return null;\n    if (notFoundValue !== undefined)\n        return notFoundValue;\n    throw new Error(`Injector: NOT_FOUND [${stringify(token)}]`);\n}\n/**\n * @param {?} types\n * @return {?}\n */\nexport function injectArgs(types) {\n    /** @type {?} */\n    const args = [];\n    for (let i = 0; i < types.length; i++) {\n        /** @type {?} */\n        const arg = types[i];\n        if (Array.isArray(arg)) {\n            if (arg.length === 0) {\n                throw new Error('Arguments array must have arguments.');\n            }\n            /** @type {?} */\n            let type = undefined;\n            /** @type {?} */\n            let flags = InjectFlags.Default;\n            for (let j = 0; j < arg.length; j++) {\n                /** @type {?} */\n                const meta = arg[j];\n                if (meta instanceof Optional || meta.ngMetadataName === 'Optional') {\n                    flags |= InjectFlags.Optional;\n                }\n                else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf') {\n                    flags |= InjectFlags.SkipSelf;\n                }\n                else if (meta instanceof Self || meta.ngMetadataName === 'Self') {\n                    flags |= InjectFlags.Self;\n                }\n                else if (meta instanceof Inject) {\n                    type = meta.token;\n                }\n                else {\n                    type = meta;\n                }\n            }\n            args.push(inject((/** @type {?} */ (type)), flags));\n        }\n        else {\n            args.push(inject(arg));\n        }\n    }\n    return args;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport '../util/ng_dev_mode';\nimport { ChangeDetectionStrategy } from '../change_detection/constants';\nimport { ViewEncapsulation } from '../metadata/view';\nimport { noSideEffects } from '../util/closure';\nimport { stringify } from '../util/stringify';\nimport { EMPTY_ARRAY, EMPTY_OBJ } from './empty';\nimport { NG_COMPONENT_DEF, NG_DIRECTIVE_DEF, NG_MODULE_DEF, NG_PIPE_DEF } from './fields';\n/** @type {?} */\nlet _renderCompCount = 0;\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngComponentDef = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @template T\n * @param {?} componentDefinition\n * @return {?}\n */\nexport function defineComponent(componentDefinition) {\n    /** @type {?} */\n    const type = componentDefinition.type;\n    /** @type {?} */\n    const typePrototype = type.prototype;\n    /** @type {?} */\n    const declaredInputs = (/** @type {?} */ ({}));\n    /** @type {?} */\n    const def = {\n        type: type,\n        providersResolver: null,\n        consts: componentDefinition.consts,\n        vars: componentDefinition.vars,\n        factory: componentDefinition.factory,\n        template: componentDefinition.template || (/** @type {?} */ (null)),\n        ngContentSelectors: componentDefinition.ngContentSelectors,\n        hostBindings: componentDefinition.hostBindings || null,\n        contentQueries: componentDefinition.contentQueries || null,\n        declaredInputs: declaredInputs,\n        inputs: (/** @type {?} */ (null)),\n        // assigned in noSideEffects\n        outputs: (/** @type {?} */ (null)),\n        // assigned in noSideEffects\n        exportAs: componentDefinition.exportAs || null,\n        onChanges: null,\n        onInit: typePrototype.ngOnInit || null,\n        doCheck: typePrototype.ngDoCheck || null,\n        afterContentInit: typePrototype.ngAfterContentInit || null,\n        afterContentChecked: typePrototype.ngAfterContentChecked || null,\n        afterViewInit: typePrototype.ngAfterViewInit || null,\n        afterViewChecked: typePrototype.ngAfterViewChecked || null,\n        onDestroy: typePrototype.ngOnDestroy || null,\n        onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n        directiveDefs: (/** @type {?} */ (null)),\n        // assigned in noSideEffects\n        pipeDefs: (/** @type {?} */ (null)),\n        // assigned in noSideEffects\n        selectors: componentDefinition.selectors,\n        viewQuery: componentDefinition.viewQuery || null,\n        features: componentDefinition.features || null,\n        data: componentDefinition.data || {},\n        // TODO(misko): convert ViewEncapsulation into const enum so that it can be used directly in the\n        // next line. Also `None` should be 0 not 2.\n        encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n        id: 'c',\n        styles: componentDefinition.styles || EMPTY_ARRAY,\n        _: (/** @type {?} */ (null)),\n        setInput: null,\n        schemas: componentDefinition.schemas || null,\n    };\n    def._ = (/** @type {?} */ (noSideEffects(() => {\n        /** @type {?} */\n        const directiveTypes = (/** @type {?} */ (componentDefinition.directives));\n        /** @type {?} */\n        const feature = componentDefinition.features;\n        /** @type {?} */\n        const pipeTypes = (/** @type {?} */ (componentDefinition.pipes));\n        def.id += _renderCompCount++;\n        def.inputs = invertObject(componentDefinition.inputs, declaredInputs),\n            def.outputs = invertObject(componentDefinition.outputs),\n            feature && feature.forEach((fn) => fn(def));\n        def.directiveDefs = directiveTypes ?\n            () => (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)\n                .map(extractDirectiveDef) :\n            null;\n        def.pipeDefs = pipeTypes ?\n            () => (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef) :\n            null;\n    })));\n    return (/** @type {?} */ (def));\n}\n/**\n * @param {?} type\n * @param {?} directives\n * @param {?} pipes\n * @return {?}\n */\nexport function setComponentScope(type, directives, pipes) {\n    /** @type {?} */\n    const def = ((/** @type {?} */ (type.ngComponentDef)));\n    def.directiveDefs = () => directives.map(extractDirectiveDef);\n    def.pipeDefs = () => pipes.map(extractPipeDef);\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function extractDirectiveDef(type) {\n    /** @type {?} */\n    const def = getComponentDef(type) || getDirectiveDef(type);\n    if (ngDevMode && !def) {\n        throw new Error(`'${type.name}' is neither 'ComponentType' or 'DirectiveType'.`);\n    }\n    return (/** @type {?} */ (def));\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function extractPipeDef(type) {\n    /** @type {?} */\n    const def = getPipeDef(type);\n    if (ngDevMode && !def) {\n        throw new Error(`'${type.name}' is not a 'PipeType'.`);\n    }\n    return (/** @type {?} */ (def));\n}\n/**\n * @template T\n * @param {?} def\n * @return {?}\n */\nexport function defineNgModule(def) {\n    /** @type {?} */\n    const res = {\n        type: def.type,\n        bootstrap: def.bootstrap || EMPTY_ARRAY,\n        declarations: def.declarations || EMPTY_ARRAY,\n        imports: def.imports || EMPTY_ARRAY,\n        exports: def.exports || EMPTY_ARRAY,\n        transitiveCompileScopes: null,\n        schemas: def.schemas || null,\n    };\n    return (/** @type {?} */ (res));\n}\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n * \\@Input()\n *   propName1: string;\n *\n * \\@Input('publicName2')\n *   declaredPropName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName)\n *\n * ```\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in: (public name => declared name)\n *\n * ```\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n * }\n * ```\n *\n * @template T\n * @param {?=} obj\n * @param {?=} secondary\n * @return {?}\n */\nfunction invertObject(obj, secondary) {\n    if (obj == null)\n        return (/** @type {?} */ (EMPTY_OBJ));\n    /** @type {?} */\n    const newLookup = {};\n    for (const minifiedKey in obj) {\n        if (obj.hasOwnProperty(minifiedKey)) {\n            /** @type {?} */\n            let publicName = (/** @type {?} */ (obj[minifiedKey]));\n            /** @type {?} */\n            let declaredName = publicName;\n            if (Array.isArray(publicName)) {\n                declaredName = publicName[1];\n                publicName = publicName[0];\n            }\n            newLookup[publicName] = minifiedKey;\n            if (secondary) {\n                (secondary[publicName] = (/** @type {?} */ (declaredName)));\n            }\n        }\n    }\n    return newLookup;\n}\n/**\n * Create a base definition\n *\n * # Example\n * ```\n * class ShouldBeInherited {\n *   static ngBaseDef = defineBase({\n *      ...\n *   })\n * }\n * @template T\n * @param {?} baseDefinition The base definition parameters\n * @return {?}\n */\nexport function defineBase(baseDefinition) {\n    /** @type {?} */\n    const declaredInputs = (/** @type {?} */ ({}));\n    return {\n        inputs: invertObject((/** @type {?} */ (baseDefinition.inputs)), declaredInputs),\n        declaredInputs: declaredInputs,\n        outputs: invertObject((/** @type {?} */ (baseDefinition.outputs))),\n    };\n}\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngDirectiveDef = defineDirective({\n *     ...\n *   });\n * }\n * ```\n * @type {?}\n */\nexport const defineDirective = (/** @type {?} */ ((/** @type {?} */ (defineComponent))));\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ngPipeDef = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @template T\n * @param {?} pipeDef Pipe definition generated by the compiler\n * @return {?}\n */\nexport function definePipe(pipeDef) {\n    return (/** @type {?} */ (((/** @type {?} */ ({\n        name: pipeDef.name,\n        factory: pipeDef.factory,\n        pure: pipeDef.pure !== false,\n        onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n    })))));\n}\n/**\n * The following getter methods retrieve the definition form the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getComponentDef(type) {\n    return ((/** @type {?} */ (type)))[NG_COMPONENT_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getDirectiveDef(type) {\n    return ((/** @type {?} */ (type)))[NG_DIRECTIVE_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getPipeDef(type) {\n    return ((/** @type {?} */ (type)))[NG_PIPE_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @param {?=} throwNotFound\n * @return {?}\n */\nexport function getNgModuleDef(type, throwNotFound) {\n    /** @type {?} */\n    /** @nocollapse */ const ngModuleDef = ((/** @type {?} */ (type)))[NG_MODULE_DEF] || null;\n    if (!ngModuleDef && throwNotFound === true) {\n        throw new Error(`Type ${stringify(type)} does not have 'ngModuleDef' property.`);\n    }\n    return ngModuleDef;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n */\nexport function noSideEffects(fn) {\n    return '' + { toString: fn };\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvc3VyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3V0aWwvY2xvc3VyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sVUFBVSxhQUFhLENBQUMsRUFBYztJQUMxQyxPQUFPLEVBQUUsR0FBRyxFQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUMsQ0FBQztBQUM3QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vKipcbiAqIENvbnZpbmNlIGNsb3N1cmUgY29tcGlsZXIgdGhhdCB0aGUgd3JhcHBlZCBmdW5jdGlvbiBoYXMgbm8gc2lkZS1lZmZlY3RzLlxuICpcbiAqIENsb3N1cmUgY29tcGlsZXIgYWx3YXlzIGFzc3VtZXMgdGhhdCBgdG9TdHJpbmdgIGhhcyBubyBzaWRlLWVmZmVjdHMuIFdlIHVzZSB0aGlzIHF1aXJrIHRvXG4gKiBhbGxvdyB1cyB0byBleGVjdXRlIGEgZnVuY3Rpb24gYnV0IGhhdmUgY2xvc3VyZSBjb21waWxlciBtYXJrIHRoZSBjYWxsIGFzIG5vLXNpZGUtZWZmZWN0cy5cbiAqIEl0IGlzIGltcG9ydGFudCB0aGF0IHRoZSByZXR1cm4gdmFsdWUgZm9yIHRoZSBgbm9TaWRlRWZmZWN0c2AgZnVuY3Rpb24gYmUgYXNzaWduZWRcbiAqIHRvIHNvbWV0aGluZyB3aGljaCBpcyByZXRhaW5lZCBvdGhlcndpc2UgdGhlIGNhbGwgdG8gYG5vU2lkZUVmZmVjdHNgIHdpbGwgYmUgcmVtb3ZlZCBieSBjbG9zdXJlXG4gKiBjb21waWxlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vU2lkZUVmZmVjdHMoZm46ICgpID0+IHZvaWQpOiBzdHJpbmcge1xuICByZXR1cm4gJycgKyB7dG9TdHJpbmc6IGZufTtcbn0iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport const ERROR_TYPE = 'ngType';\nexport const ERROR_DEBUG_CONTEXT = 'ngDebugContext';\nexport const ERROR_ORIGINAL_ERROR = 'ngOriginalError';\nexport const ERROR_LOGGER = 'ngErrorLogger';\nexport function wrappedError(message, originalError) {\n    const msg = `${message} caused by: ${originalError instanceof Error ? originalError.message : originalError}`;\n    const error = Error(msg);\n    error[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvdXRpbC9lcnJvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQztBQUNuQyxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxnQkFBZ0IsQ0FBQztBQUNwRCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxpQkFBaUIsQ0FBQztBQUN0RCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsZUFBZSxDQUFDO0FBRzVDLE1BQU0sVUFBVSxZQUFZLENBQUMsT0FBZSxFQUFFLGFBQWtCO0lBQzlELE1BQU0sR0FBRyxHQUNMLEdBQUcsT0FBTyxlQUFlLGFBQWEsWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUEsQ0FBQyxDQUFDLGFBQWMsRUFBRSxDQUFDO0lBQ3RHLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4QixLQUFhLENBQUMsb0JBQW9CLENBQUMsR0FBRyxhQUFhLENBQUM7SUFDckQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5leHBvcnQgY29uc3QgRVJST1JfVFlQRSA9ICduZ1R5cGUnO1xuZXhwb3J0IGNvbnN0IEVSUk9SX0RFQlVHX0NPTlRFWFQgPSAnbmdEZWJ1Z0NvbnRleHQnO1xuZXhwb3J0IGNvbnN0IEVSUk9SX09SSUdJTkFMX0VSUk9SID0gJ25nT3JpZ2luYWxFcnJvcic7XG5leHBvcnQgY29uc3QgRVJST1JfTE9HR0VSID0gJ25nRXJyb3JMb2dnZXInO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwcGVkRXJyb3IobWVzc2FnZTogc3RyaW5nLCBvcmlnaW5hbEVycm9yOiBhbnkpOiBFcnJvciB7XG4gIGNvbnN0IG1zZyA9XG4gICAgICBgJHttZXNzYWdlfSBjYXVzZWQgYnk6ICR7b3JpZ2luYWxFcnJvciBpbnN0YW5jZW9mIEVycm9yID8gb3JpZ2luYWxFcnJvci5tZXNzYWdlOiBvcmlnaW5hbEVycm9yIH1gO1xuICBjb25zdCBlcnJvciA9IEVycm9yKG1zZyk7XG4gIChlcnJvciBhcyBhbnkpW0VSUk9SX09SSUdJTkFMX0VSUk9SXSA9IG9yaWdpbmFsRXJyb3I7XG4gIHJldHVybiBlcnJvcjtcbn1cbiJdfQ==","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ERROR_DEBUG_CONTEXT, ERROR_LOGGER, ERROR_ORIGINAL_ERROR, ERROR_TYPE } from './util/errors';\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getType(error) {\n    return ((/** @type {?} */ (error)))[ERROR_TYPE];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getDebugContext(error) {\n    return ((/** @type {?} */ (error)))[ERROR_DEBUG_CONTEXT];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getOriginalError(error) {\n    return ((/** @type {?} */ (error)))[ERROR_ORIGINAL_ERROR];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getErrorLogger(error) {\n    return ((/** @type {?} */ (error)))[ERROR_LOGGER] || defaultErrorLogger;\n}\n/**\n * @param {?} console\n * @param {...?} values\n * @return {?}\n */\nfunction defaultErrorLogger(console, ...values) {\n    ((/** @type {?} */ (console.error)))(...values);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZXJyb3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFDLG1CQUFtQixFQUFFLFlBQVksRUFBRSxvQkFBb0IsRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7Ozs7O0FBR2xHLE1BQU0sVUFBVSxPQUFPLENBQUMsS0FBWTtJQUNsQyxPQUFPLENBQUMsbUJBQUEsS0FBSyxFQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNwQyxDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxlQUFlLENBQUMsS0FBWTtJQUMxQyxPQUFPLENBQUMsbUJBQUEsS0FBSyxFQUFPLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQzdDLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUFDLEtBQVk7SUFDM0MsT0FBTyxDQUFDLG1CQUFBLEtBQUssRUFBTyxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUM5QyxDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUMsS0FBWTtJQUN6QyxPQUFPLENBQUMsbUJBQUEsS0FBSyxFQUFPLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxrQkFBa0IsQ0FBQztBQUM1RCxDQUFDOzs7Ozs7QUFHRCxTQUFTLGtCQUFrQixDQUFDLE9BQWdCLEVBQUUsR0FBRyxNQUFhO0lBQzVELENBQUMsbUJBQUssT0FBTyxDQUFDLEtBQUssRUFBQSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQztBQUNsQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0VSUk9SX0RFQlVHX0NPTlRFWFQsIEVSUk9SX0xPR0dFUiwgRVJST1JfT1JJR0lOQUxfRVJST1IsIEVSUk9SX1RZUEV9IGZyb20gJy4vdXRpbC9lcnJvcnMnO1xuaW1wb3J0IHtEZWJ1Z0NvbnRleHR9IGZyb20gJy4vdmlldyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBlKGVycm9yOiBFcnJvcik6IEZ1bmN0aW9uIHtcbiAgcmV0dXJuIChlcnJvciBhcyBhbnkpW0VSUk9SX1RZUEVdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVidWdDb250ZXh0KGVycm9yOiBFcnJvcik6IERlYnVnQ29udGV4dCB7XG4gIHJldHVybiAoZXJyb3IgYXMgYW55KVtFUlJPUl9ERUJVR19DT05URVhUXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE9yaWdpbmFsRXJyb3IoZXJyb3I6IEVycm9yKTogRXJyb3Ige1xuICByZXR1cm4gKGVycm9yIGFzIGFueSlbRVJST1JfT1JJR0lOQUxfRVJST1JdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXJyb3JMb2dnZXIoZXJyb3I6IEVycm9yKTogKGNvbnNvbGU6IENvbnNvbGUsIC4uLnZhbHVlczogYW55W10pID0+IHZvaWQge1xuICByZXR1cm4gKGVycm9yIGFzIGFueSlbRVJST1JfTE9HR0VSXSB8fCBkZWZhdWx0RXJyb3JMb2dnZXI7XG59XG5cblxuZnVuY3Rpb24gZGVmYXVsdEVycm9yTG9nZ2VyKGNvbnNvbGU6IENvbnNvbGUsIC4uLnZhbHVlczogYW55W10pIHtcbiAgKDxhbnk+Y29uc29sZS5lcnJvcikoLi4udmFsdWVzKTtcbn0iXX0=","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getDebugContext, getErrorLogger, getOriginalError } from './errors';\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * \\@publicApi\n */\nexport class ErrorHandler {\n    constructor() {\n        /**\n         * \\@internal\n         */\n        this._console = console;\n    }\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    handleError(error) {\n        /** @type {?} */\n        const originalError = this._findOriginalError(error);\n        /** @type {?} */\n        const context = this._findContext(error);\n        // Note: Browser consoles show the place from where console.error was called.\n        // We can use this to give users additional information about the error.\n        /** @type {?} */\n        const errorLogger = getErrorLogger(error);\n        errorLogger(this._console, `ERROR`, error);\n        if (originalError) {\n            errorLogger(this._console, `ORIGINAL ERROR`, originalError);\n        }\n        if (context) {\n            errorLogger(this._console, 'ERROR CONTEXT', context);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    _findContext(error) {\n        if (error) {\n            return getDebugContext(error) ? getDebugContext(error) :\n                this._findContext(getOriginalError(error));\n        }\n        return null;\n    }\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    _findOriginalError(error) {\n        /** @type {?} */\n        let e = getOriginalError(error);\n        while (e && getOriginalError(e)) {\n            e = getOriginalError(e);\n        }\n        return e;\n    }\n}\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ErrorHandler.prototype._console;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JfaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Vycm9yX2hhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQUMsZUFBZSxFQUFFLGNBQWMsRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLFVBQVUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE2QjNFLE1BQU0sT0FBTyxZQUFZO0lBQXpCOzs7O1FBSUUsYUFBUSxHQUFZLE9BQU8sQ0FBQztJQXFDOUIsQ0FBQzs7Ozs7SUFuQ0MsV0FBVyxDQUFDLEtBQVU7O2NBQ2QsYUFBYSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUM7O2NBQzlDLE9BQU8sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQzs7OztjQUdsQyxXQUFXLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQztRQUV6QyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDM0MsSUFBSSxhQUFhLEVBQUU7WUFDakIsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxDQUFDLENBQUM7U0FDN0Q7UUFDRCxJQUFJLE9BQU8sRUFBRTtZQUNYLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUN0RDtJQUNILENBQUM7Ozs7OztJQUdELFlBQVksQ0FBQyxLQUFVO1FBQ3JCLElBQUksS0FBSyxFQUFFO1lBQ1QsT0FBTyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUN4QixJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDNUU7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Ozs7OztJQUdELGtCQUFrQixDQUFDLEtBQVk7O1lBQ3pCLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUM7UUFDL0IsT0FBTyxDQUFDLElBQUksZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDL0IsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3pCO1FBRUQsT0FBTyxDQUFDLENBQUM7SUFDWCxDQUFDO0NBQ0Y7Ozs7OztJQXJDQyxnQ0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7Z2V0RGVidWdDb250ZXh0LCBnZXRFcnJvckxvZ2dlciwgZ2V0T3JpZ2luYWxFcnJvcn0gZnJvbSAnLi9lcnJvcnMnO1xuXG5cblxuLyoqXG4gKiBQcm92aWRlcyBhIGhvb2sgZm9yIGNlbnRyYWxpemVkIGV4Y2VwdGlvbiBoYW5kbGluZy5cbiAqXG4gKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBgRXJyb3JIYW5kbGVyYCBwcmludHMgZXJyb3IgbWVzc2FnZXMgdG8gdGhlIGBjb25zb2xlYC4gVG9cbiAqIGludGVyY2VwdCBlcnJvciBoYW5kbGluZywgd3JpdGUgYSBjdXN0b20gZXhjZXB0aW9uIGhhbmRsZXIgdGhhdCByZXBsYWNlcyB0aGlzIGRlZmF1bHQgYXNcbiAqIGFwcHJvcHJpYXRlIGZvciB5b3VyIGFwcC5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICogIyMjIEV4YW1wbGVcbiAqXG4gKiBgYGBcbiAqIGNsYXNzIE15RXJyb3JIYW5kbGVyIGltcGxlbWVudHMgRXJyb3JIYW5kbGVyIHtcbiAqICAgaGFuZGxlRXJyb3IoZXJyb3IpIHtcbiAqICAgICAvLyBkbyBzb21ldGhpbmcgd2l0aCB0aGUgZXhjZXB0aW9uXG4gKiAgIH1cbiAqIH1cbiAqXG4gKiBATmdNb2R1bGUoe1xuICogICBwcm92aWRlcnM6IFt7cHJvdmlkZTogRXJyb3JIYW5kbGVyLCB1c2VDbGFzczogTXlFcnJvckhhbmRsZXJ9XVxuICogfSlcbiAqIGNsYXNzIE15TW9kdWxlIHt9XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjbGFzcyBFcnJvckhhbmRsZXIge1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBfY29uc29sZTogQ29uc29sZSA9IGNvbnNvbGU7XG5cbiAgaGFuZGxlRXJyb3IoZXJyb3I6IGFueSk6IHZvaWQge1xuICAgIGNvbnN0IG9yaWdpbmFsRXJyb3IgPSB0aGlzLl9maW5kT3JpZ2luYWxFcnJvcihlcnJvcik7XG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuX2ZpbmRDb250ZXh0KGVycm9yKTtcbiAgICAvLyBOb3RlOiBCcm93c2VyIGNvbnNvbGVzIHNob3cgdGhlIHBsYWNlIGZyb20gd2hlcmUgY29uc29sZS5lcnJvciB3YXMgY2FsbGVkLlxuICAgIC8vIFdlIGNhbiB1c2UgdGhpcyB0byBnaXZlIHVzZXJzIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGVycm9yLlxuICAgIGNvbnN0IGVycm9yTG9nZ2VyID0gZ2V0RXJyb3JMb2dnZXIoZXJyb3IpO1xuXG4gICAgZXJyb3JMb2dnZXIodGhpcy5fY29uc29sZSwgYEVSUk9SYCwgZXJyb3IpO1xuICAgIGlmIChvcmlnaW5hbEVycm9yKSB7XG4gICAgICBlcnJvckxvZ2dlcih0aGlzLl9jb25zb2xlLCBgT1JJR0lOQUwgRVJST1JgLCBvcmlnaW5hbEVycm9yKTtcbiAgICB9XG4gICAgaWYgKGNvbnRleHQpIHtcbiAgICAgIGVycm9yTG9nZ2VyKHRoaXMuX2NvbnNvbGUsICdFUlJPUiBDT05URVhUJywgY29udGV4dCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfZmluZENvbnRleHQoZXJyb3I6IGFueSk6IGFueSB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICByZXR1cm4gZ2V0RGVidWdDb250ZXh0KGVycm9yKSA/IGdldERlYnVnQ29udGV4dChlcnJvcikgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9maW5kQ29udGV4dChnZXRPcmlnaW5hbEVycm9yKGVycm9yKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIF9maW5kT3JpZ2luYWxFcnJvcihlcnJvcjogRXJyb3IpOiBhbnkge1xuICAgIGxldCBlID0gZ2V0T3JpZ2luYWxFcnJvcihlcnJvcik7XG4gICAgd2hpbGUgKGUgJiYgZ2V0T3JpZ2luYWxFcnJvcihlKSkge1xuICAgICAgZSA9IGdldE9yaWdpbmFsRXJyb3IoZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGU7XG4gIH1cbn1cbiJdfQ==","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { devModeEqual } from '../change_detection/change_detection_util';\nimport { assertDataInRange, assertLessThan, assertNotEqual } from '../util/assert';\nimport { throwErrorIfNoChangesMode } from './errors';\nimport { getCheckNoChangesMode } from './state';\nimport { NO_CHANGE } from './tokens';\nimport { isDifferent } from './util/misc_utils';\n// TODO(misko): consider inlining\n/**\n * Updates binding and returns the value.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} value\n * @return {?}\n */\nexport function updateBinding(lView, bindingIndex, value) {\n    return lView[bindingIndex] = value;\n}\n/**\n * Gets the current binding value.\n * @param {?} lView\n * @param {?} bindingIndex\n * @return {?}\n */\nexport function getBinding(lView, bindingIndex) {\n    ngDevMode && assertDataInRange(lView, lView[bindingIndex]);\n    ngDevMode &&\n        assertNotEqual(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n    return lView[bindingIndex];\n}\n/**\n * Updates binding if changed, then returns whether it was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} value\n * @return {?}\n */\nexport function bindingUpdated(lView, bindingIndex, value) {\n    ngDevMode && assertNotEqual(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    ngDevMode &&\n        assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);\n    /** @type {?} */\n    const oldValue = lView[bindingIndex];\n    if (isDifferent(oldValue, value)) {\n        if (ngDevMode && getCheckNoChangesMode()) {\n            // View engine didn't report undefined values as changed on the first checkNoChanges pass\n            // (before the change detection was run).\n            /** @type {?} */\n            const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;\n            if (!devModeEqual(oldValueToCompare, value)) {\n                throwErrorIfNoChangesMode(oldValue === NO_CHANGE, oldValueToCompare, value);\n            }\n        }\n        lView[bindingIndex] = value;\n        return true;\n    }\n    return false;\n}\n/**\n * Updates 2 bindings if changed, then returns whether either was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @return {?}\n */\nexport function bindingUpdated2(lView, bindingIndex, exp1, exp2) {\n    /** @type {?} */\n    const different = bindingUpdated(lView, bindingIndex, exp1);\n    return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n}\n/**\n * Updates 3 bindings if changed, then returns whether any was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @return {?}\n */\nexport function bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {\n    /** @type {?} */\n    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n    return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n}\n/**\n * Updates 4 bindings if changed, then returns whether any was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @return {?}\n */\nexport function bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {\n    /** @type {?} */\n    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n    return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL2JpbmRpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDJDQUEyQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDakYsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sVUFBVSxDQUFDO0FBRW5ELE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUM5QyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBQ25DLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQzs7Ozs7Ozs7O0FBTTlDLE1BQU0sVUFBVSxhQUFhLENBQUMsS0FBWSxFQUFFLFlBQW9CLEVBQUUsS0FBVTtJQUMxRSxPQUFPLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxLQUFLLENBQUM7QUFDckMsQ0FBQzs7Ozs7OztBQUlELE1BQU0sVUFBVSxVQUFVLENBQUMsS0FBWSxFQUFFLFlBQW9CO0lBQzNELFNBQVMsSUFBSSxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDM0QsU0FBUztRQUNMLGNBQWMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEVBQUUsU0FBUyxFQUFFLHlDQUF5QyxDQUFDLENBQUM7SUFDOUYsT0FBTyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDN0IsQ0FBQzs7Ozs7Ozs7QUFHRCxNQUFNLFVBQVUsY0FBYyxDQUFDLEtBQVksRUFBRSxZQUFvQixFQUFFLEtBQVU7SUFDM0UsU0FBUyxJQUFJLGNBQWMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLDJDQUEyQyxDQUFDLENBQUM7SUFDM0YsU0FBUztRQUNMLGNBQWMsQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxnREFBZ0QsQ0FBQyxDQUFDOztVQUUzRixRQUFRLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztJQUNwQyxJQUFJLFdBQVcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLEVBQUU7UUFDaEMsSUFBSSxTQUFTLElBQUkscUJBQXFCLEVBQUUsRUFBRTs7OztrQkFHbEMsaUJBQWlCLEdBQUcsUUFBUSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTO1lBQ3ZFLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLEVBQUU7Z0JBQzNDLHlCQUF5QixDQUFDLFFBQVEsS0FBSyxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDN0U7U0FDRjtRQUNELEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDNUIsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQzs7Ozs7Ozs7O0FBR0QsTUFBTSxVQUFVLGVBQWUsQ0FBQyxLQUFZLEVBQUUsWUFBb0IsRUFBRSxJQUFTLEVBQUUsSUFBUzs7VUFDaEYsU0FBUyxHQUFHLGNBQWMsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQztJQUMzRCxPQUFPLGNBQWMsQ0FBQyxLQUFLLEVBQUUsWUFBWSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUM7QUFDcEUsQ0FBQzs7Ozs7Ozs7OztBQUdELE1BQU0sVUFBVSxlQUFlLENBQzNCLEtBQVksRUFBRSxZQUFvQixFQUFFLElBQVMsRUFBRSxJQUFTLEVBQUUsSUFBUzs7VUFDL0QsU0FBUyxHQUFHLGVBQWUsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7SUFDbEUsT0FBTyxjQUFjLENBQUMsS0FBSyxFQUFFLFlBQVksR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDO0FBQ3BFLENBQUM7Ozs7Ozs7Ozs7O0FBR0QsTUFBTSxVQUFVLGVBQWUsQ0FDM0IsS0FBWSxFQUFFLFlBQW9CLEVBQUUsSUFBUyxFQUFFLElBQVMsRUFBRSxJQUFTLEVBQUUsSUFBUzs7VUFDMUUsU0FBUyxHQUFHLGVBQWUsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7SUFDbEUsT0FBTyxlQUFlLENBQUMsS0FBSyxFQUFFLFlBQVksR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQztBQUMzRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge2Rldk1vZGVFcXVhbH0gZnJvbSAnLi4vY2hhbmdlX2RldGVjdGlvbi9jaGFuZ2VfZGV0ZWN0aW9uX3V0aWwnO1xuaW1wb3J0IHthc3NlcnREYXRhSW5SYW5nZSwgYXNzZXJ0TGVzc1RoYW4sIGFzc2VydE5vdEVxdWFsfSBmcm9tICcuLi91dGlsL2Fzc2VydCc7XG5pbXBvcnQge3Rocm93RXJyb3JJZk5vQ2hhbmdlc01vZGV9IGZyb20gJy4vZXJyb3JzJztcbmltcG9ydCB7TFZpZXd9IGZyb20gJy4vaW50ZXJmYWNlcy92aWV3JztcbmltcG9ydCB7Z2V0Q2hlY2tOb0NoYW5nZXNNb2RlfSBmcm9tICcuL3N0YXRlJztcbmltcG9ydCB7Tk9fQ0hBTkdFfSBmcm9tICcuL3Rva2Vucyc7XG5pbXBvcnQge2lzRGlmZmVyZW50fSBmcm9tICcuL3V0aWwvbWlzY191dGlscyc7XG5cblxuXG4vLyBUT0RPKG1pc2tvKTogY29uc2lkZXIgaW5saW5pbmdcbi8qKiBVcGRhdGVzIGJpbmRpbmcgYW5kIHJldHVybnMgdGhlIHZhbHVlLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUJpbmRpbmcobFZpZXc6IExWaWV3LCBiaW5kaW5nSW5kZXg6IG51bWJlciwgdmFsdWU6IGFueSk6IGFueSB7XG4gIHJldHVybiBsVmlld1tiaW5kaW5nSW5kZXhdID0gdmFsdWU7XG59XG5cblxuLyoqIEdldHMgdGhlIGN1cnJlbnQgYmluZGluZyB2YWx1ZS4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRCaW5kaW5nKGxWaWV3OiBMVmlldywgYmluZGluZ0luZGV4OiBudW1iZXIpOiBhbnkge1xuICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RGF0YUluUmFuZ2UobFZpZXcsIGxWaWV3W2JpbmRpbmdJbmRleF0pO1xuICBuZ0Rldk1vZGUgJiZcbiAgICAgIGFzc2VydE5vdEVxdWFsKGxWaWV3W2JpbmRpbmdJbmRleF0sIE5PX0NIQU5HRSwgJ1N0b3JlZCB2YWx1ZSBzaG91bGQgbmV2ZXIgYmUgTk9fQ0hBTkdFLicpO1xuICByZXR1cm4gbFZpZXdbYmluZGluZ0luZGV4XTtcbn1cblxuLyoqIFVwZGF0ZXMgYmluZGluZyBpZiBjaGFuZ2VkLCB0aGVuIHJldHVybnMgd2hldGhlciBpdCB3YXMgdXBkYXRlZC4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiaW5kaW5nVXBkYXRlZChsVmlldzogTFZpZXcsIGJpbmRpbmdJbmRleDogbnVtYmVyLCB2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gIG5nRGV2TW9kZSAmJiBhc3NlcnROb3RFcXVhbCh2YWx1ZSwgTk9fQ0hBTkdFLCAnSW5jb21pbmcgdmFsdWUgc2hvdWxkIG5ldmVyIGJlIE5PX0NIQU5HRS4nKTtcbiAgbmdEZXZNb2RlICYmXG4gICAgICBhc3NlcnRMZXNzVGhhbihiaW5kaW5nSW5kZXgsIGxWaWV3Lmxlbmd0aCwgYFNsb3Qgc2hvdWxkIGhhdmUgYmVlbiBpbml0aWFsaXplZCB0byBOT19DSEFOR0VgKTtcblxuICBjb25zdCBvbGRWYWx1ZSA9IGxWaWV3W2JpbmRpbmdJbmRleF07XG4gIGlmIChpc0RpZmZlcmVudChvbGRWYWx1ZSwgdmFsdWUpKSB7XG4gICAgaWYgKG5nRGV2TW9kZSAmJiBnZXRDaGVja05vQ2hhbmdlc01vZGUoKSkge1xuICAgICAgLy8gVmlldyBlbmdpbmUgZGlkbid0IHJlcG9ydCB1bmRlZmluZWQgdmFsdWVzIGFzIGNoYW5nZWQgb24gdGhlIGZpcnN0IGNoZWNrTm9DaGFuZ2VzIHBhc3NcbiAgICAgIC8vIChiZWZvcmUgdGhlIGNoYW5nZSBkZXRlY3Rpb24gd2FzIHJ1bikuXG4gICAgICBjb25zdCBvbGRWYWx1ZVRvQ29tcGFyZSA9IG9sZFZhbHVlICE9PSBOT19DSEFOR0UgPyBvbGRWYWx1ZSA6IHVuZGVmaW5lZDtcbiAgICAgIGlmICghZGV2TW9kZUVxdWFsKG9sZFZhbHVlVG9Db21wYXJlLCB2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3dFcnJvcklmTm9DaGFuZ2VzTW9kZShvbGRWYWx1ZSA9PT0gTk9fQ0hBTkdFLCBvbGRWYWx1ZVRvQ29tcGFyZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBsVmlld1tiaW5kaW5nSW5kZXhdID0gdmFsdWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKiBVcGRhdGVzIDIgYmluZGluZ3MgaWYgY2hhbmdlZCwgdGhlbiByZXR1cm5zIHdoZXRoZXIgZWl0aGVyIHdhcyB1cGRhdGVkLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJpbmRpbmdVcGRhdGVkMihsVmlldzogTFZpZXcsIGJpbmRpbmdJbmRleDogbnVtYmVyLCBleHAxOiBhbnksIGV4cDI6IGFueSk6IGJvb2xlYW4ge1xuICBjb25zdCBkaWZmZXJlbnQgPSBiaW5kaW5nVXBkYXRlZChsVmlldywgYmluZGluZ0luZGV4LCBleHAxKTtcbiAgcmV0dXJuIGJpbmRpbmdVcGRhdGVkKGxWaWV3LCBiaW5kaW5nSW5kZXggKyAxLCBleHAyKSB8fCBkaWZmZXJlbnQ7XG59XG5cbi8qKiBVcGRhdGVzIDMgYmluZGluZ3MgaWYgY2hhbmdlZCwgdGhlbiByZXR1cm5zIHdoZXRoZXIgYW55IHdhcyB1cGRhdGVkLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJpbmRpbmdVcGRhdGVkMyhcbiAgICBsVmlldzogTFZpZXcsIGJpbmRpbmdJbmRleDogbnVtYmVyLCBleHAxOiBhbnksIGV4cDI6IGFueSwgZXhwMzogYW55KTogYm9vbGVhbiB7XG4gIGNvbnN0IGRpZmZlcmVudCA9IGJpbmRpbmdVcGRhdGVkMihsVmlldywgYmluZGluZ0luZGV4LCBleHAxLCBleHAyKTtcbiAgcmV0dXJuIGJpbmRpbmdVcGRhdGVkKGxWaWV3LCBiaW5kaW5nSW5kZXggKyAyLCBleHAzKSB8fCBkaWZmZXJlbnQ7XG59XG5cbi8qKiBVcGRhdGVzIDQgYmluZGluZ3MgaWYgY2hhbmdlZCwgdGhlbiByZXR1cm5zIHdoZXRoZXIgYW55IHdhcyB1cGRhdGVkLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJpbmRpbmdVcGRhdGVkNChcbiAgICBsVmlldzogTFZpZXcsIGJpbmRpbmdJbmRleDogbnVtYmVyLCBleHAxOiBhbnksIGV4cDI6IGFueSwgZXhwMzogYW55LCBleHA0OiBhbnkpOiBib29sZWFuIHtcbiAgY29uc3QgZGlmZmVyZW50ID0gYmluZGluZ1VwZGF0ZWQyKGxWaWV3LCBiaW5kaW5nSW5kZXgsIGV4cDEsIGV4cDIpO1xuICByZXR1cm4gYmluZGluZ1VwZGF0ZWQyKGxWaWV3LCBiaW5kaW5nSW5kZXggKyAyLCBleHAzLCBleHA0KSB8fCBkaWZmZXJlbnQ7XG59XG4iXX0=","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This property will be monkey-patched on elements, components and directives\n * @type {?}\n */\nexport const MONKEY_PATCH_KEY_NAME = '__ngContext__';\n/**\n * The internal view context which is specific to a given DOM element, directive or\n * component instance. Each value in here (besides the LView and element node details)\n * can be present, null or undefined. If undefined then it implies the value has not been\n * looked up yet, otherwise, if null, then a lookup was executed and nothing was found.\n *\n * Each value will get filled when the respective value is examined within the getContext\n * function. The component, element and each directive instance will share the same instance\n * of the context.\n * @record\n */\nexport function LContext() { }\nif (false) {\n    /**\n     * The component's parent view data.\n     * @type {?}\n     */\n    LContext.prototype.lView;\n    /**\n     * The index instance of the node.\n     * @type {?}\n     */\n    LContext.prototype.nodeIndex;\n    /**\n     * The instance of the DOM node that is attached to the lNode.\n     * @type {?}\n     */\n    LContext.prototype.native;\n    /**\n     * The instance of the Component node.\n     * @type {?}\n     */\n    LContext.prototype.component;\n    /**\n     * The list of active directives that exist on this element.\n     * @type {?}\n     */\n    LContext.prototype.directives;\n    /**\n     * The map of local references (local reference name => element or directive instance) that exist\n     * on this element.\n     * @type {?}\n     */\n    LContext.prototype.localRefs;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3JlbmRlcjMvaW50ZXJmYWNlcy9jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQWVBLE1BQU0sT0FBTyxxQkFBcUIsR0FBRyxlQUFlOzs7Ozs7Ozs7Ozs7QUFZcEQsOEJBK0JDOzs7Ozs7SUEzQkMseUJBQWE7Ozs7O0lBS2IsNkJBQWtCOzs7OztJQUtsQiwwQkFBYzs7Ozs7SUFLZCw2QkFBNkI7Ozs7O0lBSzdCLDhCQUFpQzs7Ozs7O0lBTWpDLDZCQUErQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuXG5pbXBvcnQge1JOb2RlfSBmcm9tICcuL3JlbmRlcmVyJztcbmltcG9ydCB7TFZpZXd9IGZyb20gJy4vdmlldyc7XG5cbi8qKlxuICogVGhpcyBwcm9wZXJ0eSB3aWxsIGJlIG1vbmtleS1wYXRjaGVkIG9uIGVsZW1lbnRzLCBjb21wb25lbnRzIGFuZCBkaXJlY3RpdmVzXG4gKi9cbmV4cG9ydCBjb25zdCBNT05LRVlfUEFUQ0hfS0VZX05BTUUgPSAnX19uZ0NvbnRleHRfXyc7XG5cbi8qKlxuICogVGhlIGludGVybmFsIHZpZXcgY29udGV4dCB3aGljaCBpcyBzcGVjaWZpYyB0byBhIGdpdmVuIERPTSBlbGVtZW50LCBkaXJlY3RpdmUgb3JcbiAqIGNvbXBvbmVudCBpbnN0YW5jZS4gRWFjaCB2YWx1ZSBpbiBoZXJlIChiZXNpZGVzIHRoZSBMVmlldyBhbmQgZWxlbWVudCBub2RlIGRldGFpbHMpXG4gKiBjYW4gYmUgcHJlc2VudCwgbnVsbCBvciB1bmRlZmluZWQuIElmIHVuZGVmaW5lZCB0aGVuIGl0IGltcGxpZXMgdGhlIHZhbHVlIGhhcyBub3QgYmVlblxuICogbG9va2VkIHVwIHlldCwgb3RoZXJ3aXNlLCBpZiBudWxsLCB0aGVuIGEgbG9va3VwIHdhcyBleGVjdXRlZCBhbmQgbm90aGluZyB3YXMgZm91bmQuXG4gKlxuICogRWFjaCB2YWx1ZSB3aWxsIGdldCBmaWxsZWQgd2hlbiB0aGUgcmVzcGVjdGl2ZSB2YWx1ZSBpcyBleGFtaW5lZCB3aXRoaW4gdGhlIGdldENvbnRleHRcbiAqIGZ1bmN0aW9uLiBUaGUgY29tcG9uZW50LCBlbGVtZW50IGFuZCBlYWNoIGRpcmVjdGl2ZSBpbnN0YW5jZSB3aWxsIHNoYXJlIHRoZSBzYW1lIGluc3RhbmNlXG4gKiBvZiB0aGUgY29udGV4dC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMQ29udGV4dCB7XG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50J3MgcGFyZW50IHZpZXcgZGF0YS5cbiAgICovXG4gIGxWaWV3OiBMVmlldztcblxuICAvKipcbiAgICogVGhlIGluZGV4IGluc3RhbmNlIG9mIHRoZSBub2RlLlxuICAgKi9cbiAgbm9kZUluZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBpbnN0YW5jZSBvZiB0aGUgRE9NIG5vZGUgdGhhdCBpcyBhdHRhY2hlZCB0byB0aGUgbE5vZGUuXG4gICAqL1xuICBuYXRpdmU6IFJOb2RlO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5zdGFuY2Ugb2YgdGhlIENvbXBvbmVudCBub2RlLlxuICAgKi9cbiAgY29tcG9uZW50OiB7fXxudWxsfHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogVGhlIGxpc3Qgb2YgYWN0aXZlIGRpcmVjdGl2ZXMgdGhhdCBleGlzdCBvbiB0aGlzIGVsZW1lbnQuXG4gICAqL1xuICBkaXJlY3RpdmVzOiBhbnlbXXxudWxsfHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogVGhlIG1hcCBvZiBsb2NhbCByZWZlcmVuY2VzIChsb2NhbCByZWZlcmVuY2UgbmFtZSA9PiBlbGVtZW50IG9yIGRpcmVjdGl2ZSBpbnN0YW5jZSkgdGhhdCBleGlzdFxuICAgKiBvbiB0aGlzIGVsZW1lbnQuXG4gICAqL1xuICBsb2NhbFJlZnM6IHtba2V5OiBzdHJpbmddOiBhbnl9fG51bGx8dW5kZWZpbmVkO1xufVxuIl19","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\n/** @type {?} */\nexport const HOST = 0;\n/** @type {?} */\nexport const TVIEW = 1;\n/** @type {?} */\nexport const FLAGS = 2;\n/** @type {?} */\nexport const PARENT = 3;\n/** @type {?} */\nexport const NEXT = 4;\n/** @type {?} */\nexport const QUERIES = 5;\n/** @type {?} */\nexport const T_HOST = 6;\n/** @type {?} */\nexport const BINDING_INDEX = 7;\n/** @type {?} */\nexport const CLEANUP = 8;\n/** @type {?} */\nexport const CONTEXT = 9;\n/** @type {?} */\nexport const INJECTOR = 10;\n/** @type {?} */\nexport const RENDERER_FACTORY = 11;\n/** @type {?} */\nexport const RENDERER = 12;\n/** @type {?} */\nexport const SANITIZER = 13;\n/** @type {?} */\nexport const CHILD_HEAD = 14;\n/** @type {?} */\nexport const CHILD_TAIL = 15;\n/** @type {?} */\nexport const CONTENT_QUERIES = 16;\n/** @type {?} */\nexport const DECLARATION_VIEW = 17;\n/** @type {?} */\nexport const PREORDER_HOOK_FLAGS = 18;\n/**\n * Size of LView's header. Necessary to adjust for it when setting slots.\n * @type {?}\n */\nexport const HEADER_OFFSET = 20;\n/**\n * @record\n */\nexport function OpaqueViewState() { }\nif (false) {\n    /** @type {?} */\n    OpaqueViewState.prototype.__brand__;\n}\n/**\n * `LView` stores all of the information needed to process the instructions as\n * they are invoked from the template. Each embedded view and component view has its\n * own `LView`. When processing a particular view, we set the `viewData` to that\n * `LView`. When that view is done processing, the `viewData` is set back to\n * whatever the original `viewData` was before (the parent `LView`).\n *\n * Keeping separate state for each view facilities view insertion / deletion, so we\n * don't have to edit the data array based on which views are present.\n * @record\n */\nexport function LView() { }\nif (false) {\n    /* Skipping unnamed member:\n    [HOST]: RElement|StylingContext|null;*/\n    /* Skipping unnamed member:\n    readonly[TVIEW]: TView;*/\n    /* Skipping unnamed member:\n    [FLAGS]: LViewFlags;*/\n    /* Skipping unnamed member:\n    [PARENT]: LView|LContainer|null;*/\n    /* Skipping unnamed member:\n    [NEXT]: LView|LContainer|null;*/\n    /* Skipping unnamed member:\n    [QUERIES]: LQueries|null;*/\n    /* Skipping unnamed member:\n    [T_HOST]: TViewNode|TElementNode|null;*/\n    /* Skipping unnamed member:\n    [BINDING_INDEX]: number;*/\n    /* Skipping unnamed member:\n    [CLEANUP]: any[]|null;*/\n    /* Skipping unnamed member:\n    [CONTEXT]: {}|RootContext|null;*/\n    /* Skipping unnamed member:\n    readonly[INJECTOR]: Injector|null;*/\n    /* Skipping unnamed member:\n    [RENDERER_FACTORY]: RendererFactory3;*/\n    /* Skipping unnamed member:\n    [RENDERER]: Renderer3;*/\n    /* Skipping unnamed member:\n    [SANITIZER]: Sanitizer|null;*/\n    /* Skipping unnamed member:\n    [CHILD_HEAD]: LView|LContainer|null;*/\n    /* Skipping unnamed member:\n    [CHILD_TAIL]: LView|LContainer|null;*/\n    /* Skipping unnamed member:\n    [CONTENT_QUERIES]: QueryList<any>[]|null;*/\n    /* Skipping unnamed member:\n    [DECLARATION_VIEW]: LView|null;*/\n    /* Skipping unnamed member:\n    [PREORDER_HOOK_FLAGS]: PreOrderHookFlags;*/\n}\n/** @enum {number} */\nconst LViewFlags = {\n    /** The state of the init phase on the first 2 bits */\n    InitPhaseStateIncrementer: 1,\n    InitPhaseStateMask: 3,\n    /**\n     * Whether or not the view is in creationMode.\n     *\n     * This must be stored in the view rather than using `data` as a marker so that\n     * we can properly support embedded views. Otherwise, when exiting a child view\n     * back into the parent view, `data` will be defined and `creationMode` will be\n     * improperly reported as false.\n     */\n    CreationMode: 4,\n    /**\n     * Whether or not this LView instance is on its first processing pass.\n     *\n     * An LView instance is considered to be on its \"first pass\" until it\n     * has completed one creation mode run and one update mode run. At this\n     * time, the flag is turned off.\n     */\n    FirstLViewPass: 8,\n    /** Whether this view has default change detection strategy (checks always) or onPush */\n    CheckAlways: 16,\n    /**\n     * Whether or not manual change detection is turned on for onPush components.\n     *\n     * This is a special mode that only marks components dirty in two cases:\n     * 1) There has been a change to an @Input property\n     * 2) `markDirty()` has been called manually by the user\n     *\n     * Note that in this mode, the firing of events does NOT mark components\n     * dirty automatically.\n     *\n     * Manual mode is turned off by default for backwards compatibility, as events\n     * automatically mark OnPush components dirty in View Engine.\n     *\n     * TODO: Add a public API to ChangeDetectionStrategy to turn this mode on\n     */\n    ManualOnPush: 32,\n    /** Whether or not this view is currently dirty (needing check) */\n    Dirty: 64,\n    /** Whether or not this view is currently attached to change detection tree. */\n    Attached: 128,\n    /** Whether or not this view is destroyed. */\n    Destroyed: 256,\n    /** Whether or not this view is the root view */\n    IsRoot: 512,\n    /**\n     * Index of the current init phase on last 22 bits\n     */\n    IndexWithinInitPhaseIncrementer: 1024,\n    IndexWithinInitPhaseShift: 10,\n    IndexWithinInitPhaseReset: 1023,\n};\nexport { LViewFlags };\n/** @enum {number} */\nconst InitPhaseState = {\n    OnInitHooksToBeRun: 0,\n    AfterContentInitHooksToBeRun: 1,\n    AfterViewInitHooksToBeRun: 2,\n    InitPhaseCompleted: 3,\n};\nexport { InitPhaseState };\n/** @enum {number} */\nconst PreOrderHookFlags = {\n    /** The index of the next pre-order hook to be called in the hooks array, on the first 16\n       bits */\n    IndexOfTheNextPreOrderHookMaskMask: 65535,\n    /**\n     * The number of init hooks that have already been called, on the last 16 bits\n     */\n    NumberOfInitHooksCalledIncrementer: 65536,\n    NumberOfInitHooksCalledShift: 16,\n    NumberOfInitHooksCalledMask: 4294901760,\n};\nexport { PreOrderHookFlags };\n/**\n * Set of instructions used to process host bindings efficiently.\n *\n * See VIEW_DATA.md for more information.\n * @record\n */\nexport function ExpandoInstructions() { }\n/**\n * The static data for an LView (shared between all templates of a\n * given type).\n *\n * Stored on the template function as ngPrivateData.\n * @record\n */\nexport function TView() { }\nif (false) {\n    /**\n     * ID for inline views to determine whether a view is the same as the previous view\n     * in a certain position. If it's not, we know the new view needs to be inserted\n     * and the one that exists needs to be removed (e.g. if/else statements)\n     *\n     * If this is -1, then this is a component view or a dynamically created view.\n     * @type {?}\n     */\n    TView.prototype.id;\n    /**\n     * This is a blueprint used to generate LView instances for this TView. Copying this\n     * blueprint is faster than creating a new LView from scratch.\n     * @type {?}\n     */\n    TView.prototype.blueprint;\n    /**\n     * The template function used to refresh the view of dynamically created views\n     * and components. Will be null for inline views.\n     * @type {?}\n     */\n    TView.prototype.template;\n    /**\n     * A function containing query-related instructions.\n     * @type {?}\n     */\n    TView.prototype.viewQuery;\n    /**\n     * Pointer to the `TNode` that represents the root of the view.\n     *\n     * If this is a `TViewNode` for an `LViewNode`, this is an embedded view of a container.\n     * We need this pointer to be able to efficiently find this node when inserting the view\n     * into an anchor.\n     *\n     * If this is a `TElementNode`, this is the view of a root component. It has exactly one\n     * root TNode.\n     *\n     * If this is null, this is the view of a component that is not at root. We do not store\n     * the host TNodes for child component views because they can potentially have several\n     * different host TNodes, depending on where the component is being used. These host\n     * TNodes cannot be shared (due to different indices, etc).\n     * @type {?}\n     */\n    TView.prototype.node;\n    /**\n     * Whether or not this template has been processed.\n     * @type {?}\n     */\n    TView.prototype.firstTemplatePass;\n    /**\n     * Static data equivalent of LView.data[]. Contains TNodes, PipeDefInternal or TI18n.\n     * @type {?}\n     */\n    TView.prototype.data;\n    /**\n     * The binding start index is the index at which the data array\n     * starts to store bindings only. Saving this value ensures that we\n     * will begin reading bindings at the correct point in the array when\n     * we are in update mode.\n     * @type {?}\n     */\n    TView.prototype.bindingStartIndex;\n    /**\n     * The index where the \"expando\" section of `LView` begins. The expando\n     * section contains injectors, directive instances, and host binding values.\n     * Unlike the \"consts\" and \"vars\" sections of `LView`, the length of this\n     * section cannot be calculated at compile-time because directives are matched\n     * at runtime to preserve locality.\n     *\n     * We store this start index so we know where to start checking host bindings\n     * in `setHostBindings`.\n     * @type {?}\n     */\n    TView.prototype.expandoStartIndex;\n    /**\n     * Whether or not there are any static view queries tracked on this view.\n     *\n     * We store this so we know whether or not we should do a view query\n     * refresh after creation mode to collect static query results.\n     * @type {?}\n     */\n    TView.prototype.staticViewQueries;\n    /**\n     * Whether or not there are any static content queries tracked on this view.\n     *\n     * We store this so we know whether or not we should do a content query\n     * refresh after creation mode to collect static query results.\n     * @type {?}\n     */\n    TView.prototype.staticContentQueries;\n    /**\n     * The index where the viewQueries section of `LView` begins. This section contains\n     * view queries defined for a component/directive.\n     *\n     * We store this start index so we know where the list of view queries starts.\n     * This is required when we invoke view queries at runtime. We invoke queries one by one and\n     * increment query index after each iteration. This information helps us to reset index back to\n     * the beginning of view query list before we invoke view queries again.\n     * @type {?}\n     */\n    TView.prototype.viewQueryStartIndex;\n    /**\n     * A reference to the first child node located in the view.\n     * @type {?}\n     */\n    TView.prototype.firstChild;\n    /**\n     * Set of instructions used to process host bindings efficiently.\n     *\n     * See VIEW_DATA.md for more information.\n     * @type {?}\n     */\n    TView.prototype.expandoInstructions;\n    /**\n     * Full registry of directives and components that may be found in this view.\n     *\n     * It's necessary to keep a copy of the full def list on the TView so it's possible\n     * to render template functions without a host component.\n     * @type {?}\n     */\n    TView.prototype.directiveRegistry;\n    /**\n     * Full registry of pipes that may be found in this view.\n     *\n     * The property is either an array of `PipeDefs`s or a function which returns the array of\n     * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n     *\n     * It's necessary to keep a copy of the full def list on the TView so it's possible\n     * to render template functions without a host component.\n     * @type {?}\n     */\n    TView.prototype.pipeRegistry;\n    /**\n     * Array of ngOnInit, ngOnChanges and ngDoCheck hooks that should be executed for this view in\n     * creation mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     * @type {?}\n     */\n    TView.prototype.preOrderHooks;\n    /**\n     * Array of ngOnChanges and ngDoCheck hooks that should be executed for this view in update mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     * @type {?}\n     */\n    TView.prototype.preOrderCheckHooks;\n    /**\n     * Array of ngAfterContentInit and ngAfterContentChecked hooks that should be executed\n     * for this view in creation mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     * @type {?}\n     */\n    TView.prototype.contentHooks;\n    /**\n     * Array of ngAfterContentChecked hooks that should be executed for this view in update\n     * mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     * @type {?}\n     */\n    TView.prototype.contentCheckHooks;\n    /**\n     * Array of ngAfterViewInit and ngAfterViewChecked hooks that should be executed for\n     * this view in creation mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     * @type {?}\n     */\n    TView.prototype.viewHooks;\n    /**\n     * Array of ngAfterViewChecked hooks that should be executed for this view in\n     * update mode.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     * @type {?}\n     */\n    TView.prototype.viewCheckHooks;\n    /**\n     * Array of ngOnDestroy hooks that should be executed when this view is destroyed.\n     *\n     * Even indices: Directive index\n     * Odd indices: Hook function\n     * @type {?}\n     */\n    TView.prototype.destroyHooks;\n    /**\n     * When a view is destroyed, listeners need to be released and outputs need to be\n     * unsubscribed. This cleanup array stores both listener data (in chunks of 4)\n     * and output data (in chunks of 2) for a particular view. Combining the arrays\n     * saves on memory (70 bytes per array) and on a few bytes of code size (for two\n     * separate for loops).\n     *\n     * If it's a native DOM listener or output subscription being stored:\n     * 1st index is: event name  `name = tView.cleanup[i+0]`\n     * 2nd index is: index of native element or a function that retrieves global target (window,\n     *               document or body) reference based on the native element:\n     *    `typeof idxOrTargetGetter === 'function'`: global target getter function\n     *    `typeof idxOrTargetGetter === 'number'`: index of native element\n     *\n     * 3rd index is: index of listener function `listener = lView[CLEANUP][tView.cleanup[i+2]]`\n     * 4th index is: `useCaptureOrIndx = tView.cleanup[i+3]`\n     *    `typeof useCaptureOrIndx == 'boolean' : useCapture boolean\n     *    `typeof useCaptureOrIndx == 'number':\n     *         `useCaptureOrIndx >= 0` `removeListener = LView[CLEANUP][useCaptureOrIndx]`\n     *         `useCaptureOrIndx <  0` `subscription = LView[CLEANUP][-useCaptureOrIndx]`\n     *\n     * If it's a renderer2 style listener or ViewRef destroy hook being stored:\n     * 1st index is: index of the cleanup function in LView.cleanupInstances[]\n     * 2nd index is: `null`\n     *               `lView[CLEANUP][tView.cleanup[i+0]]()`\n     *\n     * If it's an output subscription or query list destroy hook:\n     * 1st index is: output unsubscribe function / query list destroy function\n     * 2nd index is: index of function context in LView.cleanupInstances[]\n     *               `tView.cleanup[i+0].call(lView[CLEANUP][tView.cleanup[i+1]])`\n     * @type {?}\n     */\n    TView.prototype.cleanup;\n    /**\n     * A list of element indices for child components that will need to be\n     * refreshed when the current view has finished its check. These indices have\n     * already been adjusted for the HEADER_OFFSET.\n     *\n     * @type {?}\n     */\n    TView.prototype.components;\n    /**\n     * A list of indices for child directives that have content queries.\n     * @type {?}\n     */\n    TView.prototype.contentQueries;\n    /**\n     * Set of schemas that declare elements to be allowed inside the view.\n     * @type {?}\n     */\n    TView.prototype.schemas;\n}\n/** @enum {number} */\nconst RootContextFlags = {\n    Empty: 0, DetectChanges: 1, FlushPlayers: 2,\n};\nexport { RootContextFlags };\n/**\n * RootContext contains information which is shared for all components which\n * were bootstrapped with {\\@link renderComponent}.\n * @record\n */\nexport function RootContext() { }\nif (false) {\n    /**\n     * A function used for scheduling change detection in the future. Usually\n     * this is `requestAnimationFrame`.\n     * @type {?}\n     */\n    RootContext.prototype.scheduler;\n    /**\n     * A promise which is resolved when all components are considered clean (not dirty).\n     *\n     * This promise is overwritten every time a first call to {\\@link markDirty} is invoked.\n     * @type {?}\n     */\n    RootContext.prototype.clean;\n    /**\n     * RootComponents - The components that were instantiated by the call to\n     * {\\@link renderComponent}.\n     * @type {?}\n     */\n    RootContext.prototype.components;\n    /**\n     * The player flushing handler to kick off all animations\n     * @type {?}\n     */\n    RootContext.prototype.playerHandler;\n    /**\n     * What render-related operations to run once a scheduler has been set\n     * @type {?}\n     */\n    RootContext.prototype.flags;\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n/** @type {?} */\nexport const unusedValueExportToPlacateAjd = 1;\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { HOST, NEXT, PARENT, QUERIES } from './view';\n/**\n * Special location which allows easy identification of type. If we have an array which was\n * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n * `LContainer`.\n * @type {?}\n */\nexport const TYPE = 1;\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n * @type {?}\n */\nexport const ACTIVE_INDEX = 2;\n// PARENT, NEXT, and QUERIES are indices 3, 4, and 5.\n// As we already have these constants in LView, we don't need to re-create them.\n/** @type {?} */\nexport const VIEWS = 6;\n/** @type {?} */\nexport const NATIVE = 7;\n/**\n * The state associated with a container.\n *\n * This is an array so that its structure is closer to LView. This helps\n * when traversing the view tree (which is a mix of containers and component\n * views), so we can jump to viewOrContainer[NEXT] in the same way regardless\n * of type.\n * @record\n */\nexport function LContainer() { }\nif (false) {\n    /* Skipping unnamed member:\n    readonly[HOST]: RElement|RComment|StylingContext|LView;*/\n    /* Skipping unnamed member:\n    [TYPE]: true;*/\n    /* Skipping unnamed member:\n    [ACTIVE_INDEX]: number;*/\n    /* Skipping unnamed member:\n    [PARENT]: LView;*/\n    /* Skipping unnamed member:\n    [NEXT]: LView|LContainer|null;*/\n    /* Skipping unnamed member:\n    [QUERIES]: LQueries|null;*/\n    /* Skipping unnamed member:\n    [VIEWS]: LView[];*/\n    /* Skipping unnamed member:\n    readonly[NATIVE]:\n          RComment;*/\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n/** @type {?} */\nexport const unusedValueExportToPlacateAjd = 1;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvcmVuZGVyMy9pbnRlcmZhY2VzL2NvbnRhaW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQVdBLE9BQU8sRUFBQyxJQUFJLEVBQVMsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUMsTUFBTSxRQUFRLENBQUM7Ozs7Ozs7QUFPMUQsTUFBTSxPQUFPLElBQUksR0FBRyxDQUFDOzs7Ozs7O0FBTXJCLE1BQU0sT0FBTyxZQUFZLEdBQUcsQ0FBQzs7OztBQUc3QixNQUFNLE9BQU8sS0FBSyxHQUFHLENBQUM7O0FBQ3RCLE1BQU0sT0FBTyxNQUFNLEdBQUcsQ0FBQzs7Ozs7Ozs7OztBQVV2QixnQ0EwREM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSUQsTUFBTSxPQUFPLDZCQUE2QixHQUFHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7TFF1ZXJpZXN9IGZyb20gJy4vcXVlcnknO1xuaW1wb3J0IHtSQ29tbWVudCwgUkVsZW1lbnR9IGZyb20gJy4vcmVuZGVyZXInO1xuaW1wb3J0IHtTdHlsaW5nQ29udGV4dH0gZnJvbSAnLi9zdHlsaW5nJztcbmltcG9ydCB7SE9TVCwgTFZpZXcsIE5FWFQsIFBBUkVOVCwgUVVFUklFU30gZnJvbSAnLi92aWV3JztcblxuLyoqXG4gKiBTcGVjaWFsIGxvY2F0aW9uIHdoaWNoIGFsbG93cyBlYXN5IGlkZW50aWZpY2F0aW9uIG9mIHR5cGUuIElmIHdlIGhhdmUgYW4gYXJyYXkgd2hpY2ggd2FzXG4gKiByZXRyaWV2ZWQgZnJvbSB0aGUgYExWaWV3YCBhbmQgdGhhdCBhcnJheSBoYXMgYHRydWVgIGF0IGBUWVBFYCBsb2NhdGlvbiwgd2Uga25vdyBpdCBpc1xuICogYExDb250YWluZXJgLlxuICovXG5leHBvcnQgY29uc3QgVFlQRSA9IDE7XG4vKipcbiAqIEJlbG93IGFyZSBjb25zdGFudHMgZm9yIExDb250YWluZXIgaW5kaWNlcyB0byBoZWxwIHVzIGxvb2sgdXAgTENvbnRhaW5lciBtZW1iZXJzXG4gKiB3aXRob3V0IGhhdmluZyB0byByZW1lbWJlciB0aGUgc3BlY2lmaWMgaW5kaWNlcy5cbiAqIFVnbGlmeSB3aWxsIGlubGluZSB0aGVzZSB3aGVuIG1pbmlmeWluZyBzbyB0aGVyZSBzaG91bGRuJ3QgYmUgYSBjb3N0LlxuICovXG5leHBvcnQgY29uc3QgQUNUSVZFX0lOREVYID0gMjtcbi8vIFBBUkVOVCwgTkVYVCwgYW5kIFFVRVJJRVMgYXJlIGluZGljZXMgMywgNCwgYW5kIDUuXG4vLyBBcyB3ZSBhbHJlYWR5IGhhdmUgdGhlc2UgY29uc3RhbnRzIGluIExWaWV3LCB3ZSBkb24ndCBuZWVkIHRvIHJlLWNyZWF0ZSB0aGVtLlxuZXhwb3J0IGNvbnN0IFZJRVdTID0gNjtcbmV4cG9ydCBjb25zdCBOQVRJVkUgPSA3O1xuXG4vKipcbiAqIFRoZSBzdGF0ZSBhc3NvY2lhdGVkIHdpdGggYSBjb250YWluZXIuXG4gKlxuICogVGhpcyBpcyBhbiBhcnJheSBzbyB0aGF0IGl0cyBzdHJ1Y3R1cmUgaXMgY2xvc2VyIHRvIExWaWV3LiBUaGlzIGhlbHBzXG4gKiB3aGVuIHRyYXZlcnNpbmcgdGhlIHZpZXcgdHJlZSAod2hpY2ggaXMgYSBtaXggb2YgY29udGFpbmVycyBhbmQgY29tcG9uZW50XG4gKiB2aWV3cyksIHNvIHdlIGNhbiBqdW1wIHRvIHZpZXdPckNvbnRhaW5lcltORVhUXSBpbiB0aGUgc2FtZSB3YXkgcmVnYXJkbGVzc1xuICogb2YgdHlwZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMQ29udGFpbmVyIGV4dGVuZHMgQXJyYXk8YW55PiB7XG4gIC8qKlxuICAgKiBUaGUgaG9zdCBlbGVtZW50IG9mIHRoaXMgTENvbnRhaW5lci5cbiAgICpcbiAgICogVGhlIGhvc3QgY291bGQgYmUgYW4gTFZpZXcgaWYgdGhpcyBjb250YWluZXIgaXMgb24gYSBjb21wb25lbnQgbm9kZS5cbiAgICogSW4gdGhhdCBjYXNlLCB0aGUgY29tcG9uZW50IExWaWV3IGlzIGl0cyBIT1NULlxuICAgKlxuICAgKiBJdCBjb3VsZCBhbHNvIGJlIGEgc3R5bGluZyBjb250ZXh0IGlmIHRoaXMgaXMgYSBub2RlIHdpdGggYSBzdHlsZS9jbGFzc1xuICAgKiBiaW5kaW5nLlxuICAgKi9cbiAgcmVhZG9ubHlbSE9TVF06IFJFbGVtZW50fFJDb21tZW50fFN0eWxpbmdDb250ZXh0fExWaWV3O1xuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGEgdHlwZSBmaWVsZCB3aGljaCBhbGxvd3MgdXMgdG8gZGlmZmVyZW50aWF0ZSBgTENvbnRhaW5lcmAgZnJvbSBgU3R5bGluZ0NvbnRleHRgIGluIGFuXG4gICAqIGVmZmljaWVudCB3YXkuIFRoZSB2YWx1ZSBpcyBhbHdheXMgc2V0IHRvIGB0cnVlYFxuICAgKi9cbiAgW1RZUEVdOiB0cnVlO1xuXG4gIC8qKlxuICAgKiBUaGUgbmV4dCBhY3RpdmUgaW5kZXggaW4gdGhlIHZpZXdzIGFycmF5IHRvIHJlYWQgb3Igd3JpdGUgdG8uIFRoaXMgaGVscHMgdXNcbiAgICoga2VlcCB0cmFjayBvZiB3aGVyZSB3ZSBhcmUgaW4gdGhlIHZpZXdzIGFycmF5LlxuICAgKiBJbiB0aGUgY2FzZSB0aGUgTENvbnRhaW5lciBpcyBjcmVhdGVkIGZvciBhIFZpZXdDb250YWluZXJSZWYsXG4gICAqIGl0IGlzIHNldCB0byBudWxsIHRvIGlkZW50aWZ5IHRoaXMgc2NlbmFyaW8sIGFzIGluZGljZXMgYXJlIFwiYWJzb2x1dGVcIiBpbiB0aGF0IGNhc2UsXG4gICAqIGkuZS4gcHJvdmlkZWQgZGlyZWN0bHkgYnkgdGhlIHVzZXIgb2YgdGhlIFZpZXdDb250YWluZXJSZWYgQVBJLlxuICAgKi9cbiAgW0FDVElWRV9JTkRFWF06IG51bWJlcjtcblxuICAvKipcbiAgICogQWNjZXNzIHRvIHRoZSBwYXJlbnQgdmlldyBpcyBuZWNlc3Nhcnkgc28gd2UgY2FuIHByb3BhZ2F0ZSBiYWNrXG4gICAqIHVwIGZyb20gaW5zaWRlIGEgY29udGFpbmVyIHRvIHBhcmVudFtORVhUXS5cbiAgICovXG4gIFtQQVJFTlRdOiBMVmlldztcblxuICAvKipcbiAgICogVGhpcyBhbGxvd3MgdXMgdG8ganVtcCBmcm9tIGEgY29udGFpbmVyIHRvIGEgc2libGluZyBjb250YWluZXIgb3IgY29tcG9uZW50XG4gICAqIHZpZXcgd2l0aCB0aGUgc2FtZSBwYXJlbnQsIHNvIHdlIGNhbiByZW1vdmUgbGlzdGVuZXJzIGVmZmljaWVudGx5LlxuICAgKi9cbiAgW05FWFRdOiBMVmlld3xMQ29udGFpbmVyfG51bGw7XG5cbiAgLyoqXG4gICAqIFF1ZXJpZXMgYWN0aXZlIGZvciB0aGlzIGNvbnRhaW5lciAtIGFsbCB0aGUgdmlld3MgaW5zZXJ0ZWQgdG8gLyByZW1vdmVkIGZyb21cbiAgICogdGhpcyBjb250YWluZXIgYXJlIHJlcG9ydGVkIHRvIHF1ZXJpZXMgcmVmZXJlbmNlZCBoZXJlLlxuICAgKi9cbiAgW1FVRVJJRVNdOiBMUXVlcmllc3xudWxsOyAgLy8gVE9ETyhtaXNrbyk6IFRoaXMgaXMgYWJ1c2Ugb2YgYExDb250YWluZXJgIHNpbmNlIHdlIGFyZSBzdG9yaW5nXG4gIC8vIGBbUVVFUklFU11gIGluIGl0IHdoaWNoIGFyZSBub3QgbmVlZGVkIGZvciBgTENvbnRhaW5lcmAgKG9ubHkgbmVlZGVkIGZvciBUZW1wbGF0ZSlcblxuICAvKipcbiAgICogQSBsaXN0IG9mIHRoZSBjb250YWluZXIncyBjdXJyZW50bHkgYWN0aXZlIGNoaWxkIHZpZXdzLiBWaWV3cyB3aWxsIGJlIGluc2VydGVkXG4gICAqIGhlcmUgYXMgdGhleSBhcmUgYWRkZWQgYW5kIHNwbGljZWQgZnJvbSBoZXJlIHdoZW4gdGhleSBhcmUgcmVtb3ZlZC4gV2UgbmVlZFxuICAgKiB0byBrZWVwIGEgcmVjb3JkIG9mIGN1cnJlbnQgdmlld3Mgc28gd2Uga25vdyB3aGljaCB2aWV3cyBhcmUgYWxyZWFkeSBpbiB0aGUgRE9NXG4gICAqIChhbmQgZG9uJ3QgbmVlZCB0byBiZSByZS1hZGRlZCkgYW5kIHNvIHdlIGNhbiByZW1vdmUgdmlld3MgZnJvbSB0aGUgRE9NIHdoZW4gdGhleVxuICAgKiBhcmUgbm8gbG9uZ2VyIHJlcXVpcmVkLlxuICAgKi9cbiAgW1ZJRVdTXTogTFZpZXdbXTtcblxuICAvKiogVGhlIGNvbW1lbnQgZWxlbWVudCB0aGF0IHNlcnZlcyBhcyBhbiBhbmNob3IgZm9yIHRoaXMgTENvbnRhaW5lci4gKi9cbiAgcmVhZG9ubHlbTkFUSVZFXTpcbiAgICAgIFJDb21tZW50OyAgLy8gVE9ETyhtaXNrbyk6IHJlbW92ZSBhcyB0aGlzIHZhbHVlIGNhbiBiZSBnb3R0ZW4gYnkgdW53cmFwcGluZyBgW0hPU1RdYFxufVxuXG4vLyBOb3RlOiBUaGlzIGhhY2sgaXMgbmVjZXNzYXJ5IHNvIHdlIGRvbid0IGVycm9uZW91c2x5IGdldCBhIGNpcmN1bGFyIGRlcGVuZGVuY3lcbi8vIGZhaWx1cmUgYmFzZWQgb24gdHlwZXMuXG5leHBvcnQgY29uc3QgdW51c2VkVmFsdWVFeHBvcnRUb1BsYWNhdGVBamQgPSAxO1xuIl19","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertDataInRange, assertDefined, assertGreaterThan, assertLessThan } from '../../util/assert';\nimport { TYPE } from '../interfaces/container';\nimport { MONKEY_PATCH_KEY_NAME } from '../interfaces/context';\nimport { FLAGS, HEADER_OFFSET, HOST, PARENT, PREORDER_HOOK_FLAGS, TVIEW } from '../interfaces/view';\n/**\n * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`,\n * `StylingContext`) in same location in `LView`. This is because we don't want to pre-allocate\n * space for it because the storage is sparse. This file contains utilities for dealing with such\n * data types.\n *\n * How do we know what is stored at a given location in `LView`.\n * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\n * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\n *   - `typeof value[TYPE] === 'object'` => `LView`\n *      - This happens when we have a component at a given location\n *   - `typeof value[TYPE] === 'number'` => `StylingContext`\n *      - This happens when we have style/class binding at a given location.\n *   - `typeof value[TYPE] === true` => `LContainer`\n *      - This happens when we have `LContainer` binding at a given location.\n *\n *\n * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\n */\n/**\n * Returns `RNode`.\n * @param {?} value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n * @return {?}\n */\nexport function unwrapRNode(value) {\n    while (Array.isArray(value)) {\n        value = (/** @type {?} */ (value[HOST]));\n    }\n    return (/** @type {?} */ (value));\n}\n/**\n * Returns `LView` or `null` if not found.\n * @param {?} value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n * @return {?}\n */\nexport function unwrapLView(value) {\n    while (Array.isArray(value)) {\n        // This check is same as `isLView()` but we don't call at as we don't want to call\n        // `Array.isArray()` twice and give JITer more work for inlining.\n        if (typeof value[TYPE] === 'object')\n            return (/** @type {?} */ (value));\n        value = (/** @type {?} */ (value[HOST]));\n    }\n    return null;\n}\n/**\n * Returns `LContainer` or `null` if not found.\n * @param {?} value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n * @return {?}\n */\nexport function unwrapLContainer(value) {\n    while (Array.isArray(value)) {\n        // This check is same as `isLContainer()` but we don't call at as we don't want to call\n        // `Array.isArray()` twice and give JITer more work for inlining.\n        if (value[TYPE] === true)\n            return (/** @type {?} */ (value));\n        value = (/** @type {?} */ (value[HOST]));\n    }\n    return null;\n}\n/**\n * Returns `StylingContext` or `null` if not found.\n * @param {?} value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n * @return {?}\n */\nexport function unwrapStylingContext(value) {\n    while (Array.isArray(value)) {\n        // This check is same as `isStylingContext()` but we don't call at as we don't want to call\n        // `Array.isArray()` twice and give JITer more work for inlining.\n        if (typeof value[TYPE] === 'number')\n            return (/** @type {?} */ (value));\n        value = (/** @type {?} */ (value[HOST]));\n    }\n    return null;\n}\n/**\n * True if `value` is `LView`.\n * @param {?} value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n * @return {?}\n */\nexport function isLView(value) {\n    return Array.isArray(value) && typeof value[TYPE] === 'object';\n}\n/**\n * True if `value` is `LContainer`.\n * @param {?} value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n * @return {?}\n */\nexport function isLContainer(value) {\n    return Array.isArray(value) && value[TYPE] === true;\n}\n/**\n * True if `value` is `StylingContext`.\n * @param {?} value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n * @return {?}\n */\nexport function isStylingContext(value) {\n    return Array.isArray(value) && typeof value[TYPE] === 'number';\n}\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n * @param {?} index\n * @param {?} lView\n * @return {?}\n */\nexport function getNativeByIndex(index, lView) {\n    return unwrapRNode(lView[index + HEADER_OFFSET]);\n}\n/**\n * @param {?} tNode\n * @param {?} hostView\n * @return {?}\n */\nexport function getNativeByTNode(tNode, hostView) {\n    return unwrapRNode(hostView[tNode.index]);\n}\n/**\n * @param {?} index\n * @param {?} view\n * @return {?}\n */\nexport function getTNode(index, view) {\n    ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n    ngDevMode && assertLessThan(index, view[TVIEW].data.length, 'wrong index for TNode');\n    return (/** @type {?} */ (view[TVIEW].data[index + HEADER_OFFSET]));\n}\n/**\n * Retrieves a value from any `LView` or `TData`.\n * @template T\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function loadInternal(view, index) {\n    ngDevMode && assertDataInRange(view, index + HEADER_OFFSET);\n    return view[index + HEADER_OFFSET];\n}\n/**\n * @param {?} nodeIndex\n * @param {?} hostView\n * @return {?}\n */\nexport function getComponentViewByIndex(nodeIndex, hostView) {\n    // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n    /** @type {?} */\n    const slotValue = hostView[nodeIndex];\n    /** @type {?} */\n    const lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n    return lView;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function isContentQueryHost(tNode) {\n    return (tNode.flags & 4 /* hasContentQuery */) !== 0;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function isComponent(tNode) {\n    return (tNode.flags & 1 /* isComponent */) === 1 /* isComponent */;\n}\n/**\n * @template T\n * @param {?} def\n * @return {?}\n */\nexport function isComponentDef(def) {\n    return ((/** @type {?} */ (def))).template !== null;\n}\n/**\n * @param {?} target\n * @return {?}\n */\nexport function isRootView(target) {\n    return (target[FLAGS] & 512 /* IsRoot */) !== 0;\n}\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n * @param {?} target\n * @return {?}\n */\nexport function readPatchedData(target) {\n    ngDevMode && assertDefined(target, 'Target expected');\n    return target[MONKEY_PATCH_KEY_NAME];\n}\n/**\n * @param {?} target\n * @return {?}\n */\nexport function readPatchedLView(target) {\n    /** @type {?} */\n    const value = readPatchedData(target);\n    if (value) {\n        return Array.isArray(value) ? value : ((/** @type {?} */ (value))).lView;\n    }\n    return null;\n}\n/**\n * Returns a boolean for whether the view is attached to the change detection tree.\n *\n * Note: This determines whether a view should be checked, not whether it's inserted\n * into a container. For that, you'll want `viewAttachedToContainer` below.\n * @param {?} view\n * @return {?}\n */\nexport function viewAttachedToChangeDetector(view) {\n    return (view[FLAGS] & 128 /* Attached */) === 128 /* Attached */;\n}\n/**\n * Returns a boolean for whether the view is attached to a container.\n * @param {?} view\n * @return {?}\n */\nexport function viewAttachedToContainer(view) {\n    return isLContainer(view[PARENT]);\n}\n/**\n * Resets the pre-order hook flags of the view.\n * @param {?} lView the LView on which the flags are reset\n * @return {?}\n */\nexport function resetPreOrderHookFlags(lView) {\n    lView[PREORDER_HOOK_FLAGS] = 0;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport '../util/ng_dev_mode';\nimport { assertDomNode } from '../util/assert';\nimport { EMPTY_ARRAY } from './empty';\nimport { MONKEY_PATCH_KEY_NAME } from './interfaces/context';\nimport { CONTEXT, HEADER_OFFSET, HOST, TVIEW } from './interfaces/view';\nimport { getComponentViewByIndex, getNativeByTNode, readPatchedData, unwrapRNode } from './util/view_utils';\n/**\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param {?} target Component, Directive or DOM Node.\n * @return {?}\n */\nexport function getLContext(target) {\n    /** @type {?} */\n    let mpValue = readPatchedData(target);\n    if (mpValue) {\n        // only when it's an array is it considered an LView instance\n        // ... otherwise it's an already constructed LContext instance\n        if (Array.isArray(mpValue)) {\n            /** @type {?} */\n            const lView = (/** @type {?} */ (mpValue));\n            /** @type {?} */\n            let nodeIndex;\n            /** @type {?} */\n            let component = undefined;\n            /** @type {?} */\n            let directives = undefined;\n            if (isComponentInstance(target)) {\n                nodeIndex = findViaComponent(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided component was not found in the application');\n                }\n                component = target;\n            }\n            else if (isDirectiveInstance(target)) {\n                nodeIndex = findViaDirective(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided directive was not found in the application');\n                }\n                directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);\n            }\n            else {\n                nodeIndex = findViaNativeElement(lView, (/** @type {?} */ (target)));\n                if (nodeIndex == -1) {\n                    return null;\n                }\n            }\n            // the goal is not to fill the entire context full of data because the lookups\n            // are expensive. Instead, only the target data (the element, component, container, ICU\n            // expression or directive details) are filled into the context. If called multiple times\n            // with different target values then the missing target data will be filled in.\n            /** @type {?} */\n            const native = unwrapRNode(lView[nodeIndex]);\n            /** @type {?} */\n            const existingCtx = readPatchedData(native);\n            /** @type {?} */\n            const context = (existingCtx && !Array.isArray(existingCtx)) ?\n                existingCtx :\n                createLContext(lView, nodeIndex, native);\n            // only when the component has been discovered then update the monkey-patch\n            if (component && context.component === undefined) {\n                context.component = component;\n                attachPatchData(context.component, context);\n            }\n            // only when the directives have been discovered then update the monkey-patch\n            if (directives && context.directives === undefined) {\n                context.directives = directives;\n                for (let i = 0; i < directives.length; i++) {\n                    attachPatchData(directives[i], context);\n                }\n            }\n            attachPatchData(context.native, context);\n            mpValue = context;\n        }\n    }\n    else {\n        /** @type {?} */\n        const rElement = (/** @type {?} */ (target));\n        ngDevMode && assertDomNode(rElement);\n        // if the context is not found then we need to traverse upwards up the DOM\n        // to find the nearest element that has already been monkey patched with data\n        /** @type {?} */\n        let parent = (/** @type {?} */ (rElement));\n        while (parent = parent.parentNode) {\n            /** @type {?} */\n            const parentContext = readPatchedData(parent);\n            if (parentContext) {\n                /** @type {?} */\n                let lView;\n                if (Array.isArray(parentContext)) {\n                    lView = (/** @type {?} */ (parentContext));\n                }\n                else {\n                    lView = parentContext.lView;\n                }\n                // the edge of the app was also reached here through another means\n                // (maybe because the DOM was changed manually).\n                if (!lView) {\n                    return null;\n                }\n                /** @type {?} */\n                const index = findViaNativeElement(lView, rElement);\n                if (index >= 0) {\n                    /** @type {?} */\n                    const native = unwrapRNode(lView[index]);\n                    /** @type {?} */\n                    const context = createLContext(lView, index, native);\n                    attachPatchData(native, context);\n                    mpValue = context;\n                    break;\n                }\n            }\n        }\n    }\n    return ((/** @type {?} */ (mpValue))) || null;\n}\n/**\n * Creates an empty instance of a `LContext` context\n * @param {?} lView\n * @param {?} nodeIndex\n * @param {?} native\n * @return {?}\n */\nfunction createLContext(lView, nodeIndex, native) {\n    return {\n        lView,\n        nodeIndex,\n        native,\n        component: undefined,\n        directives: undefined,\n        localRefs: undefined,\n    };\n}\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param {?} componentInstance\n * @return {?} The component's view\n */\nexport function getComponentViewByInstance(componentInstance) {\n    /** @type {?} */\n    let lView = readPatchedData(componentInstance);\n    /** @type {?} */\n    let view;\n    if (Array.isArray(lView)) {\n        /** @type {?} */\n        const nodeIndex = findViaComponent(lView, componentInstance);\n        view = getComponentViewByIndex(nodeIndex, lView);\n        /** @type {?} */\n        const context = createLContext(lView, nodeIndex, (/** @type {?} */ (view[HOST])));\n        context.component = componentInstance;\n        attachPatchData(componentInstance, context);\n        attachPatchData(context.native, context);\n    }\n    else {\n        /** @type {?} */\n        const context = (/** @type {?} */ ((/** @type {?} */ (lView))));\n        view = getComponentViewByIndex(context.nodeIndex, context.lView);\n    }\n    return view;\n}\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n * @param {?} target\n * @param {?} data\n * @return {?}\n */\nexport function attachPatchData(target, data) {\n    target[MONKEY_PATCH_KEY_NAME] = data;\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nexport function isComponentInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ngComponentDef;\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nexport function isDirectiveInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ngDirectiveDef;\n}\n/**\n * Locates the element within the given LView and returns the matching index\n * @param {?} lView\n * @param {?} target\n * @return {?}\n */\nfunction findViaNativeElement(lView, target) {\n    /** @type {?} */\n    let tNode = lView[TVIEW].firstChild;\n    while (tNode) {\n        /** @type {?} */\n        const native = (/** @type {?} */ (getNativeByTNode(tNode, lView)));\n        if (native === target) {\n            return tNode.index;\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * Locates the next tNode (child, sibling or parent).\n * @param {?} tNode\n * @return {?}\n */\nfunction traverseNextElement(tNode) {\n    if (tNode.child) {\n        return tNode.child;\n    }\n    else if (tNode.next) {\n        return tNode.next;\n    }\n    else {\n        // Let's take the following template: <div><span>text</span></div><component/>\n        // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n        // in this case the parent `div`, so that we can find the component.\n        while (tNode.parent && !tNode.parent.next) {\n            tNode = tNode.parent;\n        }\n        return tNode.parent && tNode.parent.next;\n    }\n}\n/**\n * Locates the component within the given LView and returns the matching index\n * @param {?} lView\n * @param {?} componentInstance\n * @return {?}\n */\nfunction findViaComponent(lView, componentInstance) {\n    /** @type {?} */\n    const componentIndices = lView[TVIEW].components;\n    if (componentIndices) {\n        for (let i = 0; i < componentIndices.length; i++) {\n            /** @type {?} */\n            const elementComponentIndex = componentIndices[i];\n            /** @type {?} */\n            const componentView = getComponentViewByIndex(elementComponentIndex, lView);\n            if (componentView[CONTEXT] === componentInstance) {\n                return elementComponentIndex;\n            }\n        }\n    }\n    else {\n        /** @type {?} */\n        const rootComponentView = getComponentViewByIndex(HEADER_OFFSET, lView);\n        /** @type {?} */\n        const rootComponent = rootComponentView[CONTEXT];\n        if (rootComponent === componentInstance) {\n            // we are dealing with the root element here therefore we know that the\n            // element is the very first element after the HEADER data in the lView\n            return HEADER_OFFSET;\n        }\n    }\n    return -1;\n}\n/**\n * Locates the directive within the given LView and returns the matching index\n * @param {?} lView\n * @param {?} directiveInstance\n * @return {?}\n */\nfunction findViaDirective(lView, directiveInstance) {\n    // if a directive is monkey patched then it will (by default)\n    // have a reference to the LView of the current view. The\n    // element bound to the directive being search lives somewhere\n    // in the view data. We loop through the nodes and check their\n    // list of directives for the instance.\n    /** @type {?} */\n    let tNode = lView[TVIEW].firstChild;\n    while (tNode) {\n        /** @type {?} */\n        const directiveIndexStart = tNode.directiveStart;\n        /** @type {?} */\n        const directiveIndexEnd = tNode.directiveEnd;\n        for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {\n            if (lView[i] === directiveInstance) {\n                return tNode.index;\n            }\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * Returns a list of directives extracted from the given view based on the\n * provided list of directive index values.\n *\n * @param {?} nodeIndex The node index\n * @param {?} lView The target view data\n * @param {?} includeComponents Whether or not to include components in returned directives\n * @return {?}\n */\nexport function getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (lView[TVIEW].data[nodeIndex]));\n    /** @type {?} */\n    let directiveStartIndex = tNode.directiveStart;\n    if (directiveStartIndex == 0)\n        return EMPTY_ARRAY;\n    /** @type {?} */\n    const directiveEndIndex = tNode.directiveEnd;\n    if (!includeComponents && tNode.flags & 1 /* isComponent */)\n        directiveStartIndex++;\n    return lView.slice(directiveStartIndex, directiveEndIndex);\n}\n/**\n * @param {?} nodeIndex\n * @param {?} lView\n * @return {?}\n */\nexport function getComponentAtNodeIndex(nodeIndex, lView) {\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (lView[TVIEW].data[nodeIndex]));\n    /** @type {?} */\n    let directiveStartIndex = tNode.directiveStart;\n    return tNode.flags & 1 /* isComponent */ ? lView[directiveStartIndex] : null;\n}\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n * @param {?} lView\n * @param {?} nodeIndex\n * @return {?}\n */\nexport function discoverLocalRefs(lView, nodeIndex) {\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (lView[TVIEW].data[nodeIndex]));\n    if (tNode && tNode.localNames) {\n        /** @type {?} */\n        const result = {};\n        /** @type {?} */\n        let localIndex = tNode.index + 1;\n        for (let i = 0; i < tNode.localNames.length; i += 2) {\n            result[tNode.localNames[i]] = lView[localIndex];\n            localIndex++;\n        }\n        return result;\n    }\n    return null;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nexport const TNODE = 8;\n/** @type {?} */\nexport const PARENT_INJECTOR = 8;\n/** @type {?} */\nexport const INJECTOR_BLOOM_PARENT_SIZE = 9;\n/**\n * Represents a relative location of parent injector.\n *\n * The interfaces encodes number of parents `LView`s to traverse and index in the `LView`\n * pointing to the parent injector.\n * @record\n */\nexport function RelativeInjectorLocation() { }\nif (false) {\n    /** @type {?} */\n    RelativeInjectorLocation.prototype.__brand__;\n}\n/** @enum {number} */\nconst RelativeInjectorLocationFlags = {\n    InjectorIndexMask: 32767,\n    ViewOffsetShift: 16,\n    NO_PARENT: -1,\n};\nexport { RelativeInjectorLocationFlags };\n/** @type {?} */\nexport const NO_PARENT_INJECTOR = (/** @type {?} */ (-1));\n/**\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LView`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nexport class NodeInjectorFactory {\n    /**\n     * @param {?} factory\n     * @param {?} isViewProvider\n     * @param {?} injectImplementation\n     */\n    constructor(factory, \n    /**\n     * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n     */\n    isViewProvider, injectImplementation) {\n        this.factory = factory;\n        /**\n         * Marker set to true during factory invocation to see if we get into recursive loop.\n         * Recursive loop causes an error to be displayed.\n         */\n        this.resolving = false;\n        this.canSeeViewProviders = isViewProvider;\n        this.injectImpl = injectImplementation;\n    }\n}\nif (false) {\n    /**\n     * The inject implementation to be activated when using the factory.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.injectImpl;\n    /**\n     * Marker set to true during factory invocation to see if we get into recursive loop.\n     * Recursive loop causes an error to be displayed.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.resolving;\n    /**\n     * Marks that the token can see other Tokens declared in `viewProviders` on the same node.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.canSeeViewProviders;\n    /**\n     * An array of factories to use in case of `multi` provider.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.multi;\n    /**\n     * Number of `multi`-providers which belong to the component.\n     *\n     * This is needed because when multiple components and directives declare the `multi` provider\n     * they have to be concatenated in the correct order.\n     *\n     * Example:\n     *\n     * If we have a component and directive active an a single element as declared here\n     * ```\n     * component:\n     *   provides: [ {provide: String, useValue: 'component', multi: true} ],\n     *   viewProvides: [ {provide: String, useValue: 'componentView', multi: true} ],\n     *\n     * directive:\n     *   provides: [ {provide: String, useValue: 'directive', multi: true} ],\n     * ```\n     *\n     * Then the expected results are:\n     *\n     * ```\n     * providers: ['component', 'directive']\n     * viewProviders: ['component', 'componentView', 'directive']\n     * ```\n     *\n     * The way to think about it is that the `viewProviders` have been inserted after the component\n     * but before the directives, which is why we need to know how many `multi`s have been declared by\n     * the component.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.componentProviders;\n    /**\n     * Current index of the Factory in the `data`. Needed for `viewProviders` and `providers` merging.\n     * See `providerFactory`.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.index;\n    /**\n     * Because the same `multi` provider can be declared in `provides` and `viewProvides` it is\n     * possible for `viewProvides` to shadow the `provides`. For this reason we store the\n     * `provideFactory` of the `providers` so that `providers` can be extended with `viewProviders`.\n     *\n     * Example:\n     *\n     * Given:\n     * ```\n     * provides: [ {provide: String, useValue: 'all', multi: true} ],\n     * viewProvides: [ {provide: String, useValue: 'viewOnly', multi: true} ],\n     * ```\n     *\n     * We have to return `['all']` in case of content injection, but `['all', 'viewOnly']` in case\n     * of view injection. We further have to make sure that the shared instances (in our case\n     * `all`) are the exact same instance in both the content as well as the view injection. (We\n     * have to make sure that we don't double instantiate.) For this reason the `viewProvides`\n     * `Factory` has a pointer to the shadowed `provides` factory so that it can instantiate the\n     * `providers` (`['all']`) and then extend it with `viewProviders` (`['all'] + ['viewOnly'] =\n     * ['all', 'viewOnly']`).\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.providerFactory;\n    /**\n     * Factory to invoke in order to create a new instance.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.factory;\n}\n/** @type {?} */\nconst FactoryPrototype = NodeInjectorFactory.prototype;\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function isFactory(obj) {\n    // See: https://jsperf.com/instanceof-vs-getprototypeof\n    return obj !== null && typeof obj == 'object' && Object.getPrototypeOf(obj) == FactoryPrototype;\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n/** @type {?} */\nexport const unusedValueExportToPlacateAjd = 1;\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertEqual } from '../util/assert';\nimport { FLAGS, PREORDER_HOOK_FLAGS } from './interfaces/view';\n/**\n * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\n *\n * Must be run *only* on the first template pass.\n *\n * Sets up the pre-order hooks on the provided `tView`,\n * see {\\@link HookData} for details about the data structure.\n *\n * @param {?} directiveIndex The index of the directive in LView\n * @param {?} directiveDef The definition containing the hooks to setup in tView\n * @param {?} tView The current TView\n * @param {?} nodeIndex The index of the node to which the directive is attached\n * @param {?} initialPreOrderHooksLength the number of pre-order hooks already registered before the\n * current process, used to know if the node index has to be added to the array. If it is -1,\n * the node index is never added.\n * @param {?} initialPreOrderCheckHooksLength same as previous for pre-order check hooks\n * @return {?}\n */\nexport function registerPreOrderHooks(directiveIndex, directiveDef, tView, nodeIndex, initialPreOrderHooksLength, initialPreOrderCheckHooksLength) {\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called on first template pass');\n    const { onChanges, onInit, doCheck } = directiveDef;\n    if (initialPreOrderHooksLength >= 0 &&\n        (!tView.preOrderHooks || initialPreOrderHooksLength === tView.preOrderHooks.length) &&\n        (onChanges || onInit || doCheck)) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(nodeIndex);\n    }\n    if (initialPreOrderCheckHooksLength >= 0 &&\n        (!tView.preOrderCheckHooks ||\n            initialPreOrderCheckHooksLength === tView.preOrderCheckHooks.length) &&\n        (onChanges || doCheck)) {\n        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(nodeIndex);\n    }\n    if (onChanges) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, onChanges);\n        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, onChanges);\n    }\n    if (onInit) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(-directiveIndex, onInit);\n    }\n    if (doCheck) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, doCheck);\n        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, doCheck);\n    }\n}\n/**\n *\n * Loops through the directives on the provided `tNode` and queues hooks to be\n * run that are not initialization hooks.\n *\n * Should be executed during `elementEnd()` and similar to\n * preserve hook execution order. Content, view, and destroy hooks for projected\n * components and directives must be called *before* their hosts.\n *\n * Sets up the content, view, and destroy hooks on the provided `tView`,\n * see {\\@link HookData} for details about the data structure.\n *\n * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\n * separately at `elementStart`.\n *\n * @param {?} tView The current TView\n * @param {?} tNode The TNode whose directives are to be searched for hooks to queue\n * @return {?}\n */\nexport function registerPostOrderHooks(tView, tNode) {\n    if (tView.firstTemplatePass) {\n        // It's necessary to loop through the directives at elementEnd() (rather than processing in\n        // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n        // hooks for projected components and directives must be called *before* their hosts.\n        for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n            /** @type {?} */\n            const directiveDef = (/** @type {?} */ (tView.data[i]));\n            if (directiveDef.afterContentInit) {\n                (tView.contentHooks || (tView.contentHooks = [])).push(-i, directiveDef.afterContentInit);\n            }\n            if (directiveDef.afterContentChecked) {\n                (tView.contentHooks || (tView.contentHooks = [])).push(i, directiveDef.afterContentChecked);\n                (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, directiveDef.afterContentChecked);\n            }\n            if (directiveDef.afterViewInit) {\n                (tView.viewHooks || (tView.viewHooks = [])).push(-i, directiveDef.afterViewInit);\n            }\n            if (directiveDef.afterViewChecked) {\n                (tView.viewHooks || (tView.viewHooks = [])).push(i, directiveDef.afterViewChecked);\n                (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, directiveDef.afterViewChecked);\n            }\n            if (directiveDef.onDestroy != null) {\n                (tView.destroyHooks || (tView.destroyHooks = [])).push(i, directiveDef.onDestroy);\n            }\n        }\n    }\n}\n/**\n * Executing hooks requires complex logic as we need to deal with 2 constraints.\n *\n * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\n * once, across many change detection cycles. This must be true even if some hooks throw, or if\n * some recursively trigger a change detection cycle.\n * To solve that, it is required to track the state of the execution of these init hooks.\n * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\n * and the index within that phase. They can be seen as a cursor in the following structure:\n * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\n * They are are stored as flags in LView[FLAGS].\n *\n * 2. Pre-order hooks can be executed in batches, because of the flushHooksUpTo instruction.\n * To be able to pause and resume their execution, we also need some state about the hook's array\n * that is being processed:\n * - the index of the next hook to be executed\n * - the number of init hooks already found in the processed part of the  array\n * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].\n */\n/**\n * Executes necessary hooks at the start of executing a template.\n *\n * Executes hooks that are to be run during the initialization of a directive such\n * as `onChanges`, `onInit`, and `doCheck`.\n *\n * @param {?} currentView\n * @param {?} tView Static data for the view containing the hooks to be executed\n * @param {?} checkNoChangesMode Whether or not we're in checkNoChanges mode.\n * @param {?} currentNodeIndex\n * @return {?}\n */\nexport function executePreOrderHooks(currentView, tView, checkNoChangesMode, currentNodeIndex) {\n    if (!checkNoChangesMode) {\n        executeHooks(currentView, tView.preOrderHooks, tView.preOrderCheckHooks, checkNoChangesMode, 0 /* OnInitHooksToBeRun */, currentNodeIndex !== undefined ? currentNodeIndex : null);\n    }\n}\n/**\n * Executes hooks against the given `LView` based off of whether or not\n * This is the first pass.\n *\n * @param {?} currentView The view instance data to run the hooks against\n * @param {?} firstPassHooks An array of hooks to run if we're in the first view pass\n * @param {?} checkHooks An Array of hooks to run if we're not in the first view pass.\n * @param {?} checkNoChangesMode Whether or not we're in no changes mode.\n * @param {?} initPhaseState the current state of the init phase\n * @param {?} currentNodeIndex 3 cases depending the the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing flushHooksUpTo(number))\n * @return {?}\n */\nexport function executeHooks(currentView, firstPassHooks, checkHooks, checkNoChangesMode, initPhaseState, currentNodeIndex) {\n    if (checkNoChangesMode)\n        return;\n    /** @type {?} */\n    const hooksToCall = (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhaseState ?\n        firstPassHooks :\n        checkHooks;\n    if (hooksToCall) {\n        callHooks(currentView, hooksToCall, initPhaseState, currentNodeIndex);\n    }\n    // The init phase state must be always checked here as it may have been recursively updated\n    if (currentNodeIndex == null &&\n        (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhaseState &&\n        initPhaseState !== 3 /* InitPhaseCompleted */) {\n        currentView[FLAGS] &= 1023 /* IndexWithinInitPhaseReset */;\n        currentView[FLAGS] += 1 /* InitPhaseStateIncrementer */;\n    }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * the first LView pass\n *\n * @param {?} currentView The current view\n * @param {?} arr The array in which the hooks are found\n * @param {?} initPhase\n * @param {?} currentNodeIndex 3 cases depending the the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing flushHooksUpTo(number))\n * @return {?}\n */\nfunction callHooks(currentView, arr, initPhase, currentNodeIndex) {\n    /** @type {?} */\n    const startIndex = currentNodeIndex !== undefined ?\n        (currentView[PREORDER_HOOK_FLAGS] & 65535 /* IndexOfTheNextPreOrderHookMaskMask */) :\n        0;\n    /** @type {?} */\n    const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\n    /** @type {?} */\n    let lastNodeIndexFound = 0;\n    for (let i = startIndex; i < arr.length; i++) {\n        /** @type {?} */\n        const hook = (/** @type {?} */ (arr[i + 1]));\n        if (typeof hook === 'number') {\n            lastNodeIndexFound = (/** @type {?} */ (arr[i]));\n            if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\n                break;\n            }\n        }\n        else {\n            /** @type {?} */\n            const isInitHook = arr[i] < 0;\n            if (isInitHook)\n                currentView[PREORDER_HOOK_FLAGS] += 65536 /* NumberOfInitHooksCalledIncrementer */;\n            if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\n                callHook(currentView, initPhase, arr, i);\n                currentView[PREORDER_HOOK_FLAGS] =\n                    (currentView[PREORDER_HOOK_FLAGS] & 4294901760 /* NumberOfInitHooksCalledMask */) + i +\n                        2;\n            }\n            i++;\n        }\n    }\n}\n/**\n * Execute one hook against the current `LView`.\n *\n * @param {?} currentView The current view\n * @param {?} initPhase\n * @param {?} arr The array in which the hooks are found\n * @param {?} i The current index within the hook data array\n * @return {?}\n */\nfunction callHook(currentView, initPhase, arr, i) {\n    /** @type {?} */\n    const isInitHook = arr[i] < 0;\n    /** @type {?} */\n    const hook = (/** @type {?} */ (arr[i + 1]));\n    /** @type {?} */\n    const directiveIndex = isInitHook ? -arr[i] : (/** @type {?} */ (arr[i]));\n    /** @type {?} */\n    const directive = currentView[directiveIndex];\n    if (isInitHook) {\n        /** @type {?} */\n        const indexWithintInitPhase = currentView[FLAGS] >> 10 /* IndexWithinInitPhaseShift */;\n        // The init phase state must be always checked here as it may have been recursively\n        // updated\n        if (indexWithintInitPhase <\n            (currentView[PREORDER_HOOK_FLAGS] >> 16 /* NumberOfInitHooksCalledShift */) &&\n            (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhase) {\n            currentView[FLAGS] += 1024 /* IndexWithinInitPhaseIncrementer */;\n            hook.call(directive);\n        }\n    }\n    else {\n        hook.call(directive);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertDefined } from '../util/assert';\nimport { assertLViewOrUndefined } from './assert';\nimport { executeHooks } from './hooks';\nimport { BINDING_INDEX, CONTEXT, DECLARATION_VIEW, FLAGS, TVIEW } from './interfaces/view';\nimport { resetPreOrderHookFlags } from './util/view_utils';\n/**\n * Store the element depth count. This is used to identify the root elements of the template\n * so that we can than attach `LView` to only those elements.\n * @type {?}\n */\nlet elementDepthCount;\n/**\n * @return {?}\n */\nexport function getElementDepthCount() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return elementDepthCount;\n}\n/**\n * @return {?}\n */\nexport function increaseElementDepthCount() {\n    elementDepthCount++;\n}\n/**\n * @return {?}\n */\nexport function decreaseElementDepthCount() {\n    elementDepthCount--;\n}\n/** @type {?} */\nlet currentDirectiveDef = null;\n/**\n * @return {?}\n */\nexport function getCurrentDirectiveDef() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return currentDirectiveDef;\n}\n/**\n * @param {?} def\n * @return {?}\n */\nexport function setCurrentDirectiveDef(def) {\n    currentDirectiveDef = def;\n}\n/**\n * Stores whether directives should be matched to elements.\n *\n * When template contains `ngNonBindable` than we need to prevent the runtime form matching\n * directives on children of that element.\n *\n * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n * </div>\n * ```\n * @type {?}\n */\nlet bindingsEnabled;\n/**\n * @return {?}\n */\nexport function getBindingsEnabled() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return bindingsEnabled;\n}\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n * @return {?}\n */\nexport function enableBindings() {\n    bindingsEnabled = true;\n}\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n * @return {?}\n */\nexport function disableBindings() {\n    bindingsEnabled = false;\n}\n/**\n * @return {?}\n */\nexport function getLView() {\n    return lView;\n}\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param {?} viewToRestore The OpaqueViewState instance to restore.\n * @return {?}\n */\nexport function restoreView(viewToRestore) {\n    contextLView = (/** @type {?} */ ((/** @type {?} */ (viewToRestore))));\n}\n/**\n * Used to set the parent property when nodes are created and track query results.\n * @type {?}\n */\nlet previousOrParentTNode;\n/**\n * @return {?}\n */\nexport function getPreviousOrParentTNode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return previousOrParentTNode;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function setPreviousOrParentTNode(tNode) {\n    previousOrParentTNode = tNode;\n}\n/**\n * @param {?} tNode\n * @param {?} view\n * @return {?}\n */\nexport function setTNodeAndViewData(tNode, view) {\n    ngDevMode && assertLViewOrUndefined(view);\n    previousOrParentTNode = tNode;\n    lView = view;\n}\n/**\n * If `isParent` is:\n *  - `true`: then `previousOrParentTNode` points to a parent node.\n *  - `false`: then `previousOrParentTNode` points to previous node (sibling).\n * @type {?}\n */\nlet isParent;\n/**\n * @return {?}\n */\nexport function getIsParent() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return isParent;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function setIsParent(value) {\n    isParent = value;\n}\n/**\n * Checks whether a given view is in creation mode\n * @param {?=} view\n * @return {?}\n */\nexport function isCreationMode(view = lView) {\n    return (view[FLAGS] & 4 /* CreationMode */) === 4 /* CreationMode */;\n}\n/**\n * State of the current view being processed.\n *\n * An array of nodes (text, element, container, etc), pipes, their bindings, and\n * any local variables that need to be stored between invocations.\n * @type {?}\n */\nlet lView;\n/**\n * The last viewData retrieved by nextContext().\n * Allows building nextContext() and reference() calls.\n *\n * e.g. const inner = x().$implicit; const outer = x().$implicit;\n * @type {?}\n */\nlet contextLView = (/** @type {?} */ (null));\n/**\n * @return {?}\n */\nexport function getContextLView() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return contextLView;\n}\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n * @type {?}\n */\nlet checkNoChangesMode = false;\n/**\n * @return {?}\n */\nexport function getCheckNoChangesMode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return checkNoChangesMode;\n}\n/**\n * @param {?} mode\n * @return {?}\n */\nexport function setCheckNoChangesMode(mode) {\n    checkNoChangesMode = mode;\n}\n/**\n * The root index from which pure function instructions should calculate their binding\n * indices. In component views, this is TView.bindingStartIndex. In a host binding\n * context, this is the TView.expandoStartIndex + any dirs/hostVars before the given dir.\n * @type {?}\n */\nlet bindingRootIndex = -1;\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\n/**\n * @return {?}\n */\nexport function getBindingRoot() {\n    return bindingRootIndex;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function setBindingRoot(value) {\n    bindingRootIndex = value;\n}\n/**\n * Current index of a View or Content Query which needs to be processed next.\n * We iterate over the list of Queries and increment current query index at every step.\n * @type {?}\n */\nlet currentQueryIndex = 0;\n/**\n * @return {?}\n */\nexport function getCurrentQueryIndex() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return currentQueryIndex;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function setCurrentQueryIndex(value) {\n    currentQueryIndex = value;\n}\n/**\n * Swap the current state with a new state.\n *\n * For performance reasons we store the state in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the state for later, and when the view is\n * exited the state has to be restored\n *\n * @param {?} newView New state to become active\n * @param {?} hostTNode\n * @return {?} the previous state;\n */\nexport function enterView(newView, hostTNode) {\n    ngDevMode && assertLViewOrUndefined(newView);\n    /** @type {?} */\n    const oldView = lView;\n    if (newView) {\n        /** @type {?} */\n        const tView = newView[TVIEW];\n        bindingRootIndex = tView.bindingStartIndex;\n    }\n    previousOrParentTNode = (/** @type {?} */ (hostTNode));\n    isParent = true;\n    lView = contextLView = newView;\n    return oldView;\n}\n/**\n * @template T\n * @param {?=} level\n * @return {?}\n */\nexport function nextContextImpl(level = 1) {\n    contextLView = walkUpViews(level, (/** @type {?} */ (contextLView)));\n    return (/** @type {?} */ (contextLView[CONTEXT]));\n}\n/**\n * @param {?} nestingLevel\n * @param {?} currentView\n * @return {?}\n */\nfunction walkUpViews(nestingLevel, currentView) {\n    while (nestingLevel > 0) {\n        ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n        currentView = (/** @type {?} */ (currentView[DECLARATION_VIEW]));\n        nestingLevel--;\n    }\n    return currentView;\n}\n/**\n * Resets the application state.\n * @return {?}\n */\nexport function resetComponentState() {\n    isParent = false;\n    previousOrParentTNode = (/** @type {?} */ (null));\n    elementDepthCount = 0;\n    bindingsEnabled = true;\n}\n/**\n * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\n * the direction of traversal (up or down the view tree) a bit clearer.\n *\n * @param {?} newView New state to become active\n * @return {?}\n */\nexport function leaveView(newView) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (isCreationMode(lView)) {\n        lView[FLAGS] &= ~4 /* CreationMode */;\n    }\n    else {\n        try {\n            resetPreOrderHookFlags(lView);\n            executeHooks(lView, tView.viewHooks, tView.viewCheckHooks, checkNoChangesMode, 2 /* AfterViewInitHooksToBeRun */, undefined);\n        }\n        finally {\n            // Views are clean and in update mode after being checked, so these bits are cleared\n            lView[FLAGS] &= ~(64 /* Dirty */ | 8 /* FirstLViewPass */);\n            lView[BINDING_INDEX] = tView.bindingStartIndex;\n        }\n    }\n    enterView(newView, null);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NO_PARENT_INJECTOR } from '../interfaces/injector';\nimport { DECLARATION_VIEW } from '../interfaces/view';\n/// Parent Injector Utils ///////////////////////////////////////////////////////////////\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nexport function hasParentInjector(parentLocation) {\n    return parentLocation !== NO_PARENT_INJECTOR;\n}\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nexport function getParentInjectorIndex(parentLocation) {\n    return ((/** @type {?} */ ((/** @type {?} */ (parentLocation))))) & 32767 /* InjectorIndexMask */;\n}\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nexport function getParentInjectorViewOffset(parentLocation) {\n    return ((/** @type {?} */ ((/** @type {?} */ (parentLocation))))) >> 16 /* ViewOffsetShift */;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param {?} location The location of the parent injector, which contains the view offset\n * @param {?} startView The LView instance from which to start walking up the view tree\n * @return {?} The LView instance that contains the parent injector\n */\nexport function getParentInjectorView(location, startView) {\n    /** @type {?} */\n    let viewOffset = getParentInjectorViewOffset(location);\n    /** @type {?} */\n    let parentView = startView;\n    // For most cases, the parent injector can be found on the host node (e.g. for component\n    // or container), but we must keep the loop here to support the rarer case of deeply nested\n    // <ng-template> tags or inline views, where the parent injector might live many views\n    // above the child injector.\n    while (viewOffset > 0) {\n        parentView = (/** @type {?} */ (parentView[DECLARATION_VIEW]));\n        viewOffset--;\n    }\n    return parentView;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0b3JfdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL3V0aWwvaW5qZWN0b3JfdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFPQSxPQUFPLEVBQUMsa0JBQWtCLEVBQTBELE1BQU0sd0JBQXdCLENBQUM7QUFDbkgsT0FBTyxFQUFDLGdCQUFnQixFQUFRLE1BQU0sb0JBQW9CLENBQUM7Ozs7OztBQUUzRCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsY0FBd0M7SUFDeEUsT0FBTyxjQUFjLEtBQUssa0JBQWtCLENBQUM7QUFDL0MsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsY0FBd0M7SUFDN0UsT0FBTyxDQUFDLG1CQUFBLG1CQUFBLGNBQWMsRUFBTyxFQUFVLENBQUMsZ0NBQWtELENBQUM7QUFDN0YsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsMkJBQTJCLENBQUMsY0FBd0M7SUFDbEYsT0FBTyxDQUFDLG1CQUFBLG1CQUFBLGNBQWMsRUFBTyxFQUFVLENBQUMsNEJBQWlELENBQUM7QUFDNUYsQ0FBQzs7Ozs7Ozs7OztBQVdELE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxRQUFrQyxFQUFFLFNBQWdCOztRQUNwRixVQUFVLEdBQUcsMkJBQTJCLENBQUMsUUFBUSxDQUFDOztRQUNsRCxVQUFVLEdBQUcsU0FBUztJQUMxQix3RkFBd0Y7SUFDeEYsMkZBQTJGO0lBQzNGLHNGQUFzRjtJQUN0Riw0QkFBNEI7SUFDNUIsT0FBTyxVQUFVLEdBQUcsQ0FBQyxFQUFFO1FBQ3JCLFVBQVUsR0FBRyxtQkFBQSxVQUFVLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDO1FBQzVDLFVBQVUsRUFBRSxDQUFDO0tBQ2Q7SUFDRCxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHtOT19QQVJFTlRfSU5KRUNUT1IsIFJlbGF0aXZlSW5qZWN0b3JMb2NhdGlvbiwgUmVsYXRpdmVJbmplY3RvckxvY2F0aW9uRmxhZ3N9IGZyb20gJy4uL2ludGVyZmFjZXMvaW5qZWN0b3InO1xuaW1wb3J0IHtERUNMQVJBVElPTl9WSUVXLCBMVmlld30gZnJvbSAnLi4vaW50ZXJmYWNlcy92aWV3Jztcbi8vLyBQYXJlbnQgSW5qZWN0b3IgVXRpbHMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5leHBvcnQgZnVuY3Rpb24gaGFzUGFyZW50SW5qZWN0b3IocGFyZW50TG9jYXRpb246IFJlbGF0aXZlSW5qZWN0b3JMb2NhdGlvbik6IGJvb2xlYW4ge1xuICByZXR1cm4gcGFyZW50TG9jYXRpb24gIT09IE5PX1BBUkVOVF9JTkpFQ1RPUjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhcmVudEluamVjdG9ySW5kZXgocGFyZW50TG9jYXRpb246IFJlbGF0aXZlSW5qZWN0b3JMb2NhdGlvbik6IG51bWJlciB7XG4gIHJldHVybiAocGFyZW50TG9jYXRpb24gYXMgYW55IGFzIG51bWJlcikgJiBSZWxhdGl2ZUluamVjdG9yTG9jYXRpb25GbGFncy5JbmplY3RvckluZGV4TWFzaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhcmVudEluamVjdG9yVmlld09mZnNldChwYXJlbnRMb2NhdGlvbjogUmVsYXRpdmVJbmplY3RvckxvY2F0aW9uKTogbnVtYmVyIHtcbiAgcmV0dXJuIChwYXJlbnRMb2NhdGlvbiBhcyBhbnkgYXMgbnVtYmVyKSA+PiBSZWxhdGl2ZUluamVjdG9yTG9jYXRpb25GbGFncy5WaWV3T2Zmc2V0U2hpZnQ7XG59XG5cbi8qKlxuICogVW53cmFwcyBhIHBhcmVudCBpbmplY3RvciBsb2NhdGlvbiBudW1iZXIgdG8gZmluZCB0aGUgdmlldyBvZmZzZXQgZnJvbSB0aGUgY3VycmVudCBpbmplY3RvcixcbiAqIHRoZW4gd2Fsa3MgdXAgdGhlIGRlY2xhcmF0aW9uIHZpZXcgdHJlZSB1bnRpbCB0aGUgdmlldyBpcyBmb3VuZCB0aGF0IGNvbnRhaW5zIHRoZSBwYXJlbnRcbiAqIGluamVjdG9yLlxuICpcbiAqIEBwYXJhbSBsb2NhdGlvbiBUaGUgbG9jYXRpb24gb2YgdGhlIHBhcmVudCBpbmplY3Rvciwgd2hpY2ggY29udGFpbnMgdGhlIHZpZXcgb2Zmc2V0XG4gKiBAcGFyYW0gc3RhcnRWaWV3IFRoZSBMVmlldyBpbnN0YW5jZSBmcm9tIHdoaWNoIHRvIHN0YXJ0IHdhbGtpbmcgdXAgdGhlIHZpZXcgdHJlZVxuICogQHJldHVybnMgVGhlIExWaWV3IGluc3RhbmNlIHRoYXQgY29udGFpbnMgdGhlIHBhcmVudCBpbmplY3RvclxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFyZW50SW5qZWN0b3JWaWV3KGxvY2F0aW9uOiBSZWxhdGl2ZUluamVjdG9yTG9jYXRpb24sIHN0YXJ0VmlldzogTFZpZXcpOiBMVmlldyB7XG4gIGxldCB2aWV3T2Zmc2V0ID0gZ2V0UGFyZW50SW5qZWN0b3JWaWV3T2Zmc2V0KGxvY2F0aW9uKTtcbiAgbGV0IHBhcmVudFZpZXcgPSBzdGFydFZpZXc7XG4gIC8vIEZvciBtb3N0IGNhc2VzLCB0aGUgcGFyZW50IGluamVjdG9yIGNhbiBiZSBmb3VuZCBvbiB0aGUgaG9zdCBub2RlIChlLmcuIGZvciBjb21wb25lbnRcbiAgLy8gb3IgY29udGFpbmVyKSwgYnV0IHdlIG11c3Qga2VlcCB0aGUgbG9vcCBoZXJlIHRvIHN1cHBvcnQgdGhlIHJhcmVyIGNhc2Ugb2YgZGVlcGx5IG5lc3RlZFxuICAvLyA8bmctdGVtcGxhdGU+IHRhZ3Mgb3IgaW5saW5lIHZpZXdzLCB3aGVyZSB0aGUgcGFyZW50IGluamVjdG9yIG1pZ2h0IGxpdmUgbWFueSB2aWV3c1xuICAvLyBhYm92ZSB0aGUgY2hpbGQgaW5qZWN0b3IuXG4gIHdoaWxlICh2aWV3T2Zmc2V0ID4gMCkge1xuICAgIHBhcmVudFZpZXcgPSBwYXJlbnRWaWV3W0RFQ0xBUkFUSU9OX1ZJRVddICE7XG4gICAgdmlld09mZnNldC0tO1xuICB9XG4gIHJldHVybiBwYXJlbnRWaWV3O1xufVxuIl19","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertDefined } from '../../util/assert';\nimport { assertLView } from '../assert';\nimport { CONTEXT, DECLARATION_VIEW, FLAGS, PARENT, T_HOST } from '../interfaces/view';\nimport { isLContainer, isLView, readPatchedLView } from './view_utils';\n/**\n * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\n * that LContainer, which is an LView\n * @param {?} lView the lView whose parent to get\n * @return {?}\n */\nexport function getLViewParent(lView) {\n    ngDevMode && assertLView(lView);\n    /** @type {?} */\n    const parent = lView[PARENT];\n    return isLContainer(parent) ? (/** @type {?} */ (parent[PARENT])) : parent;\n}\n/**\n * Retrieve the root view from any component or `LView` by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param {?} componentOrLView any component or `LView`\n * @return {?}\n */\nexport function getRootView(componentOrLView) {\n    ngDevMode && assertDefined(componentOrLView, 'component');\n    /** @type {?} */\n    let lView = isLView(componentOrLView) ? componentOrLView : (/** @type {?} */ (readPatchedLView(componentOrLView)));\n    while (lView && !(lView[FLAGS] & 512 /* IsRoot */)) {\n        lView = (/** @type {?} */ (getLViewParent(lView)));\n    }\n    ngDevMode && assertLView(lView);\n    return lView;\n}\n/**\n * Given a current view, finds the nearest component's host (LElement).\n *\n * @param {?} lView LView for which we want a host element node\n * @return {?} The host node\n */\nexport function findComponentView(lView) {\n    /** @type {?} */\n    let rootTNode = lView[T_HOST];\n    while (rootTNode && rootTNode.type === 2 /* View */) {\n        ngDevMode && assertDefined(lView[DECLARATION_VIEW], 'lView[DECLARATION_VIEW]');\n        lView = (/** @type {?} */ (lView[DECLARATION_VIEW]));\n        rootTNode = lView[T_HOST];\n    }\n    ngDevMode && assertLView(lView);\n    return lView;\n}\n/**\n * Returns the `RootContext` instance that is associated with\n * the application where the target is situated. It does this by walking the parent views until it\n * gets to the root view, then getting the context off of that.\n *\n * @param {?} viewOrComponent the `LView` or component to get the root context for.\n * @return {?}\n */\nexport function getRootContext(viewOrComponent) {\n    /** @type {?} */\n    const rootView = getRootView(viewOrComponent);\n    ngDevMode &&\n        assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');\n    return (/** @type {?} */ (rootView[CONTEXT]));\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld190cmF2ZXJzYWxfdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL3V0aWwvdmlld190cmF2ZXJzYWxfdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUV0QyxPQUFPLEVBQUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFlLE1BQU0sRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBRXBILE9BQU8sRUFBQyxZQUFZLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFDLE1BQU0sY0FBYyxDQUFDOzs7Ozs7O0FBUXJFLE1BQU0sVUFBVSxjQUFjLENBQUMsS0FBWTtJQUN6QyxTQUFTLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDOztVQUMxQixNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUM1QixPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUMxRCxDQUFDOzs7Ozs7OztBQVFELE1BQU0sVUFBVSxXQUFXLENBQUMsZ0JBQTRCO0lBQ3RELFNBQVMsSUFBSSxhQUFhLENBQUMsZ0JBQWdCLEVBQUUsV0FBVyxDQUFDLENBQUM7O1FBQ3RELEtBQUssR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLG1CQUFBLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLEVBQUU7SUFDL0YsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsbUJBQW9CLENBQUMsRUFBRTtRQUNuRCxLQUFLLEdBQUcsbUJBQUEsY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7S0FDakM7SUFDRCxTQUFTLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQzs7Ozs7OztBQVFELE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxLQUFZOztRQUN4QyxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUM3QixPQUFPLFNBQVMsSUFBSSxTQUFTLENBQUMsSUFBSSxpQkFBbUIsRUFBRTtRQUNyRCxTQUFTLElBQUksYUFBYSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLHlCQUF5QixDQUFDLENBQUM7UUFDL0UsS0FBSyxHQUFHLG1CQUFBLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUM7UUFDbEMsU0FBUyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUMzQjtJQUNELFNBQVMsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEMsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDOzs7Ozs7Ozs7QUFTRCxNQUFNLFVBQVUsY0FBYyxDQUFDLGVBQTJCOztVQUNsRCxRQUFRLEdBQUcsV0FBVyxDQUFDLGVBQWUsQ0FBQztJQUM3QyxTQUFTO1FBQ0wsYUFBYSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxzREFBc0QsQ0FBQyxDQUFDO0lBQzdGLE9BQU8sbUJBQUEsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFlLENBQUM7QUFDMUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHthc3NlcnREZWZpbmVkfSBmcm9tICcuLi8uLi91dGlsL2Fzc2VydCc7XG5pbXBvcnQge2Fzc2VydExWaWV3fSBmcm9tICcuLi9hc3NlcnQnO1xuaW1wb3J0IHtUTm9kZVR5cGV9IGZyb20gJy4uL2ludGVyZmFjZXMvbm9kZSc7XG5pbXBvcnQge0NPTlRFWFQsIERFQ0xBUkFUSU9OX1ZJRVcsIEZMQUdTLCBMVmlldywgTFZpZXdGbGFncywgUEFSRU5ULCBSb290Q29udGV4dCwgVF9IT1NUfSBmcm9tICcuLi9pbnRlcmZhY2VzL3ZpZXcnO1xuXG5pbXBvcnQge2lzTENvbnRhaW5lciwgaXNMVmlldywgcmVhZFBhdGNoZWRMVmlld30gZnJvbSAnLi92aWV3X3V0aWxzJztcblxuXG4vKipcbiAqIEdldHMgdGhlIHBhcmVudCBMVmlldyBvZiB0aGUgcGFzc2VkIExWaWV3LCBpZiB0aGUgUEFSRU5UIGlzIGFuIExDb250YWluZXIsIHdpbGwgZ2V0IHRoZSBwYXJlbnQgb2ZcbiAqIHRoYXQgTENvbnRhaW5lciwgd2hpY2ggaXMgYW4gTFZpZXdcbiAqIEBwYXJhbSBsVmlldyB0aGUgbFZpZXcgd2hvc2UgcGFyZW50IHRvIGdldFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TFZpZXdQYXJlbnQobFZpZXc6IExWaWV3KTogTFZpZXd8bnVsbCB7XG4gIG5nRGV2TW9kZSAmJiBhc3NlcnRMVmlldyhsVmlldyk7XG4gIGNvbnN0IHBhcmVudCA9IGxWaWV3W1BBUkVOVF07XG4gIHJldHVybiBpc0xDb250YWluZXIocGFyZW50KSA/IHBhcmVudFtQQVJFTlRdICEgOiBwYXJlbnQ7XG59XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIHJvb3QgdmlldyBmcm9tIGFueSBjb21wb25lbnQgb3IgYExWaWV3YCBieSB3YWxraW5nIHRoZSBwYXJlbnQgYExWaWV3YCB1bnRpbFxuICogcmVhY2hpbmcgdGhlIHJvb3QgYExWaWV3YC5cbiAqXG4gKiBAcGFyYW0gY29tcG9uZW50T3JMVmlldyBhbnkgY29tcG9uZW50IG9yIGBMVmlld2BcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJvb3RWaWV3KGNvbXBvbmVudE9yTFZpZXc6IExWaWV3IHwge30pOiBMVmlldyB7XG4gIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKGNvbXBvbmVudE9yTFZpZXcsICdjb21wb25lbnQnKTtcbiAgbGV0IGxWaWV3ID0gaXNMVmlldyhjb21wb25lbnRPckxWaWV3KSA/IGNvbXBvbmVudE9yTFZpZXcgOiByZWFkUGF0Y2hlZExWaWV3KGNvbXBvbmVudE9yTFZpZXcpICE7XG4gIHdoaWxlIChsVmlldyAmJiAhKGxWaWV3W0ZMQUdTXSAmIExWaWV3RmxhZ3MuSXNSb290KSkge1xuICAgIGxWaWV3ID0gZ2V0TFZpZXdQYXJlbnQobFZpZXcpICE7XG4gIH1cbiAgbmdEZXZNb2RlICYmIGFzc2VydExWaWV3KGxWaWV3KTtcbiAgcmV0dXJuIGxWaWV3O1xufVxuXG4vKipcbiAqIEdpdmVuIGEgY3VycmVudCB2aWV3LCBmaW5kcyB0aGUgbmVhcmVzdCBjb21wb25lbnQncyBob3N0IChMRWxlbWVudCkuXG4gKlxuICogQHBhcmFtIGxWaWV3IExWaWV3IGZvciB3aGljaCB3ZSB3YW50IGEgaG9zdCBlbGVtZW50IG5vZGVcbiAqIEByZXR1cm5zIFRoZSBob3N0IG5vZGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRDb21wb25lbnRWaWV3KGxWaWV3OiBMVmlldyk6IExWaWV3IHtcbiAgbGV0IHJvb3RUTm9kZSA9IGxWaWV3W1RfSE9TVF07XG4gIHdoaWxlIChyb290VE5vZGUgJiYgcm9vdFROb2RlLnR5cGUgPT09IFROb2RlVHlwZS5WaWV3KSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydERlZmluZWQobFZpZXdbREVDTEFSQVRJT05fVklFV10sICdsVmlld1tERUNMQVJBVElPTl9WSUVXXScpO1xuICAgIGxWaWV3ID0gbFZpZXdbREVDTEFSQVRJT05fVklFV10gITtcbiAgICByb290VE5vZGUgPSBsVmlld1tUX0hPU1RdO1xuICB9XG4gIG5nRGV2TW9kZSAmJiBhc3NlcnRMVmlldyhsVmlldyk7XG4gIHJldHVybiBsVmlldztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBgUm9vdENvbnRleHRgIGluc3RhbmNlIHRoYXQgaXMgYXNzb2NpYXRlZCB3aXRoXG4gKiB0aGUgYXBwbGljYXRpb24gd2hlcmUgdGhlIHRhcmdldCBpcyBzaXR1YXRlZC4gSXQgZG9lcyB0aGlzIGJ5IHdhbGtpbmcgdGhlIHBhcmVudCB2aWV3cyB1bnRpbCBpdFxuICogZ2V0cyB0byB0aGUgcm9vdCB2aWV3LCB0aGVuIGdldHRpbmcgdGhlIGNvbnRleHQgb2ZmIG9mIHRoYXQuXG4gKlxuICogQHBhcmFtIHZpZXdPckNvbXBvbmVudCB0aGUgYExWaWV3YCBvciBjb21wb25lbnQgdG8gZ2V0IHRoZSByb290IGNvbnRleHQgZm9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Um9vdENvbnRleHQodmlld09yQ29tcG9uZW50OiBMVmlldyB8IHt9KTogUm9vdENvbnRleHQge1xuICBjb25zdCByb290VmlldyA9IGdldFJvb3RWaWV3KHZpZXdPckNvbXBvbmVudCk7XG4gIG5nRGV2TW9kZSAmJlxuICAgICAgYXNzZXJ0RGVmaW5lZChyb290Vmlld1tDT05URVhUXSwgJ1Jvb3RWaWV3IGhhcyBubyBjb250ZXh0LiBQZXJoYXBzIGl0IGlzIGRpc2Nvbm5lY3RlZD8nKTtcbiAgcmV0dXJuIHJvb3RWaWV3W0NPTlRFWFRdIGFzIFJvb3RDb250ZXh0O1xufVxuIl19","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectFlags } from '../di';\nimport { injectRootLimpMode, setInjectImplementation } from '../di/injector_compatibility';\nimport { getInjectableDef, getInjectorDef } from '../di/interface/defs';\nimport { assertDefined, assertEqual } from '../util/assert';\nimport { getComponentDef, getDirectiveDef, getPipeDef } from './definition';\nimport { NG_ELEMENT_ID } from './fields';\nimport { NO_PARENT_INJECTOR, PARENT_INJECTOR, TNODE, isFactory } from './interfaces/injector';\nimport { DECLARATION_VIEW, INJECTOR, TVIEW, T_HOST } from './interfaces/view';\nimport { assertNodeOfPossibleTypes } from './node_assert';\nimport { getLView, getPreviousOrParentTNode, setTNodeAndViewData } from './state';\nimport { getParentInjectorIndex, getParentInjectorView, hasParentInjector } from './util/injector_utils';\nimport { renderStringify } from './util/misc_utils';\nimport { findComponentView } from './util/view_traversal_utils';\nimport { isComponent, isComponentDef } from './util/view_utils';\n/**\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```\n * \\@Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * \\@Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n * @type {?}\n */\nlet includeViewProviders = true;\n/**\n * @param {?} v\n * @return {?}\n */\nfunction setIncludeViewProviders(v) {\n    /** @type {?} */\n    const oldValue = includeViewProviders;\n    includeViewProviders = v;\n    return oldValue;\n}\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n * @type {?}\n */\nconst BLOOM_SIZE = 256;\n/** @type {?} */\nconst BLOOM_MASK = BLOOM_SIZE - 1;\n/**\n * Counter used to generate unique IDs for directives.\n * @type {?}\n */\nlet nextNgElementId = 0;\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param {?} injectorIndex The index of the node injector where this token should be registered\n * @param {?} tView The TView for the injector's bloom filters\n * @param {?} type The directive token to register\n * @return {?}\n */\nexport function bloomAdd(injectorIndex, tView, type) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'expected firstTemplatePass to be true');\n    /** @type {?} */\n    let id = typeof type !== 'string' ? ((/** @type {?} */ (type)))[NG_ELEMENT_ID] : type.charCodeAt(0) || 0;\n    // Set a unique ID on the directive type, so if something tries to inject the directive,\n    // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n    if (id == null) {\n        id = ((/** @type {?} */ (type)))[NG_ELEMENT_ID] = nextNgElementId++;\n    }\n    // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n    // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n    /** @type {?} */\n    const bloomBit = id & BLOOM_MASK;\n    // Create a mask that targets the specific bit associated with the directive.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    /** @type {?} */\n    const mask = 1 << bloomBit;\n    // Use the raw bloomBit number to determine which bloom filter bucket we should check\n    // e.g: bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc\n    /** @type {?} */\n    const b7 = bloomBit & 0x80;\n    /** @type {?} */\n    const b6 = bloomBit & 0x40;\n    /** @type {?} */\n    const b5 = bloomBit & 0x20;\n    /** @type {?} */\n    const tData = (/** @type {?} */ (tView.data));\n    if (b7) {\n        b6 ? (b5 ? (tData[injectorIndex + 7] |= mask) : (tData[injectorIndex + 6] |= mask)) :\n            (b5 ? (tData[injectorIndex + 5] |= mask) : (tData[injectorIndex + 4] |= mask));\n    }\n    else {\n        b6 ? (b5 ? (tData[injectorIndex + 3] |= mask) : (tData[injectorIndex + 2] |= mask)) :\n            (b5 ? (tData[injectorIndex + 1] |= mask) : (tData[injectorIndex] |= mask));\n    }\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param {?} tNode for which an injector should be retrieved / created.\n * @param {?} hostView View where the node is stored\n * @return {?} Node injector\n */\nexport function getOrCreateNodeInjectorForNode(tNode, hostView) {\n    /** @type {?} */\n    const existingInjectorIndex = getInjectorIndex(tNode, hostView);\n    if (existingInjectorIndex !== -1) {\n        return existingInjectorIndex;\n    }\n    /** @type {?} */\n    const tView = hostView[TVIEW];\n    if (tView.firstTemplatePass) {\n        tNode.injectorIndex = hostView.length;\n        insertBloom(tView.data, tNode); // foundation for node bloom\n        insertBloom(hostView, null); // foundation for cumulative bloom\n        insertBloom(tView.blueprint, null);\n        ngDevMode && assertEqual(tNode.flags === 0 || tNode.flags === 1 /* isComponent */, true, 'expected tNode.flags to not be initialized');\n    }\n    /** @type {?} */\n    const parentLoc = getParentInjectorLocation(tNode, hostView);\n    /** @type {?} */\n    const parentIndex = getParentInjectorIndex(parentLoc);\n    /** @type {?} */\n    const parentLView = getParentInjectorView(parentLoc, hostView);\n    /** @type {?} */\n    const injectorIndex = tNode.injectorIndex;\n    // If a parent injector can't be found, its location is set to -1.\n    // In that case, we don't need to set up a cumulative bloom\n    if (hasParentInjector(parentLoc)) {\n        /** @type {?} */\n        const parentData = (/** @type {?} */ (parentLView[TVIEW].data));\n        // Creates a cumulative bloom filter that merges the parent's bloom filter\n        // and its own cumulative bloom (which contains tokens for all ancestors)\n        for (let i = 0; i < 8; i++) {\n            hostView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n        }\n    }\n    hostView[injectorIndex + PARENT_INJECTOR] = parentLoc;\n    return injectorIndex;\n}\n/**\n * @param {?} arr\n * @param {?} footer\n * @return {?}\n */\nfunction insertBloom(arr, footer) {\n    arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\n/**\n * @param {?} tNode\n * @param {?} hostView\n * @return {?}\n */\nexport function getInjectorIndex(tNode, hostView) {\n    if (tNode.injectorIndex === -1 ||\n        // If the injector index is the same as its parent's injector index, then the index has been\n        // copied down from the parent node. No injector has been created yet on this node.\n        (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\n        // After the first template pass, the injector index might exist but the parent values\n        // might not have been calculated yet for this instance\n        hostView[tNode.injectorIndex + PARENT_INJECTOR] == null) {\n        return -1;\n    }\n    else {\n        return tNode.injectorIndex;\n    }\n}\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * Returns a combination of number of `ViewData` we have to go up and index in that `Viewdata`\n * @param {?} tNode\n * @param {?} view\n * @return {?}\n */\nexport function getParentInjectorLocation(tNode, view) {\n    if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n        return (/** @type {?} */ (tNode.parent.injectorIndex)); // ViewOffset is 0\n    }\n    // For most cases, the parent injector index can be found on the host node (e.g. for component\n    // or container), so this loop will be skipped, but we must keep the loop here to support\n    // the rarer case of deeply nested <ng-template> tags or inline views.\n    /** @type {?} */\n    let hostTNode = view[T_HOST];\n    /** @type {?} */\n    let viewOffset = 1;\n    while (hostTNode && hostTNode.injectorIndex === -1) {\n        view = (/** @type {?} */ (view[DECLARATION_VIEW]));\n        hostTNode = view ? view[T_HOST] : null;\n        viewOffset++;\n    }\n    return hostTNode ?\n        hostTNode.injectorIndex | (viewOffset << 16 /* ViewOffsetShift */) :\n        (/** @type {?} */ (-1));\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param {?} injectorIndex\n * @param {?} view\n * @param {?} token The type or the injection token to be made public\n * @return {?}\n */\nexport function diPublicInInjector(injectorIndex, view, token) {\n    bloomAdd(injectorIndex, view[TVIEW], token);\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * \\@Component(...)\n * class MyComponent {\n *   constructor(\\@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ngComponentDef = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * \\@publicApi\n * @param {?} tNode\n * @param {?} attrNameToInject\n * @return {?}\n */\nexport function injectAttributeImpl(tNode, attrNameToInject) {\n    ngDevMode && assertNodeOfPossibleTypes(tNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    ngDevMode && assertDefined(tNode, 'expecting tNode');\n    /** @type {?} */\n    const attrs = tNode.attrs;\n    if (attrs) {\n        for (let i = 0; i < attrs.length; i = i + 2) {\n            /** @type {?} */\n            const attrName = attrs[i];\n            if (attrName === 3 /* SelectOnly */)\n                break;\n            if (attrName == attrNameToInject) {\n                return (/** @type {?} */ (attrs[i + 1]));\n            }\n        }\n    }\n    return null;\n}\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\n * filter. Negative values are reserved for special objects.\n *   - `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\n *\n * @template T\n * @param {?} tNode The Node where the search for the injector should start\n * @param {?} lView The `LView` that contains the `tNode`\n * @param {?} token The token to look for\n * @param {?=} flags Injection flags\n * @param {?=} notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @return {?} the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nexport function getOrCreateInjectable(tNode, lView, token, flags = InjectFlags.Default, notFoundValue) {\n    if (tNode) {\n        /** @type {?} */\n        const bloomHash = bloomHashBitOrFactory(token);\n        // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n        // so just call the factory function to create it.\n        if (typeof bloomHash === 'function') {\n            /** @type {?} */\n            const savePreviousOrParentTNode = getPreviousOrParentTNode();\n            /** @type {?} */\n            const saveLView = getLView();\n            setTNodeAndViewData(tNode, lView);\n            try {\n                /** @type {?} */\n                const value = bloomHash();\n                if (value == null && !(flags & InjectFlags.Optional)) {\n                    throw new Error(`No provider for ${renderStringify(token)}!`);\n                }\n                else {\n                    return value;\n                }\n            }\n            finally {\n                setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n            }\n        }\n        else if (typeof bloomHash == 'number') {\n            if (bloomHash === -1) {\n                // `-1` is a special value used to identify `Injector` types.\n                return (/** @type {?} */ (new NodeInjector(tNode, lView)));\n            }\n            // If the token has a bloom hash, then it is a token which could be in NodeInjector.\n            // A reference to the previous injector TView that was found while climbing the element\n            // injector tree. This is used to know if viewProviders can be accessed on the current\n            // injector.\n            /** @type {?} */\n            let previousTView = null;\n            /** @type {?} */\n            let injectorIndex = getInjectorIndex(tNode, lView);\n            /** @type {?} */\n            let parentLocation = NO_PARENT_INJECTOR;\n            /** @type {?} */\n            let hostTElementNode = flags & InjectFlags.Host ? findComponentView(lView)[T_HOST] : null;\n            // If we should skip this injector, or if there is no injector on this node, start by\n            // searching\n            // the parent injector.\n            if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {\n                parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) :\n                    lView[injectorIndex + PARENT_INJECTOR];\n                if (!shouldSearchParent(flags, false)) {\n                    injectorIndex = -1;\n                }\n                else {\n                    previousTView = lView[TVIEW];\n                    injectorIndex = getParentInjectorIndex(parentLocation);\n                    lView = getParentInjectorView(parentLocation, lView);\n                }\n            }\n            // Traverse up the injector tree until we find a potential match or until we know there\n            // *isn't* a match.\n            while (injectorIndex !== -1) {\n                parentLocation = lView[injectorIndex + PARENT_INJECTOR];\n                // Check the current injector. If it matches, see if it contains token.\n                /** @type {?} */\n                const tView = lView[TVIEW];\n                if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n                    // At this point, we have an injector which *may* contain the token, so we step through\n                    // the providers and directives associated with the injector's corresponding node to get\n                    // the instance.\n                    /** @type {?} */\n                    const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n                    if (instance !== NOT_FOUND) {\n                        return instance;\n                    }\n                }\n                if (shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + TNODE] === hostTElementNode) &&\n                    bloomHasToken(bloomHash, injectorIndex, lView)) {\n                    // The def wasn't found anywhere on this node, so it was a false positive.\n                    // Traverse up the tree and continue searching.\n                    previousTView = tView;\n                    injectorIndex = getParentInjectorIndex(parentLocation);\n                    lView = getParentInjectorView(parentLocation, lView);\n                }\n                else {\n                    // If we should not search parent OR If the ancestor bloom filter value does not have the\n                    // bit corresponding to the directive we can give up on traversing up to find the specific\n                    // injector.\n                    injectorIndex = -1;\n                }\n            }\n        }\n    }\n    if (flags & InjectFlags.Optional && notFoundValue === undefined) {\n        // This must be set or the NullInjector will throw for optional deps\n        notFoundValue = null;\n    }\n    if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {\n        /** @type {?} */\n        const moduleInjector = lView[INJECTOR];\n        // switch to `injectInjectorOnly` implementation for module injector, since module injector\n        // should not have access to Component/Directive DI scope (that may happen through\n        // `directiveInject` implementation)\n        /** @type {?} */\n        const previousInjectImplementation = setInjectImplementation(undefined);\n        try {\n            if (moduleInjector) {\n                return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);\n            }\n            else {\n                return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);\n            }\n        }\n        finally {\n            setInjectImplementation(previousInjectImplementation);\n        }\n    }\n    if (flags & InjectFlags.Optional) {\n        return notFoundValue;\n    }\n    else {\n        throw new Error(`NodeInjector: NOT_FOUND [${renderStringify(token)}]`);\n    }\n}\n/** @type {?} */\nconst NOT_FOUND = {};\n/**\n * @template T\n * @param {?} injectorIndex\n * @param {?} lView\n * @param {?} token\n * @param {?} previousTView\n * @param {?} flags\n * @param {?} hostTElementNode\n * @return {?}\n */\nfunction searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {\n    /** @type {?} */\n    const currentTView = lView[TVIEW];\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (currentTView.data[injectorIndex + TNODE]));\n    // First, we need to determine if view providers can be accessed by the starting element.\n    // There are two possibities\n    /** @type {?} */\n    const canAccessViewProviders = previousTView == null ?\n        // 1) This is the first invocation `previousTView == null` which means that we are at the\n        // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n        // to look into the ViewProviders is if:\n        // - we are on a component\n        // - AND the injector set `includeViewProviders` to true (implying that the token can see\n        // ViewProviders because it is the Component or a Service which itself was declared in\n        // ViewProviders)\n        (isComponent(tNode) && includeViewProviders) :\n        // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n        // In such a case we are only allowed to look into the ViewProviders if:\n        // - We just crossed from child View to Parent View `previousTView != currentTView`\n        // - AND the parent TNode is an Element.\n        // This means that we just came from the Component's View and therefore are allowed to see\n        // into the ViewProviders.\n        (previousTView != currentTView && (tNode.type === 3 /* Element */));\n    // This special case happens when there is a @host on the inject and when we are searching\n    // on the host element node.\n    /** @type {?} */\n    const isHostSpecialCase = (flags & InjectFlags.Host) && hostTElementNode === tNode;\n    /** @type {?} */\n    const injectableIdx = locateDirectiveOrProvider(tNode, lView, token, canAccessViewProviders, isHostSpecialCase);\n    if (injectableIdx !== null) {\n        return getNodeInjectable(currentTView.data, lView, injectableIdx, (/** @type {?} */ (tNode)));\n    }\n    else {\n        return NOT_FOUND;\n    }\n}\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @template T\n * @param {?} tNode TNode on which directives are present.\n * @param {?} lView The view we are currently processing\n * @param {?} token Provider token or type of a directive to look for.\n * @param {?} canAccessViewProviders Whether view providers should be considered.\n * @param {?} isHostSpecialCase Whether the host special case applies.\n * @return {?} Index of a found directive or provider, or null when none found.\n */\nexport function locateDirectiveOrProvider(tNode, lView, token, canAccessViewProviders, isHostSpecialCase) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const nodeProviderIndexes = tNode.providerIndexes;\n    /** @type {?} */\n    const tInjectables = tView.data;\n    /** @type {?} */\n    const injectablesStart = nodeProviderIndexes & 65535 /* ProvidersStartIndexMask */;\n    /** @type {?} */\n    const directivesStart = tNode.directiveStart;\n    /** @type {?} */\n    const directiveEnd = tNode.directiveEnd;\n    /** @type {?} */\n    const cptViewProvidersCount = nodeProviderIndexes >> 16 /* CptViewProvidersCountShift */;\n    /** @type {?} */\n    const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n    // When the host special case applies, only the viewProviders and the component are visible\n    /** @type {?} */\n    const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n    for (let i = startingIndex; i < endIndex; i++) {\n        /** @type {?} */\n        const providerTokenOrDef = (/** @type {?} */ (tInjectables[i]));\n        if (i < directivesStart && token === providerTokenOrDef ||\n            i >= directivesStart && ((/** @type {?} */ (providerTokenOrDef))).type === token) {\n            return i;\n        }\n    }\n    if (isHostSpecialCase) {\n        /** @type {?} */\n        const dirDef = (/** @type {?} */ (tInjectables[directivesStart]));\n        if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n            return directivesStart;\n        }\n    }\n    return null;\n}\n/**\n * Retrieve or instantiate the injectable from the `lData` at particular `index`.\n *\n * This function checks to see if the value has already been instantiated and if so returns the\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\n * instantiates the `injectable` and caches the value.\n * @param {?} tData\n * @param {?} lData\n * @param {?} index\n * @param {?} tNode\n * @return {?}\n */\nexport function getNodeInjectable(tData, lData, index, tNode) {\n    /** @type {?} */\n    let value = lData[index];\n    if (isFactory(value)) {\n        /** @type {?} */\n        const factory = value;\n        if (factory.resolving) {\n            throw new Error(`Circular dep for ${renderStringify(tData[index])}`);\n        }\n        /** @type {?} */\n        const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n        factory.resolving = true;\n        /** @type {?} */\n        let previousInjectImplementation;\n        if (factory.injectImpl) {\n            previousInjectImplementation = setInjectImplementation(factory.injectImpl);\n        }\n        /** @type {?} */\n        const savePreviousOrParentTNode = getPreviousOrParentTNode();\n        /** @type {?} */\n        const saveLView = getLView();\n        setTNodeAndViewData(tNode, lData);\n        try {\n            value = lData[index] = factory.factory(null, tData, lData, tNode);\n        }\n        finally {\n            if (factory.injectImpl)\n                setInjectImplementation(previousInjectImplementation);\n            setIncludeViewProviders(previousIncludeViewProviders);\n            factory.resolving = false;\n            setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n        }\n    }\n    return value;\n}\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param {?} token the injection token\n * @return {?} the matching bit to check in the bloom filter or `null` if the token is not known.\n *   When the returned value is negative then it represents special values such as `Injector`.\n */\nexport function bloomHashBitOrFactory(token) {\n    ngDevMode && assertDefined(token, 'token must be defined');\n    if (typeof token === 'string') {\n        return token.charCodeAt(0) || 0;\n    }\n    /** @type {?} */\n    const tokenId = ((/** @type {?} */ (token)))[NG_ELEMENT_ID];\n    // Negative token IDs are used for special objects such as `Injector`\n    return (typeof tokenId === 'number' && tokenId > 0) ? tokenId & BLOOM_MASK : tokenId;\n}\n/**\n * @param {?} bloomHash\n * @param {?} injectorIndex\n * @param {?} injectorView\n * @return {?}\n */\nexport function bloomHasToken(bloomHash, injectorIndex, injectorView) {\n    // Create a mask that targets the specific bit associated with the directive we're looking for.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    /** @type {?} */\n    const mask = 1 << bloomHash;\n    /** @type {?} */\n    const b7 = bloomHash & 0x80;\n    /** @type {?} */\n    const b6 = bloomHash & 0x40;\n    /** @type {?} */\n    const b5 = bloomHash & 0x20;\n    // Our bloom filter size is 256 bits, which is eight 32-bit bloom filter buckets:\n    // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc.\n    // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.\n    /** @type {?} */\n    let value;\n    if (b7) {\n        value = b6 ? (b5 ? injectorView[injectorIndex + 7] : injectorView[injectorIndex + 6]) :\n            (b5 ? injectorView[injectorIndex + 5] : injectorView[injectorIndex + 4]);\n    }\n    else {\n        value = b6 ? (b5 ? injectorView[injectorIndex + 3] : injectorView[injectorIndex + 2]) :\n            (b5 ? injectorView[injectorIndex + 1] : injectorView[injectorIndex]);\n    }\n    // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n    // this injector is a potential match.\n    return !!(value & mask);\n}\n/**\n * Returns true if flags prevent parent injector from being searched for tokens\n * @param {?} flags\n * @param {?} isFirstHostTNode\n * @return {?}\n */\nfunction shouldSearchParent(flags, isFirstHostTNode) {\n    return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);\n}\nexport class NodeInjector {\n    /**\n     * @param {?} _tNode\n     * @param {?} _lView\n     */\n    constructor(_tNode, _lView) {\n        this._tNode = _tNode;\n        this._lView = _lView;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue) {\n        return getOrCreateInjectable(this._tNode, this._lView, token, undefined, notFoundValue);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    NodeInjector.prototype._tNode;\n    /**\n     * @type {?}\n     * @private\n     */\n    NodeInjector.prototype._lView;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getFactoryOf(type) {\n    /** @type {?} */\n    const typeAny = (/** @type {?} */ (type));\n    /** @type {?} */\n    const def = getComponentDef(typeAny) || getDirectiveDef(typeAny) ||\n        getPipeDef(typeAny) || getInjectableDef(typeAny) || getInjectorDef(typeAny);\n    if (!def || def.factory === undefined) {\n        return null;\n    }\n    return def.factory;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getInheritedFactory(type) {\n    /** @type {?} */\n    const proto = (/** @type {?} */ (Object.getPrototypeOf(type.prototype).constructor));\n    /** @type {?} */\n    const factory = getFactoryOf(proto);\n    if (factory !== null) {\n        return factory;\n    }\n    else {\n        // There is no factory defined. Either this was improper usage of inheritance\n        // (no Angular decorator on the superclass) or there is no constructor at all\n        // in the inheritance chain. Since the two cases cannot be distinguished, the\n        // latter has to be assumed.\n        return (t) => new t();\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Called when directives inject each other (creating a circular dependency)\n * @param {?} token\n * @return {?}\n */\nexport function throwCyclicDependencyError(token) {\n    throw new Error(`Cannot instantiate cyclic dependency! ${token}`);\n}\n/**\n * Called when there are multiple component selectors that match a given node\n * @param {?} tNode\n * @return {?}\n */\nexport function throwMultipleComponentError(tNode) {\n    throw new Error(`Multiple components match node with tagname ${tNode.tagName}`);\n}\n/**\n * Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on.\n * @param {?} creationMode\n * @param {?} oldValue\n * @param {?} currValue\n * @return {?}\n */\nexport function throwErrorIfNoChangesMode(creationMode, oldValue, currValue) {\n    /** @type {?} */\n    let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;\n    if (creationMode) {\n        msg +=\n            ` It seems like the view has been created after its parent and its children have been dirty checked.` +\n                ` Has it been created in a change detection hook ?`;\n    }\n    // TODO: include debug context\n    throw new Error(msg);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvcmVuZGVyMy9lcnJvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBV0EsTUFBTSxVQUFVLDBCQUEwQixDQUFDLEtBQVU7SUFDbkQsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsS0FBSyxFQUFFLENBQUMsQ0FBQztBQUNwRSxDQUFDOzs7Ozs7QUFHRCxNQUFNLFVBQVUsMkJBQTJCLENBQUMsS0FBWTtJQUN0RCxNQUFNLElBQUksS0FBSyxDQUFDLCtDQUErQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNsRixDQUFDOzs7Ozs7OztBQUdELE1BQU0sVUFBVSx5QkFBeUIsQ0FDckMsWUFBcUIsRUFBRSxRQUFhLEVBQUUsU0FBYzs7UUFDbEQsR0FBRyxHQUNILDhHQUE4RyxRQUFRLHNCQUFzQixTQUFTLElBQUk7SUFDN0osSUFBSSxZQUFZLEVBQUU7UUFDaEIsR0FBRztZQUNDLHFHQUFxRztnQkFDckcsbURBQW1ELENBQUM7S0FDekQ7SUFDRCw4QkFBOEI7SUFDOUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN2QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQge1ROb2RlfSBmcm9tICcuL2ludGVyZmFjZXMvbm9kZSc7XG5cbi8qKiBDYWxsZWQgd2hlbiBkaXJlY3RpdmVzIGluamVjdCBlYWNoIG90aGVyIChjcmVhdGluZyBhIGNpcmN1bGFyIGRlcGVuZGVuY3kpICovXG5leHBvcnQgZnVuY3Rpb24gdGhyb3dDeWNsaWNEZXBlbmRlbmN5RXJyb3IodG9rZW46IGFueSk6IG5ldmVyIHtcbiAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgaW5zdGFudGlhdGUgY3ljbGljIGRlcGVuZGVuY3khICR7dG9rZW59YCk7XG59XG5cbi8qKiBDYWxsZWQgd2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgY29tcG9uZW50IHNlbGVjdG9ycyB0aGF0IG1hdGNoIGEgZ2l2ZW4gbm9kZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRocm93TXVsdGlwbGVDb21wb25lbnRFcnJvcih0Tm9kZTogVE5vZGUpOiBuZXZlciB7XG4gIHRocm93IG5ldyBFcnJvcihgTXVsdGlwbGUgY29tcG9uZW50cyBtYXRjaCBub2RlIHdpdGggdGFnbmFtZSAke3ROb2RlLnRhZ05hbWV9YCk7XG59XG5cbi8qKiBUaHJvd3MgYW4gRXhwcmVzc2lvbkNoYW5nZWRBZnRlckNoZWNrZWQgZXJyb3IgaWYgY2hlY2tOb0NoYW5nZXMgbW9kZSBpcyBvbi4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aHJvd0Vycm9ySWZOb0NoYW5nZXNNb2RlKFxuICAgIGNyZWF0aW9uTW9kZTogYm9vbGVhbiwgb2xkVmFsdWU6IGFueSwgY3VyclZhbHVlOiBhbnkpOiBuZXZlcnx2b2lkIHtcbiAgbGV0IG1zZyA9XG4gICAgICBgRXhwcmVzc2lvbkNoYW5nZWRBZnRlckl0SGFzQmVlbkNoZWNrZWRFcnJvcjogRXhwcmVzc2lvbiBoYXMgY2hhbmdlZCBhZnRlciBpdCB3YXMgY2hlY2tlZC4gUHJldmlvdXMgdmFsdWU6ICcke29sZFZhbHVlfScuIEN1cnJlbnQgdmFsdWU6ICcke2N1cnJWYWx1ZX0nLmA7XG4gIGlmIChjcmVhdGlvbk1vZGUpIHtcbiAgICBtc2cgKz1cbiAgICAgICAgYCBJdCBzZWVtcyBsaWtlIHRoZSB2aWV3IGhhcyBiZWVuIGNyZWF0ZWQgYWZ0ZXIgaXRzIHBhcmVudCBhbmQgaXRzIGNoaWxkcmVuIGhhdmUgYmVlbiBkaXJ0eSBjaGVja2VkLmAgK1xuICAgICAgICBgIEhhcyBpdCBiZWVuIGNyZWF0ZWQgaW4gYSBjaGFuZ2UgZGV0ZWN0aW9uIGhvb2sgP2A7XG4gIH1cbiAgLy8gVE9ETzogaW5jbHVkZSBkZWJ1ZyBjb250ZXh0XG4gIHRocm93IG5ldyBFcnJvcihtc2cpO1xufVxuIl19","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The goal here is to make sure that the browser DOM API is the Renderer.\n * We do this by defining a subset of DOM API to be the renderer and than\n * use that time for rendering.\n *\n * At runtime we can than use the DOM api directly, in server or web-worker\n * it will be easy to implement such API.\n */\n/** @enum {number} */\nconst RendererStyleFlags3 = {\n    Important: 1,\n    DashCase: 2,\n};\nexport { RendererStyleFlags3 };\nRendererStyleFlags3[RendererStyleFlags3.Important] = 'Important';\nRendererStyleFlags3[RendererStyleFlags3.DashCase] = 'DashCase';\n/**\n * Object Oriented style of API needed to create elements and text nodes.\n *\n * This is the native browser API style, e.g. operations are methods on individual objects\n * like HTMLElement. With this style, no additional code is needed as a facade\n * (reducing payload size).\n *\n * @record\n */\nexport function ObjectOrientedRenderer3() { }\nif (false) {\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    ObjectOrientedRenderer3.prototype.createComment = function (data) { };\n    /**\n     * @param {?} tagName\n     * @return {?}\n     */\n    ObjectOrientedRenderer3.prototype.createElement = function (tagName) { };\n    /**\n     * @param {?} namespace\n     * @param {?} tagName\n     * @return {?}\n     */\n    ObjectOrientedRenderer3.prototype.createElementNS = function (namespace, tagName) { };\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    ObjectOrientedRenderer3.prototype.createTextNode = function (data) { };\n    /**\n     * @param {?} selectors\n     * @return {?}\n     */\n    ObjectOrientedRenderer3.prototype.querySelector = function (selectors) { };\n}\n/**\n * Returns whether the `renderer` is a `ProceduralRenderer3`\n * @param {?} renderer\n * @return {?}\n */\nexport function isProceduralRenderer(renderer) {\n    return !!(((/** @type {?} */ (renderer))).listen);\n}\n/**\n * Procedural style of API needed to create elements and text nodes.\n *\n * In non-native browser environments (e.g. platforms such as web-workers), this is the\n * facade that enables element manipulation. This also facilitates backwards compatibility\n * with Renderer2.\n * @record\n */\nexport function ProceduralRenderer3() { }\nif (false) {\n    /**\n     * This property is allowed to be null / undefined,\n     * in which case the view engine won't call it.\n     * This is used as a performance optimization for production mode.\n     * @type {?|undefined}\n     */\n    ProceduralRenderer3.prototype.destroyNode;\n    /**\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.destroy = function () { };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.createComment = function (value) { };\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.createElement = function (name, namespace) { };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.createText = function (value) { };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.appendChild = function (parent, newChild) { };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.insertBefore = function (parent, newChild, refChild) { };\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @param {?=} isHostElement\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.removeChild = function (parent, oldChild, isHostElement) { };\n    /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.selectRootElement = function (selectorOrNode) { };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.parentNode = function (node) { };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.nextSibling = function (node) { };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.setAttribute = function (el, name, value, namespace) { };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.removeAttribute = function (el, name, namespace) { };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.addClass = function (el, name) { };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.removeClass = function (el, name) { };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?=} flags\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.setStyle = function (el, style, value, flags) { };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?=} flags\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.removeStyle = function (el, style, flags) { };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.setProperty = function (el, name, value) { };\n    /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.setValue = function (node, value) { };\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    ProceduralRenderer3.prototype.listen = function (target, eventName, callback) { };\n}\n/**\n * @record\n */\nexport function RendererFactory3() { }\nif (false) {\n    /**\n     * @param {?} hostElement\n     * @param {?} rendererType\n     * @return {?}\n     */\n    RendererFactory3.prototype.createRenderer = function (hostElement, rendererType) { };\n    /**\n     * @return {?}\n     */\n    RendererFactory3.prototype.begin = function () { };\n    /**\n     * @return {?}\n     */\n    RendererFactory3.prototype.end = function () { };\n}\n/** @type {?} */\nexport const domRendererFactory3 = {\n    createRenderer: (hostElement, rendererType) => { return document; }\n};\n/**\n * Subset of API needed for appending elements and text nodes.\n * @record\n */\nexport function RNode() { }\nif (false) {\n    /**\n     * Returns the parent Element, Document, or DocumentFragment\n     * @type {?}\n     */\n    RNode.prototype.parentNode;\n    /**\n     * Returns the parent Element if there is one\n     * @type {?}\n     */\n    RNode.prototype.parentElement;\n    /**\n     * Gets the Node immediately following this one in the parent's childNodes\n     * @type {?}\n     */\n    RNode.prototype.nextSibling;\n    /**\n     * Removes a child from the current node and returns the removed node\n     * @param {?} oldChild the child node to remove\n     * @return {?}\n     */\n    RNode.prototype.removeChild = function (oldChild) { };\n    /**\n     * Insert a child node.\n     *\n     * Used exclusively for adding View root nodes into ViewAnchor location.\n     * @param {?} newChild\n     * @param {?} refChild\n     * @param {?} isViewRoot\n     * @return {?}\n     */\n    RNode.prototype.insertBefore = function (newChild, refChild, isViewRoot) { };\n    /**\n     * Append a child node.\n     *\n     * Used exclusively for building up DOM which are static (ie not View roots)\n     * @param {?} newChild\n     * @return {?}\n     */\n    RNode.prototype.appendChild = function (newChild) { };\n}\n/**\n * Subset of API needed for writing attributes, properties, and setting up\n * listeners on Element.\n * @record\n */\nexport function RElement() { }\nif (false) {\n    /** @type {?} */\n    RElement.prototype.style;\n    /** @type {?} */\n    RElement.prototype.classList;\n    /** @type {?} */\n    RElement.prototype.className;\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    RElement.prototype.setAttribute = function (name, value) { };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    RElement.prototype.removeAttribute = function (name) { };\n    /**\n     * @param {?} namespaceURI\n     * @param {?} qualifiedName\n     * @param {?} value\n     * @return {?}\n     */\n    RElement.prototype.setAttributeNS = function (namespaceURI, qualifiedName, value) { };\n    /**\n     * @param {?} type\n     * @param {?} listener\n     * @param {?=} useCapture\n     * @return {?}\n     */\n    RElement.prototype.addEventListener = function (type, listener, useCapture) { };\n    /**\n     * @param {?} type\n     * @param {?=} listener\n     * @param {?=} options\n     * @return {?}\n     */\n    RElement.prototype.removeEventListener = function (type, listener, options) { };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    RElement.prototype.setProperty = function (name, value) { };\n}\n/**\n * @record\n */\nexport function RCssStyleDeclaration() { }\nif (false) {\n    /**\n     * @param {?} propertyName\n     * @return {?}\n     */\n    RCssStyleDeclaration.prototype.removeProperty = function (propertyName) { };\n    /**\n     * @param {?} propertyName\n     * @param {?} value\n     * @param {?=} priority\n     * @return {?}\n     */\n    RCssStyleDeclaration.prototype.setProperty = function (propertyName, value, priority) { };\n}\n/**\n * @record\n */\nexport function RDomTokenList() { }\nif (false) {\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    RDomTokenList.prototype.add = function (token) { };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    RDomTokenList.prototype.remove = function (token) { };\n}\n/**\n * @record\n */\nexport function RText() { }\nif (false) {\n    /** @type {?} */\n    RText.prototype.textContent;\n}\n/**\n * @record\n */\nexport function RComment() { }\nif (false) {\n    /** @type {?} */\n    RComment.prototype.textContent;\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n/** @type {?} */\nexport const unusedValueExportToPlacateAjd = 1;\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst SelectorFlags = {\n    /** Indicates this is the beginning of a new negative selector */\n    NOT: 1,\n    /** Mode for matching attributes */\n    ATTRIBUTE: 2,\n    /** Mode for matching tag names */\n    ELEMENT: 4,\n    /** Mode for matching class names */\n    CLASS: 8,\n};\nexport { SelectorFlags };\n/** @type {?} */\nexport const NG_PROJECT_AS_ATTR_NAME = 'ngProjectAs';\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n/** @type {?} */\nexport const unusedValueExportToPlacateAjd = 1;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3JlbmRlcjMvaW50ZXJmYWNlcy9wcm9qZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7SUFzREUsaUVBQWlFO0lBQ2pFLE1BQVk7SUFFWixtQ0FBbUM7SUFDbkMsWUFBa0I7SUFFbEIsa0NBQWtDO0lBQ2xDLFVBQWdCO0lBRWhCLG9DQUFvQztJQUNwQyxRQUFjOzs7O0FBR2hCLE1BQU0sT0FBTyx1QkFBdUIsR0FBRyxhQUFhOzs7O0FBSXBELE1BQU0sT0FBTyw2QkFBNkIsR0FBRyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cblxuLyoqXG4gKiBFeHByZXNzZXMgYSBzaW5nbGUgQ1NTIFNlbGVjdG9yLlxuICpcbiAqIEJlZ2lubmluZyBvZiBhcnJheVxuICogLSBGaXJzdCBpbmRleDogZWxlbWVudCBuYW1lXG4gKiAtIFN1YnNlcXVlbnQgb2RkIGluZGljZXM6IGF0dHIga2V5c1xuICogLSBTdWJzZXF1ZW50IGV2ZW4gaW5kaWNlczogYXR0ciB2YWx1ZXNcbiAqXG4gKiBBZnRlciBTZWxlY3RvckZsYWdzLkNMQVNTIGZsYWdcbiAqIC0gQ2xhc3MgbmFtZSB2YWx1ZXNcbiAqXG4gKiBTZWxlY3RvckZsYWdzLk5PVCBmbGFnXG4gKiAtIENoYW5nZXMgdGhlIG1vZGUgdG8gTk9UXG4gKiAtIENhbiBiZSBjb21iaW5lZCB3aXRoIG90aGVyIGZsYWdzIHRvIHNldCB0aGUgZWxlbWVudCAvIGF0dHIgLyBjbGFzcyBtb2RlXG4gKlxuICogZS5nLiBTZWxlY3RvckZsYWdzLk5PVCB8IFNlbGVjdG9yRmxhZ3MuRUxFTUVOVFxuICpcbiAqIEV4YW1wbGU6XG4gKiBPcmlnaW5hbDogYGRpdi5mb28uYmFyW2F0dHIxPXZhbDFdW2F0dHIyXWBcbiAqIFBhcnNlZDogWydkaXYnLCAnYXR0cjEnLCAndmFsMScsICdhdHRyMicsICcnLCBTZWxlY3RvckZsYWdzLkNMQVNTLCAnZm9vJywgJ2JhciddXG4gKlxuICogT3JpZ2luYWw6ICdkaXZbYXR0cjFdOm5vdCguZm9vW2F0dHIyXSlcbiAqIFBhcnNlZDogW1xuICogICdkaXYnLCAnYXR0cjEnLCAnJyxcbiAqICBTZWxlY3RvckZsYWdzLk5PVCB8IFNlbGVjdG9yRmxhZ3MuQVRUUklCVVRFICdhdHRyMicsICcnLCBTZWxlY3RvckZsYWdzLkNMQVNTLCAnZm9vJ1xuICogXVxuICpcbiAqIFNlZSBtb3JlIGV4YW1wbGVzIGluIG5vZGVfc2VsZWN0b3JfbWF0Y2hlcl9zcGVjLnRzXG4gKi9cbmV4cG9ydCB0eXBlIENzc1NlbGVjdG9yID0gKHN0cmluZyB8IFNlbGVjdG9yRmxhZ3MpW107XG5cbi8qKlxuICogQSBsaXN0IG9mIENzc1NlbGVjdG9ycy5cbiAqXG4gKiBBIGRpcmVjdGl2ZSBvciBjb21wb25lbnQgY2FuIGhhdmUgbXVsdGlwbGUgc2VsZWN0b3JzLiBUaGlzIHR5cGUgaXMgdXNlZCBmb3JcbiAqIGRpcmVjdGl2ZSBkZWZzIHNvIGFueSBvZiB0aGUgc2VsZWN0b3JzIGluIHRoZSBsaXN0IHdpbGwgbWF0Y2ggdGhhdCBkaXJlY3RpdmUuXG4gKlxuICogT3JpZ2luYWw6ICdmb3JtLCBbbmdGb3JtXSdcbiAqIFBhcnNlZDogW1snZm9ybSddLCBbJycsICduZ0Zvcm0nLCAnJ11dXG4gKi9cbmV4cG9ydCB0eXBlIENzc1NlbGVjdG9yTGlzdCA9IENzc1NlbGVjdG9yW107XG5cbi8qKiBGbGFncyB1c2VkIHRvIGJ1aWxkIHVwIENzc1NlbGVjdG9ycyAqL1xuZXhwb3J0IGNvbnN0IGVudW0gU2VsZWN0b3JGbGFncyB7XG4gIC8qKiBJbmRpY2F0ZXMgdGhpcyBpcyB0aGUgYmVnaW5uaW5nIG9mIGEgbmV3IG5lZ2F0aXZlIHNlbGVjdG9yICovXG4gIE5PVCA9IDBiMDAwMSxcblxuICAvKiogTW9kZSBmb3IgbWF0Y2hpbmcgYXR0cmlidXRlcyAqL1xuICBBVFRSSUJVVEUgPSAwYjAwMTAsXG5cbiAgLyoqIE1vZGUgZm9yIG1hdGNoaW5nIHRhZyBuYW1lcyAqL1xuICBFTEVNRU5UID0gMGIwMTAwLFxuXG4gIC8qKiBNb2RlIGZvciBtYXRjaGluZyBjbGFzcyBuYW1lcyAqL1xuICBDTEFTUyA9IDBiMTAwMCxcbn1cblxuZXhwb3J0IGNvbnN0IE5HX1BST0pFQ1RfQVNfQVRUUl9OQU1FID0gJ25nUHJvamVjdEFzJztcblxuLy8gTm90ZTogVGhpcyBoYWNrIGlzIG5lY2Vzc2FyeSBzbyB3ZSBkb24ndCBlcnJvbmVvdXNseSBnZXQgYSBjaXJjdWxhciBkZXBlbmRlbmN5XG4vLyBmYWlsdXJlIGJhc2VkIG9uIHR5cGVzLlxuZXhwb3J0IGNvbnN0IHVudXNlZFZhbHVlRXhwb3J0VG9QbGFjYXRlQWpkID0gMTtcbiJdfQ==","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewEncapsulation } from '../metadata/view';\nimport { assertDefined } from '../util/assert';\nimport { assertLContainer, assertLView } from './assert';\nimport { attachPatchData } from './context_discovery';\nimport { NATIVE, VIEWS, unusedValueExportToPlacateAjd as unused1 } from './interfaces/container';\nimport { NodeInjectorFactory } from './interfaces/injector';\nimport { unusedValueExportToPlacateAjd as unused2 } from './interfaces/node';\nimport { unusedValueExportToPlacateAjd as unused3 } from './interfaces/projection';\nimport { isProceduralRenderer, unusedValueExportToPlacateAjd as unused4 } from './interfaces/renderer';\nimport { CHILD_HEAD, CLEANUP, FLAGS, NEXT, PARENT, QUERIES, RENDERER, TVIEW, T_HOST, unusedValueExportToPlacateAjd as unused5 } from './interfaces/view';\nimport { assertNodeType } from './node_assert';\nimport { renderStringify } from './util/misc_utils';\nimport { findComponentView, getLViewParent } from './util/view_traversal_utils';\nimport { getNativeByTNode, isComponent, isLContainer, isLView, isRootView, unwrapRNode, viewAttachedToContainer } from './util/view_utils';\n/** @type {?} */\nconst unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4 + unused5;\n/**\n * @param {?} tNode\n * @param {?} embeddedView\n * @return {?}\n */\nexport function getLContainer(tNode, embeddedView) {\n    ngDevMode && assertLView(embeddedView);\n    /** @type {?} */\n    const container = (/** @type {?} */ (embeddedView[PARENT]));\n    if (tNode.index === -1) {\n        // This is a dynamically created view inside a dynamic container.\n        // The parent isn't an LContainer if the embedded view hasn't been attached yet.\n        return isLContainer(container) ? container : null;\n    }\n    else {\n        ngDevMode && assertLContainer(container);\n        // This is a inline view node (e.g. embeddedViewStart)\n        return container;\n    }\n}\n/**\n * Retrieves render parent for a given view.\n * Might be null if a view is not yet attached to any container.\n * @param {?} tViewNode\n * @param {?} view\n * @return {?}\n */\nfunction getContainerRenderParent(tViewNode, view) {\n    /** @type {?} */\n    const container = getLContainer(tViewNode, view);\n    return container ? nativeParentNode(view[RENDERER], container[NATIVE]) : null;\n}\n/** @enum {number} */\nconst WalkTNodeTreeAction = {\n    /** node insert in the native environment */\n    Insert: 0,\n    /** node detach from the native environment */\n    Detach: 1,\n    /** node destruction using the renderer's API */\n    Destroy: 2,\n};\n/**\n * Stack used to keep track of projection nodes in walkTNodeTree.\n *\n * This is deliberately created outside of walkTNodeTree to avoid allocating\n * a new array each time the function is called. Instead the array will be\n * re-used by each invocation. This works because the function is not reentrant.\n * @type {?}\n */\nconst projectionNodeStack = [];\n/**\n * Walks a tree of TNodes, applying a transformation on the element nodes, either only on the first\n * one found, or on all of them.\n *\n * @param {?} viewToWalk the view to walk\n * @param {?} action identifies the action to be performed on the elements\n * @param {?} renderer the current renderer.\n * @param {?} renderParent Optional the render parent node to be set in all LContainers found,\n * required for action modes Insert and Destroy.\n * @param {?=} beforeNode Optional the node before which elements should be added, required for action\n * Insert.\n * @return {?}\n */\nfunction walkTNodeTree(viewToWalk, action, renderer, renderParent, beforeNode) {\n    /** @type {?} */\n    const rootTNode = (/** @type {?} */ (viewToWalk[TVIEW].node));\n    /** @type {?} */\n    let projectionNodeIndex = -1;\n    /** @type {?} */\n    let currentView = viewToWalk;\n    /** @type {?} */\n    let tNode = (/** @type {?} */ (rootTNode.child));\n    while (tNode) {\n        /** @type {?} */\n        let nextTNode = null;\n        if (tNode.type === 3 /* Element */) {\n            executeNodeAction(action, renderer, renderParent, getNativeByTNode(tNode, currentView), tNode, beforeNode);\n            /** @type {?} */\n            const nodeOrContainer = currentView[tNode.index];\n            if (isLContainer(nodeOrContainer)) {\n                // This element has an LContainer, and its comment needs to be handled\n                executeNodeAction(action, renderer, renderParent, nodeOrContainer[NATIVE], tNode, beforeNode);\n            }\n        }\n        else if (tNode.type === 0 /* Container */) {\n            /** @type {?} */\n            const lContainer = (/** @type {?} */ ((/** @type {?} */ (currentView))[tNode.index]));\n            executeNodeAction(action, renderer, renderParent, lContainer[NATIVE], tNode, beforeNode);\n            if (lContainer[VIEWS].length) {\n                currentView = lContainer[VIEWS][0];\n                nextTNode = currentView[TVIEW].node;\n                // When the walker enters a container, then the beforeNode has to become the local native\n                // comment node.\n                beforeNode = lContainer[NATIVE];\n            }\n        }\n        else if (tNode.type === 1 /* Projection */) {\n            /** @type {?} */\n            const componentView = findComponentView((/** @type {?} */ (currentView)));\n            /** @type {?} */\n            const componentHost = (/** @type {?} */ (componentView[T_HOST]));\n            /** @type {?} */\n            const head = ((/** @type {?} */ (componentHost.projection)))[(/** @type {?} */ (tNode.projection))];\n            if (Array.isArray(head)) {\n                for (let nativeNode of head) {\n                    executeNodeAction(action, renderer, renderParent, nativeNode, tNode, beforeNode);\n                }\n            }\n            else {\n                // Must store both the TNode and the view because this projection node could be nested\n                // deeply inside embedded views, and we need to get back down to this particular nested\n                // view.\n                projectionNodeStack[++projectionNodeIndex] = tNode;\n                projectionNodeStack[++projectionNodeIndex] = (/** @type {?} */ (currentView));\n                if (head) {\n                    currentView = (/** @type {?} */ ((/** @type {?} */ (componentView[PARENT]))));\n                    nextTNode = (/** @type {?} */ (currentView[TVIEW].data[head.index]));\n                }\n            }\n        }\n        else {\n            // Otherwise, this is a View or an ElementContainer\n            nextTNode = tNode.child;\n        }\n        if (nextTNode === null) {\n            // this last node was projected, we need to get back down to its projection node\n            if (tNode.next === null && (tNode.flags & 2 /* isProjected */)) {\n                currentView = (/** @type {?} */ (projectionNodeStack[projectionNodeIndex--]));\n                tNode = (/** @type {?} */ (projectionNodeStack[projectionNodeIndex--]));\n            }\n            nextTNode = tNode.next;\n            /**\n             * Find the next node in the TNode tree, taking into account the place where a node is\n             * projected (in the shadow DOM) rather than where it comes from (in the light DOM).\n             *\n             * If there is no sibling node, then it goes to the next sibling of the parent node...\n             * until it reaches rootNode (at which point null is returned).\n             */\n            while (!nextTNode) {\n                // If parent is null, we're crossing the view boundary, so we should get the host TNode.\n                tNode = tNode.parent || currentView[T_HOST];\n                if (tNode === null || tNode === rootTNode)\n                    return null;\n                // When exiting a container, the beforeNode must be restored to the previous value\n                if (tNode.type === 0 /* Container */) {\n                    currentView = (/** @type {?} */ (getLViewParent(currentView)));\n                    beforeNode = currentView[tNode.index][NATIVE];\n                }\n                if (tNode.type === 2 /* View */) {\n                    /**\n                     * If current lView doesn't have next pointer, we try to find it by going up parents\n                     * chain until:\n                     * - we find an lView with a next pointer\n                     * - or find a tNode with a parent that has a next pointer\n                     * - or reach root TNode (in which case we exit, since we traversed all nodes)\n                     */\n                    while (!currentView[NEXT] && currentView[PARENT] &&\n                        !(tNode.parent && tNode.parent.next)) {\n                        if (tNode === rootTNode)\n                            return null;\n                        currentView = (/** @type {?} */ (currentView[PARENT]));\n                        tNode = (/** @type {?} */ (currentView[T_HOST]));\n                    }\n                    if (currentView[NEXT]) {\n                        currentView = (/** @type {?} */ (currentView[NEXT]));\n                        nextTNode = currentView[T_HOST];\n                    }\n                    else {\n                        nextTNode = tNode.next;\n                    }\n                }\n                else {\n                    nextTNode = tNode.next;\n                }\n            }\n        }\n        tNode = nextTNode;\n    }\n}\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n * @param {?} action\n * @param {?} renderer\n * @param {?} parent\n * @param {?} node\n * @param {?} tNode\n * @param {?=} beforeNode\n * @return {?}\n */\nfunction executeNodeAction(action, renderer, parent, node, tNode, beforeNode) {\n    if (action === 0 /* Insert */) {\n        nativeInsertBefore(renderer, (/** @type {?} */ (parent)), node, beforeNode || null);\n    }\n    else if (action === 1 /* Detach */) {\n        nativeRemoveNode(renderer, node, isComponent(tNode));\n    }\n    else if (action === 2 /* Destroy */) {\n        ngDevMode && ngDevMode.rendererDestroyNode++;\n        (/** @type {?} */ (((/** @type {?} */ (renderer))).destroyNode))(node);\n    }\n}\n/**\n * @param {?} value\n * @param {?} renderer\n * @return {?}\n */\nexport function createTextNode(value, renderer) {\n    return isProceduralRenderer(renderer) ? renderer.createText(renderStringify(value)) :\n        renderer.createTextNode(renderStringify(value));\n}\n/**\n * @param {?} viewToWalk\n * @param {?} insertMode\n * @param {?=} beforeNode\n * @return {?}\n */\nexport function addRemoveViewFromContainer(viewToWalk, insertMode, beforeNode) {\n    /** @type {?} */\n    const renderParent = getContainerRenderParent((/** @type {?} */ (viewToWalk[TVIEW].node)), viewToWalk);\n    ngDevMode && assertNodeType((/** @type {?} */ (viewToWalk[TVIEW].node)), 2 /* View */);\n    if (renderParent) {\n        /** @type {?} */\n        const renderer = viewToWalk[RENDERER];\n        walkTNodeTree(viewToWalk, insertMode ? 0 /* Insert */ : 1 /* Detach */, renderer, renderParent, beforeNode);\n    }\n}\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n * @param {?} rootView The view to destroy\n * @return {?}\n */\nexport function destroyViewTree(rootView) {\n    // If the view has no children, we can clean it up and return early.\n    /** @type {?} */\n    let lViewOrLContainer = rootView[CHILD_HEAD];\n    if (!lViewOrLContainer) {\n        return cleanUpView(rootView);\n    }\n    while (lViewOrLContainer) {\n        /** @type {?} */\n        let next = null;\n        if (isLView(lViewOrLContainer)) {\n            // If LView, traverse down to child.\n            next = lViewOrLContainer[CHILD_HEAD];\n        }\n        else {\n            ngDevMode && assertLContainer(lViewOrLContainer);\n            // If container, traverse down to its first LView.\n            /** @type {?} */\n            const views = (/** @type {?} */ (lViewOrLContainer[VIEWS]));\n            if (views.length > 0)\n                next = views[0];\n        }\n        if (!next) {\n            // Only clean up view when moving to the side or up, as destroy hooks\n            // should be called in order from the bottom up.\n            while (lViewOrLContainer && !(/** @type {?} */ (lViewOrLContainer))[NEXT] && lViewOrLContainer !== rootView) {\n                cleanUpView(lViewOrLContainer);\n                lViewOrLContainer = getParentState(lViewOrLContainer, rootView);\n            }\n            cleanUpView(lViewOrLContainer || rootView);\n            next = lViewOrLContainer && (/** @type {?} */ (lViewOrLContainer))[NEXT];\n        }\n        lViewOrLContainer = next;\n    }\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param {?} lView The view to insert\n * @param {?} lContainer The container into which the view should be inserted\n * @param {?} index Which index in the container to insert the child view into\n * @return {?}\n */\nexport function insertView(lView, lContainer, index) {\n    ngDevMode && assertLView(lView);\n    ngDevMode && assertLContainer(lContainer);\n    /** @type {?} */\n    const views = lContainer[VIEWS];\n    ngDevMode && assertDefined(views, 'Container must have views');\n    if (index > 0) {\n        // This is a new view, we need to add it to the children.\n        views[index - 1][NEXT] = lView;\n    }\n    if (index < views.length) {\n        lView[NEXT] = views[index];\n        views.splice(index, 0, lView);\n    }\n    else {\n        views.push(lView);\n        lView[NEXT] = null;\n    }\n    lView[PARENT] = lContainer;\n    // Notify query that a new view has been added\n    if (lView[QUERIES]) {\n        (/** @type {?} */ (lView[QUERIES])).insertView(index);\n    }\n    // Sets the attached flag\n    lView[FLAGS] |= 128 /* Attached */;\n}\n/**\n * Detaches a view from a container.\n *\n * This method splices the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param {?} lContainer The container from which to detach a view\n * @param {?} removeIndex The index of the view to detach\n * @return {?} Detached LView instance.\n */\nexport function detachView(lContainer, removeIndex) {\n    /** @type {?} */\n    const views = lContainer[VIEWS];\n    /** @type {?} */\n    const viewToDetach = views[removeIndex];\n    if (removeIndex > 0) {\n        views[removeIndex - 1][NEXT] = (/** @type {?} */ (viewToDetach[NEXT]));\n    }\n    views.splice(removeIndex, 1);\n    addRemoveViewFromContainer(viewToDetach, false);\n    if ((viewToDetach[FLAGS] & 128 /* Attached */) &&\n        !(viewToDetach[FLAGS] & 256 /* Destroyed */) && viewToDetach[QUERIES]) {\n        (/** @type {?} */ (viewToDetach[QUERIES])).removeView();\n    }\n    viewToDetach[PARENT] = null;\n    viewToDetach[NEXT] = null;\n    // Unsets the attached flag\n    viewToDetach[FLAGS] &= ~128 /* Attached */;\n    return viewToDetach;\n}\n/**\n * Removes a view from a container, i.e. detaches it and then destroys the underlying LView.\n *\n * @param {?} lContainer The container from which to remove a view\n * @param {?} removeIndex The index of the view to remove\n * @return {?}\n */\nexport function removeView(lContainer, removeIndex) {\n    /** @type {?} */\n    const view = lContainer[VIEWS][removeIndex];\n    detachView(lContainer, removeIndex);\n    destroyLView(view);\n}\n/**\n * A standalone function which destroys an LView,\n * conducting cleanup (e.g. removing listeners, calling onDestroys).\n *\n * @param {?} view The view to be destroyed.\n * @return {?}\n */\nexport function destroyLView(view) {\n    if (!(view[FLAGS] & 256 /* Destroyed */)) {\n        /** @type {?} */\n        const renderer = view[RENDERER];\n        if (isProceduralRenderer(renderer) && renderer.destroyNode) {\n            walkTNodeTree(view, 2 /* Destroy */, renderer, null);\n        }\n        destroyViewTree(view);\n    }\n}\n/**\n * Determines which LViewOrLContainer to jump to when traversing back up the\n * tree in destroyViewTree.\n *\n * Normally, the view's parent LView should be checked, but in the case of\n * embedded views, the container (which is the view node's parent, but not the\n * LView's parent) needs to be checked for a possible next property.\n *\n * @param {?} lViewOrLContainer The LViewOrLContainer for which we need a parent state\n * @param {?} rootView The rootView, so we don't propagate too far up the view tree\n * @return {?} The correct parent LViewOrLContainer\n */\nexport function getParentState(lViewOrLContainer, rootView) {\n    /** @type {?} */\n    let tNode;\n    if (isLView(lViewOrLContainer) && (tNode = lViewOrLContainer[T_HOST]) &&\n        tNode.type === 2 /* View */) {\n        // if it's an embedded view, the state needs to go up to the container, in case the\n        // container has a next\n        return getLContainer((/** @type {?} */ (tNode)), lViewOrLContainer);\n    }\n    else {\n        // otherwise, use parent view for containers or component views\n        return lViewOrLContainer[PARENT] === rootView ? null : lViewOrLContainer[PARENT];\n    }\n}\n/**\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n * can be propagated to \\@Output listeners.\n *\n * @param {?} view The LView to clean up\n * @return {?}\n */\nfunction cleanUpView(view) {\n    if (isLView(view) && !(view[FLAGS] & 256 /* Destroyed */)) {\n        // Usually the Attached flag is removed when the view is detached from its parent, however\n        // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\n        view[FLAGS] &= ~128 /* Attached */;\n        // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\n        // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\n        // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\n        // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\n        // really more of an \"afterDestroy\" hook if you think about it.\n        view[FLAGS] |= 256 /* Destroyed */;\n        executeOnDestroys(view);\n        removeListeners(view);\n        /** @type {?} */\n        const hostTNode = view[T_HOST];\n        // For component views only, the local renderer is destroyed as clean up time.\n        if (hostTNode && hostTNode.type === 3 /* Element */ && isProceduralRenderer(view[RENDERER])) {\n            ngDevMode && ngDevMode.rendererDestroy++;\n            ((/** @type {?} */ (view[RENDERER]))).destroy();\n        }\n        // For embedded views still attached to a container: remove query result from this view.\n        if (viewAttachedToContainer(view) && view[QUERIES]) {\n            (/** @type {?} */ (view[QUERIES])).removeView();\n        }\n    }\n}\n/**\n * Removes listeners and unsubscribes from output subscriptions\n * @param {?} lView\n * @return {?}\n */\nfunction removeListeners(lView) {\n    /** @type {?} */\n    const tCleanup = (/** @type {?} */ (lView[TVIEW].cleanup));\n    if (tCleanup != null) {\n        /** @type {?} */\n        const lCleanup = (/** @type {?} */ (lView[CLEANUP]));\n        for (let i = 0; i < tCleanup.length - 1; i += 2) {\n            if (typeof tCleanup[i] === 'string') {\n                // This is a listener with the native renderer\n                /** @type {?} */\n                const idxOrTargetGetter = tCleanup[i + 1];\n                /** @type {?} */\n                const target = typeof idxOrTargetGetter === 'function' ?\n                    idxOrTargetGetter(lView) :\n                    unwrapRNode(lView[idxOrTargetGetter]);\n                /** @type {?} */\n                const listener = lCleanup[tCleanup[i + 2]];\n                /** @type {?} */\n                const useCaptureOrSubIdx = tCleanup[i + 3];\n                if (typeof useCaptureOrSubIdx === 'boolean') {\n                    // DOM listener\n                    target.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);\n                }\n                else {\n                    if (useCaptureOrSubIdx >= 0) {\n                        // unregister\n                        lCleanup[useCaptureOrSubIdx]();\n                    }\n                    else {\n                        // Subscription\n                        lCleanup[-useCaptureOrSubIdx].unsubscribe();\n                    }\n                }\n                i += 2;\n            }\n            else if (typeof tCleanup[i] === 'number') {\n                // This is a listener with renderer2 (cleanup fn can be found by index)\n                /** @type {?} */\n                const cleanupFn = lCleanup[tCleanup[i]];\n                cleanupFn();\n            }\n            else {\n                // This is a cleanup function that is grouped with the index of its context\n                /** @type {?} */\n                const context = lCleanup[tCleanup[i + 1]];\n                tCleanup[i].call(context);\n            }\n        }\n        lView[CLEANUP] = null;\n    }\n}\n/**\n * Calls onDestroy hooks for this view\n * @param {?} view\n * @return {?}\n */\nfunction executeOnDestroys(view) {\n    /** @type {?} */\n    const tView = view[TVIEW];\n    /** @type {?} */\n    let destroyHooks;\n    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n        for (let i = 0; i < destroyHooks.length; i += 2) {\n            /** @type {?} */\n            const context = view[(/** @type {?} */ (destroyHooks[i]))];\n            // Only call the destroy hook if the context has been requested.\n            if (!(context instanceof NodeInjectorFactory)) {\n                ((/** @type {?} */ (destroyHooks[i + 1]))).call(context);\n            }\n        }\n    }\n}\n/**\n * Returns a native element if a node can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is made for projection but has not been inserted\n *   into destination.\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction getRenderParent(tNode, currentView) {\n    // Nodes of the top-most view can be inserted eagerly.\n    if (isRootView(currentView)) {\n        return nativeParentNode(currentView[RENDERER], getNativeByTNode(tNode, currentView));\n    }\n    // Skip over element and ICU containers as those are represented by a comment node and\n    // can't be used as a render parent.\n    /** @type {?} */\n    const parent = getHighestElementOrICUContainer(tNode).parent;\n    // If the parent is null, then we are inserting across views: either into an embedded view or a\n    // component view.\n    if (parent == null) {\n        /** @type {?} */\n        const hostTNode = (/** @type {?} */ (currentView[T_HOST]));\n        if (hostTNode.type === 2 /* View */) {\n            // We are inserting a root element of an embedded view We might delay insertion of children\n            // for a given view if it is disconnected. This might happen for 2 main reasons:\n            // - view is not inserted into any container(view was created but not inserted yet)\n            // - view is inserted into a container but the container itself is not inserted into the DOM\n            // (container might be part of projection or child of a view that is not inserted yet).\n            // In other words we can insert children of a given view if this view was inserted into a\n            // container and the container itself has its render parent determined.\n            return getContainerRenderParent((/** @type {?} */ (hostTNode)), currentView);\n        }\n        else {\n            // We are inserting a root element of the component view into the component host element and\n            // it should always be eager.\n            return getHostNative(currentView);\n        }\n    }\n    else {\n        ngDevMode && assertNodeType(parent, 3 /* Element */);\n        if (parent.flags & 1 /* isComponent */) {\n            /** @type {?} */\n            const tData = currentView[TVIEW].data;\n            /** @type {?} */\n            const tNode = (/** @type {?} */ (tData[parent.index]));\n            /** @type {?} */\n            const encapsulation = ((/** @type {?} */ (tData[tNode.directiveStart]))).encapsulation;\n            // We've got a parent which is an element in the current view. We just need to verify if the\n            // parent element is not a component. Component's content nodes are not inserted immediately\n            // because they will be projected, and so doing insert at this point would be wasteful.\n            // Since the projection would then move it to its final destination. Note that we can't\n            // make this assumption when using the Shadow DOM, because the native projection placeholders\n            // (<content> or <slot>) have to be in place as elements are being inserted.\n            if (encapsulation !== ViewEncapsulation.ShadowDom &&\n                encapsulation !== ViewEncapsulation.Native) {\n                return null;\n            }\n        }\n        return (/** @type {?} */ (getNativeByTNode(parent, currentView)));\n    }\n}\n/**\n * Gets the native host element for a given view. Will return null if the current view does not have\n * a host element.\n * @param {?} currentView\n * @return {?}\n */\nfunction getHostNative(currentView) {\n    ngDevMode && assertLView(currentView);\n    /** @type {?} */\n    const hostTNode = currentView[T_HOST];\n    return hostTNode && hostTNode.type === 3 /* Element */ ?\n        ((/** @type {?} */ (getNativeByTNode(hostTNode, (/** @type {?} */ (getLViewParent(currentView))))))) :\n        null;\n}\n/**\n * Inserts a native node before another native node for a given parent using {\\@link Renderer3}.\n * This is a utility function that can be used when native nodes were determined - it abstracts an\n * actual renderer being used.\n * @param {?} renderer\n * @param {?} parent\n * @param {?} child\n * @param {?} beforeNode\n * @return {?}\n */\nexport function nativeInsertBefore(renderer, parent, child, beforeNode) {\n    if (isProceduralRenderer(renderer)) {\n        renderer.insertBefore(parent, child, beforeNode);\n    }\n    else {\n        parent.insertBefore(child, beforeNode, true);\n    }\n}\n/**\n * @param {?} renderer\n * @param {?} parent\n * @param {?} child\n * @return {?}\n */\nfunction nativeAppendChild(renderer, parent, child) {\n    if (isProceduralRenderer(renderer)) {\n        renderer.appendChild(parent, child);\n    }\n    else {\n        parent.appendChild(child);\n    }\n}\n/**\n * @param {?} renderer\n * @param {?} parent\n * @param {?} child\n * @param {?} beforeNode\n * @return {?}\n */\nfunction nativeAppendOrInsertBefore(renderer, parent, child, beforeNode) {\n    if (beforeNode) {\n        nativeInsertBefore(renderer, parent, child, beforeNode);\n    }\n    else {\n        nativeAppendChild(renderer, parent, child);\n    }\n}\n/**\n * Removes a node from the DOM given its native parent.\n * @param {?} renderer\n * @param {?} parent\n * @param {?} child\n * @param {?=} isHostElement\n * @return {?}\n */\nfunction nativeRemoveChild(renderer, parent, child, isHostElement) {\n    if (isProceduralRenderer(renderer)) {\n        renderer.removeChild(parent, child, isHostElement);\n    }\n    else {\n        parent.removeChild(child);\n    }\n}\n/**\n * Returns a native parent of a given native node.\n * @param {?} renderer\n * @param {?} node\n * @return {?}\n */\nexport function nativeParentNode(renderer, node) {\n    return (/** @type {?} */ ((isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode)));\n}\n/**\n * Returns a native sibling of a given native node.\n * @param {?} renderer\n * @param {?} node\n * @return {?}\n */\nexport function nativeNextSibling(renderer, node) {\n    return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;\n}\n/**\n * Finds a native \"anchor\" node for cases where we can't append a native child directly\n * (`appendChild`) and need to use a reference (anchor) node for the `insertBefore` operation.\n * @param {?} parentTNode\n * @param {?} lView\n * @return {?}\n */\nfunction getNativeAnchorNode(parentTNode, lView) {\n    if (parentTNode.type === 2 /* View */) {\n        /** @type {?} */\n        const lContainer = (/** @type {?} */ (getLContainer((/** @type {?} */ (parentTNode)), lView)));\n        /** @type {?} */\n        const views = lContainer[VIEWS];\n        /** @type {?} */\n        const index = views.indexOf(lView);\n        return getBeforeNodeForView(index, views, lContainer[NATIVE]);\n    }\n    else if (parentTNode.type === 4 /* ElementContainer */ ||\n        parentTNode.type === 5 /* IcuContainer */) {\n        return getNativeByTNode(parentTNode, lView);\n    }\n    return null;\n}\n/**\n * Appends the `child` native node (or a collection of nodes) to the `parent`.\n *\n * The element insertion might be delayed {\\@link canInsertNativeNode}.\n *\n * @param {?} childEl The native child (or children) that should be appended\n * @param {?} childTNode The TNode of the child element\n * @param {?} currentView The current LView\n * @return {?} Whether or not the child was appended\n */\nexport function appendChild(childEl, childTNode, currentView) {\n    /** @type {?} */\n    const renderParent = getRenderParent(childTNode, currentView);\n    if (renderParent != null) {\n        /** @type {?} */\n        const renderer = currentView[RENDERER];\n        /** @type {?} */\n        const parentTNode = childTNode.parent || (/** @type {?} */ (currentView[T_HOST]));\n        /** @type {?} */\n        const anchorNode = getNativeAnchorNode(parentTNode, currentView);\n        if (Array.isArray(childEl)) {\n            for (let nativeNode of childEl) {\n                nativeAppendOrInsertBefore(renderer, renderParent, nativeNode, anchorNode);\n            }\n        }\n        else {\n            nativeAppendOrInsertBefore(renderer, renderParent, childEl, anchorNode);\n        }\n    }\n}\n/**\n * Gets the top-level element or an ICU container if those containers are nested.\n *\n * @param {?} tNode The starting TNode for which we should skip element and ICU containers\n * @return {?} The TNode of the highest level ICU container or element container\n */\nfunction getHighestElementOrICUContainer(tNode) {\n    while (tNode.parent != null && (tNode.parent.type === 4 /* ElementContainer */ ||\n        tNode.parent.type === 5 /* IcuContainer */)) {\n        tNode = tNode.parent;\n    }\n    return tNode;\n}\n/**\n * @param {?} index\n * @param {?} views\n * @param {?} containerNative\n * @return {?}\n */\nexport function getBeforeNodeForView(index, views, containerNative) {\n    if (index + 1 < views.length) {\n        /** @type {?} */\n        const view = (/** @type {?} */ (views[index + 1]));\n        /** @type {?} */\n        const viewTNode = (/** @type {?} */ (view[T_HOST]));\n        return viewTNode.child ? getNativeByTNode(viewTNode.child, view) : containerNative;\n    }\n    else {\n        return containerNative;\n    }\n}\n/**\n * Removes a native node itself using a given renderer. To remove the node we are looking up its\n * parent from the native tree as not all platforms / browsers support the equivalent of\n * node.remove().\n *\n * @param {?} renderer A renderer to be used\n * @param {?} rNode The native node that should be removed\n * @param {?=} isHostElement A flag indicating if a node to be removed is a host of a component.\n * @return {?}\n */\nexport function nativeRemoveNode(renderer, rNode, isHostElement) {\n    /** @type {?} */\n    const nativeParent = nativeParentNode(renderer, rNode);\n    if (nativeParent) {\n        nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);\n    }\n}\n/**\n * Appends nodes to a target projection place. Nodes to insert were previously re-distribution and\n * stored on a component host level.\n * @param {?} lView A LView where nodes are inserted (target VLview)\n * @param {?} tProjectionNode A projection node where previously re-distribution should be appended\n * (target insertion place)\n * @param {?} selectorIndex A bucket from where nodes to project should be taken\n * @param {?} componentView A where projectable nodes were initially created (source view)\n * @return {?}\n */\nexport function appendProjectedNodes(lView, tProjectionNode, selectorIndex, componentView) {\n    /** @type {?} */\n    const projectedView = (/** @type {?} */ ((/** @type {?} */ (componentView[PARENT]))));\n    /** @type {?} */\n    const componentNode = (/** @type {?} */ (componentView[T_HOST]));\n    /** @type {?} */\n    let nodeToProject = ((/** @type {?} */ (componentNode.projection)))[selectorIndex];\n    if (Array.isArray(nodeToProject)) {\n        appendChild(nodeToProject, tProjectionNode, lView);\n    }\n    else {\n        while (nodeToProject) {\n            if (nodeToProject.type === 1 /* Projection */) {\n                appendProjectedNodes(lView, tProjectionNode, ((/** @type {?} */ (nodeToProject))).projection, findComponentView(projectedView));\n            }\n            else {\n                // This flag must be set now or we won't know that this node is projected\n                // if the nodes are inserted into a container later.\n                nodeToProject.flags |= 2 /* isProjected */;\n                appendProjectedNode(nodeToProject, tProjectionNode, lView, projectedView);\n            }\n            nodeToProject = nodeToProject.next;\n        }\n    }\n}\n/**\n * Appends a projected node to the DOM, or in the case of a projected container,\n * appends the nodes from all of the container's active views to the DOM.\n *\n * @param {?} projectedTNode The TNode to be projected\n * @param {?} tProjectionNode The projection (ng-content) TNode\n * @param {?} currentView Current LView\n * @param {?} projectionView Projection view (view above current)\n * @return {?}\n */\nfunction appendProjectedNode(projectedTNode, tProjectionNode, currentView, projectionView) {\n    /** @type {?} */\n    const native = getNativeByTNode(projectedTNode, projectionView);\n    appendChild(native, tProjectionNode, currentView);\n    // the projected contents are processed while in the shadow view (which is the currentView)\n    // therefore we need to extract the view where the host element lives since it's the\n    // logical container of the content projected views\n    attachPatchData(native, projectionView);\n    /** @type {?} */\n    const nodeOrContainer = projectionView[projectedTNode.index];\n    if (projectedTNode.type === 0 /* Container */) {\n        // The node we are adding is a container and we are adding it to an element which\n        // is not a component (no more re-projection).\n        // Alternatively a container is projected at the root of a component's template\n        // and can't be re-projected (as not content of any component).\n        // Assign the final projection location in those cases.\n        /** @type {?} */\n        const views = nodeOrContainer[VIEWS];\n        for (let i = 0; i < views.length; i++) {\n            addRemoveViewFromContainer(views[i], true, nodeOrContainer[NATIVE]);\n        }\n    }\n    else {\n        if (projectedTNode.type === 4 /* ElementContainer */) {\n            /** @type {?} */\n            let ngContainerChildTNode = (/** @type {?} */ (projectedTNode.child));\n            while (ngContainerChildTNode) {\n                appendProjectedNode(ngContainerChildTNode, tProjectionNode, currentView, projectionView);\n                ngContainerChildTNode = ngContainerChildTNode.next;\n            }\n        }\n        if (isLContainer(nodeOrContainer)) {\n            appendChild(nodeOrContainer[NATIVE], tProjectionNode, currentView);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * A special value which designates that a value has not changed.\n * @type {?}\n */\nexport const NO_CHANGE = (/** @type {?} */ ({}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvcmVuZGVyMy90b2tlbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQWNBLE1BQU0sT0FBTyxTQUFTLEdBQUcsbUJBQUEsRUFBRSxFQUFhIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5leHBvcnQgaW50ZXJmYWNlIE5PX0NIQU5HRSB7XG4gIC8vIFRoaXMgaXMgYSBicmFuZCB0aGF0IGVuc3VyZXMgdGhhdCB0aGlzIHR5cGUgY2FuIG5ldmVyIG1hdGNoIGFueXRoaW5nIGVsc2VcbiAgYnJhbmQ6ICdOT19DSEFOR0UnO1xufVxuXG4vKiogQSBzcGVjaWFsIHZhbHVlIHdoaWNoIGRlc2lnbmF0ZXMgdGhhdCBhIHZhbHVlIGhhcyBub3QgY2hhbmdlZC4gKi9cbmV4cG9ydCBjb25zdCBOT19DSEFOR0UgPSB7fSBhcyBOT19DSEFOR0U7XG4iXX0=","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Combines the binding value and a factory for an animation player.\n *\n * Used to bind a player to an element template binding (currently only\n * `[style]`, `[style.prop]`, `[class]` and `[class.name]` bindings\n * supported). The provided `factoryFn` function will be run once all\n * the associated bindings have been evaluated on the element and is\n * designed to return a player which will then be placed on the element.\n *\n * @template T\n * @param {?} factoryFn The function that is used to create a player\n *   once all the rendering-related (styling values) have been\n *   processed for the element binding.\n * @param {?} value The raw value that will be exposed to the binding\n *   so that the binding can update its internal values when\n *   any changes are evaluated.\n * @return {?}\n */\nexport function bindPlayerFactory(factoryFn, value) {\n    return (/** @type {?} */ (new BoundPlayerFactory(factoryFn, value)));\n}\n/**\n * @template T\n */\nexport class BoundPlayerFactory {\n    /**\n     * @param {?} fn\n     * @param {?} value\n     */\n    constructor(fn, value) {\n        this.fn = fn;\n        this.value = value;\n    }\n}\nif (false) {\n    /** @type {?} */\n    BoundPlayerFactory.prototype.__brand__;\n    /** @type {?} */\n    BoundPlayerFactory.prototype.fn;\n    /** @type {?} */\n    BoundPlayerFactory.prototype.value;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxheWVyX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL3N0eWxpbmcvcGxheWVyX2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCQSxNQUFNLFVBQVUsaUJBQWlCLENBQUksU0FBK0IsRUFBRSxLQUFRO0lBQzVFLE9BQU8sbUJBQUEsSUFBSSxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLEVBQU8sQ0FBQztBQUN6RCxDQUFDOzs7O0FBRUQsTUFBTSxPQUFPLGtCQUFrQjs7Ozs7SUFFN0IsWUFBbUIsRUFBd0IsRUFBUyxLQUFRO1FBQXpDLE9BQUUsR0FBRixFQUFFLENBQXNCO1FBQVMsVUFBSyxHQUFMLEtBQUssQ0FBRztJQUFHLENBQUM7Q0FDakU7OztJQUZDLHVDQUErRDs7SUFDbkQsZ0NBQStCOztJQUFFLG1DQUFlIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHtQbGF5ZXJGYWN0b3J5LCBQbGF5ZXJGYWN0b3J5QnVpbGRGbn0gZnJvbSAnLi4vaW50ZXJmYWNlcy9wbGF5ZXInO1xuXG4vKipcbiAqIENvbWJpbmVzIHRoZSBiaW5kaW5nIHZhbHVlIGFuZCBhIGZhY3RvcnkgZm9yIGFuIGFuaW1hdGlvbiBwbGF5ZXIuXG4gKlxuICogVXNlZCB0byBiaW5kIGEgcGxheWVyIHRvIGFuIGVsZW1lbnQgdGVtcGxhdGUgYmluZGluZyAoY3VycmVudGx5IG9ubHlcbiAqIGBbc3R5bGVdYCwgYFtzdHlsZS5wcm9wXWAsIGBbY2xhc3NdYCBhbmQgYFtjbGFzcy5uYW1lXWAgYmluZGluZ3NcbiAqIHN1cHBvcnRlZCkuIFRoZSBwcm92aWRlZCBgZmFjdG9yeUZuYCBmdW5jdGlvbiB3aWxsIGJlIHJ1biBvbmNlIGFsbFxuICogdGhlIGFzc29jaWF0ZWQgYmluZGluZ3MgaGF2ZSBiZWVuIGV2YWx1YXRlZCBvbiB0aGUgZWxlbWVudCBhbmQgaXNcbiAqIGRlc2lnbmVkIHRvIHJldHVybiBhIHBsYXllciB3aGljaCB3aWxsIHRoZW4gYmUgcGxhY2VkIG9uIHRoZSBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSBmYWN0b3J5Rm4gVGhlIGZ1bmN0aW9uIHRoYXQgaXMgdXNlZCB0byBjcmVhdGUgYSBwbGF5ZXJcbiAqICAgb25jZSBhbGwgdGhlIHJlbmRlcmluZy1yZWxhdGVkIChzdHlsaW5nIHZhbHVlcykgaGF2ZSBiZWVuXG4gKiAgIHByb2Nlc3NlZCBmb3IgdGhlIGVsZW1lbnQgYmluZGluZy5cbiAqIEBwYXJhbSB2YWx1ZSBUaGUgcmF3IHZhbHVlIHRoYXQgd2lsbCBiZSBleHBvc2VkIHRvIHRoZSBiaW5kaW5nXG4gKiAgIHNvIHRoYXQgdGhlIGJpbmRpbmcgY2FuIHVwZGF0ZSBpdHMgaW50ZXJuYWwgdmFsdWVzIHdoZW5cbiAqICAgYW55IGNoYW5nZXMgYXJlIGV2YWx1YXRlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJpbmRQbGF5ZXJGYWN0b3J5PFQ+KGZhY3RvcnlGbjogUGxheWVyRmFjdG9yeUJ1aWxkRm4sIHZhbHVlOiBUKTogUGxheWVyRmFjdG9yeSB7XG4gIHJldHVybiBuZXcgQm91bmRQbGF5ZXJGYWN0b3J5KGZhY3RvcnlGbiwgdmFsdWUpIGFzIGFueTtcbn1cblxuZXhwb3J0IGNsYXNzIEJvdW5kUGxheWVyRmFjdG9yeTxUPiB7XG4gICdfX2JyYW5kX18nOiAnQnJhbmQgZm9yIFBsYXllckZhY3RvcnkgdGhhdCBub3RoaW5nIHdpbGwgbWF0Y2gnO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgZm46IFBsYXllckZhY3RvcnlCdWlsZEZuLCBwdWJsaWMgdmFsdWU6IFQpIHt9XG59XG4iXX0=","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nexport class CorePlayerHandler {\n    constructor() {\n        this._players = [];\n    }\n    /**\n     * @return {?}\n     */\n    flushPlayers() {\n        for (let i = 0; i < this._players.length; i++) {\n            /** @type {?} */\n            const player = this._players[i];\n            if (!player.parent && player.state === 0 /* Pending */) {\n                player.play();\n            }\n        }\n        this._players.length = 0;\n    }\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    queuePlayer(player) { this._players.push(player); }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    CorePlayerHandler.prototype._players;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZV9wbGF5ZXJfaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3JlbmRlcjMvc3R5bGluZy9jb3JlX3BsYXllcl9oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFTQSxNQUFNLE9BQU8saUJBQWlCO0lBQTlCO1FBQ1UsYUFBUSxHQUFhLEVBQUUsQ0FBQztJQWFsQyxDQUFDOzs7O0lBWEMsWUFBWTtRQUNWLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTs7a0JBQ3ZDLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsS0FBSyxvQkFBc0IsRUFBRTtnQkFDeEQsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ2Y7U0FDRjtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUMzQixDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxNQUFjLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzVEOzs7Ozs7SUFiQyxxQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQge1BsYXlTdGF0ZSwgUGxheWVyLCBQbGF5ZXJIYW5kbGVyfSBmcm9tICcuLi9pbnRlcmZhY2VzL3BsYXllcic7XG5cbmV4cG9ydCBjbGFzcyBDb3JlUGxheWVySGFuZGxlciBpbXBsZW1lbnRzIFBsYXllckhhbmRsZXIge1xuICBwcml2YXRlIF9wbGF5ZXJzOiBQbGF5ZXJbXSA9IFtdO1xuXG4gIGZsdXNoUGxheWVycygpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3BsYXllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHBsYXllciA9IHRoaXMuX3BsYXllcnNbaV07XG4gICAgICBpZiAoIXBsYXllci5wYXJlbnQgJiYgcGxheWVyLnN0YXRlID09PSBQbGF5U3RhdGUuUGVuZGluZykge1xuICAgICAgICBwbGF5ZXIucGxheSgpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9wbGF5ZXJzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBxdWV1ZVBsYXllcihwbGF5ZXI6IFBsYXllcikgeyB0aGlzLl9wbGF5ZXJzLnB1c2gocGxheWVyKTsgfVxufVxuIl19","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport '../../util/ng_dev_mode';\nimport { getLContext } from '../context_discovery';\nimport { HEADER_OFFSET, HOST } from '../interfaces/view';\nimport { getTNode, isStylingContext } from '../util/view_utils';\nimport { CorePlayerHandler } from './core_player_handler';\n/** @type {?} */\nexport const ANIMATION_PROP_PREFIX = '@';\n/**\n * @param {?=} wrappedElement\n * @param {?=} sanitizer\n * @param {?=} initialStyles\n * @param {?=} initialClasses\n * @return {?}\n */\nexport function createEmptyStylingContext(wrappedElement, sanitizer, initialStyles, initialClasses) {\n    /** @type {?} */\n    const context = [\n        wrappedElement || null,\n        0,\n        (/** @type {?} */ ([])),\n        initialStyles || [null, null],\n        initialClasses || [null, null],\n        [0, 0],\n        [0],\n        [0],\n        null,\n    ];\n    // whenever a context is created there is always a `null` directive\n    // that is registered (which is a placeholder for the \"template\").\n    allocateDirectiveIntoContext(context, null);\n    return context;\n}\n/**\n * Allocates (registers) a directive into the directive registry within the provided styling\n * context.\n *\n * For each and every `[style]`, `[style.prop]`, `[class]`, `[class.name]` binding\n * (as well as static style and class attributes) a directive, component or template\n * is marked as the owner. When an owner is determined (this happens when the template\n * is first passed over) the directive owner is allocated into the styling context. When\n * this happens, each owner gets its own index value. This then ensures that once any\n * style and/or class binding are assigned into the context then they are marked to\n * that directive's index value.\n *\n * @param {?} context the target StylingContext\n * @param {?} directiveRef the directive that will be allocated into the context\n * @return {?} the index where the directive was inserted into\n */\nexport function allocateDirectiveIntoContext(context, directiveRef) {\n    // this is a new directive which we have not seen yet.\n    /** @type {?} */\n    const dirs = context[2 /* DirectiveRegistryPosition */];\n    /** @type {?} */\n    const i = dirs.length;\n    // we preemptively make space into the directives array and then\n    // assign values slot-by-slot to ensure that if the directive ordering\n    // changes then it will still function\n    dirs.push(null, null, null, null);\n    dirs[i + 0 /* DirectiveValueOffset */] = directiveRef;\n    dirs[i + 2 /* DirtyFlagOffset */] = false;\n    dirs[i + 3 /* StyleSanitizerOffset */] = null;\n    // -1 is used to signal that the directive has been allocated, but\n    // no actual style or class bindings have been registered yet...\n    dirs[i + 1 /* SinglePropValuesIndexOffset */] = -1;\n    return i;\n}\n/**\n * Used clone a copy of a pre-computed template of a styling context.\n *\n * A pre-computed template is designed to be computed once for a given element\n * (instructions.ts has logic for caching this).\n * @param {?} element\n * @param {?} templateStyleContext\n * @return {?}\n */\nexport function allocStylingContext(element, templateStyleContext) {\n    // each instance gets a copy\n    /** @type {?} */\n    const context = (/** @type {?} */ ((/** @type {?} */ (templateStyleContext.slice()))));\n    // the HEADER values contain arrays which also need\n    // to be copied over into the new context\n    for (let i = 0; i < 9 /* SingleStylesStartPosition */; i++) {\n        /** @type {?} */\n        const value = templateStyleContext[i];\n        if (Array.isArray(value)) {\n            context[i] = value.slice();\n        }\n    }\n    context[0 /* ElementPosition */] = element;\n    // this will prevent any other directives from extending the context\n    context[1 /* MasterFlagPosition */] |= 16 /* BindingAllocationLocked */;\n    return context;\n}\n/**\n * Retrieve the `StylingContext` at a given index.\n *\n * This method lazily creates the `StylingContext`. This is because in most cases\n * we have styling without any bindings. Creating `StylingContext` eagerly would mean that\n * every style declaration such as `<div style=\"color: red\">` would result `StyleContext`\n * which would create unnecessary memory pressure.\n *\n * @param {?} index Index of the style allocation. See: `elementStyling`.\n * @param {?} viewData The view to search for the styling context\n * @return {?}\n */\nexport function getStylingContext(index, viewData) {\n    /** @type {?} */\n    let storageIndex = index;\n    /** @type {?} */\n    let slotValue = viewData[storageIndex];\n    /** @type {?} */\n    let wrapper = viewData;\n    while (Array.isArray(slotValue)) {\n        wrapper = slotValue;\n        slotValue = (/** @type {?} */ (slotValue[HOST]));\n    }\n    if (isStylingContext(wrapper)) {\n        return wrapper;\n    }\n    else {\n        // This is an LView or an LContainer\n        /** @type {?} */\n        const stylingTemplate = getTNode(index - HEADER_OFFSET, viewData).stylingTemplate;\n        if (wrapper !== viewData) {\n            storageIndex = HOST;\n        }\n        return wrapper[storageIndex] = stylingTemplate ?\n            allocStylingContext(slotValue, stylingTemplate) :\n            createEmptyStylingContext(slotValue);\n    }\n}\n/**\n * @param {?} name\n * @return {?}\n */\nexport function isAnimationProp(name) {\n    return name[0] === ANIMATION_PROP_PREFIX;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function hasClassInput(tNode) {\n    return (tNode.flags & 8 /* hasClassInput */) !== 0;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function hasStyleInput(tNode) {\n    return (tNode.flags & 16 /* hasStyleInput */) !== 0;\n}\n/**\n * @param {?} classes\n * @return {?}\n */\nexport function forceClassesAsString(classes) {\n    if (classes && typeof classes !== 'string') {\n        classes = Object.keys(classes).join(' ');\n    }\n    return ((/** @type {?} */ (classes))) || '';\n}\n/**\n * @param {?} styles\n * @return {?}\n */\nexport function forceStylesAsString(styles) {\n    /** @type {?} */\n    let str = '';\n    if (styles) {\n        /** @type {?} */\n        const props = Object.keys(styles);\n        for (let i = 0; i < props.length; i++) {\n            /** @type {?} */\n            const prop = props[i];\n            str += (i ? ';' : '') + `${prop}:${styles[prop]}`;\n        }\n    }\n    return str;\n}\n/**\n * @param {?} playerContext\n * @param {?} rootContext\n * @param {?} element\n * @param {?} player\n * @param {?} playerContextIndex\n * @param {?=} ref\n * @return {?}\n */\nexport function addPlayerInternal(playerContext, rootContext, element, player, playerContextIndex, ref) {\n    ref = ref || element;\n    if (playerContextIndex) {\n        playerContext[playerContextIndex] = player;\n    }\n    else {\n        playerContext.push(player);\n    }\n    if (player) {\n        player.addEventListener(200 /* Destroyed */, () => {\n            /** @type {?} */\n            const index = playerContext.indexOf(player);\n            /** @type {?} */\n            const nonFactoryPlayerIndex = playerContext[0 /* NonBuilderPlayersStart */];\n            // if the player is being removed from the factory side of the context\n            // (which is where the [style] and [class] bindings do their thing) then\n            // that side of the array cannot be resized since the respective bindings\n            // have pointer index values that point to the associated factory instance\n            if (index) {\n                if (index < nonFactoryPlayerIndex) {\n                    playerContext[index] = null;\n                }\n                else {\n                    playerContext.splice(index, 1);\n                }\n            }\n            player.destroy();\n        });\n        /** @type {?} */\n        const playerHandler = rootContext.playerHandler || (rootContext.playerHandler = new CorePlayerHandler());\n        playerHandler.queuePlayer(player, ref);\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} playerContext\n * @return {?}\n */\nexport function getPlayersInternal(playerContext) {\n    /** @type {?} */\n    const players = [];\n    /** @type {?} */\n    const nonFactoryPlayersStart = playerContext[0 /* NonBuilderPlayersStart */];\n    // add all factory-based players (which are apart of [style] and [class] bindings)\n    for (let i = 1 /* PlayerBuildersStartPosition */ + 1 /* PlayerOffsetPosition */; i < nonFactoryPlayersStart; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n        /** @type {?} */\n        const player = (/** @type {?} */ (playerContext[i]));\n        if (player) {\n            players.push(player);\n        }\n    }\n    // add all custom players (not apart of [style] and [class] bindings)\n    for (let i = nonFactoryPlayersStart; i < playerContext.length; i++) {\n        players.push((/** @type {?} */ (playerContext[i])));\n    }\n    return players;\n}\n/**\n * @param {?} target\n * @param {?=} context\n * @return {?}\n */\nexport function getOrCreatePlayerContext(target, context) {\n    context = context || (/** @type {?} */ (getLContext(target)));\n    if (!context) {\n        ngDevMode && throwInvalidRefError();\n        return null;\n    }\n    const { lView, nodeIndex } = context;\n    /** @type {?} */\n    const stylingContext = getStylingContext(nodeIndex, lView);\n    return getPlayerContext(stylingContext) || allocPlayerContext(stylingContext);\n}\n/**\n * @param {?} stylingContext\n * @return {?}\n */\nexport function getPlayerContext(stylingContext) {\n    return stylingContext[8 /* PlayerContext */];\n}\n/**\n * @param {?} data\n * @return {?}\n */\nexport function allocPlayerContext(data) {\n    return data[8 /* PlayerContext */] =\n        [5 /* SinglePlayerBuildersStartPosition */, null, null, null, null];\n}\n/**\n * @return {?}\n */\nexport function throwInvalidRefError() {\n    throw new Error('Only elements that exist in an Angular application can be used for animations');\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport { EMPTY_ARRAY, EMPTY_OBJ } from '../empty';\nimport { RendererStyleFlags3, isProceduralRenderer } from '../interfaces/renderer';\nimport { NO_CHANGE } from '../tokens';\nimport { getRootContext } from '../util/view_traversal_utils';\nimport { BoundPlayerFactory } from './player_factory';\nimport { addPlayerInternal, allocPlayerContext, allocateDirectiveIntoContext, createEmptyStylingContext, getPlayerContext } from './util';\n/**\n * This file includes the code to power all styling-binding operations in Angular.\n *\n * These include:\n * [style]=\"myStyleObj\"\n * [class]=\"myClassObj\"\n * [style.prop]=\"myPropValue\"\n * [class.name]=\"myClassValue\"\n *\n * It also includes code that will allow style binding code to operate within host\n * bindings for components/directives.\n *\n * There are many different ways in which these functions below are called. Please see\n * `render3/interfaces/styling.ts` to get a better idea of how the styling algorithm works.\n */\n/**\n * Creates a new StylingContext an fills it with the provided static styling attribute values.\n * @param {?} attrs\n * @param {?} stylingStartIndex\n * @param {?=} directiveRef\n * @return {?}\n */\nexport function initializeStaticContext(attrs, stylingStartIndex, directiveRef) {\n    /** @type {?} */\n    const context = createEmptyStylingContext();\n    patchContextWithStaticAttrs(context, attrs, stylingStartIndex, directiveRef);\n    return context;\n}\n/**\n * Designed to update an existing styling context with new static styling\n * data (classes and styles).\n *\n * @param {?} context the existing styling context\n * @param {?} attrs an array of new static styling attributes that will be\n *              assigned to the context\n * @param {?} attrsStylingStartIndex what index to start iterating within the\n *              provided `attrs` array to start reading style and class values\n * @param {?=} directiveRef the directive instance with which static data is associated with.\n * @return {?}\n */\nexport function patchContextWithStaticAttrs(context, attrs, attrsStylingStartIndex, directiveRef) {\n    // this means the context has already been set and instantiated\n    if (context[1 /* MasterFlagPosition */] & 16 /* BindingAllocationLocked */)\n        return;\n    // If the styling context has already been patched with the given directive's bindings,\n    // then there is no point in doing it again. The reason why this may happen (the directive\n    // styling being patched twice) is because the `stylingBinding` function is called each time\n    // an element is created (both within a template function and within directive host bindings).\n    /** @type {?} */\n    const directives = context[2 /* DirectiveRegistryPosition */];\n    /** @type {?} */\n    let detectedIndex = getDirectiveRegistryValuesIndexOf(directives, directiveRef || null);\n    if (detectedIndex === -1) {\n        // this is a new directive which we have not seen yet.\n        detectedIndex = allocateDirectiveIntoContext(context, directiveRef);\n    }\n    /** @type {?} */\n    const directiveIndex = detectedIndex / 4 /* Size */;\n    /** @type {?} */\n    let initialClasses = null;\n    /** @type {?} */\n    let initialStyles = null;\n    /** @type {?} */\n    let mode = -1;\n    for (let i = attrsStylingStartIndex; i < attrs.length; i++) {\n        /** @type {?} */\n        const attr = attrs[i];\n        if (typeof attr == 'number') {\n            mode = attr;\n        }\n        else if (mode == 1 /* Classes */) {\n            initialClasses = initialClasses || context[4 /* InitialClassValuesPosition */];\n            patchInitialStylingValue(initialClasses, attr, true, directiveIndex);\n        }\n        else if (mode == 2 /* Styles */) {\n            initialStyles = initialStyles || context[3 /* InitialStyleValuesPosition */];\n            patchInitialStylingValue(initialStyles, attr, attrs[++i], directiveIndex);\n        }\n    }\n}\n/**\n * Designed to add a style or class value into the existing set of initial styles.\n *\n * The function will search and figure out if a style/class value is already present\n * within the provided initial styling array. If and when a style/class value is\n * present (allocated) then the code below will set the new value depending on the\n * following cases:\n *\n *  1) if the existing value is falsy (this happens because a `[class.prop]` or\n *     `[style.prop]` binding was set, but there wasn't a matching static style\n *     or class present on the context)\n *  2) if the value was set already by the template, component or directive, but the\n *     new value is set on a higher level (i.e. a sub component which extends a parent\n *     component sets its value after the parent has already set the same one)\n *  3) if the same directive provides a new set of styling values to set\n *\n * @param {?} initialStyling the initial styling array where the new styling entry will be added to\n * @param {?} prop the property value of the new entry (e.g. `width` (styles) or `foo` (classes))\n * @param {?} value the styling value of the new entry (e.g. `absolute` (styles) or `true` (classes))\n * @param {?} directiveOwnerIndex the directive owner index value of the styling source responsible\n *        for these styles (see `interfaces/styling.ts#directives` for more info)\n * @return {?}\n */\nfunction patchInitialStylingValue(initialStyling, prop, value, directiveOwnerIndex) {\n    for (let i = 2 /* KeyValueStartPosition */; i < initialStyling.length; i += 3 /* Size */) {\n        /** @type {?} */\n        const key = initialStyling[i + 0 /* PropOffset */];\n        if (key === prop) {\n            /** @type {?} */\n            const existingValue = (/** @type {?} */ (initialStyling[i + 1 /* ValueOffset */]));\n            /** @type {?} */\n            const existingOwner = (/** @type {?} */ (initialStyling[i + 2 /* DirectiveOwnerOffset */]));\n            if (allowValueChange(existingValue, value, existingOwner, directiveOwnerIndex)) {\n                addOrUpdateStaticStyle(i, initialStyling, prop, value, directiveOwnerIndex);\n            }\n            return;\n        }\n    }\n    // We did not find existing key, add a new one.\n    addOrUpdateStaticStyle(null, initialStyling, prop, value, directiveOwnerIndex);\n}\n/**\n * Runs through the initial style data present in the context and renders\n * them via the renderer on the element.\n * @param {?} element\n * @param {?} context\n * @param {?} renderer\n * @return {?}\n */\nexport function renderInitialStyles(element, context, renderer) {\n    /** @type {?} */\n    const initialStyles = context[3 /* InitialStyleValuesPosition */];\n    renderInitialStylingValues(element, renderer, initialStyles, false);\n}\n/**\n * Runs through the initial class data present in the context and renders\n * them via the renderer on the element.\n * @param {?} element\n * @param {?} context\n * @param {?} renderer\n * @return {?}\n */\nexport function renderInitialClasses(element, context, renderer) {\n    /** @type {?} */\n    const initialClasses = context[4 /* InitialClassValuesPosition */];\n    renderInitialStylingValues(element, renderer, initialClasses, true);\n}\n/**\n * This is a helper function designed to render each entry present within the\n * provided list of initialStylingValues.\n * @param {?} element\n * @param {?} renderer\n * @param {?} initialStylingValues\n * @param {?} isEntryClassBased\n * @return {?}\n */\nfunction renderInitialStylingValues(element, renderer, initialStylingValues, isEntryClassBased) {\n    for (let i = 2 /* KeyValueStartPosition */; i < initialStylingValues.length; i += 3 /* Size */) {\n        /** @type {?} */\n        const value = initialStylingValues[i + 1 /* ValueOffset */];\n        if (value) {\n            if (isEntryClassBased) {\n                setClass(element, (/** @type {?} */ (initialStylingValues[i + 0 /* PropOffset */])), true, renderer, null);\n            }\n            else {\n                setStyle(element, (/** @type {?} */ (initialStylingValues[i + 0 /* PropOffset */])), (/** @type {?} */ (value)), renderer, null);\n            }\n        }\n    }\n}\n/**\n * @param {?} context\n * @return {?}\n */\nexport function allowNewBindingsForStylingContext(context) {\n    return (context[1 /* MasterFlagPosition */] & 16 /* BindingAllocationLocked */) === 0;\n}\n/**\n * Adds in new binding values to a styling context.\n *\n * If a directive value is provided then all provided class/style binding names will\n * reference the provided directive.\n *\n * @param {?} context the existing styling context\n * @param {?} directiveRef the directive that the new bindings will reference\n * @param {?=} classBindingNames an array of class binding names that will be added to the context\n * @param {?=} styleBindingNames an array of style binding names that will be added to the context\n * @param {?=} styleSanitizer an optional sanitizer that handle all sanitization on for each of\n *    the bindings added to the context. Note that if a directive is provided then the sanitizer\n *    instance will only be active if and when the directive updates the bindings that it owns.\n * @return {?}\n */\nexport function updateContextWithBindings(context, directiveRef, classBindingNames, styleBindingNames, styleSanitizer) {\n    if (context[1 /* MasterFlagPosition */] & 16 /* BindingAllocationLocked */)\n        return;\n    // this means the context has already been patched with the directive's bindings\n    /** @type {?} */\n    const directiveIndex = findOrPatchDirectiveIntoRegistry(context, directiveRef, styleSanitizer);\n    if (directiveIndex === -1) {\n        // this means the directive has already been patched in ... No point in doing anything\n        return;\n    }\n    if (styleBindingNames) {\n        styleBindingNames = hyphenateEntries(styleBindingNames);\n    }\n    // there are alot of variables being used below to track where in the context the new\n    // binding values will be placed. Because the context consists of multiple types of\n    // entries (single classes/styles and multi classes/styles) alot of the index positions\n    // need to be computed ahead of time and the context needs to be extended before the values\n    // are inserted in.\n    /** @type {?} */\n    const singlePropOffsetValues = context[5 /* SinglePropOffsetPositions */];\n    /** @type {?} */\n    const totalCurrentClassBindings = singlePropOffsetValues[1 /* ClassesCountPosition */];\n    /** @type {?} */\n    const totalCurrentStyleBindings = singlePropOffsetValues[0 /* StylesCountPosition */];\n    /** @type {?} */\n    const cachedClassMapValues = context[6 /* CachedMultiClasses */];\n    /** @type {?} */\n    const cachedStyleMapValues = context[7 /* CachedMultiStyles */];\n    /** @type {?} */\n    const classesOffset = totalCurrentClassBindings * 4 /* Size */;\n    /** @type {?} */\n    const stylesOffset = totalCurrentStyleBindings * 4 /* Size */;\n    /** @type {?} */\n    const singleStylesStartIndex = 9 /* SingleStylesStartPosition */;\n    /** @type {?} */\n    let singleClassesStartIndex = singleStylesStartIndex + stylesOffset;\n    /** @type {?} */\n    let multiStylesStartIndex = singleClassesStartIndex + classesOffset;\n    /** @type {?} */\n    let multiClassesStartIndex = multiStylesStartIndex + stylesOffset;\n    // because we're inserting more bindings into the context, this means that the\n    // binding values need to be referenced the singlePropOffsetValues array so that\n    // the template/directive can easily find them inside of the `elementStyleProp`\n    // and the `elementClassProp` functions without iterating through the entire context.\n    // The first step to setting up these reference points is to mark how many bindings\n    // are being added. Even if these bindings already exist in the context, the directive\n    // or template code will still call them unknowingly. Therefore the total values need\n    // to be registered so that we know how many bindings are assigned to each directive.\n    /** @type {?} */\n    const currentSinglePropsLength = singlePropOffsetValues.length;\n    singlePropOffsetValues.push(styleBindingNames ? styleBindingNames.length : 0, classBindingNames ? classBindingNames.length : 0);\n    // the code below will check to see if a new style binding already exists in the context\n    // if so then there is no point in inserting it into the context again. Whether or not it\n    // exists the styling offset code will now know exactly where it is\n    /** @type {?} */\n    let insertionOffset = 0;\n    /** @type {?} */\n    const filteredStyleBindingNames = [];\n    if (styleBindingNames && styleBindingNames.length) {\n        for (let i = 0; i < styleBindingNames.length; i++) {\n            /** @type {?} */\n            const name = styleBindingNames[i];\n            /** @type {?} */\n            let singlePropIndex = getMatchingBindingIndex(context, name, singleStylesStartIndex, singleClassesStartIndex);\n            if (singlePropIndex == -1) {\n                singlePropIndex = singleClassesStartIndex + insertionOffset;\n                insertionOffset += 4 /* Size */;\n                filteredStyleBindingNames.push(name);\n            }\n            singlePropOffsetValues.push(singlePropIndex);\n        }\n    }\n    // just like with the style binding loop above, the new class bindings get the same treatment...\n    /** @type {?} */\n    const filteredClassBindingNames = [];\n    if (classBindingNames && classBindingNames.length) {\n        for (let i = 0; i < classBindingNames.length; i++) {\n            /** @type {?} */\n            const name = classBindingNames[i];\n            /** @type {?} */\n            let singlePropIndex = getMatchingBindingIndex(context, name, singleClassesStartIndex, multiStylesStartIndex);\n            if (singlePropIndex == -1) {\n                singlePropIndex = multiStylesStartIndex + insertionOffset;\n                insertionOffset += 4 /* Size */;\n                filteredClassBindingNames.push(name);\n            }\n            else {\n                singlePropIndex += filteredStyleBindingNames.length * 4 /* Size */;\n            }\n            singlePropOffsetValues.push(singlePropIndex);\n        }\n    }\n    // because new styles are being inserted, this means the existing collection of style offset\n    // index values are incorrect (they point to the wrong values). The code below will run through\n    // the entire offset array and update the existing set of index values to point to their new\n    // locations while taking the new binding values into consideration.\n    /** @type {?} */\n    let i = 2 /* ValueStartPosition */;\n    if (filteredStyleBindingNames.length) {\n        while (i < currentSinglePropsLength) {\n            /** @type {?} */\n            const totalStyles = singlePropOffsetValues[i + 0 /* StylesCountPosition */];\n            /** @type {?} */\n            const totalClasses = singlePropOffsetValues[i + 1 /* ClassesCountPosition */];\n            if (totalClasses) {\n                /** @type {?} */\n                const start = i + 2 /* ValueStartPosition */ + totalStyles;\n                for (let j = start; j < start + totalClasses; j++) {\n                    singlePropOffsetValues[j] += filteredStyleBindingNames.length * 4 /* Size */;\n                }\n            }\n            /** @type {?} */\n            const total = totalStyles + totalClasses;\n            i += 2 /* ValueStartPosition */ + total;\n        }\n    }\n    /** @type {?} */\n    const totalNewEntries = filteredClassBindingNames.length + filteredStyleBindingNames.length;\n    // in the event that there are new style values being inserted, all existing class and style\n    // bindings need to have their pointer values offsetted with the new amount of space that is\n    // used for the new style/class bindings.\n    for (let i = singleStylesStartIndex; i < context.length; i += 4 /* Size */) {\n        /** @type {?} */\n        const isMultiBased = i >= multiStylesStartIndex;\n        /** @type {?} */\n        const isClassBased = i >= (isMultiBased ? multiClassesStartIndex : singleClassesStartIndex);\n        /** @type {?} */\n        const flag = getPointers(context, i);\n        /** @type {?} */\n        const staticIndex = getInitialIndex(flag);\n        /** @type {?} */\n        let singleOrMultiIndex = getMultiOrSingleIndex(flag);\n        if (isMultiBased) {\n            singleOrMultiIndex +=\n                isClassBased ? (filteredStyleBindingNames.length * 4 /* Size */) : 0;\n        }\n        else {\n            singleOrMultiIndex += (totalNewEntries * 4 /* Size */) +\n                ((isClassBased ? filteredStyleBindingNames.length : 0) * 4 /* Size */);\n        }\n        setFlag(context, i, pointers(flag, staticIndex, singleOrMultiIndex));\n    }\n    // this is where we make space in the context for the new style bindings\n    for (let i = 0; i < filteredStyleBindingNames.length * 4 /* Size */; i++) {\n        context.splice(multiClassesStartIndex, 0, null);\n        context.splice(singleClassesStartIndex, 0, null);\n        singleClassesStartIndex++;\n        multiStylesStartIndex++;\n        multiClassesStartIndex += 2; // both single + multi slots were inserted\n    }\n    // this is where we make space in the context for the new class bindings\n    for (let i = 0; i < filteredClassBindingNames.length * 4 /* Size */; i++) {\n        context.splice(multiStylesStartIndex, 0, null);\n        context.push(null);\n        multiStylesStartIndex++;\n        multiClassesStartIndex++;\n    }\n    /** @type {?} */\n    const initialClasses = context[4 /* InitialClassValuesPosition */];\n    /** @type {?} */\n    const initialStyles = context[3 /* InitialStyleValuesPosition */];\n    // the code below will insert each new entry into the context and assign the appropriate\n    // flags and index values to them. It's important this runs at the end of this function\n    // because the context, property offset and index values have all been computed just before.\n    for (let i = 0; i < totalNewEntries; i++) {\n        /** @type {?} */\n        const entryIsClassBased = i >= filteredStyleBindingNames.length;\n        /** @type {?} */\n        const adjustedIndex = entryIsClassBased ? (i - filteredStyleBindingNames.length) : i;\n        /** @type {?} */\n        const propName = entryIsClassBased ? filteredClassBindingNames[adjustedIndex] :\n            filteredStyleBindingNames[adjustedIndex];\n        /** @type {?} */\n        let multiIndex;\n        /** @type {?} */\n        let singleIndex;\n        if (entryIsClassBased) {\n            multiIndex = multiClassesStartIndex +\n                ((totalCurrentClassBindings + adjustedIndex) * 4 /* Size */);\n            singleIndex = singleClassesStartIndex +\n                ((totalCurrentClassBindings + adjustedIndex) * 4 /* Size */);\n        }\n        else {\n            multiIndex =\n                multiStylesStartIndex + ((totalCurrentStyleBindings + adjustedIndex) * 4 /* Size */);\n            singleIndex = singleStylesStartIndex +\n                ((totalCurrentStyleBindings + adjustedIndex) * 4 /* Size */);\n        }\n        // if a property is not found in the initial style values list then it\n        // is ALWAYS added incase a follow-up directive introduces the same initial\n        // style/class value later on.\n        /** @type {?} */\n        let initialValuesToLookup = entryIsClassBased ? initialClasses : initialStyles;\n        /** @type {?} */\n        let indexForInitial = getInitialStylingValuesIndexOf(initialValuesToLookup, propName);\n        if (indexForInitial === -1) {\n            indexForInitial = addOrUpdateStaticStyle(null, initialValuesToLookup, propName, entryIsClassBased ? false : null, directiveIndex) +\n                1 /* ValueOffset */;\n        }\n        else {\n            indexForInitial += 1 /* ValueOffset */;\n        }\n        /** @type {?} */\n        const initialFlag = prepareInitialFlag(context, propName, entryIsClassBased, styleSanitizer || null);\n        setFlag(context, singleIndex, pointers(initialFlag, indexForInitial, multiIndex));\n        setProp(context, singleIndex, propName);\n        setValue(context, singleIndex, null);\n        setPlayerBuilderIndex(context, singleIndex, 0, directiveIndex);\n        setFlag(context, multiIndex, pointers(initialFlag, indexForInitial, singleIndex));\n        setProp(context, multiIndex, propName);\n        setValue(context, multiIndex, null);\n        setPlayerBuilderIndex(context, multiIndex, 0, directiveIndex);\n    }\n    // the total classes/style values are updated so the next time the context is patched\n    // additional style/class bindings from another directive then it knows exactly where\n    // to insert them in the context\n    singlePropOffsetValues[1 /* ClassesCountPosition */] =\n        totalCurrentClassBindings + filteredClassBindingNames.length;\n    singlePropOffsetValues[0 /* StylesCountPosition */] =\n        totalCurrentStyleBindings + filteredStyleBindingNames.length;\n    // the map-based values also need to know how many entries got inserted\n    cachedClassMapValues[0 /* EntriesCountPosition */] +=\n        filteredClassBindingNames.length;\n    cachedStyleMapValues[0 /* EntriesCountPosition */] +=\n        filteredStyleBindingNames.length;\n    /** @type {?} */\n    const newStylesSpaceAllocationSize = filteredStyleBindingNames.length * 4 /* Size */;\n    /** @type {?} */\n    const newClassesSpaceAllocationSize = filteredClassBindingNames.length * 4 /* Size */;\n    // update the multi styles cache with a reference for the directive that was just inserted\n    /** @type {?} */\n    const directiveMultiStylesStartIndex = multiStylesStartIndex + totalCurrentStyleBindings * 4 /* Size */;\n    /** @type {?} */\n    const cachedStyleMapIndex = cachedStyleMapValues.length;\n    registerMultiMapEntry(context, directiveIndex, false, directiveMultiStylesStartIndex, filteredStyleBindingNames.length);\n    for (let i = 1 /* ValuesStartPosition */; i < cachedStyleMapIndex; i += 4 /* Size */) {\n        // multi values start after all the single values (which is also where classes are) in the\n        // context therefore the new class allocation size should be taken into account\n        cachedStyleMapValues[i + 1 /* PositionStartOffset */] +=\n            newClassesSpaceAllocationSize + newStylesSpaceAllocationSize;\n    }\n    // update the multi classes cache with a reference for the directive that was just inserted\n    /** @type {?} */\n    const directiveMultiClassesStartIndex = multiClassesStartIndex + totalCurrentClassBindings * 4 /* Size */;\n    /** @type {?} */\n    const cachedClassMapIndex = cachedClassMapValues.length;\n    registerMultiMapEntry(context, directiveIndex, true, directiveMultiClassesStartIndex, filteredClassBindingNames.length);\n    for (let i = 1 /* ValuesStartPosition */; i < cachedClassMapIndex; i += 4 /* Size */) {\n        // the reason why both the styles + classes space is allocated to the existing offsets is\n        // because the styles show up before the classes in the context and any new inserted\n        // styles will offset any existing class entries in the context (even if there are no\n        // new class entries added) also the reason why it's *2 is because both single + multi\n        // entries for each new style have been added in the context before the multi class values\n        // actually start\n        cachedClassMapValues[i + 1 /* PositionStartOffset */] +=\n            (newStylesSpaceAllocationSize * 2) + newClassesSpaceAllocationSize;\n    }\n    // there is no initial value flag for the master index since it doesn't\n    // reference an initial style value\n    /** @type {?} */\n    const masterFlag = pointers(0, 0, multiStylesStartIndex);\n    setFlag(context, 1 /* MasterFlagPosition */, masterFlag);\n}\n/**\n * Searches through the existing registry of directives\n * @param {?} context\n * @param {?} directiveRef\n * @param {?=} styleSanitizer\n * @return {?}\n */\nexport function findOrPatchDirectiveIntoRegistry(context, directiveRef, styleSanitizer) {\n    /** @type {?} */\n    const directiveRefs = context[2 /* DirectiveRegistryPosition */];\n    /** @type {?} */\n    const nextOffsetInsertionIndex = context[5 /* SinglePropOffsetPositions */].length;\n    /** @type {?} */\n    let directiveIndex;\n    /** @type {?} */\n    let detectedIndex = getDirectiveRegistryValuesIndexOf(directiveRefs, directiveRef);\n    if (detectedIndex === -1) {\n        detectedIndex = directiveRefs.length;\n        directiveIndex = directiveRefs.length / 4 /* Size */;\n        allocateDirectiveIntoContext(context, directiveRef);\n        directiveRefs[detectedIndex + 1 /* SinglePropValuesIndexOffset */] =\n            nextOffsetInsertionIndex;\n        directiveRefs[detectedIndex + 3 /* StyleSanitizerOffset */] =\n            styleSanitizer || null;\n    }\n    else {\n        /** @type {?} */\n        const singlePropStartPosition = detectedIndex + 1 /* SinglePropValuesIndexOffset */;\n        if ((/** @type {?} */ (directiveRefs[singlePropStartPosition])) >= 0) {\n            // the directive has already been patched into the context\n            return -1;\n        }\n        directiveIndex = detectedIndex / 4 /* Size */;\n        // because the directive already existed this means that it was set during elementHostAttrs or\n        // elementStart which means that the binding values were not here. Therefore, the values below\n        // need to be applied so that single class and style properties can be assigned later.\n        /** @type {?} */\n        const singlePropPositionIndex = detectedIndex + 1 /* SinglePropValuesIndexOffset */;\n        directiveRefs[singlePropPositionIndex] = nextOffsetInsertionIndex;\n        // the sanitizer is also apart of the binding process and will be used when bindings are\n        // applied.\n        /** @type {?} */\n        const styleSanitizerIndex = detectedIndex + 3 /* StyleSanitizerOffset */;\n        directiveRefs[styleSanitizerIndex] = styleSanitizer || null;\n    }\n    return directiveIndex;\n}\n/**\n * @param {?} context\n * @param {?} bindingName\n * @param {?} start\n * @param {?} end\n * @return {?}\n */\nfunction getMatchingBindingIndex(context, bindingName, start, end) {\n    for (let j = start; j < end; j += 4 /* Size */) {\n        if (getProp(context, j) === bindingName)\n            return j;\n    }\n    return -1;\n}\n/**\n * Registers the provided multi styling (`[style]` and `[class]`) values to the context.\n *\n * This function will iterate over the provided `classesInput` and `stylesInput` map\n * values and insert/update or remove them from the context at exactly the right\n * spot.\n *\n * This function also takes in a directive which implies that the styling values will\n * be evaluated for that directive with respect to any other styling that already exists\n * on the context. When there are styles that conflict (e.g. say `ngStyle` and `[style]`\n * both update the `width` property at the same time) then the styling algorithm code below\n * will decide which one wins based on the directive styling prioritization mechanism. This\n * mechanism is better explained in render3/interfaces/styling.ts#directives).\n *\n * This function will not render any styling values on screen, but is rather designed to\n * prepare the context for that. `renderStyling` must be called afterwards to render any\n * styling data that was set in this function (note that `updateClassProp` and\n * `updateStyleProp` are designed to be run after this function is run).\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided style values.\n * @param {?} classesInput The key/value map of CSS class names that will be used for the update.\n * @param {?=} stylesInput The key/value map of CSS styles that will be used for the update.\n * @param {?=} directiveRef an optional reference to the directive responsible\n *    for this binding change. If present then style binding will only\n *    actualize if the directive has ownership over this binding\n *    (see styling.ts#directives for more information about the algorithm).\n * @return {?}\n */\nexport function updateStylingMap(context, classesInput, stylesInput, directiveRef) {\n    /** @type {?} */\n    const directiveIndex = getDirectiveIndexFromRegistry(context, directiveRef || null);\n    classesInput = classesInput || null;\n    stylesInput = stylesInput || null;\n    /** @type {?} */\n    const ignoreAllClassUpdates = isMultiValueCacheHit(context, true, directiveIndex, classesInput);\n    /** @type {?} */\n    const ignoreAllStyleUpdates = isMultiValueCacheHit(context, false, directiveIndex, stylesInput);\n    // early exit (this is what's done to avoid using ctx.bind() to cache the value)\n    if (ignoreAllClassUpdates && ignoreAllStyleUpdates)\n        return;\n    classesInput =\n        classesInput === NO_CHANGE ? readCachedMapValue(context, true, directiveIndex) : classesInput;\n    stylesInput =\n        stylesInput === NO_CHANGE ? readCachedMapValue(context, false, directiveIndex) : stylesInput;\n    /** @type {?} */\n    const element = (/** @type {?} */ ((/** @type {?} */ (context[0 /* ElementPosition */]))));\n    /** @type {?} */\n    const classesPlayerBuilder = classesInput instanceof BoundPlayerFactory ?\n        new ClassAndStylePlayerBuilder((/** @type {?} */ (classesInput)), element, 1 /* Class */) :\n        null;\n    /** @type {?} */\n    const stylesPlayerBuilder = stylesInput instanceof BoundPlayerFactory ?\n        new ClassAndStylePlayerBuilder((/** @type {?} */ (stylesInput)), element, 2 /* Style */) :\n        null;\n    /** @type {?} */\n    const classesValue = classesPlayerBuilder ?\n        (/** @type {?} */ (((/** @type {?} */ (classesInput))))).value :\n        classesInput;\n    /** @type {?} */\n    const stylesValue = stylesPlayerBuilder ? (/** @type {?} */ (stylesInput))['value'] : stylesInput;\n    /** @type {?} */\n    let classNames = EMPTY_ARRAY;\n    /** @type {?} */\n    let applyAllClasses = false;\n    /** @type {?} */\n    let playerBuildersAreDirty = false;\n    /** @type {?} */\n    const classesPlayerBuilderIndex = classesPlayerBuilder ? 1 /* ClassMapPlayerBuilderPosition */ : 0;\n    if (hasPlayerBuilderChanged(context, classesPlayerBuilder, 1 /* ClassMapPlayerBuilderPosition */)) {\n        setPlayerBuilder(context, classesPlayerBuilder, 1 /* ClassMapPlayerBuilderPosition */);\n        playerBuildersAreDirty = true;\n    }\n    /** @type {?} */\n    const stylesPlayerBuilderIndex = stylesPlayerBuilder ? 3 /* StyleMapPlayerBuilderPosition */ : 0;\n    if (hasPlayerBuilderChanged(context, stylesPlayerBuilder, 3 /* StyleMapPlayerBuilderPosition */)) {\n        setPlayerBuilder(context, stylesPlayerBuilder, 3 /* StyleMapPlayerBuilderPosition */);\n        playerBuildersAreDirty = true;\n    }\n    // each time a string-based value pops up then it shouldn't require a deep\n    // check of what's changed.\n    if (!ignoreAllClassUpdates) {\n        if (typeof classesValue == 'string') {\n            classNames = classesValue.split(/\\s+/);\n            // this boolean is used to avoid having to create a key/value map of `true` values\n            // since a classname string implies that all those classes are added\n            applyAllClasses = true;\n        }\n        else {\n            classNames = classesValue ? Object.keys(classesValue) : EMPTY_ARRAY;\n        }\n    }\n    /** @type {?} */\n    const multiStylesStartIndex = getMultiStylesStartIndex(context);\n    /** @type {?} */\n    let multiClassesStartIndex = getMultiClassesStartIndex(context);\n    /** @type {?} */\n    let multiClassesEndIndex = context.length;\n    if (!ignoreAllStyleUpdates) {\n        /** @type {?} */\n        const styleProps = stylesValue ? Object.keys(stylesValue) : EMPTY_ARRAY;\n        /** @type {?} */\n        const styles = stylesValue || EMPTY_OBJ;\n        /** @type {?} */\n        const totalNewEntries = patchStylingMapIntoContext(context, directiveIndex, stylesPlayerBuilderIndex, multiStylesStartIndex, multiClassesStartIndex, styleProps, styles, stylesInput, false);\n        if (totalNewEntries) {\n            multiClassesStartIndex += totalNewEntries * 4 /* Size */;\n            multiClassesEndIndex += totalNewEntries * 4 /* Size */;\n        }\n    }\n    if (!ignoreAllClassUpdates) {\n        /** @type {?} */\n        const classes = (/** @type {?} */ ((classesValue || EMPTY_OBJ)));\n        patchStylingMapIntoContext(context, directiveIndex, classesPlayerBuilderIndex, multiClassesStartIndex, multiClassesEndIndex, classNames, applyAllClasses || classes, classesInput, true);\n    }\n    if (playerBuildersAreDirty) {\n        setContextPlayersDirty(context, true);\n    }\n}\n/**\n * Applies the given multi styling (styles or classes) values to the context.\n *\n * The styling algorithm code that applies multi-level styling (things like `[style]` and `[class]`\n * values) resides here.\n *\n * Because this function understands that multiple directives may all write to the `[style]` and\n * `[class]` bindings (through host bindings), it relies of each directive applying its binding\n * value in order. This means that a directive like `classADirective` will always fire before\n * `classBDirective` and therefore its styling values (classes and styles) will always be evaluated\n * in the same order. Because of this consistent ordering, the first directive has a higher priority\n * than the second one. It is with this prioritzation mechanism that the styling algorithm knows how\n * to merge and apply redudant styling properties.\n *\n * The function itself applies the key/value entries (or an array of keys) to\n * the context in the following steps.\n *\n * STEP 1:\n *    First check to see what properties are already set and in use by another directive in the\n *    context (e.g. `ngClass` set the `width` value and `[style.width]=\"w\"` in a directive is\n *    attempting to set it as well).\n *\n * STEP 2:\n *    All remaining properties (that were not set prior to this directive) are now updated in\n *    the context. Any new properties are inserted exactly at their spot in the context and any\n *    previously set properties are shifted to exactly where the cursor sits while iterating over\n *    the context. The end result is a balanced context that includes the exact ordering of the\n *    styling properties/values for the provided input from the directive.\n *\n * STEP 3:\n *    Any unmatched properties in the context that belong to the directive are set to null\n *\n * Once the updating phase is done, then the algorithm will decide whether or not to flag the\n * follow-up directives (the directives that will pass in their styling values) depending on if\n * the \"shape\" of the multi-value map has changed (either if any keys are removed or added or\n * if there are any new `null` values). If any follow-up directives are flagged as dirty then the\n * algorithm will run again for them. Otherwise if the shape did not change then any follow-up\n * directives will not run (so long as their binding values stay the same).\n *\n * @param {?} context\n * @param {?} directiveIndex\n * @param {?} playerBuilderIndex\n * @param {?} ctxStart\n * @param {?} ctxEnd\n * @param {?} props\n * @param {?} values\n * @param {?} cacheValue\n * @param {?} entryIsClassBased\n * @return {?} the total amount of new slots that were allocated into the context due to new styling\n *          properties that were detected.\n */\nfunction patchStylingMapIntoContext(context, directiveIndex, playerBuilderIndex, ctxStart, ctxEnd, props, values, cacheValue, entryIsClassBased) {\n    /** @type {?} */\n    let dirty = false;\n    /** @type {?} */\n    const cacheIndex = 1 /* ValuesStartPosition */ +\n        directiveIndex * 4 /* Size */;\n    // the cachedValues array is the registry of all multi style values (map values). Each\n    // value is stored (cached) each time is updated.\n    /** @type {?} */\n    const cachedValues = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n    // this is the index in which this directive has ownership access to write to this\n    // value (anything before is owned by a previous directive that is more important)\n    /** @type {?} */\n    const ownershipValuesStartIndex = cachedValues[cacheIndex + 1 /* PositionStartOffset */];\n    /** @type {?} */\n    const existingCachedValue = cachedValues[cacheIndex + 2 /* ValueOffset */];\n    /** @type {?} */\n    const existingCachedValueCount = cachedValues[cacheIndex + 3 /* ValueCountOffset */];\n    /** @type {?} */\n    const existingCachedValueIsDirty = cachedValues[cacheIndex + 0 /* DirtyFlagOffset */] === 1;\n    // A shape change means the provided map value has either removed or added new properties\n    // compared to what were in the last time. If a shape change occurs then it means that all\n    // follow-up multi-styling entries are obsolete and will be examined again when CD runs\n    // them. If a shape change has not occurred then there is no reason to check any other\n    // directive values if their identity has not changed. If a previous directive set this\n    // value as dirty (because its own shape changed) then this means that the object has been\n    // offset to a different area in the context. Because its value has been offset then it\n    // can't write to a region that it wrote to before (which may have been apart of another\n    // directive) and therefore its shape changes too.\n    /** @type {?} */\n    let valuesEntryShapeChange = existingCachedValueIsDirty || ((!existingCachedValue && cacheValue) ? true : false);\n    /** @type {?} */\n    let totalUniqueValues = 0;\n    /** @type {?} */\n    let totalNewAllocatedSlots = 0;\n    // this is a trick to avoid building {key:value} map where all the values\n    // are `true` (this happens when a className string is provided instead of a\n    // map as an input value to this styling algorithm)\n    /** @type {?} */\n    const applyAllProps = values === true;\n    // STEP 1:\n    // loop through the earlier directives and figure out if any properties here will be placed\n    // in their area (this happens when the value is null because the earlier directive erased it).\n    /** @type {?} */\n    let ctxIndex = ctxStart;\n    /** @type {?} */\n    let totalRemainingProperties = props.length;\n    while (ctxIndex < ownershipValuesStartIndex) {\n        /** @type {?} */\n        const currentProp = getProp(context, ctxIndex);\n        if (totalRemainingProperties) {\n            for (let i = 0; i < props.length; i++) {\n                /** @type {?} */\n                const mapProp = props[i];\n                /** @type {?} */\n                const normalizedProp = mapProp ? (entryIsClassBased ? mapProp : hyphenate(mapProp)) : null;\n                if (normalizedProp && currentProp === normalizedProp) {\n                    /** @type {?} */\n                    const currentValue = getValue(context, ctxIndex);\n                    /** @type {?} */\n                    const currentDirectiveIndex = getDirectiveIndexFromEntry(context, ctxIndex);\n                    /** @type {?} */\n                    const value = applyAllProps ? true : ((/** @type {?} */ (values)))[normalizedProp];\n                    /** @type {?} */\n                    const currentFlag = getPointers(context, ctxIndex);\n                    if (hasValueChanged(currentFlag, currentValue, value) &&\n                        allowValueChange(currentValue, value, currentDirectiveIndex, directiveIndex)) {\n                        setValue(context, ctxIndex, value);\n                        setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n                        if (hasInitialValueChanged(context, currentFlag, value)) {\n                            setDirty(context, ctxIndex, true);\n                            dirty = true;\n                        }\n                    }\n                    props[i] = null;\n                    totalRemainingProperties--;\n                    break;\n                }\n            }\n        }\n        ctxIndex += 4 /* Size */;\n    }\n    // STEP 2:\n    // apply the left over properties to the context in the correct order.\n    if (totalRemainingProperties) {\n        /** @type {?} */\n        const sanitizer = entryIsClassBased ? null : getStyleSanitizer(context, directiveIndex);\n        propertiesLoop: for (let i = 0; i < props.length; i++) {\n            /** @type {?} */\n            const mapProp = props[i];\n            if (!mapProp) {\n                // this is an early exit incase a value was already encountered above in the\n                // previous loop (which means that the property was applied or rejected)\n                continue;\n            }\n            /** @type {?} */\n            const value = applyAllProps ? true : ((/** @type {?} */ (values)))[mapProp];\n            /** @type {?} */\n            const normalizedProp = entryIsClassBased ? mapProp : hyphenate(mapProp);\n            /** @type {?} */\n            const isInsideOwnershipArea = ctxIndex >= ownershipValuesStartIndex;\n            for (let j = ctxIndex; j < ctxEnd; j += 4 /* Size */) {\n                /** @type {?} */\n                const distantCtxProp = getProp(context, j);\n                if (distantCtxProp === normalizedProp) {\n                    /** @type {?} */\n                    const distantCtxDirectiveIndex = getDirectiveIndexFromEntry(context, j);\n                    /** @type {?} */\n                    const distantCtxPlayerBuilderIndex = getPlayerBuilderIndex(context, j);\n                    /** @type {?} */\n                    const distantCtxValue = getValue(context, j);\n                    /** @type {?} */\n                    const distantCtxFlag = getPointers(context, j);\n                    if (allowValueChange(distantCtxValue, value, distantCtxDirectiveIndex, directiveIndex)) {\n                        // even if the entry isn't updated (by value or directiveIndex) then\n                        // it should still be moved over to the correct spot in the array so\n                        // the iteration loop is tighter.\n                        if (isInsideOwnershipArea) {\n                            swapMultiContextEntries(context, ctxIndex, j);\n                            totalUniqueValues++;\n                        }\n                        if (hasValueChanged(distantCtxFlag, distantCtxValue, value)) {\n                            if (value === null || value === undefined && value !== distantCtxValue) {\n                                valuesEntryShapeChange = true;\n                            }\n                            setValue(context, ctxIndex, value);\n                            // SKIP IF INITIAL CHECK\n                            // If the former `value` is `null` then it means that an initial value\n                            // could be being rendered on screen. If that is the case then there is\n                            // no point in updating the value incase it matches. In other words if the\n                            // new value is the exact same as the previously rendered value (which\n                            // happens to be the initial value) then do nothing.\n                            if (distantCtxValue !== null ||\n                                hasInitialValueChanged(context, distantCtxFlag, value)) {\n                                setDirty(context, ctxIndex, true);\n                                dirty = true;\n                            }\n                        }\n                        if (distantCtxDirectiveIndex !== directiveIndex ||\n                            playerBuilderIndex !== distantCtxPlayerBuilderIndex) {\n                            setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n                        }\n                    }\n                    ctxIndex += 4 /* Size */;\n                    continue propertiesLoop;\n                }\n            }\n            // fallback case ... value not found at all in the context\n            if (value != null) {\n                valuesEntryShapeChange = true;\n                totalUniqueValues++;\n                /** @type {?} */\n                const flag = prepareInitialFlag(context, normalizedProp, entryIsClassBased, sanitizer) |\n                    1 /* Dirty */;\n                /** @type {?} */\n                const insertionIndex = isInsideOwnershipArea ?\n                    ctxIndex :\n                    (ownershipValuesStartIndex + totalNewAllocatedSlots * 4 /* Size */);\n                insertNewMultiProperty(context, insertionIndex, entryIsClassBased, normalizedProp, flag, value, directiveIndex, playerBuilderIndex);\n                totalNewAllocatedSlots++;\n                ctxEnd += 4 /* Size */;\n                ctxIndex += 4 /* Size */;\n                dirty = true;\n            }\n        }\n    }\n    // STEP 3:\n    // Remove (nullify) any existing entries in the context that were not apart of the\n    // map input value that was passed into this algorithm for this directive.\n    while (ctxIndex < ctxEnd) {\n        valuesEntryShapeChange = true; // some values are missing\n        // some values are missing\n        /** @type {?} */\n        const ctxValue = getValue(context, ctxIndex);\n        /** @type {?} */\n        const ctxFlag = getPointers(context, ctxIndex);\n        /** @type {?} */\n        const ctxDirective = getDirectiveIndexFromEntry(context, ctxIndex);\n        if (ctxValue != null) {\n            valuesEntryShapeChange = true;\n        }\n        if (hasValueChanged(ctxFlag, ctxValue, null)) {\n            setValue(context, ctxIndex, null);\n            // only if the initial value is falsy then\n            if (hasInitialValueChanged(context, ctxFlag, ctxValue)) {\n                setDirty(context, ctxIndex, true);\n                dirty = true;\n            }\n            setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n        }\n        ctxIndex += 4 /* Size */;\n    }\n    // Because the object shape has changed, this means that all follow-up directives will need to\n    // reapply their values into the object. For this to happen, the cached array needs to be updated\n    // with dirty flags so that follow-up calls to `updateStylingMap` will reapply their styling code.\n    // the reapplication of styling code within the context will reshape it and update the offset\n    // values (also follow-up directives can write new values incase earlier directives set anything\n    // to null due to removals or falsy values).\n    valuesEntryShapeChange = valuesEntryShapeChange || existingCachedValueCount !== totalUniqueValues;\n    updateCachedMapValue(context, directiveIndex, entryIsClassBased, cacheValue, ownershipValuesStartIndex, ctxEnd, totalUniqueValues, valuesEntryShapeChange);\n    if (dirty) {\n        setContextDirty(context, true);\n        setDirectiveDirty(context, directiveIndex, true);\n    }\n    return totalNewAllocatedSlots;\n}\n/**\n * Sets and resolves a single class value on the provided `StylingContext` so\n * that they can be applied to the element once `renderStyling` is called.\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided class value.\n * @param {?} offset The index of the CSS class which is being updated.\n * @param {?} input\n * @param {?=} directiveRef an optional reference to the directive responsible\n *    for this binding change. If present then style binding will only\n *    actualize if the directive has ownership over this binding\n *    (see styling.ts#directives for more information about the algorithm).\n * @param {?=} forceOverride whether or not to skip all directive prioritization\n *    and just apply the value regardless.\n * @return {?}\n */\nexport function updateClassProp(context, offset, input, directiveRef, forceOverride) {\n    updateSingleStylingValue(context, offset, input, true, directiveRef, forceOverride);\n}\n/**\n * Sets and resolves a single style value on the provided `StylingContext` so\n * that they can be applied to the element once `renderStyling` is called.\n *\n * Note that prop-level styling values are considered higher priority than any styling that\n * has been applied using `updateStylingMap`, therefore, when styling values are rendered\n * then any styles/classes that have been applied using this function will be considered first\n * (then multi values second and then initial values as a backup).\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided style value.\n * @param {?} offset The index of the property which is being updated.\n * @param {?} input\n * @param {?=} directiveRef an optional reference to the directive responsible\n *    for this binding change. If present then style binding will only\n *    actualize if the directive has ownership over this binding\n *    (see styling.ts#directives for more information about the algorithm).\n * @param {?=} forceOverride whether or not to skip all directive prioritization\n *    and just apply the value regardless.\n * @return {?}\n */\nexport function updateStyleProp(context, offset, input, directiveRef, forceOverride) {\n    updateSingleStylingValue(context, offset, input, false, directiveRef, forceOverride);\n}\n/**\n * @param {?} context\n * @param {?} offset\n * @param {?} input\n * @param {?} isClassBased\n * @param {?} directiveRef\n * @param {?=} forceOverride\n * @return {?}\n */\nfunction updateSingleStylingValue(context, offset, input, isClassBased, directiveRef, forceOverride) {\n    /** @type {?} */\n    const directiveIndex = getDirectiveIndexFromRegistry(context, directiveRef || null);\n    /** @type {?} */\n    const singleIndex = getSinglePropIndexValue(context, directiveIndex, offset, isClassBased);\n    /** @type {?} */\n    const currValue = getValue(context, singleIndex);\n    /** @type {?} */\n    const currFlag = getPointers(context, singleIndex);\n    /** @type {?} */\n    const currDirective = getDirectiveIndexFromEntry(context, singleIndex);\n    /** @type {?} */\n    const value = (input instanceof BoundPlayerFactory) ? input.value : input;\n    if (hasValueChanged(currFlag, currValue, value) &&\n        (forceOverride || allowValueChange(currValue, value, currDirective, directiveIndex))) {\n        /** @type {?} */\n        const isClassBased = (currFlag & 2 /* Class */) === 2 /* Class */;\n        /** @type {?} */\n        const element = (/** @type {?} */ ((/** @type {?} */ (context[0 /* ElementPosition */]))));\n        /** @type {?} */\n        const playerBuilder = input instanceof BoundPlayerFactory ?\n            new ClassAndStylePlayerBuilder((/** @type {?} */ (input)), element, isClassBased ? 1 /* Class */ : 2 /* Style */) :\n            null;\n        /** @type {?} */\n        const value = (/** @type {?} */ ((playerBuilder ? ((/** @type {?} */ (input))).value : input)));\n        /** @type {?} */\n        const currPlayerIndex = getPlayerBuilderIndex(context, singleIndex);\n        /** @type {?} */\n        let playerBuildersAreDirty = false;\n        /** @type {?} */\n        let playerBuilderIndex = playerBuilder ? currPlayerIndex : 0;\n        if (hasPlayerBuilderChanged(context, playerBuilder, currPlayerIndex)) {\n            /** @type {?} */\n            const newIndex = setPlayerBuilder(context, playerBuilder, currPlayerIndex);\n            playerBuilderIndex = playerBuilder ? newIndex : 0;\n            playerBuildersAreDirty = true;\n        }\n        if (playerBuildersAreDirty || currDirective !== directiveIndex) {\n            setPlayerBuilderIndex(context, singleIndex, playerBuilderIndex, directiveIndex);\n        }\n        if (currDirective !== directiveIndex) {\n            /** @type {?} */\n            const prop = getProp(context, singleIndex);\n            /** @type {?} */\n            const sanitizer = getStyleSanitizer(context, directiveIndex);\n            setSanitizeFlag(context, singleIndex, (sanitizer && sanitizer(prop)) ? true : false);\n        }\n        // the value will always get updated (even if the dirty flag is skipped)\n        setValue(context, singleIndex, value);\n        /** @type {?} */\n        const indexForMulti = getMultiOrSingleIndex(currFlag);\n        // if the value is the same in the multi-area then there's no point in re-assembling\n        /** @type {?} */\n        const valueForMulti = getValue(context, indexForMulti);\n        if (!valueForMulti || hasValueChanged(currFlag, valueForMulti, value)) {\n            /** @type {?} */\n            let multiDirty = false;\n            /** @type {?} */\n            let singleDirty = true;\n            // only when the value is set to `null` should the multi-value get flagged\n            if (!valueExists(value, isClassBased) && valueExists(valueForMulti, isClassBased)) {\n                multiDirty = true;\n                singleDirty = false;\n            }\n            setDirty(context, indexForMulti, multiDirty);\n            setDirty(context, singleIndex, singleDirty);\n            setDirectiveDirty(context, directiveIndex, true);\n            setContextDirty(context, true);\n        }\n        if (playerBuildersAreDirty) {\n            setContextPlayersDirty(context, true);\n        }\n    }\n}\n/**\n * Renders all queued styling using a renderer onto the given element.\n *\n * This function works by rendering any styles (that have been applied\n * using `updateStylingMap`) and any classes (that have been applied using\n * `updateStyleProp`) onto the provided element using the provided renderer.\n * Just before the styles/classes are rendered a final key/value style map\n * will be assembled (if `styleStore` or `classStore` are provided).\n *\n * @param {?} context The styling context that will be used to determine\n *      what styles will be rendered\n * @param {?} renderer the renderer that will be used to apply the styling\n * @param {?} rootOrView\n * @param {?} isFirstRender\n * @param {?=} classesStore if provided, the updated class values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @param {?=} stylesStore if provided, the updated style values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @param {?=} directiveRef an optional directive that will be used to target which\n *    styling values are rendered. If left empty, only the bindings that are\n *    registered on the template will be rendered.\n * @return {?} number the total amount of players that got queued for animation (if any)\n */\nexport function renderStyling(context, renderer, rootOrView, isFirstRender, classesStore, stylesStore, directiveRef) {\n    /** @type {?} */\n    let totalPlayersQueued = 0;\n    /** @type {?} */\n    const targetDirectiveIndex = getDirectiveIndexFromRegistry(context, directiveRef || null);\n    if (isContextDirty(context) && isDirectiveDirty(context, targetDirectiveIndex)) {\n        /** @type {?} */\n        const flushPlayerBuilders = context[1 /* MasterFlagPosition */] & 8 /* PlayerBuildersDirty */;\n        /** @type {?} */\n        const native = (/** @type {?} */ (context[0 /* ElementPosition */]));\n        /** @type {?} */\n        const multiStartIndex = getMultiStylesStartIndex(context);\n        /** @type {?} */\n        let stillDirty = false;\n        for (let i = 9 /* SingleStylesStartPosition */; i < context.length; i += 4 /* Size */) {\n            // there is no point in rendering styles that have not changed on screen\n            if (isDirty(context, i)) {\n                /** @type {?} */\n                const flag = getPointers(context, i);\n                /** @type {?} */\n                const directiveIndex = getDirectiveIndexFromEntry(context, i);\n                if (targetDirectiveIndex !== directiveIndex) {\n                    stillDirty = true;\n                    continue;\n                }\n                /** @type {?} */\n                const prop = getProp(context, i);\n                /** @type {?} */\n                const value = getValue(context, i);\n                /** @type {?} */\n                const styleSanitizer = (flag & 4 /* Sanitize */) ? getStyleSanitizer(context, directiveIndex) : null;\n                /** @type {?} */\n                const playerBuilder = getPlayerBuilder(context, i);\n                /** @type {?} */\n                const isClassBased = flag & 2 /* Class */ ? true : false;\n                /** @type {?} */\n                const isInSingleRegion = i < multiStartIndex;\n                /** @type {?} */\n                let valueToApply = value;\n                // VALUE DEFER CASE 1: Use a multi value instead of a null single value\n                // this check implies that a single value was removed and we\n                // should now defer to a multi value and use that (if set).\n                if (isInSingleRegion && !valueExists(valueToApply, isClassBased)) {\n                    // single values ALWAYS have a reference to a multi index\n                    /** @type {?} */\n                    const multiIndex = getMultiOrSingleIndex(flag);\n                    valueToApply = getValue(context, multiIndex);\n                }\n                // VALUE DEFER CASE 2: Use the initial value if all else fails (is falsy)\n                // the initial value will always be a string or null,\n                // therefore we can safely adopt it incase there's nothing else\n                // note that this should always be a falsy check since `false` is used\n                // for both class and style comparisons (styles can't be false and false\n                // classes are turned off and should therefore defer to their initial values)\n                // Note that we ignore class-based deferals because otherwise a class can never\n                // be removed in the case that it exists as true in the initial classes list...\n                if (!valueExists(valueToApply, isClassBased)) {\n                    valueToApply = getInitialValue(context, flag);\n                }\n                // if the first render is true then we do not want to start applying falsy\n                // values to the DOM element's styling. Otherwise then we know there has\n                // been a change and even if it's falsy then it's removing something that\n                // was truthy before.\n                /** @type {?} */\n                const doApplyValue = isFirstRender ? valueToApply : true;\n                if (doApplyValue) {\n                    if (isClassBased) {\n                        setClass(native, prop, valueToApply ? true : false, renderer, classesStore, playerBuilder);\n                    }\n                    else {\n                        setStyle(native, prop, (/** @type {?} */ (valueToApply)), renderer, styleSanitizer, stylesStore, playerBuilder);\n                    }\n                }\n                setDirty(context, i, false);\n            }\n        }\n        if (flushPlayerBuilders) {\n            /** @type {?} */\n            const rootContext = Array.isArray(rootOrView) ? getRootContext(rootOrView) : (/** @type {?} */ (rootOrView));\n            /** @type {?} */\n            const playerContext = (/** @type {?} */ (getPlayerContext(context)));\n            /** @type {?} */\n            const playersStartIndex = playerContext[0 /* NonBuilderPlayersStart */];\n            for (let i = 1 /* PlayerBuildersStartPosition */; i < playersStartIndex; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n                /** @type {?} */\n                const builder = (/** @type {?} */ (playerContext[i]));\n                /** @type {?} */\n                const playerInsertionIndex = i + 1 /* PlayerOffsetPosition */;\n                /** @type {?} */\n                const oldPlayer = (/** @type {?} */ (playerContext[playerInsertionIndex]));\n                if (builder) {\n                    /** @type {?} */\n                    const player = builder.buildPlayer(oldPlayer, isFirstRender);\n                    if (player !== undefined) {\n                        if (player != null) {\n                            /** @type {?} */\n                            const wasQueued = addPlayerInternal(playerContext, rootContext, (/** @type {?} */ (native)), player, playerInsertionIndex);\n                            wasQueued && totalPlayersQueued++;\n                        }\n                        if (oldPlayer) {\n                            oldPlayer.destroy();\n                        }\n                    }\n                }\n                else if (oldPlayer) {\n                    // the player builder has been removed ... therefore we should delete the associated\n                    // player\n                    oldPlayer.destroy();\n                }\n            }\n            setContextPlayersDirty(context, false);\n        }\n        setDirectiveDirty(context, targetDirectiveIndex, false);\n        setContextDirty(context, stillDirty);\n    }\n    return totalPlayersQueued;\n}\n/**\n * Assigns a style value to a style property for the given element.\n *\n * This function renders a given CSS prop/value entry using the\n * provided renderer. If a `store` value is provided then\n * that will be used a render context instead of the provided\n * renderer.\n *\n * @param {?} native the DOM Element\n * @param {?} prop the CSS style property that will be rendered\n * @param {?} value the CSS style value that will be rendered\n * @param {?} renderer\n * @param {?} sanitizer\n * @param {?=} store an optional key/value map that will be used as a context to render styles on\n * @param {?=} playerBuilder\n * @return {?}\n */\nexport function setStyle(native, prop, value, renderer, sanitizer, store, playerBuilder) {\n    value = sanitizer && value ? sanitizer(prop, value) : value;\n    if (store || playerBuilder) {\n        if (store) {\n            store.setValue(prop, value);\n        }\n        if (playerBuilder) {\n            playerBuilder.setValue(prop, value);\n        }\n    }\n    else if (value) {\n        value = value.toString(); // opacity, z-index and flexbox all have number values which may not\n        // assign as numbers\n        ngDevMode && ngDevMode.rendererSetStyle++;\n        isProceduralRenderer(renderer) ?\n            renderer.setStyle(native, prop, value, RendererStyleFlags3.DashCase) :\n            native.style.setProperty(prop, value);\n    }\n    else {\n        ngDevMode && ngDevMode.rendererRemoveStyle++;\n        isProceduralRenderer(renderer) ?\n            renderer.removeStyle(native, prop, RendererStyleFlags3.DashCase) :\n            native.style.removeProperty(prop);\n    }\n}\n/**\n * Adds/removes the provided className value to the provided element.\n *\n * This function renders a given CSS class value using the provided\n * renderer (by adding or removing it from the provided element).\n * If a `store` value is provided then that will be used a render\n * context instead of the provided renderer.\n *\n * @param {?} native the DOM Element\n * @param {?} className\n * @param {?} add\n * @param {?} renderer\n * @param {?=} store an optional key/value map that will be used as a context to render styles on\n * @param {?=} playerBuilder\n * @return {?}\n */\nfunction setClass(native, className, add, renderer, store, playerBuilder) {\n    if (store || playerBuilder) {\n        if (store) {\n            store.setValue(className, add);\n        }\n        if (playerBuilder) {\n            playerBuilder.setValue(className, add);\n        }\n        // DOMTokenList will throw if we try to add or remove an empty string.\n    }\n    else if (className !== '') {\n        if (add) {\n            ngDevMode && ngDevMode.rendererAddClass++;\n            isProceduralRenderer(renderer) ? renderer.addClass(native, className) :\n                native['classList'].add(className);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererRemoveClass++;\n            isProceduralRenderer(renderer) ? renderer.removeClass(native, className) :\n                native['classList'].remove(className);\n        }\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} sanitizeYes\n * @return {?}\n */\nfunction setSanitizeFlag(context, index, sanitizeYes) {\n    if (sanitizeYes) {\n        ((/** @type {?} */ (context[index]))) |= 4 /* Sanitize */;\n    }\n    else {\n        ((/** @type {?} */ (context[index]))) &= ~4 /* Sanitize */;\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} isDirtyYes\n * @return {?}\n */\nfunction setDirty(context, index, isDirtyYes) {\n    /** @type {?} */\n    const adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    if (isDirtyYes) {\n        ((/** @type {?} */ (context[adjustedIndex]))) |= 1 /* Dirty */;\n    }\n    else {\n        ((/** @type {?} */ (context[adjustedIndex]))) &= ~1 /* Dirty */;\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isDirty(context, index) {\n    /** @type {?} */\n    const adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return (((/** @type {?} */ (context[adjustedIndex]))) & 1 /* Dirty */) == 1 /* Dirty */;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nexport function isClassBasedValue(context, index) {\n    /** @type {?} */\n    const adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return (((/** @type {?} */ (context[adjustedIndex]))) & 2 /* Class */) == 2 /* Class */;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isSanitizable(context, index) {\n    /** @type {?} */\n    const adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return (((/** @type {?} */ (context[adjustedIndex]))) & 4 /* Sanitize */) == 4 /* Sanitize */;\n}\n/**\n * @param {?} configFlag\n * @param {?} staticIndex\n * @param {?} dynamicIndex\n * @return {?}\n */\nfunction pointers(configFlag, staticIndex, dynamicIndex) {\n    return (configFlag & 31 /* BitMask */) | (staticIndex << 5 /* BitCountSize */) |\n        (dynamicIndex << (14 /* BitCountSize */ + 5 /* BitCountSize */));\n}\n/**\n * @param {?} context\n * @param {?} flag\n * @return {?}\n */\nfunction getInitialValue(context, flag) {\n    /** @type {?} */\n    const index = getInitialIndex(flag);\n    /** @type {?} */\n    const entryIsClassBased = flag & 2 /* Class */;\n    /** @type {?} */\n    const initialValues = entryIsClassBased ? context[4 /* InitialClassValuesPosition */] :\n        context[3 /* InitialStyleValuesPosition */];\n    return (/** @type {?} */ (initialValues[index]));\n}\n/**\n * @param {?} flag\n * @return {?}\n */\nfunction getInitialIndex(flag) {\n    return (flag >> 5 /* BitCountSize */) & 16383 /* BitMask */;\n}\n/**\n * @param {?} flag\n * @return {?}\n */\nfunction getMultiOrSingleIndex(flag) {\n    /** @type {?} */\n    const index = (flag >> (14 /* BitCountSize */ + 5 /* BitCountSize */)) & 16383 /* BitMask */;\n    return index >= 9 /* SingleStylesStartPosition */ ? index : -1;\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction getMultiStartIndex(context) {\n    return (/** @type {?} */ (getMultiOrSingleIndex(context[1 /* MasterFlagPosition */])));\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction getMultiClassesStartIndex(context) {\n    /** @type {?} */\n    const classCache = context[6 /* CachedMultiClasses */];\n    return classCache[1 /* ValuesStartPosition */ +\n        1 /* PositionStartOffset */];\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction getMultiStylesStartIndex(context) {\n    /** @type {?} */\n    const stylesCache = context[7 /* CachedMultiStyles */];\n    return stylesCache[1 /* ValuesStartPosition */ +\n        1 /* PositionStartOffset */];\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} prop\n * @return {?}\n */\nfunction setProp(context, index, prop) {\n    context[index + 1 /* PropertyOffset */] = prop;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction setValue(context, index, value) {\n    context[index + 2 /* ValueOffset */] = value;\n}\n/**\n * @param {?} context\n * @param {?} builder\n * @param {?} index\n * @return {?}\n */\nfunction hasPlayerBuilderChanged(context, builder, index) {\n    /** @type {?} */\n    const playerContext = (/** @type {?} */ (context[8 /* PlayerContext */]));\n    if (builder) {\n        if (!playerContext || index === 0) {\n            return true;\n        }\n    }\n    else if (!playerContext) {\n        return false;\n    }\n    return playerContext[index] !== builder;\n}\n/**\n * @param {?} context\n * @param {?} builder\n * @param {?} insertionIndex\n * @return {?}\n */\nfunction setPlayerBuilder(context, builder, insertionIndex) {\n    /** @type {?} */\n    let playerContext = context[8 /* PlayerContext */] || allocPlayerContext(context);\n    if (insertionIndex > 0) {\n        playerContext[insertionIndex] = builder;\n    }\n    else {\n        insertionIndex = playerContext[0 /* NonBuilderPlayersStart */];\n        playerContext.splice(insertionIndex, 0, builder, null);\n        playerContext[0 /* NonBuilderPlayersStart */] +=\n            2 /* PlayerAndPlayerBuildersTupleSize */;\n    }\n    return insertionIndex;\n}\n/**\n * @param {?} directiveIndex\n * @param {?} playerIndex\n * @return {?}\n */\nexport function directiveOwnerPointers(directiveIndex, playerIndex) {\n    return (playerIndex << 16 /* BitCountSize */) | directiveIndex;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} playerBuilderIndex\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction setPlayerBuilderIndex(context, index, playerBuilderIndex, directiveIndex) {\n    /** @type {?} */\n    const value = directiveOwnerPointers(directiveIndex, playerBuilderIndex);\n    context[index + 3 /* PlayerBuilderIndexOffset */] = value;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPlayerBuilderIndex(context, index) {\n    /** @type {?} */\n    const flag = (/** @type {?} */ (context[index + 3 /* PlayerBuilderIndexOffset */]));\n    /** @type {?} */\n    const playerBuilderIndex = (flag >> 16 /* BitCountSize */) &\n        65535 /* BitMask */;\n    return playerBuilderIndex;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPlayerBuilder(context, index) {\n    /** @type {?} */\n    const playerBuilderIndex = getPlayerBuilderIndex(context, index);\n    if (playerBuilderIndex) {\n        /** @type {?} */\n        const playerContext = context[8 /* PlayerContext */];\n        if (playerContext) {\n            return (/** @type {?} */ (playerContext[playerBuilderIndex]));\n        }\n    }\n    return null;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} flag\n * @return {?}\n */\nfunction setFlag(context, index, flag) {\n    /** @type {?} */\n    const adjustedIndex = index === 1 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n    context[adjustedIndex] = flag;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPointers(context, index) {\n    /** @type {?} */\n    const adjustedIndex = index === 1 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n    return (/** @type {?} */ (context[adjustedIndex]));\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nexport function getValue(context, index) {\n    return (/** @type {?} */ (context[index + 2 /* ValueOffset */]));\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nexport function getProp(context, index) {\n    return (/** @type {?} */ (context[index + 1 /* PropertyOffset */]));\n}\n/**\n * @param {?} context\n * @return {?}\n */\nexport function isContextDirty(context) {\n    return isDirty(context, 1 /* MasterFlagPosition */);\n}\n/**\n * @param {?} context\n * @param {?} isDirtyYes\n * @return {?}\n */\nexport function setContextDirty(context, isDirtyYes) {\n    setDirty(context, 1 /* MasterFlagPosition */, isDirtyYes);\n}\n/**\n * @param {?} context\n * @param {?} isDirtyYes\n * @return {?}\n */\nexport function setContextPlayersDirty(context, isDirtyYes) {\n    if (isDirtyYes) {\n        ((/** @type {?} */ (context[1 /* MasterFlagPosition */]))) |= 8 /* PlayerBuildersDirty */;\n    }\n    else {\n        ((/** @type {?} */ (context[1 /* MasterFlagPosition */]))) &= ~8 /* PlayerBuildersDirty */;\n    }\n}\n/**\n * @param {?} context\n * @param {?} indexA\n * @param {?} indexB\n * @return {?}\n */\nfunction swapMultiContextEntries(context, indexA, indexB) {\n    if (indexA === indexB)\n        return;\n    /** @type {?} */\n    const tmpValue = getValue(context, indexA);\n    /** @type {?} */\n    const tmpProp = getProp(context, indexA);\n    /** @type {?} */\n    const tmpFlag = getPointers(context, indexA);\n    /** @type {?} */\n    const tmpPlayerBuilderIndex = getPlayerBuilderIndex(context, indexA);\n    /** @type {?} */\n    const tmpDirectiveIndex = getDirectiveIndexFromEntry(context, indexA);\n    /** @type {?} */\n    let flagA = tmpFlag;\n    /** @type {?} */\n    let flagB = getPointers(context, indexB);\n    /** @type {?} */\n    const singleIndexA = getMultiOrSingleIndex(flagA);\n    if (singleIndexA >= 0) {\n        /** @type {?} */\n        const _flag = getPointers(context, singleIndexA);\n        /** @type {?} */\n        const _initial = getInitialIndex(_flag);\n        setFlag(context, singleIndexA, pointers(_flag, _initial, indexB));\n    }\n    /** @type {?} */\n    const singleIndexB = getMultiOrSingleIndex(flagB);\n    if (singleIndexB >= 0) {\n        /** @type {?} */\n        const _flag = getPointers(context, singleIndexB);\n        /** @type {?} */\n        const _initial = getInitialIndex(_flag);\n        setFlag(context, singleIndexB, pointers(_flag, _initial, indexA));\n    }\n    setValue(context, indexA, getValue(context, indexB));\n    setProp(context, indexA, getProp(context, indexB));\n    setFlag(context, indexA, getPointers(context, indexB));\n    /** @type {?} */\n    const playerIndexA = getPlayerBuilderIndex(context, indexB);\n    /** @type {?} */\n    const directiveIndexA = getDirectiveIndexFromEntry(context, indexB);\n    setPlayerBuilderIndex(context, indexA, playerIndexA, directiveIndexA);\n    setValue(context, indexB, tmpValue);\n    setProp(context, indexB, tmpProp);\n    setFlag(context, indexB, tmpFlag);\n    setPlayerBuilderIndex(context, indexB, tmpPlayerBuilderIndex, tmpDirectiveIndex);\n}\n/**\n * @param {?} context\n * @param {?} indexStartPosition\n * @return {?}\n */\nfunction updateSinglePointerValues(context, indexStartPosition) {\n    for (let i = indexStartPosition; i < context.length; i += 4 /* Size */) {\n        /** @type {?} */\n        const multiFlag = getPointers(context, i);\n        /** @type {?} */\n        const singleIndex = getMultiOrSingleIndex(multiFlag);\n        if (singleIndex > 0) {\n            /** @type {?} */\n            const singleFlag = getPointers(context, singleIndex);\n            /** @type {?} */\n            const initialIndexForSingle = getInitialIndex(singleFlag);\n            /** @type {?} */\n            const flagValue = (isDirty(context, singleIndex) ? 1 /* Dirty */ : 0 /* None */) |\n                (isClassBasedValue(context, singleIndex) ? 2 /* Class */ : 0 /* None */) |\n                (isSanitizable(context, singleIndex) ? 4 /* Sanitize */ : 0 /* None */);\n            /** @type {?} */\n            const updatedFlag = pointers(flagValue, initialIndexForSingle, i);\n            setFlag(context, singleIndex, updatedFlag);\n        }\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} classBased\n * @param {?} name\n * @param {?} flag\n * @param {?} value\n * @param {?} directiveIndex\n * @param {?} playerIndex\n * @return {?}\n */\nfunction insertNewMultiProperty(context, index, classBased, name, flag, value, directiveIndex, playerIndex) {\n    /** @type {?} */\n    const doShift = index < context.length;\n    // prop does not exist in the list, add it in\n    context.splice(index, 0, flag | 1 /* Dirty */ | (classBased ? 2 /* Class */ : 0 /* None */), name, value, 0);\n    setPlayerBuilderIndex(context, index, playerIndex, directiveIndex);\n    if (doShift) {\n        // because the value was inserted midway into the array then we\n        // need to update all the shifted multi values' single value\n        // pointers to point to the newly shifted location\n        updateSinglePointerValues(context, index + 4 /* Size */);\n    }\n}\n/**\n * @param {?} value\n * @param {?=} isClassBased\n * @return {?}\n */\nfunction valueExists(value, isClassBased) {\n    return value !== null;\n}\n/**\n * @param {?} context\n * @param {?} prop\n * @param {?} entryIsClassBased\n * @param {?=} sanitizer\n * @return {?}\n */\nfunction prepareInitialFlag(context, prop, entryIsClassBased, sanitizer) {\n    /** @type {?} */\n    let flag = (sanitizer && sanitizer(prop)) ? 4 /* Sanitize */ : 0 /* None */;\n    /** @type {?} */\n    let initialIndex;\n    if (entryIsClassBased) {\n        flag |= 2 /* Class */;\n        initialIndex =\n            getInitialStylingValuesIndexOf(context[4 /* InitialClassValuesPosition */], prop);\n    }\n    else {\n        initialIndex =\n            getInitialStylingValuesIndexOf(context[3 /* InitialStyleValuesPosition */], prop);\n    }\n    initialIndex = initialIndex > 0 ? (initialIndex + 1 /* ValueOffset */) : 0;\n    return pointers(flag, initialIndex, 0);\n}\n/**\n * @param {?} context\n * @param {?} flag\n * @param {?} newValue\n * @return {?}\n */\nfunction hasInitialValueChanged(context, flag, newValue) {\n    /** @type {?} */\n    const initialValue = getInitialValue(context, flag);\n    return !initialValue || hasValueChanged(flag, initialValue, newValue);\n}\n/**\n * @param {?} flag\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction hasValueChanged(flag, a, b) {\n    /** @type {?} */\n    const isClassBased = flag & 2 /* Class */;\n    /** @type {?} */\n    const hasValues = a && b;\n    /** @type {?} */\n    const usesSanitizer = flag & 4 /* Sanitize */;\n    // the toString() comparison ensures that a value is checked\n    // ... otherwise (during sanitization bypassing) the === comparsion\n    // would fail since a new String() instance is created\n    if (!isClassBased && hasValues && usesSanitizer) {\n        // we know for sure we're dealing with strings at this point\n        return ((/** @type {?} */ (a))).toString() !== ((/** @type {?} */ (b))).toString();\n    }\n    // everything else is safe to check with a normal equality check\n    return a !== b;\n}\n/**\n * @template T\n */\nexport class ClassAndStylePlayerBuilder {\n    /**\n     * @param {?} factory\n     * @param {?} _element\n     * @param {?} _type\n     */\n    constructor(factory, _element, _type) {\n        this._element = _element;\n        this._type = _type;\n        this._values = {};\n        this._dirty = false;\n        this._factory = (/** @type {?} */ (factory));\n    }\n    /**\n     * @param {?} prop\n     * @param {?} value\n     * @return {?}\n     */\n    setValue(prop, value) {\n        if (this._values[prop] !== value) {\n            this._values[prop] = value;\n            this._dirty = true;\n        }\n    }\n    /**\n     * @param {?} currentPlayer\n     * @param {?} isFirstRender\n     * @return {?}\n     */\n    buildPlayer(currentPlayer, isFirstRender) {\n        // if no values have been set here then this means the binding didn't\n        // change and therefore the binding values were not updated through\n        // `setValue` which means no new player will be provided.\n        if (this._dirty) {\n            /** @type {?} */\n            const player = this._factory.fn(this._element, this._type, (/** @type {?} */ (this._values)), isFirstRender, currentPlayer || null);\n            this._values = {};\n            this._dirty = false;\n            return player;\n        }\n        return undefined;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ClassAndStylePlayerBuilder.prototype._values;\n    /**\n     * @type {?}\n     * @private\n     */\n    ClassAndStylePlayerBuilder.prototype._dirty;\n    /**\n     * @type {?}\n     * @private\n     */\n    ClassAndStylePlayerBuilder.prototype._factory;\n    /**\n     * @type {?}\n     * @private\n     */\n    ClassAndStylePlayerBuilder.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    ClassAndStylePlayerBuilder.prototype._type;\n}\n/**\n * Used to provide a summary of the state of the styling context.\n *\n * This is an internal interface that is only used inside of test tooling to\n * help summarize what's going on within the styling context. None of this code\n * is designed to be exported publicly and will, therefore, be tree-shaken away\n * during runtime.\n * @record\n */\nexport function LogSummary() { }\nif (false) {\n    /** @type {?} */\n    LogSummary.prototype.name;\n    /** @type {?} */\n    LogSummary.prototype.staticIndex;\n    /** @type {?} */\n    LogSummary.prototype.dynamicIndex;\n    /** @type {?} */\n    LogSummary.prototype.value;\n    /** @type {?} */\n    LogSummary.prototype.flags;\n}\n/**\n * @param {?} source\n * @param {?=} index\n * @return {?}\n */\nexport function generateConfigSummary(source, index) {\n    /** @type {?} */\n    let flag;\n    /** @type {?} */\n    let name = 'config value for ';\n    if (Array.isArray(source)) {\n        if (index) {\n            name += 'index: ' + index;\n        }\n        else {\n            name += 'master config';\n        }\n        index = index || 1 /* MasterFlagPosition */;\n        flag = (/** @type {?} */ (source[index]));\n    }\n    else {\n        flag = source;\n        name += 'index: ' + flag;\n    }\n    /** @type {?} */\n    const dynamicIndex = getMultiOrSingleIndex(flag);\n    /** @type {?} */\n    const staticIndex = getInitialIndex(flag);\n    return {\n        name,\n        staticIndex,\n        dynamicIndex,\n        value: flag,\n        flags: {\n            dirty: flag & 1 /* Dirty */ ? true : false,\n            class: flag & 2 /* Class */ ? true : false,\n            sanitize: flag & 4 /* Sanitize */ ? true : false,\n            playerBuildersDirty: flag & 8 /* PlayerBuildersDirty */ ? true : false,\n            bindingAllocationLocked: flag & 16 /* BindingAllocationLocked */ ? true : false,\n        }\n    };\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nexport function getDirectiveIndexFromEntry(context, index) {\n    /** @type {?} */\n    const value = (/** @type {?} */ (context[index + 3 /* PlayerBuilderIndexOffset */]));\n    return value & 65535 /* BitMask */;\n}\n/**\n * @param {?} context\n * @param {?} directiveRef\n * @return {?}\n */\nfunction getDirectiveIndexFromRegistry(context, directiveRef) {\n    /** @type {?} */\n    let directiveIndex;\n    /** @type {?} */\n    const dirs = context[2 /* DirectiveRegistryPosition */];\n    /** @type {?} */\n    let index = getDirectiveRegistryValuesIndexOf(dirs, directiveRef);\n    if (index === -1) {\n        // if the directive was not allocated then this means that styling is\n        // being applied in a dynamic way AFTER the element was already instantiated\n        index = dirs.length;\n        directiveIndex = index > 0 ? index / 4 /* Size */ : 0;\n        dirs.push(null, null, null, null);\n        dirs[index + 0 /* DirectiveValueOffset */] = directiveRef;\n        dirs[index + 2 /* DirtyFlagOffset */] = false;\n        dirs[index + 1 /* SinglePropValuesIndexOffset */] = -1;\n        /** @type {?} */\n        const classesStartIndex = getMultiClassesStartIndex(context) || 9 /* SingleStylesStartPosition */;\n        registerMultiMapEntry(context, directiveIndex, true, context.length);\n        registerMultiMapEntry(context, directiveIndex, false, classesStartIndex);\n    }\n    else {\n        directiveIndex = index > 0 ? index / 4 /* Size */ : 0;\n    }\n    return directiveIndex;\n}\n/**\n * @param {?} directives\n * @param {?} directive\n * @return {?}\n */\nfunction getDirectiveRegistryValuesIndexOf(directives, directive) {\n    for (let i = 0; i < directives.length; i += 4 /* Size */) {\n        if (directives[i] === directive) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * @param {?} keyValues\n * @param {?} key\n * @return {?}\n */\nfunction getInitialStylingValuesIndexOf(keyValues, key) {\n    for (let i = 2 /* KeyValueStartPosition */; i < keyValues.length; i += 3 /* Size */) {\n        if (keyValues[i] === key)\n            return i;\n    }\n    return -1;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function compareLogSummaries(a, b) {\n    /** @type {?} */\n    const log = [];\n    /** @type {?} */\n    const diffs = [];\n    diffSummaryValues(diffs, 'staticIndex', 'staticIndex', a, b);\n    diffSummaryValues(diffs, 'dynamicIndex', 'dynamicIndex', a, b);\n    Object.keys(a.flags).forEach(name => { diffSummaryValues(diffs, 'flags.' + name, name, a.flags, b.flags); });\n    if (diffs.length) {\n        log.push('Log Summaries for:');\n        log.push('  A: ' + a.name);\n        log.push('  B: ' + b.name);\n        log.push('\\n  Differ in the following way (A !== B):');\n        diffs.forEach(result => {\n            const [name, aVal, bVal] = result;\n            log.push('    => ' + name);\n            log.push('    => ' + aVal + ' !== ' + bVal + '\\n');\n        });\n    }\n    return log;\n}\n/**\n * @param {?} result\n * @param {?} name\n * @param {?} prop\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction diffSummaryValues(result, name, prop, a, b) {\n    /** @type {?} */\n    const aVal = a[prop];\n    /** @type {?} */\n    const bVal = b[prop];\n    if (aVal !== bVal) {\n        result.push([name, aVal, bVal]);\n    }\n}\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @param {?} offset\n * @param {?} isClassBased\n * @return {?}\n */\nfunction getSinglePropIndexValue(context, directiveIndex, offset, isClassBased) {\n    /** @type {?} */\n    const singlePropOffsetRegistryIndex = (/** @type {?} */ (context[2 /* DirectiveRegistryPosition */][(directiveIndex * 4 /* Size */) +\n        1 /* SinglePropValuesIndexOffset */]));\n    /** @type {?} */\n    const offsets = context[5 /* SinglePropOffsetPositions */];\n    /** @type {?} */\n    const indexForOffset = singlePropOffsetRegistryIndex +\n        2 /* ValueStartPosition */ +\n        (isClassBased ?\n            offsets[singlePropOffsetRegistryIndex + 0 /* StylesCountPosition */] :\n            0) +\n        offset;\n    return offsets[indexForOffset];\n}\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction getStyleSanitizer(context, directiveIndex) {\n    /** @type {?} */\n    const dirs = context[2 /* DirectiveRegistryPosition */];\n    /** @type {?} */\n    const value = dirs[directiveIndex * 4 /* Size */ +\n        3 /* StyleSanitizerOffset */] ||\n        dirs[3 /* StyleSanitizerOffset */] || null;\n    return (/** @type {?} */ (value));\n}\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction isDirectiveDirty(context, directiveIndex) {\n    /** @type {?} */\n    const dirs = context[2 /* DirectiveRegistryPosition */];\n    return (/** @type {?} */ (dirs[directiveIndex * 4 /* Size */ +\n        2 /* DirtyFlagOffset */]));\n}\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @param {?} dirtyYes\n * @return {?}\n */\nfunction setDirectiveDirty(context, directiveIndex, dirtyYes) {\n    /** @type {?} */\n    const dirs = context[2 /* DirectiveRegistryPosition */];\n    dirs[directiveIndex * 4 /* Size */ +\n        2 /* DirtyFlagOffset */] = dirtyYes;\n}\n/**\n * @param {?} currentValue\n * @param {?} newValue\n * @param {?} currentDirectiveOwner\n * @param {?} newDirectiveOwner\n * @return {?}\n */\nfunction allowValueChange(currentValue, newValue, currentDirectiveOwner, newDirectiveOwner) {\n    // the code below relies the importance of directive's being tied to their\n    // index value. The index values for each directive are derived from being\n    // registered into the styling context directive registry. The most important\n    // directive is the parent component directive (the template) and each directive\n    // that is added after is considered less important than the previous entry. This\n    // prioritization of directives enables the styling algorithm to decide if a style\n    // or class should be allowed to be updated/replaced incase an earlier directive\n    // already wrote to the exact same style-property or className value. In other words\n    // this decides what to do if and when there is a collision.\n    if (currentValue != null) {\n        if (newValue != null) {\n            // if a directive index is lower than it always has priority over the\n            // previous directive's value...\n            return newDirectiveOwner <= currentDirectiveOwner;\n        }\n        else {\n            // only write a null value incase it's the same owner writing it.\n            // this avoids having a higher-priority directive write to null\n            // only to have a lesser-priority directive change right to a\n            // non-null value immediately afterwards.\n            return currentDirectiveOwner === newDirectiveOwner;\n        }\n    }\n    return true;\n}\n/**\n * Returns the className string of all the initial classes for the element.\n *\n * This function is designed to populate and cache all the static class\n * values into a className string. The caching mechanism works by placing\n * the completed className string into the initial values array into a\n * dedicated slot. This will prevent the function from having to populate\n * the string each time an element is created or matched.\n *\n * @param {?} context\n * @return {?} the className string (e.g. `on active red`)\n */\nexport function getInitialClassNameValue(context) {\n    /** @type {?} */\n    const initialClassValues = context[4 /* InitialClassValuesPosition */];\n    /** @type {?} */\n    let className = initialClassValues[1 /* CachedStringValuePosition */];\n    if (className === null) {\n        className = '';\n        for (let i = 2 /* KeyValueStartPosition */; i < initialClassValues.length; i += 3 /* Size */) {\n            /** @type {?} */\n            const isPresent = initialClassValues[i + 1];\n            if (isPresent) {\n                className += (className.length ? ' ' : '') + initialClassValues[i];\n            }\n        }\n        initialClassValues[1 /* CachedStringValuePosition */] = className;\n    }\n    return className;\n}\n/**\n * Returns the style string of all the initial styles for the element.\n *\n * This function is designed to populate and cache all the static style\n * values into a style string. The caching mechanism works by placing\n * the completed style string into the initial values array into a\n * dedicated slot. This will prevent the function from having to populate\n * the string each time an element is created or matched.\n *\n * @param {?} context\n * @return {?} the style string (e.g. `width:100px;height:200px`)\n */\nexport function getInitialStyleStringValue(context) {\n    /** @type {?} */\n    const initialStyleValues = context[3 /* InitialStyleValuesPosition */];\n    /** @type {?} */\n    let styleString = initialStyleValues[1 /* CachedStringValuePosition */];\n    if (styleString === null) {\n        styleString = '';\n        for (let i = 2 /* KeyValueStartPosition */; i < initialStyleValues.length; i += 3 /* Size */) {\n            /** @type {?} */\n            const value = initialStyleValues[i + 1];\n            if (value !== null) {\n                styleString += (styleString.length ? ';' : '') + `${initialStyleValues[i]}:${value}`;\n            }\n        }\n        initialStyleValues[1 /* CachedStringValuePosition */] = styleString;\n    }\n    return styleString;\n}\n/**\n * Returns the current cached mutli-value for a given directiveIndex within the provided context.\n * @param {?} context\n * @param {?} entryIsClassBased\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction readCachedMapValue(context, entryIsClassBased, directiveIndex) {\n    /** @type {?} */\n    const values = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n    /** @type {?} */\n    const index = 1 /* ValuesStartPosition */ +\n        directiveIndex * 4 /* Size */;\n    return values[index + 2 /* ValueOffset */] || null;\n}\n/**\n * Determines whether the provided multi styling value should be updated or not.\n *\n * Because `[style]` and `[class]` bindings rely on an identity change to occur before\n * applying new values, the styling algorithm may not update an existing entry into\n * the context if a previous directive's entry changed shape.\n *\n * This function will decide whether or not a value should be applied (if there is a\n * cache miss) to the context based on the following rules:\n *\n * - If there is an identity change between the existing value and new value\n * - If there is no existing value cached (first write)\n * - If a previous directive flagged the existing cached value as dirty\n * @param {?} context\n * @param {?} entryIsClassBased\n * @param {?} directiveIndex\n * @param {?} newValue\n * @return {?}\n */\nfunction isMultiValueCacheHit(context, entryIsClassBased, directiveIndex, newValue) {\n    /** @type {?} */\n    const indexOfCachedValues = entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */;\n    /** @type {?} */\n    const cachedValues = (/** @type {?} */ (context[indexOfCachedValues]));\n    /** @type {?} */\n    const index = 1 /* ValuesStartPosition */ +\n        directiveIndex * 4 /* Size */;\n    if (cachedValues[index + 0 /* DirtyFlagOffset */])\n        return false;\n    return newValue === NO_CHANGE ||\n        readCachedMapValue(context, entryIsClassBased, directiveIndex) === newValue;\n}\n/**\n * Updates the cached status of a multi-styling value in the context.\n *\n * The cached map array (which exists in the context) contains a manifest of\n * each multi-styling entry (`[style]` and `[class]` entries) for the template\n * as well as all directives.\n *\n * This function will update the cached status of the provided multi-style\n * entry within the cache.\n *\n * When called, this function will update the following information:\n * - The actual cached value (the raw value that was passed into `[style]` or `[class]`)\n * - The total amount of unique styling entries that this value has written into the context\n * - The exact position of where the multi styling entries start in the context for this binding\n * - The dirty flag will be set to true\n *\n * If the `dirtyFutureValues` param is provided then it will update all future entries (binding\n * entries that exist as apart of other directives) to be dirty as well. This will force the\n * styling algorithm to reapply those values once change detection checks them (which will in\n * turn cause the styling context to update itself and the correct styling values will be\n * rendered on screen).\n * @param {?} context\n * @param {?} directiveIndex\n * @param {?} entryIsClassBased\n * @param {?} cacheValue\n * @param {?} startPosition\n * @param {?} endPosition\n * @param {?} totalValues\n * @param {?} dirtyFutureValues\n * @return {?}\n */\nfunction updateCachedMapValue(context, directiveIndex, entryIsClassBased, cacheValue, startPosition, endPosition, totalValues, dirtyFutureValues) {\n    /** @type {?} */\n    const values = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n    /** @type {?} */\n    const index = 1 /* ValuesStartPosition */ +\n        directiveIndex * 4 /* Size */;\n    // in the event that this is true we assume that future values are dirty and therefore\n    // will be checked again in the next CD cycle\n    if (dirtyFutureValues) {\n        /** @type {?} */\n        const nextStartPosition = startPosition + totalValues * 4 /* Size */;\n        for (let i = index + 4 /* Size */; i < values.length; i += 4 /* Size */) {\n            values[i + 1 /* PositionStartOffset */] = nextStartPosition;\n            values[i + 0 /* DirtyFlagOffset */] = 1;\n        }\n    }\n    values[index + 0 /* DirtyFlagOffset */] = 0;\n    values[index + 1 /* PositionStartOffset */] = startPosition;\n    values[index + 2 /* ValueOffset */] = cacheValue;\n    values[index + 3 /* ValueCountOffset */] = totalValues;\n    // the code below counts the total amount of styling values that exist in\n    // the context up until this directive. This value will be later used to\n    // update the cached value map's total counter value.\n    /** @type {?} */\n    let totalStylingEntries = totalValues;\n    for (let i = 1 /* ValuesStartPosition */; i < index; i += 4 /* Size */) {\n        totalStylingEntries += values[i + 3 /* ValueCountOffset */];\n    }\n    // because style values come before class values in the context this means\n    // that if any new values were inserted then the cache values array for\n    // classes is out of sync. The code below will update the offsets to point\n    // to their new values.\n    if (!entryIsClassBased) {\n        /** @type {?} */\n        const classCache = context[6 /* CachedMultiClasses */];\n        /** @type {?} */\n        const classesStartPosition = classCache[1 /* ValuesStartPosition */ +\n            1 /* PositionStartOffset */];\n        /** @type {?} */\n        const diffInStartPosition = endPosition - classesStartPosition;\n        for (let i = 1 /* ValuesStartPosition */; i < classCache.length; i += 4 /* Size */) {\n            classCache[i + 1 /* PositionStartOffset */] += diffInStartPosition;\n        }\n    }\n    values[0 /* EntriesCountPosition */] = totalStylingEntries;\n}\n/**\n * @param {?} entries\n * @return {?}\n */\nfunction hyphenateEntries(entries) {\n    /** @type {?} */\n    const newEntries = [];\n    for (let i = 0; i < entries.length; i++) {\n        newEntries.push(hyphenate(entries[i]));\n    }\n    return newEntries;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hyphenate(value) {\n    return value.replace(/[a-z][A-Z]/g, match => `${match.charAt(0)}-${match.charAt(1).toLowerCase()}`);\n}\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @param {?} entryIsClassBased\n * @param {?} startPosition\n * @param {?=} count\n * @return {?}\n */\nfunction registerMultiMapEntry(context, directiveIndex, entryIsClassBased, startPosition, count = 0) {\n    /** @type {?} */\n    const cachedValues = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n    if (directiveIndex > 0) {\n        /** @type {?} */\n        const limit = 1 /* ValuesStartPosition */ +\n            (directiveIndex * 4 /* Size */);\n        while (cachedValues.length < limit) {\n            // this means that ONLY directive class styling (like ngClass) was used\n            // therefore the root directive will still need to be filled in as well\n            // as any other directive spaces incase they only used static values\n            cachedValues.push(0, startPosition, null, 0);\n        }\n    }\n    cachedValues.push(0, startPosition, null, count);\n}\n/**\n * Inserts or updates an existing entry in the provided `staticStyles` collection.\n *\n * @param {?} index the index representing an existing styling entry in the collection:\n *  if provided (numeric): then it will update the existing entry at the given position\n *  if null: then it will insert a new entry within the collection\n * @param {?} staticStyles a collection of style or class entries where the value will\n *  be inserted or patched\n * @param {?} prop the property value of the entry (e.g. `width` (styles) or `foo` (classes))\n * @param {?} value the styling value of the entry (e.g. `absolute` (styles) or `true` (classes))\n * @param {?} directiveOwnerIndex the directive owner index value of the styling source responsible\n *        for these styles (see `interfaces/styling.ts#directives` for more info)\n * @return {?} the index of the updated or new entry within the collection\n */\nfunction addOrUpdateStaticStyle(index, staticStyles, prop, value, directiveOwnerIndex) {\n    if (index === null) {\n        index = staticStyles.length;\n        staticStyles.push(null, null, null);\n        staticStyles[index + 0 /* PropOffset */] = prop;\n    }\n    staticStyles[index + 1 /* ValueOffset */] = value;\n    staticStyles[index + 2 /* DirectiveOwnerOffset */] = directiveOwnerIndex;\n    return index;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport '../util/ng_dev_mode';\nimport { assertDefined, assertNotEqual } from '../util/assert';\nimport { unusedValueExportToPlacateAjd as unused1 } from './interfaces/node';\nimport { NG_PROJECT_AS_ATTR_NAME, unusedValueExportToPlacateAjd as unused2 } from './interfaces/projection';\nimport { getInitialClassNameValue } from './styling/class_and_style_bindings';\n/** @type {?} */\nconst unusedValueToPlacateAjd = unused1 + unused2;\n/** @type {?} */\nconst NG_TEMPLATE_SELECTOR = 'ng-template';\n/**\n * @param {?} nodeClassAttrVal\n * @param {?} cssClassToMatch\n * @return {?}\n */\nfunction isCssClassMatching(nodeClassAttrVal, cssClassToMatch) {\n    /** @type {?} */\n    const nodeClassesLen = nodeClassAttrVal.length;\n    /** @type {?} */\n    const matchIndex = (/** @type {?} */ (nodeClassAttrVal)).indexOf(cssClassToMatch);\n    /** @type {?} */\n    const matchEndIdx = matchIndex + cssClassToMatch.length;\n    if (matchIndex === -1 // no match\n        || (matchIndex > 0 && (/** @type {?} */ (nodeClassAttrVal))[matchIndex - 1] !== ' ') // no space before\n        ||\n            (matchEndIdx < nodeClassesLen && (/** @type {?} */ (nodeClassAttrVal))[matchEndIdx] !== ' ')) // no space after\n     {\n        return false;\n    }\n    return true;\n}\n/**\n * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n *\n * Matching can be perfomed in 2 modes: projection mode (when we project nodes) and regular\n * directive matching mode. In \"projection\" mode, we do not need to check types, so if tag name\n * matches selector, we declare a match. In \"directive matching\" mode, we also check whether tNode\n * is of expected type:\n * - whether tNode has either Element or ElementContainer type\n * - or if we want to match \"ng-template\" tag, we check for Container type\n * @param {?} tNode\n * @param {?} currentSelector\n * @param {?} isProjectionMode\n * @return {?}\n */\nfunction hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {\n    return currentSelector === tNode.tagName &&\n        (isProjectionMode ||\n            (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) ||\n            (tNode.type === 0 /* Container */ && currentSelector === NG_TEMPLATE_SELECTOR));\n}\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param {?} tNode\n * @param {?} selector\n * @param {?} isProjectionMode\n * @return {?} true if node matches the selector.\n */\nexport function isNodeMatchingSelector(tNode, selector, isProjectionMode) {\n    ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n    /** @type {?} */\n    let mode = 4 /* ELEMENT */;\n    /** @type {?} */\n    const nodeAttrs = (/** @type {?} */ (tNode.attrs));\n    /** @type {?} */\n    const selectOnlyMarkerIdx = nodeAttrs ? nodeAttrs.indexOf(3 /* SelectOnly */) : -1;\n    // When processing \":not\" selectors, we skip to the next \":not\" if the\n    // current one doesn't match\n    /** @type {?} */\n    let skipToNextSelector = false;\n    for (let i = 0; i < selector.length; i++) {\n        /** @type {?} */\n        const current = selector[i];\n        if (typeof current === 'number') {\n            // If we finish processing a :not selector and it hasn't failed, return false\n            if (!skipToNextSelector && !isPositive(mode) && !isPositive((/** @type {?} */ (current)))) {\n                return false;\n            }\n            // If we are skipping to the next :not() and this mode flag is positive,\n            // it's a part of the current :not() selector, and we should keep skipping\n            if (skipToNextSelector && isPositive(current))\n                continue;\n            skipToNextSelector = false;\n            mode = ((/** @type {?} */ (current))) | (mode & 1 /* NOT */);\n            continue;\n        }\n        if (skipToNextSelector)\n            continue;\n        if (mode & 4 /* ELEMENT */) {\n            mode = 2 /* ATTRIBUTE */ | mode & 1 /* NOT */;\n            if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) ||\n                current === '' && selector.length === 1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n            }\n        }\n        else {\n            /** @type {?} */\n            const selectorAttrValue = mode & 8 /* CLASS */ ? current : selector[++i];\n            // special case for matching against classes when a tNode has been instantiated with\n            // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])\n            if ((mode & 8 /* CLASS */) && tNode.stylingTemplate) {\n                if (!isCssClassMatching(readClassValueFromTNode(tNode), (/** @type {?} */ (selectorAttrValue)))) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n                continue;\n            }\n            /** @type {?} */\n            const attrName = (mode & 8 /* CLASS */) ? 'class' : current;\n            /** @type {?} */\n            const attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs);\n            if (attrIndexInNode === -1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n                continue;\n            }\n            if (selectorAttrValue !== '') {\n                /** @type {?} */\n                let nodeAttrValue;\n                /** @type {?} */\n                const maybeAttrName = nodeAttrs[attrIndexInNode];\n                if (selectOnlyMarkerIdx > -1 && attrIndexInNode > selectOnlyMarkerIdx) {\n                    nodeAttrValue = '';\n                }\n                else {\n                    ngDevMode && assertNotEqual(maybeAttrName, 0 /* NamespaceURI */, 'We do not match directives on namespaced attributes');\n                    nodeAttrValue = (/** @type {?} */ (nodeAttrs[attrIndexInNode + 1]));\n                }\n                /** @type {?} */\n                const compareAgainstClassName = mode & 8 /* CLASS */ ? nodeAttrValue : null;\n                if (compareAgainstClassName &&\n                    !isCssClassMatching(compareAgainstClassName, (/** @type {?} */ (selectorAttrValue))) ||\n                    mode & 2 /* ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n            }\n        }\n    }\n    return isPositive(mode) || skipToNextSelector;\n}\n/**\n * @param {?} mode\n * @return {?}\n */\nfunction isPositive(mode) {\n    return (mode & 1 /* NOT */) === 0;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction readClassValueFromTNode(tNode) {\n    // comparing against CSS class values is complex because the compiler doesn't place them as\n    // regular attributes when an element is created. Instead, the classes (and styles for\n    // that matter) are placed in a special styling context that is used for resolving all\n    // class/style values across static attributes, [style]/[class] and [style.prop]/[class.name]\n    // bindings. Therefore if and when the styling context exists then the class values are to be\n    // extracted by the context helper code below...\n    return tNode.stylingTemplate ? getInitialClassNameValue(tNode.stylingTemplate) : '';\n}\n/**\n * Examines an attributes definition array from a node to find the index of the\n * attribute with the specified name.\n *\n * NOTE: Will not find namespaced attributes.\n *\n * @param {?} name the name of the attribute to find\n * @param {?} attrs the attribute array to examine\n * @return {?}\n */\nfunction findAttrIndexInNode(name, attrs) {\n    if (attrs === null)\n        return -1;\n    /** @type {?} */\n    let selectOnlyMode = false;\n    /** @type {?} */\n    let i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        const maybeAttrName = attrs[i];\n        if (maybeAttrName === name) {\n            return i;\n        }\n        else if (maybeAttrName === 0 /* NamespaceURI */) {\n            // NOTE(benlesh): will not find namespaced attributes. This is by design.\n            i += 4;\n        }\n        else {\n            if (maybeAttrName === 3 /* SelectOnly */) {\n                selectOnlyMode = true;\n            }\n            i += selectOnlyMode ? 1 : 2;\n        }\n    }\n    return -1;\n}\n/**\n * @param {?} tNode\n * @param {?} selector\n * @param {?=} isProjectionMode\n * @return {?}\n */\nexport function isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {\n    for (let i = 0; i < selector.length; i++) {\n        if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function getProjectAsAttrValue(tNode) {\n    /** @type {?} */\n    const nodeAttrs = tNode.attrs;\n    if (nodeAttrs != null) {\n        /** @type {?} */\n        const ngProjectAsAttrIdx = nodeAttrs.indexOf(NG_PROJECT_AS_ATTR_NAME);\n        // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n        // (attribute names are stored at even indexes)\n        if ((ngProjectAsAttrIdx & 1) === 0) {\n            return (/** @type {?} */ (nodeAttrs[ngProjectAsAttrIdx + 1]));\n        }\n    }\n    return null;\n}\n/**\n * Checks a given node against matching selectors and returns\n * selector index (or 0 if none matched).\n *\n * This function takes into account the ngProjectAs attribute: if present its value will be compared\n * to the raw (un-parsed) CSS selector instead of using standard selector matching logic.\n * @param {?} tNode\n * @param {?} selectors\n * @param {?} textSelectors\n * @return {?}\n */\nexport function matchingSelectorIndex(tNode, selectors, textSelectors) {\n    /** @type {?} */\n    const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n    for (let i = 0; i < selectors.length; i++) {\n        // if a node has the ngProjectAs attribute match it against unparsed selector\n        // match a node against a parsed selector only if ngProjectAs attribute is not present\n        if (ngProjectAsAttrVal === textSelectors[i] ||\n            ngProjectAsAttrVal === null &&\n                isNodeMatchingSelectorList(tNode, selectors[i], /* isProjectionMode */ true)) {\n            return i + 1; // first matching selector \"captures\" a given node\n        }\n    }\n    return 0;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DECLARATION_VIEW, T_HOST } from './interfaces/view';\nimport { getParentInjectorViewOffset } from './util/injector_utils';\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function applyOnCreateInstructions(tNode) {\n    // there may be some instructions that need to run in a specific\n    // order because the CREATE block in a directive runs before the\n    // CREATE block in a template. To work around this instructions\n    // can get access to the function array below and defer any code\n    // to run after the element is created.\n    /** @type {?} */\n    let fns;\n    if (fns = tNode.onElementCreationFns) {\n        for (let i = 0; i < fns.length; i++) {\n            fns[i]();\n        }\n        tNode.onElementCreationFns = null;\n    }\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the TNode of the parent injector is found.\n *\n * @param {?} location The location of the parent injector, which contains the view offset\n * @param {?} startView The LView instance from which to start walking up the view tree\n * @param {?} startTNode The TNode instance of the starting element\n * @return {?} The TNode of the parent injector\n */\nexport function getParentInjectorTNode(location, startView, startTNode) {\n    if (startTNode.parent && startTNode.parent.injectorIndex !== -1) {\n        // view offset is 0\n        /** @type {?} */\n        const injectorIndex = startTNode.parent.injectorIndex;\n        /** @type {?} */\n        let parentTNode = startTNode.parent;\n        while (parentTNode.parent != null && injectorIndex == parentTNode.injectorIndex) {\n            parentTNode = parentTNode.parent;\n        }\n        return parentTNode;\n    }\n    /** @type {?} */\n    let viewOffset = getParentInjectorViewOffset(location);\n    // view offset is 1\n    /** @type {?} */\n    let parentView = startView;\n    /** @type {?} */\n    let parentTNode = (/** @type {?} */ (startView[T_HOST]));\n    // view offset is superior to 1\n    while (viewOffset > 1) {\n        parentView = (/** @type {?} */ (parentView[DECLARATION_VIEW]));\n        parentTNode = (/** @type {?} */ (parentView[T_HOST]));\n        viewOffset--;\n    }\n    return parentTNode;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV91dGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvcmVuZGVyMy9ub2RlX3V0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFVQSxPQUFPLEVBQUMsZ0JBQWdCLEVBQVMsTUFBTSxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDbEUsT0FBTyxFQUFDLDJCQUEyQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7Ozs7O0FBRWxFLE1BQU0sVUFBVSx5QkFBeUIsQ0FBQyxLQUFZOzs7Ozs7O1FBTWhELEdBQW9CO0lBQ3hCLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxvQkFBb0IsRUFBRTtRQUNwQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNuQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUNWO1FBQ0QsS0FBSyxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQztLQUNuQztBQUNILENBQUM7Ozs7Ozs7Ozs7QUFXRCxNQUFNLFVBQVUsc0JBQXNCLENBQ2xDLFFBQWtDLEVBQUUsU0FBZ0IsRUFBRSxVQUFpQjtJQUV6RSxJQUFJLFVBQVUsQ0FBQyxNQUFNLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEtBQUssQ0FBQyxDQUFDLEVBQUU7OztjQUV6RCxhQUFhLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxhQUFhOztZQUNqRCxXQUFXLEdBQUcsVUFBVSxDQUFDLE1BQU07UUFDbkMsT0FBTyxXQUFXLENBQUMsTUFBTSxJQUFJLElBQUksSUFBSSxhQUFhLElBQUksV0FBVyxDQUFDLGFBQWEsRUFBRTtZQUMvRSxXQUFXLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQztTQUNsQztRQUNELE9BQU8sV0FBVyxDQUFDO0tBQ3BCOztRQUNHLFVBQVUsR0FBRywyQkFBMkIsQ0FBQyxRQUFRLENBQUM7OztRQUVsRCxVQUFVLEdBQUcsU0FBUzs7UUFDdEIsV0FBVyxHQUFHLG1CQUFBLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBZ0I7SUFDbkQsK0JBQStCO0lBQy9CLE9BQU8sVUFBVSxHQUFHLENBQUMsRUFBRTtRQUNyQixVQUFVLEdBQUcsbUJBQUEsVUFBVSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQztRQUM1QyxXQUFXLEdBQUcsbUJBQUEsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFnQixDQUFDO1FBQ2pELFVBQVUsRUFBRSxDQUFDO0tBQ2Q7SUFDRCxPQUFPLFdBQVcsQ0FBQztBQUNyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge1JlbGF0aXZlSW5qZWN0b3JMb2NhdGlvbn0gZnJvbSAnLi9pbnRlcmZhY2VzL2luamVjdG9yJztcbmltcG9ydCB7VENvbnRhaW5lck5vZGUsIFRFbGVtZW50Tm9kZSwgVE5vZGV9IGZyb20gJy4vaW50ZXJmYWNlcy9ub2RlJztcbmltcG9ydCB7REVDTEFSQVRJT05fVklFVywgTFZpZXcsIFRfSE9TVH0gZnJvbSAnLi9pbnRlcmZhY2VzL3ZpZXcnO1xuaW1wb3J0IHtnZXRQYXJlbnRJbmplY3RvclZpZXdPZmZzZXR9IGZyb20gJy4vdXRpbC9pbmplY3Rvcl91dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseU9uQ3JlYXRlSW5zdHJ1Y3Rpb25zKHROb2RlOiBUTm9kZSkge1xuICAvLyB0aGVyZSBtYXkgYmUgc29tZSBpbnN0cnVjdGlvbnMgdGhhdCBuZWVkIHRvIHJ1biBpbiBhIHNwZWNpZmljXG4gIC8vIG9yZGVyIGJlY2F1c2UgdGhlIENSRUFURSBibG9jayBpbiBhIGRpcmVjdGl2ZSBydW5zIGJlZm9yZSB0aGVcbiAgLy8gQ1JFQVRFIGJsb2NrIGluIGEgdGVtcGxhdGUuIFRvIHdvcmsgYXJvdW5kIHRoaXMgaW5zdHJ1Y3Rpb25zXG4gIC8vIGNhbiBnZXQgYWNjZXNzIHRvIHRoZSBmdW5jdGlvbiBhcnJheSBiZWxvdyBhbmQgZGVmZXIgYW55IGNvZGVcbiAgLy8gdG8gcnVuIGFmdGVyIHRoZSBlbGVtZW50IGlzIGNyZWF0ZWQuXG4gIGxldCBmbnM6IEZ1bmN0aW9uW118bnVsbDtcbiAgaWYgKGZucyA9IHROb2RlLm9uRWxlbWVudENyZWF0aW9uRm5zKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZuc1tpXSgpO1xuICAgIH1cbiAgICB0Tm9kZS5vbkVsZW1lbnRDcmVhdGlvbkZucyA9IG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBVbndyYXBzIGEgcGFyZW50IGluamVjdG9yIGxvY2F0aW9uIG51bWJlciB0byBmaW5kIHRoZSB2aWV3IG9mZnNldCBmcm9tIHRoZSBjdXJyZW50IGluamVjdG9yLFxuICogdGhlbiB3YWxrcyB1cCB0aGUgZGVjbGFyYXRpb24gdmlldyB0cmVlIHVudGlsIHRoZSBUTm9kZSBvZiB0aGUgcGFyZW50IGluamVjdG9yIGlzIGZvdW5kLlxuICpcbiAqIEBwYXJhbSBsb2NhdGlvbiBUaGUgbG9jYXRpb24gb2YgdGhlIHBhcmVudCBpbmplY3Rvciwgd2hpY2ggY29udGFpbnMgdGhlIHZpZXcgb2Zmc2V0XG4gKiBAcGFyYW0gc3RhcnRWaWV3IFRoZSBMVmlldyBpbnN0YW5jZSBmcm9tIHdoaWNoIHRvIHN0YXJ0IHdhbGtpbmcgdXAgdGhlIHZpZXcgdHJlZVxuICogQHBhcmFtIHN0YXJ0VE5vZGUgVGhlIFROb2RlIGluc3RhbmNlIG9mIHRoZSBzdGFydGluZyBlbGVtZW50XG4gKiBAcmV0dXJucyBUaGUgVE5vZGUgb2YgdGhlIHBhcmVudCBpbmplY3RvclxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFyZW50SW5qZWN0b3JUTm9kZShcbiAgICBsb2NhdGlvbjogUmVsYXRpdmVJbmplY3RvckxvY2F0aW9uLCBzdGFydFZpZXc6IExWaWV3LCBzdGFydFROb2RlOiBUTm9kZSk6IFRFbGVtZW50Tm9kZXxcbiAgICBUQ29udGFpbmVyTm9kZXxudWxsIHtcbiAgaWYgKHN0YXJ0VE5vZGUucGFyZW50ICYmIHN0YXJ0VE5vZGUucGFyZW50LmluamVjdG9ySW5kZXggIT09IC0xKSB7XG4gICAgLy8gdmlldyBvZmZzZXQgaXMgMFxuICAgIGNvbnN0IGluamVjdG9ySW5kZXggPSBzdGFydFROb2RlLnBhcmVudC5pbmplY3RvckluZGV4O1xuICAgIGxldCBwYXJlbnRUTm9kZSA9IHN0YXJ0VE5vZGUucGFyZW50O1xuICAgIHdoaWxlIChwYXJlbnRUTm9kZS5wYXJlbnQgIT0gbnVsbCAmJiBpbmplY3RvckluZGV4ID09IHBhcmVudFROb2RlLmluamVjdG9ySW5kZXgpIHtcbiAgICAgIHBhcmVudFROb2RlID0gcGFyZW50VE5vZGUucGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gcGFyZW50VE5vZGU7XG4gIH1cbiAgbGV0IHZpZXdPZmZzZXQgPSBnZXRQYXJlbnRJbmplY3RvclZpZXdPZmZzZXQobG9jYXRpb24pO1xuICAvLyB2aWV3IG9mZnNldCBpcyAxXG4gIGxldCBwYXJlbnRWaWV3ID0gc3RhcnRWaWV3O1xuICBsZXQgcGFyZW50VE5vZGUgPSBzdGFydFZpZXdbVF9IT1NUXSBhcyBURWxlbWVudE5vZGU7XG4gIC8vIHZpZXcgb2Zmc2V0IGlzIHN1cGVyaW9yIHRvIDFcbiAgd2hpbGUgKHZpZXdPZmZzZXQgPiAxKSB7XG4gICAgcGFyZW50VmlldyA9IHBhcmVudFZpZXdbREVDTEFSQVRJT05fVklFV10gITtcbiAgICBwYXJlbnRUTm9kZSA9IHBhcmVudFZpZXdbVF9IT1NUXSBhcyBURWxlbWVudE5vZGU7XG4gICAgdmlld09mZnNldC0tO1xuICB9XG4gIHJldHVybiBwYXJlbnRUTm9kZTtcbn1cbiJdfQ==","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport { NG_PROJECT_AS_ATTR_NAME } from '../interfaces/projection';\nimport { isProceduralRenderer } from '../interfaces/renderer';\nimport { RENDERER } from '../interfaces/view';\nimport { getLView } from '../state';\nimport { isAnimationProp } from '../styling/util';\n/**\n * Assigns all attribute values to the provided element via the inferred renderer.\n *\n * This function accepts two forms of attribute entries:\n *\n * default: (key, value):\n *  attrs = [key1, value1, key2, value2]\n *\n * namespaced: (NAMESPACE_MARKER, uri, name, value)\n *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\n *\n * The `attrs` array can contain a mix of both the default and namespaced entries.\n * The \"default\" values are set without a marker, but if the function comes across\n * a marker value then it will attempt to set a namespaced value. If the marker is\n * not of a namespaced value then the function will quit and return the index value\n * where it stopped during the iteration of the attrs array.\n *\n * See [AttributeMarker] to understand what the namespace marker value is.\n *\n * Note that this instruction does not support assigning style and class values to\n * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\n * are applied to an element.\n *\n * @param {?} native The element that the attributes will be assigned to\n * @param {?} attrs The attribute array of values that will be assigned to the element\n * @return {?} the index value that was last accessed in the attributes array\n */\nexport function setUpAttributes(native, attrs) {\n    /** @type {?} */\n    const renderer = getLView()[RENDERER];\n    /** @type {?} */\n    const isProc = isProceduralRenderer(renderer);\n    /** @type {?} */\n    let i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        const value = attrs[i];\n        if (typeof value === 'number') {\n            // only namespaces are supported. Other value types (such as style/class\n            // entries) are not supported in this function.\n            if (value !== 0 /* NamespaceURI */) {\n                break;\n            }\n            // we just landed on the marker value ... therefore\n            // we should skip to the next entry\n            i++;\n            /** @type {?} */\n            const namespaceURI = (/** @type {?} */ (attrs[i++]));\n            /** @type {?} */\n            const attrName = (/** @type {?} */ (attrs[i++]));\n            /** @type {?} */\n            const attrVal = (/** @type {?} */ (attrs[i++]));\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            isProc ?\n                ((/** @type {?} */ (renderer))).setAttribute(native, attrName, attrVal, namespaceURI) :\n                native.setAttributeNS(namespaceURI, attrName, attrVal);\n        }\n        else {\n            /// attrName is string;\n            /** @type {?} */\n            const attrName = (/** @type {?} */ (value));\n            /** @type {?} */\n            const attrVal = attrs[++i];\n            if (attrName !== NG_PROJECT_AS_ATTR_NAME) {\n                // Standard attributes\n                ngDevMode && ngDevMode.rendererSetAttribute++;\n                if (isAnimationProp(attrName)) {\n                    if (isProc) {\n                        ((/** @type {?} */ (renderer))).setProperty(native, attrName, attrVal);\n                    }\n                }\n                else {\n                    isProc ?\n                        ((/** @type {?} */ (renderer)))\n                            .setAttribute(native, (/** @type {?} */ (attrName)), (/** @type {?} */ (attrVal))) :\n                        native.setAttribute((/** @type {?} */ (attrName)), (/** @type {?} */ (attrVal)));\n                }\n            }\n            i++;\n        }\n    }\n    // another piece of code may iterate over the same attributes array. Therefore\n    // it may be helpful to return the exact spot where the attributes array exited\n    // whether by running into an unsupported marker or if all the static values were\n    // iterated over.\n    return i;\n}\n/**\n * @param {?} attrs\n * @param {?} startIndex\n * @return {?}\n */\nexport function attrsStylingIndexOf(attrs, startIndex) {\n    for (let i = startIndex; i < attrs.length; i++) {\n        /** @type {?} */\n        const val = attrs[i];\n        if (val === 1 /* Classes */ || val === 2 /* Styles */) {\n            return i;\n        }\n    }\n    return -1;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectFlags } from '../di';\nimport { resolveForwardRef } from '../di/forward_ref';\nimport { ErrorHandler } from '../error_handler';\nimport { CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '../metadata/schema';\nimport { validateAgainstEventAttributes, validateAgainstEventProperties } from '../sanitization/sanitization';\nimport { assertDataInRange, assertDefined, assertDomNode, assertEqual, assertLessThan, assertNotEqual } from '../util/assert';\nimport { isObservable } from '../util/lang';\nimport { normalizeDebugBindingName, normalizeDebugBindingValue } from '../util/ng_reflect';\nimport { assertHasParent, assertLContainerOrUndefined, assertLView, assertPreviousIsParent } from './assert';\nimport { bindingUpdated, bindingUpdated2, bindingUpdated3, bindingUpdated4 } from './bindings';\nimport { attachPatchData, getComponentViewByInstance } from './context_discovery';\nimport { attachLContainerDebug, attachLViewDebug } from './debug';\nimport { diPublicInInjector, getNodeInjectable, getOrCreateInjectable, getOrCreateNodeInjectorForNode, injectAttributeImpl } from './di';\nimport { throwMultipleComponentError } from './errors';\nimport { executeHooks, executePreOrderHooks, registerPostOrderHooks, registerPreOrderHooks } from './hooks';\nimport { ACTIVE_INDEX, VIEWS } from './interfaces/container';\nimport { INJECTOR_BLOOM_PARENT_SIZE, NodeInjectorFactory } from './interfaces/injector';\nimport { isProceduralRenderer } from './interfaces/renderer';\nimport { BINDING_INDEX, CHILD_HEAD, CHILD_TAIL, CLEANUP, CONTEXT, DECLARATION_VIEW, FLAGS, HEADER_OFFSET, HOST, INJECTOR, NEXT, PARENT, QUERIES, RENDERER, RENDERER_FACTORY, SANITIZER, TVIEW, T_HOST } from './interfaces/view';\nimport { assertNodeOfPossibleTypes, assertNodeType } from './node_assert';\nimport { appendChild, appendProjectedNodes, createTextNode, insertView, removeView } from './node_manipulation';\nimport { isNodeMatchingSelectorList, matchingSelectorIndex } from './node_selector_matcher';\nimport { applyOnCreateInstructions } from './node_util';\nimport { decreaseElementDepthCount, enterView, getBindingsEnabled, getCheckNoChangesMode, getContextLView, getCurrentDirectiveDef, getElementDepthCount, getIsParent, getLView, getPreviousOrParentTNode, increaseElementDepthCount, isCreationMode, leaveView, nextContextImpl, resetComponentState, setBindingRoot, setCheckNoChangesMode, setCurrentDirectiveDef, setCurrentQueryIndex, setIsParent, setPreviousOrParentTNode } from './state';\nimport { getInitialClassNameValue, getInitialStyleStringValue, initializeStaticContext as initializeStaticStylingContext, patchContextWithStaticAttrs, renderInitialClasses, renderInitialStyles, renderStyling, updateClassProp as updateElementClassProp, updateContextWithBindings, updateStyleProp as updateElementStyleProp, updateStylingMap } from './styling/class_and_style_bindings';\nimport { BoundPlayerFactory } from './styling/player_factory';\nimport { ANIMATION_PROP_PREFIX, allocateDirectiveIntoContext, createEmptyStylingContext, forceClassesAsString, forceStylesAsString, getStylingContext, hasClassInput, hasStyleInput, isAnimationProp } from './styling/util';\nimport { NO_CHANGE } from './tokens';\nimport { attrsStylingIndexOf, setUpAttributes } from './util/attrs_utils';\nimport { INTERPOLATION_DELIMITER, renderStringify } from './util/misc_utils';\nimport { findComponentView, getLViewParent, getRootContext, getRootView } from './util/view_traversal_utils';\nimport { getComponentViewByIndex, getNativeByIndex, getNativeByTNode, getTNode, isComponent, isComponentDef, isContentQueryHost, isRootView, loadInternal, readPatchedLView, resetPreOrderHookFlags, unwrapRNode, viewAttachedToChangeDetector } from './util/view_utils';\n/**\n * A permanent marker promise which signifies that the current CD tree is\n * clean.\n * @type {?}\n */\nconst _CLEAN_PROMISE = Promise.resolve(null);\n/** @enum {number} */\nconst BindingDirection = {\n    Input: 0,\n    Output: 1,\n};\n/**\n * Refreshes the view, executing the following steps in that order:\n * triggers init hooks, refreshes dynamic embedded views, triggers content hooks, sets host\n * bindings, refreshes child components.\n * Note: view hooks are triggered later when leaving the view.\n * @param {?} lView\n * @return {?}\n */\nexport function refreshDescendantViews(lView) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const creationMode = isCreationMode(lView);\n    // This needs to be set before children are processed to support recursive components\n    tView.firstTemplatePass = false;\n    // Resetting the bindingIndex of the current LView as the next steps may trigger change detection.\n    lView[BINDING_INDEX] = tView.bindingStartIndex;\n    // If this is a creation pass, we should not call lifecycle hooks or evaluate bindings.\n    // This will be done in the update pass.\n    if (!creationMode) {\n        /** @type {?} */\n        const checkNoChangesMode = getCheckNoChangesMode();\n        executePreOrderHooks(lView, tView, checkNoChangesMode, undefined);\n        refreshDynamicEmbeddedViews(lView);\n        // Content query results must be refreshed before content hooks are called.\n        refreshContentQueries(tView, lView);\n        resetPreOrderHookFlags(lView);\n        executeHooks(lView, tView.contentHooks, tView.contentCheckHooks, checkNoChangesMode, 1 /* AfterContentInitHooksToBeRun */, undefined);\n        setHostBindings(tView, lView);\n    }\n    // We resolve content queries specifically marked as `static` in creation mode. Dynamic\n    // content queries are resolved during change detection (i.e. update mode), after embedded\n    // views are refreshed (see block above).\n    if (creationMode && tView.staticContentQueries) {\n        refreshContentQueries(tView, lView);\n    }\n    refreshChildComponents(tView.components);\n}\n/**\n * Sets the host bindings for the current view.\n * @param {?} tView\n * @param {?} viewData\n * @return {?}\n */\nexport function setHostBindings(tView, viewData) {\n    if (tView.expandoInstructions) {\n        /** @type {?} */\n        let bindingRootIndex = viewData[BINDING_INDEX] = tView.expandoStartIndex;\n        setBindingRoot(bindingRootIndex);\n        /** @type {?} */\n        let currentDirectiveIndex = -1;\n        /** @type {?} */\n        let currentElementIndex = -1;\n        for (let i = 0; i < tView.expandoInstructions.length; i++) {\n            /** @type {?} */\n            const instruction = tView.expandoInstructions[i];\n            if (typeof instruction === 'number') {\n                if (instruction <= 0) {\n                    // Negative numbers mean that we are starting new EXPANDO block and need to update\n                    // the current element and directive index.\n                    currentElementIndex = -instruction;\n                    // Injector block and providers are taken into account.\n                    /** @type {?} */\n                    const providerCount = ((/** @type {?} */ (tView.expandoInstructions[++i])));\n                    bindingRootIndex += INJECTOR_BLOOM_PARENT_SIZE + providerCount;\n                    currentDirectiveIndex = bindingRootIndex;\n                }\n                else {\n                    // This is either the injector size (so the binding root can skip over directives\n                    // and get to the first set of host bindings on this node) or the host var count\n                    // (to get to the next set of host bindings on this node).\n                    bindingRootIndex += instruction;\n                }\n                setBindingRoot(bindingRootIndex);\n            }\n            else {\n                // If it's not a number, it's a host binding function that needs to be executed.\n                if (instruction !== null) {\n                    viewData[BINDING_INDEX] = bindingRootIndex;\n                    instruction(2 /* Update */, unwrapRNode(viewData[currentDirectiveIndex]), currentElementIndex);\n                }\n                currentDirectiveIndex++;\n            }\n        }\n    }\n}\n/**\n * Refreshes content queries for all directives in the given view.\n * @param {?} tView\n * @param {?} lView\n * @return {?}\n */\nfunction refreshContentQueries(tView, lView) {\n    if (tView.contentQueries != null) {\n        setCurrentQueryIndex(0);\n        for (let i = 0; i < tView.contentQueries.length; i++) {\n            /** @type {?} */\n            const directiveDefIdx = tView.contentQueries[i];\n            /** @type {?} */\n            const directiveDef = (/** @type {?} */ (tView.data[directiveDefIdx]));\n            ngDevMode &&\n                assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n            (/** @type {?} */ (directiveDef.contentQueries))(2 /* Update */, lView[directiveDefIdx], directiveDefIdx);\n        }\n    }\n}\n/**\n * Refreshes child components in the current view.\n * @param {?} components\n * @return {?}\n */\nfunction refreshChildComponents(components) {\n    if (components != null) {\n        for (let i = 0; i < components.length; i++) {\n            componentRefresh(components[i]);\n        }\n    }\n}\n/**\n * @template T\n * @param {?} parentLView\n * @param {?} tView\n * @param {?} context\n * @param {?} flags\n * @param {?} host\n * @param {?} tHostNode\n * @param {?=} rendererFactory\n * @param {?=} renderer\n * @param {?=} sanitizer\n * @param {?=} injector\n * @return {?}\n */\nexport function createLView(parentLView, tView, context, flags, host, tHostNode, rendererFactory, renderer, sanitizer, injector) {\n    /** @type {?} */\n    const lView = (/** @type {?} */ (tView.blueprint.slice()));\n    lView[HOST] = host;\n    lView[FLAGS] = flags | 4 /* CreationMode */ | 128 /* Attached */ | 8 /* FirstLViewPass */;\n    resetPreOrderHookFlags(lView);\n    lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n    lView[CONTEXT] = context;\n    lView[RENDERER_FACTORY] = (/** @type {?} */ ((rendererFactory || parentLView && parentLView[RENDERER_FACTORY])));\n    ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');\n    lView[RENDERER] = (/** @type {?} */ ((renderer || parentLView && parentLView[RENDERER])));\n    ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n    lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || (/** @type {?} */ (null));\n    lView[(/** @type {?} */ (INJECTOR))] = injector || parentLView && parentLView[INJECTOR] || null;\n    lView[T_HOST] = tHostNode;\n    ngDevMode && attachLViewDebug(lView);\n    return lView;\n}\n/**\n * @param {?} index\n * @param {?} type\n * @param {?} native\n * @param {?} name\n * @param {?} attrs\n * @return {?}\n */\nexport function createNodeAtIndex(index, type, native, name, attrs) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const adjustedIndex = index + HEADER_OFFSET;\n    ngDevMode &&\n        assertLessThan(adjustedIndex, lView.length, `Slot should have been initialized with null`);\n    lView[adjustedIndex] = native;\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const isParent = getIsParent();\n    /** @type {?} */\n    let tNode = (/** @type {?} */ (tView.data[adjustedIndex]));\n    if (tNode == null) {\n        /** @type {?} */\n        const parent = isParent ? previousOrParentTNode : previousOrParentTNode && previousOrParentTNode.parent;\n        // Parents cannot cross component boundaries because components will be used in multiple places,\n        // so it's only set if the view is the same.\n        /** @type {?} */\n        const parentInSameView = parent && parent !== lView[T_HOST];\n        /** @type {?} */\n        const tParentNode = parentInSameView ? (/** @type {?} */ (parent)) : null;\n        tNode = tView.data[adjustedIndex] = createTNode(tParentNode, type, adjustedIndex, name, attrs);\n    }\n    // Now link ourselves into the tree.\n    // We need this even if tNode exists, otherwise we might end up pointing to unexisting tNodes when\n    // we use i18n (especially with ICU expressions that update the DOM during the update phase).\n    if (previousOrParentTNode) {\n        if (isParent && previousOrParentTNode.child == null &&\n            (tNode.parent !== null || previousOrParentTNode.type === 2 /* View */)) {\n            // We are in the same view, which means we are adding content node to the parent view.\n            previousOrParentTNode.child = tNode;\n        }\n        else if (!isParent) {\n            previousOrParentTNode.next = tNode;\n        }\n    }\n    if (tView.firstChild == null) {\n        tView.firstChild = tNode;\n    }\n    setPreviousOrParentTNode(tNode);\n    setIsParent(true);\n    return (/** @type {?} */ (tNode));\n}\n/**\n * @param {?} tView\n * @param {?} tParentNode\n * @param {?} index\n * @param {?} lView\n * @return {?}\n */\nexport function assignTViewNodeToLView(tView, tParentNode, index, lView) {\n    // View nodes are not stored in data because they can be added / removed at runtime (which\n    // would cause indices to change). Their TNodes are instead stored in tView.node.\n    /** @type {?} */\n    let tNode = tView.node;\n    if (tNode == null) {\n        ngDevMode && tParentNode &&\n            assertNodeOfPossibleTypes(tParentNode, 3 /* Element */, 0 /* Container */);\n        tView.node = tNode = (/** @type {?} */ (createTNode((/** @type {?} */ (tParentNode)), //\n        2 /* View */, index, null, null)));\n    }\n    return lView[T_HOST] = (/** @type {?} */ (tNode));\n}\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply() or ComponentFactory.create), we need to adjust the blueprint for future\n * template passes.\n * @param {?} view\n * @param {?} numSlotsToAlloc\n * @return {?}\n */\nexport function allocExpando(view, numSlotsToAlloc) {\n    /** @type {?} */\n    const tView = view[TVIEW];\n    if (tView.firstTemplatePass) {\n        for (let i = 0; i < numSlotsToAlloc; i++) {\n            tView.blueprint.push(null);\n            tView.data.push(null);\n            view.push(null);\n        }\n        // We should only increment the expando start index if there aren't already directives\n        // and injectors saved in the \"expando\" section\n        if (!tView.expandoInstructions) {\n            tView.expandoStartIndex += numSlotsToAlloc;\n        }\n        else {\n            // Since we're adding the dynamic nodes into the expando section, we need to let the host\n            // bindings know that they should skip x slots\n            tView.expandoInstructions.push(numSlotsToAlloc);\n        }\n    }\n}\n//////////////////////////\n//// Render\n//////////////////////////\n/**\n *\n * @template T\n * @param {?} hostNode Existing node to render into.\n * @param {?} templateFn Template function with the instructions.\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars\n * @param {?} context to pass into the template.\n * @param {?} providedRendererFactory renderer factory to use\n * @param {?} componentView\n * @param {?=} directives Directive defs that should be used for matching\n * @param {?=} pipes Pipe defs that should be used for matching\n * @param {?=} sanitizer\n * @return {?}\n */\nexport function renderTemplate(hostNode, templateFn, consts, vars, context, providedRendererFactory, componentView, directives, pipes, sanitizer) {\n    if (componentView === null) {\n        resetComponentState();\n        /** @type {?} */\n        const renderer = providedRendererFactory.createRenderer(null, null);\n        // We need to create a root view so it's possible to look up the host element through its index\n        /** @type {?} */\n        const hostLView = createLView(null, createTView(-1, null, 1, 0, null, null, null, null), {}, 16 /* CheckAlways */ | 512 /* IsRoot */, null, null, providedRendererFactory, renderer);\n        enterView(hostLView, null); // SUSPECT! why do we need to enter the View?\n        // SUSPECT! why do we need to enter the View?\n        /** @type {?} */\n        const componentTView = getOrCreateTView(templateFn, consts, vars, directives || null, pipes || null, null, null);\n        /** @type {?} */\n        const hostTNode = createNodeAtIndex(0, 3 /* Element */, hostNode, null, null);\n        componentView = createLView(hostLView, componentTView, context, 16 /* CheckAlways */, hostNode, hostTNode, providedRendererFactory, renderer, sanitizer);\n    }\n    renderComponentOrTemplate(componentView, context, templateFn);\n    return componentView;\n}\n/**\n * Used for creating the LViewNode of a dynamic embedded view,\n * either through ViewContainerRef.createEmbeddedView() or TemplateRef.createEmbeddedView().\n * Such lViewNode will then be renderer with renderEmbeddedTemplate() (see below).\n * @template T\n * @param {?} tView\n * @param {?} context\n * @param {?} declarationView\n * @param {?} queries\n * @param {?} injectorIndex\n * @return {?}\n */\nexport function createEmbeddedViewAndNode(tView, context, declarationView, queries, injectorIndex) {\n    /** @type {?} */\n    const _isParent = getIsParent();\n    /** @type {?} */\n    const _previousOrParentTNode = getPreviousOrParentTNode();\n    setIsParent(true);\n    setPreviousOrParentTNode((/** @type {?} */ (null)));\n    /** @type {?} */\n    const lView = createLView(declarationView, tView, context, 16 /* CheckAlways */, null, null);\n    lView[DECLARATION_VIEW] = declarationView;\n    if (queries) {\n        lView[QUERIES] = queries.createView();\n    }\n    assignTViewNodeToLView(tView, null, -1, lView);\n    if (tView.firstTemplatePass) {\n        (/** @type {?} */ (tView.node)).injectorIndex = injectorIndex;\n    }\n    setIsParent(_isParent);\n    setPreviousOrParentTNode(_previousOrParentTNode);\n    return lView;\n}\n/**\n * Used for rendering embedded views (e.g. dynamically created views)\n *\n * Dynamically created views must store/retrieve their TViews differently from component views\n * because their template functions are nested in the template functions of their hosts, creating\n * closures. If their host template happens to be an embedded template in a loop (e.g. ngFor inside\n * an ngFor), the nesting would mean we'd have multiple instances of the template function, so we\n * can't store TViews in the template function itself (as we do for comps). Instead, we store the\n * TView for dynamically created views on their host TNode, which only has one instance.\n * @template T\n * @param {?} viewToRender\n * @param {?} tView\n * @param {?} context\n * @return {?}\n */\nexport function renderEmbeddedTemplate(viewToRender, tView, context) {\n    /** @type {?} */\n    const _isParent = getIsParent();\n    /** @type {?} */\n    const _previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    let oldView;\n    if (viewToRender[FLAGS] & 512 /* IsRoot */) {\n        // This is a root view inside the view tree\n        tickRootContext(getRootContext(viewToRender));\n    }\n    else {\n        try {\n            setIsParent(true);\n            setPreviousOrParentTNode((/** @type {?} */ (null)));\n            oldView = enterView(viewToRender, viewToRender[T_HOST]);\n            resetPreOrderHookFlags(viewToRender);\n            namespaceHTML();\n            (/** @type {?} */ (tView.template))(getRenderFlags(viewToRender), context);\n            // This must be set to false immediately after the first creation run because in an\n            // ngFor loop, all the views will be created together before update mode runs and turns\n            // off firstTemplatePass. If we don't set it here, instances will perform directive\n            // matching, etc again and again.\n            viewToRender[TVIEW].firstTemplatePass = false;\n            refreshDescendantViews(viewToRender);\n        }\n        finally {\n            leaveView((/** @type {?} */ (oldView)));\n            setIsParent(_isParent);\n            setPreviousOrParentTNode(_previousOrParentTNode);\n        }\n    }\n}\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @template T\n * @param {?=} level The relative level of the view from which to grab context compared to contextVewData\n * @return {?} context\n */\nexport function nextContext(level = 1) {\n    return nextContextImpl(level);\n}\n/**\n * @template T\n * @param {?} hostView\n * @param {?} context\n * @param {?=} templateFn\n * @return {?}\n */\nfunction renderComponentOrTemplate(hostView, context, templateFn) {\n    /** @type {?} */\n    const rendererFactory = hostView[RENDERER_FACTORY];\n    /** @type {?} */\n    const oldView = enterView(hostView, hostView[T_HOST]);\n    /** @type {?} */\n    const normalExecutionPath = !getCheckNoChangesMode();\n    /** @type {?} */\n    const creationModeIsActive = isCreationMode(hostView);\n    try {\n        if (normalExecutionPath && !creationModeIsActive && rendererFactory.begin) {\n            rendererFactory.begin();\n        }\n        if (creationModeIsActive) {\n            // creation mode pass\n            if (templateFn) {\n                namespaceHTML();\n                templateFn(1 /* Create */, context);\n            }\n            refreshDescendantViews(hostView);\n            hostView[FLAGS] &= ~4 /* CreationMode */;\n        }\n        // update mode pass\n        resetPreOrderHookFlags(hostView);\n        templateFn && templateFn(2 /* Update */, context);\n        refreshDescendantViews(hostView);\n    }\n    finally {\n        if (normalExecutionPath && !creationModeIsActive && rendererFactory.end) {\n            rendererFactory.end();\n        }\n        leaveView(oldView);\n    }\n}\n/**\n * This function returns the default configuration of rendering flags depending on when the\n * template is in creation mode or update mode. Update block and create block are\n * always run separately.\n * @param {?} view\n * @return {?}\n */\nfunction getRenderFlags(view) {\n    return isCreationMode(view) ? 1 /* Create */ : 2 /* Update */;\n}\n//////////////////////////\n//// Namespace\n//////////////////////////\n/** @type {?} */\nlet _currentNamespace = null;\n/**\n * @return {?}\n */\nexport function namespaceSVG() {\n    _currentNamespace = 'http://www.w3.org/2000/svg';\n}\n/**\n * @return {?}\n */\nexport function namespaceMathML() {\n    _currentNamespace = 'http://www.w3.org/1998/MathML/';\n}\n/**\n * @return {?}\n */\nexport function namespaceHTML() {\n    _currentNamespace = null;\n}\n//////////////////////////\n//// Element\n//////////////////////////\n/**\n * Creates an empty element using {\\@link elementStart} and {\\@link elementEnd}\n *\n * @param {?} index Index of the element in the data array\n * @param {?} name Name of the DOM Node\n * @param {?=} attrs Statically bound set of attributes, classes, and styles to be written into the DOM\n *              element on creation. Use [AttributeMarker] to denote the meaning of this array.\n * @param {?=} localRefs A set of local reference bindings on the element.\n * @return {?}\n */\nexport function element(index, name, attrs, localRefs) {\n    elementStart(index, name, attrs, localRefs);\n    elementEnd();\n}\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param {?} index Index of the element in the LView array\n * @param {?=} attrs Set of attributes to be used when matching directives.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n * @return {?}\n */\nexport function elementContainerStart(index, attrs, localRefs) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const renderer = lView[RENDERER];\n    /** @type {?} */\n    const tagName = 'ng-container';\n    ngDevMode && assertEqual(lView[BINDING_INDEX], tView.bindingStartIndex, 'element containers should be created before any bindings');\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    /** @type {?} */\n    const native = renderer.createComment(ngDevMode ? tagName : '');\n    ngDevMode && assertDataInRange(lView, index - 1);\n    /** @type {?} */\n    const tNode = createNodeAtIndex(index, 4 /* ElementContainer */, native, tagName, attrs || null);\n    appendChild(native, tNode, lView);\n    createDirectivesAndLocals(tView, lView, localRefs);\n    attachPatchData(native, lView);\n    /** @type {?} */\n    const currentQueries = lView[QUERIES];\n    if (currentQueries) {\n        currentQueries.addNode(tNode);\n        lView[QUERIES] = currentQueries.clone();\n    }\n    executeContentQueries(tView, tNode, lView);\n}\n/**\n * @param {?} tView\n * @param {?} tNode\n * @param {?} lView\n * @return {?}\n */\nfunction executeContentQueries(tView, tNode, lView) {\n    if (isContentQueryHost(tNode)) {\n        /** @type {?} */\n        const start = tNode.directiveStart;\n        /** @type {?} */\n        const end = tNode.directiveEnd;\n        for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (tView.data[directiveIndex]));\n            if (def.contentQueries) {\n                def.contentQueries(1 /* Create */, lView[directiveIndex], directiveIndex);\n            }\n        }\n    }\n}\n/**\n * Mark the end of the <ng-container>.\n * @return {?}\n */\nexport function elementContainerEnd() {\n    /** @type {?} */\n    let previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (getIsParent()) {\n        setIsParent(false);\n    }\n    else {\n        ngDevMode && assertHasParent(previousOrParentTNode);\n        previousOrParentTNode = (/** @type {?} */ (previousOrParentTNode.parent));\n        setPreviousOrParentTNode(previousOrParentTNode);\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 4 /* ElementContainer */);\n    /** @type {?} */\n    const currentQueries = lView[QUERIES];\n    if (currentQueries) {\n        lView[QUERIES] = currentQueries.parent;\n    }\n    registerPostOrderHooks(tView, previousOrParentTNode);\n}\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param {?} index Index of the element in the LView array\n * @param {?} name Name of the DOM Node\n * @param {?=} attrs Statically bound set of attributes, classes, and styles to be written into the DOM\n *              element on creation. Use [AttributeMarker] to denote the meaning of this array.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n * @return {?}\n */\nexport function elementStart(index, name, attrs, localRefs) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    ngDevMode && assertEqual(lView[BINDING_INDEX], tView.bindingStartIndex, 'elements should be created before any bindings ');\n    ngDevMode && ngDevMode.rendererCreateElement++;\n    /** @type {?} */\n    const native = elementCreate(name);\n    ngDevMode && assertDataInRange(lView, index - 1);\n    /** @type {?} */\n    const tNode = createNodeAtIndex(index, 3 /* Element */, (/** @type {?} */ (native)), name, attrs || null);\n    if (attrs) {\n        /** @type {?} */\n        const lastAttrIndex = setUpAttributes(native, attrs);\n        // it's important to only prepare styling-related datastructures once for a given\n        // tNode and not each time an element is created. Also, the styling code is designed\n        // to be patched and constructed at various points, but only up until the styling\n        // template is first allocated (which happens when the very first style/class binding\n        // value is evaluated). When the template is allocated (when it turns into a context)\n        // then the styling template is locked and cannot be further extended (it can only be\n        // instantiated into a context per element)\n        if (tView.firstTemplatePass && !tNode.stylingTemplate) {\n            /** @type {?} */\n            const stylingAttrsStartIndex = attrsStylingIndexOf(attrs, lastAttrIndex);\n            if (stylingAttrsStartIndex >= 0) {\n                tNode.stylingTemplate = initializeStaticStylingContext(attrs, stylingAttrsStartIndex);\n            }\n        }\n    }\n    appendChild(native, tNode, lView);\n    createDirectivesAndLocals(tView, lView, localRefs);\n    // any immediate children of a component or template container must be pre-emptively\n    // monkey-patched with the component view data so that the element can be inspected\n    // later on using any element discovery utility methods (see `element_discovery.ts`)\n    if (getElementDepthCount() === 0) {\n        attachPatchData(native, lView);\n    }\n    increaseElementDepthCount();\n    // if a directive contains a host binding for \"class\" then all class-based data will\n    // flow through that (except for `[class.prop]` bindings). This also includes initial\n    // static class values as well. (Note that this will be fixed once map-based `[style]`\n    // and `[class]` bindings work for multiple directives.)\n    if (tView.firstTemplatePass) {\n        /** @type {?} */\n        const inputData = initializeTNodeInputs(tNode);\n        if (inputData && inputData.hasOwnProperty('class')) {\n            tNode.flags |= 8 /* hasClassInput */;\n        }\n        if (inputData && inputData.hasOwnProperty('style')) {\n            tNode.flags |= 16 /* hasStyleInput */;\n        }\n    }\n    // There is no point in rendering styles when a class directive is present since\n    // it will take that over for us (this will be removed once #FW-882 is in).\n    if (tNode.stylingTemplate) {\n        renderInitialClasses(native, tNode.stylingTemplate, lView[RENDERER]);\n        renderInitialStyles(native, tNode.stylingTemplate, lView[RENDERER]);\n    }\n    /** @type {?} */\n    const currentQueries = lView[QUERIES];\n    if (currentQueries) {\n        currentQueries.addNode(tNode);\n        lView[QUERIES] = currentQueries.clone();\n    }\n    executeContentQueries(tView, tNode, lView);\n}\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param {?} name the tag name\n * @param {?=} overriddenRenderer Optional A renderer to override the default one\n * @return {?} the element created\n */\nexport function elementCreate(name, overriddenRenderer) {\n    /** @type {?} */\n    let native;\n    /** @type {?} */\n    const rendererToUse = overriddenRenderer || getLView()[RENDERER];\n    if (isProceduralRenderer(rendererToUse)) {\n        native = rendererToUse.createElement(name, _currentNamespace);\n    }\n    else {\n        if (_currentNamespace === null) {\n            native = rendererToUse.createElement(name);\n        }\n        else {\n            native = rendererToUse.createElementNS(_currentNamespace, name);\n        }\n    }\n    return native;\n}\n/**\n * Creates directive instances and populates local refs.\n *\n * @param {?} tView\n * @param {?} lView\n * @param {?} localRefs Local refs of the node in question\n * @param {?=} localRefExtractor mapping function that extracts local ref value from TNode\n * @return {?}\n */\nfunction createDirectivesAndLocals(tView, lView, localRefs, localRefExtractor = getNativeByTNode) {\n    if (!getBindingsEnabled())\n        return;\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    if (tView.firstTemplatePass) {\n        ngDevMode && ngDevMode.firstTemplatePass++;\n        resolveDirectives(tView, lView, findDirectiveMatches(tView, lView, previousOrParentTNode), previousOrParentTNode, localRefs || null);\n    }\n    instantiateAllDirectives(tView, lView, previousOrParentTNode);\n    invokeDirectivesHostBindings(tView, lView, previousOrParentTNode);\n    saveResolvedLocalsInData(lView, previousOrParentTNode, localRefExtractor);\n}\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n * @param {?} viewData\n * @param {?} tNode\n * @param {?} localRefExtractor\n * @return {?}\n */\nfunction saveResolvedLocalsInData(viewData, tNode, localRefExtractor) {\n    /** @type {?} */\n    const localNames = tNode.localNames;\n    if (localNames) {\n        /** @type {?} */\n        let localIndex = tNode.index + 1;\n        for (let i = 0; i < localNames.length; i += 2) {\n            /** @type {?} */\n            const index = (/** @type {?} */ (localNames[i + 1]));\n            /** @type {?} */\n            const value = index === -1 ?\n                localRefExtractor((/** @type {?} */ (tNode)), viewData) :\n                viewData[index];\n            viewData[localIndex++] = value;\n        }\n    }\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param {?} templateFn The template from which to get static data\n * @param {?} consts The number of nodes, local refs, and pipes in this view\n * @param {?} vars The number of bindings and pure function bindings in this view\n * @param {?} directives Directive defs that should be saved on TView\n * @param {?} pipes Pipe defs that should be saved on TView\n * @param {?} viewQuery View query that should be saved on TView\n * @param {?} schemas Schemas that should be saved on TView\n * @return {?} TView\n */\nexport function getOrCreateTView(templateFn, consts, vars, directives, pipes, viewQuery, schemas) {\n    // TODO(misko): reading `ngPrivateData` here is problematic for two reasons\n    // 1. It is a megamorphic call on each invocation.\n    // 2. For nested embedded views (ngFor inside ngFor) the template instance is per\n    //    outer template invocation, which means that no such property will exist\n    // Correct solution is to only put `ngPrivateData` on the Component template\n    // and not on embedded templates.\n    return templateFn.ngPrivateData ||\n        (templateFn.ngPrivateData = (/** @type {?} */ (createTView(-1, templateFn, consts, vars, directives, pipes, viewQuery, schemas))));\n}\n/**\n * Creates a TView instance\n *\n * @param {?} viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic\n * @param {?} templateFn Template function\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars\n * @param {?} directives Registry of directives for this view\n * @param {?} pipes Registry of pipes for this view\n * @param {?} viewQuery View queries for this view\n * @param {?} schemas Schemas for this view\n * @return {?}\n */\nexport function createTView(viewIndex, templateFn, consts, vars, directives, pipes, viewQuery, schemas) {\n    ngDevMode && ngDevMode.tView++;\n    /** @type {?} */\n    const bindingStartIndex = HEADER_OFFSET + consts;\n    // This length does not yet contain host bindings from child directives because at this point,\n    // we don't know which directives are active on this template. As soon as a directive is matched\n    // that has a host binding, we will update the blueprint with that def's hostVars count.\n    /** @type {?} */\n    const initialViewLength = bindingStartIndex + vars;\n    /** @type {?} */\n    const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n    return blueprint[(/** @type {?} */ (TVIEW))] = {\n        id: viewIndex,\n        blueprint: blueprint,\n        template: templateFn,\n        viewQuery: viewQuery,\n        node: (/** @type {?} */ (null)),\n        data: blueprint.slice().fill(null, bindingStartIndex),\n        bindingStartIndex: bindingStartIndex,\n        viewQueryStartIndex: initialViewLength,\n        expandoStartIndex: initialViewLength,\n        expandoInstructions: null,\n        firstTemplatePass: true,\n        staticViewQueries: false,\n        staticContentQueries: false,\n        preOrderHooks: null,\n        preOrderCheckHooks: null,\n        contentHooks: null,\n        contentCheckHooks: null,\n        viewHooks: null,\n        viewCheckHooks: null,\n        destroyHooks: null,\n        cleanup: null,\n        contentQueries: null,\n        components: null,\n        directiveRegistry: typeof directives === 'function' ? directives() : directives,\n        pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n        firstChild: null,\n        schemas: schemas,\n    };\n}\n/**\n * @param {?} bindingStartIndex\n * @param {?} initialViewLength\n * @return {?}\n */\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\n    /** @type {?} */\n    const blueprint = (/** @type {?} */ (new Array(initialViewLength)\n        .fill(null, 0, bindingStartIndex)\n        .fill(NO_CHANGE, bindingStartIndex)));\n    blueprint[BINDING_INDEX] = bindingStartIndex;\n    return blueprint;\n}\n/**\n * @param {?} text\n * @param {?} token\n * @return {?}\n */\nexport function createError(text, token) {\n    return new Error(`Renderer: ${text} [${renderStringify(token)}]`);\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param {?} factory\n * @param {?} elementOrSelector Render element or CSS selector to locate the element.\n * @return {?}\n */\nexport function locateHostElement(factory, elementOrSelector) {\n    /** @type {?} */\n    const defaultRenderer = factory.createRenderer(null, null);\n    /** @type {?} */\n    const rNode = typeof elementOrSelector === 'string' ?\n        (isProceduralRenderer(defaultRenderer) ?\n            defaultRenderer.selectRootElement(elementOrSelector) :\n            defaultRenderer.querySelector(elementOrSelector)) :\n        elementOrSelector;\n    if (ngDevMode && !rNode) {\n        if (typeof elementOrSelector === 'string') {\n            throw createError('Host node with selector not found:', elementOrSelector);\n        }\n        else {\n            throw createError('Host node is required:', elementOrSelector);\n        }\n    }\n    return rNode;\n}\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param {?} eventName Name of the event\n * @param {?} listenerFn The function to be called when event emits\n * @param {?=} useCapture Whether or not to use capture in event listener\n * @param {?=} eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n * @return {?}\n */\nexport function listener(eventName, listenerFn, useCapture = false, eventTargetResolver) {\n    listenerInternal(eventName, listenerFn, useCapture, eventTargetResolver);\n}\n/**\n * Registers a synthetic host listener (e.g. `(\\@foo.start)`) on a component.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host listener (e.g. `\\@HostListener('\\@foo.start')`) properly gets rendered\n * in the component's renderer. Normally all host listeners are evaluated with the\n * parent component's renderer, but, in the case of animation \\@triggers, they need\n * to be evaluated with the sub component's renderer (because that's where the\n * animation triggers are defined).\n *\n * Do not use this instruction as a replacement for `listener`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @template T\n * @param {?} eventName Name of the event\n * @param {?} listenerFn The function to be called when event emits\n * @param {?=} useCapture Whether or not to use capture in event listener\n * @param {?=} eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n * @return {?}\n */\nexport function componentHostSyntheticListener(eventName, listenerFn, useCapture = false, eventTargetResolver) {\n    listenerInternal(eventName, listenerFn, useCapture, eventTargetResolver, loadComponentRenderer);\n}\n/**\n * @param {?} eventName\n * @param {?} listenerFn\n * @param {?=} useCapture\n * @param {?=} eventTargetResolver\n * @param {?=} loadRendererFn\n * @return {?}\n */\nfunction listenerInternal(eventName, listenerFn, useCapture = false, eventTargetResolver, loadRendererFn) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const firstTemplatePass = tView.firstTemplatePass;\n    /** @type {?} */\n    const tCleanup = firstTemplatePass && (tView.cleanup || (tView.cleanup = []));\n    ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 4 /* ElementContainer */);\n    // add native event listener - applicable to elements only\n    if (tNode.type === 3 /* Element */) {\n        /** @type {?} */\n        const native = (/** @type {?} */ (getNativeByTNode(tNode, lView)));\n        /** @type {?} */\n        const resolved = eventTargetResolver ? eventTargetResolver(native) : (/** @type {?} */ ({}));\n        /** @type {?} */\n        const target = resolved.target || native;\n        ngDevMode && ngDevMode.rendererAddEventListener++;\n        /** @type {?} */\n        const renderer = loadRendererFn ? loadRendererFn(tNode, lView) : lView[RENDERER];\n        /** @type {?} */\n        const lCleanup = getCleanup(lView);\n        /** @type {?} */\n        const lCleanupIndex = lCleanup.length;\n        /** @type {?} */\n        let useCaptureOrSubIdx = useCapture;\n        // In order to match current behavior, native DOM event listeners must be added for all\n        // events (including outputs).\n        if (isProceduralRenderer(renderer)) {\n            // The first argument of `listen` function in Procedural Renderer is:\n            // - either a target name (as a string) in case of global target (window, document, body)\n            // - or element reference (in all other cases)\n            listenerFn = wrapListener(tNode, lView, listenerFn, false /** preventDefault */);\n            /** @type {?} */\n            const cleanupFn = renderer.listen(resolved.name || target, eventName, listenerFn);\n            lCleanup.push(listenerFn, cleanupFn);\n            useCaptureOrSubIdx = lCleanupIndex + 1;\n        }\n        else {\n            listenerFn = wrapListener(tNode, lView, listenerFn, true /** preventDefault */);\n            target.addEventListener(eventName, listenerFn, useCapture);\n            lCleanup.push(listenerFn);\n        }\n        /** @type {?} */\n        const idxOrTargetGetter = eventTargetResolver ?\n            (_lView) => eventTargetResolver(unwrapRNode(_lView[tNode.index])).target :\n            tNode.index;\n        tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, useCaptureOrSubIdx);\n    }\n    // subscribe to directive outputs\n    if (tNode.outputs === undefined) {\n        // if we create TNode here, inputs must be undefined so we know they still need to be\n        // checked\n        tNode.outputs = generatePropertyAliases(tNode, 1 /* Output */);\n    }\n    /** @type {?} */\n    const outputs = tNode.outputs;\n    /** @type {?} */\n    let props;\n    if (outputs && (props = outputs[eventName])) {\n        /** @type {?} */\n        const propsLength = props.length;\n        if (propsLength) {\n            /** @type {?} */\n            const lCleanup = getCleanup(lView);\n            for (let i = 0; i < propsLength; i += 3) {\n                /** @type {?} */\n                const index = (/** @type {?} */ (props[i]));\n                ngDevMode && assertDataInRange(lView, index);\n                /** @type {?} */\n                const minifiedName = props[i + 2];\n                /** @type {?} */\n                const directiveInstance = lView[index];\n                /** @type {?} */\n                const output = directiveInstance[minifiedName];\n                if (ngDevMode && !isObservable(output)) {\n                    throw new Error(`@Output ${minifiedName} not initialized in '${directiveInstance.constructor.name}'.`);\n                }\n                /** @type {?} */\n                const subscription = output.subscribe(listenerFn);\n                /** @type {?} */\n                const idx = lCleanup.length;\n                lCleanup.push(listenerFn, subscription);\n                tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n            }\n        }\n    }\n}\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n * @param {?} lView\n * @param {?} context\n * @param {?} cleanupFn\n * @return {?}\n */\nexport function storeCleanupWithContext(lView, context, cleanupFn) {\n    /** @type {?} */\n    const lCleanup = getCleanup(lView);\n    lCleanup.push(context);\n    if (lView[TVIEW].firstTemplatePass) {\n        getTViewCleanup(lView).push(cleanupFn, lCleanup.length - 1);\n    }\n}\n/**\n * Saves the cleanup function itself in LView.cleanupInstances.\n *\n * This is necessary for functions that are wrapped with their contexts, like in renderer2\n * listeners.\n *\n * On the first template pass, the index of the cleanup function is saved in TView.\n * @param {?} view\n * @param {?} cleanupFn\n * @return {?}\n */\nexport function storeCleanupFn(view, cleanupFn) {\n    getCleanup(view).push(cleanupFn);\n    if (view[TVIEW].firstTemplatePass) {\n        getTViewCleanup(view).push((/** @type {?} */ (view[CLEANUP])).length - 1, null);\n    }\n}\n/**\n * Mark the end of the element.\n * @return {?}\n */\nexport function elementEnd() {\n    /** @type {?} */\n    let previousOrParentTNode = getPreviousOrParentTNode();\n    if (getIsParent()) {\n        setIsParent(false);\n    }\n    else {\n        ngDevMode && assertHasParent(getPreviousOrParentTNode());\n        previousOrParentTNode = (/** @type {?} */ (previousOrParentTNode.parent));\n        setPreviousOrParentTNode(previousOrParentTNode);\n    }\n    // this is required for all host-level styling-related instructions to run\n    // in the correct order\n    previousOrParentTNode.onElementCreationFns && applyOnCreateInstructions(previousOrParentTNode);\n    ngDevMode && assertNodeType(previousOrParentTNode, 3 /* Element */);\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const currentQueries = lView[QUERIES];\n    if (currentQueries) {\n        lView[QUERIES] = currentQueries.parent;\n    }\n    registerPostOrderHooks(getLView()[TVIEW], previousOrParentTNode);\n    decreaseElementDepthCount();\n    // this is fired at the end of elementEnd because ALL of the stylingBindings code\n    // (for directives and the template) have now executed which means the styling\n    // context can be instantiated properly.\n    if (hasClassInput(previousOrParentTNode)) {\n        /** @type {?} */\n        const stylingContext = getStylingContext(previousOrParentTNode.index, lView);\n        setInputsForProperty(lView, (/** @type {?} */ ((/** @type {?} */ (previousOrParentTNode.inputs))['class'])), getInitialClassNameValue(stylingContext));\n    }\n    if (hasStyleInput(previousOrParentTNode)) {\n        /** @type {?} */\n        const stylingContext = getStylingContext(previousOrParentTNode.index, lView);\n        setInputsForProperty(lView, (/** @type {?} */ ((/** @type {?} */ (previousOrParentTNode.inputs))['style'])), getInitialStyleStringValue(stylingContext));\n    }\n}\n/**\n * Flushes all the lifecycle hooks for directives up until (and excluding) that node index\n *\n * @param {?} index The index of the element in the `LView`\n * @return {?}\n */\nexport function flushHooksUpTo(index) {\n    /** @type {?} */\n    const lView = getLView();\n    executePreOrderHooks(lView, lView[TVIEW], getCheckNoChangesMode(), index);\n}\n/**\n * Updates the value of removes an attribute on an Element.\n *\n * @param {?} index\n * @param {?} name name The name of the attribute.\n * @param {?} value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @param {?=} namespace Optional namespace to use when setting the attribute.\n * @return {?}\n */\nexport function elementAttribute(index, name, value, sanitizer, namespace) {\n    if (value !== NO_CHANGE) {\n        ngDevMode && validateAgainstEventAttributes(name);\n        /** @type {?} */\n        const lView = getLView();\n        /** @type {?} */\n        const renderer = lView[RENDERER];\n        /** @type {?} */\n        const element = (/** @type {?} */ (getNativeByIndex(index, lView)));\n        if (value == null) {\n            ngDevMode && ngDevMode.rendererRemoveAttribute++;\n            isProceduralRenderer(renderer) ? renderer.removeAttribute(element, name, namespace) :\n                element.removeAttribute(name);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            /** @type {?} */\n            const tNode = getTNode(index, lView);\n            /** @type {?} */\n            const strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tNode.tagName || '', name);\n            if (isProceduralRenderer(renderer)) {\n                renderer.setAttribute(element, name, strValue, namespace);\n            }\n            else {\n                namespace ? element.setAttributeNS(namespace, name, strValue) :\n                    element.setAttribute(name, strValue);\n            }\n        }\n    }\n}\n/**\n * Update a property on an element.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\@Inputs don't have to be re-compiled.\n *\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value New value to write.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @param {?=} nativeOnly Whether or not we should only set native properties and skip input check\n * (this is necessary for host property bindings)\n * @return {?}\n */\nexport function elementProperty(index, propName, value, sanitizer, nativeOnly) {\n    elementPropertyInternal(index, propName, value, sanitizer, nativeOnly);\n}\n/**\n * Updates a synthetic host binding (e.g. `[\\@foo]`) on a component.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host binding (e.g. `\\@HostBinding('\\@foo')`) properly gets rendered in\n * the component's renderer. Normally all host bindings are evaluated with the parent\n * component's renderer, but, in the case of animation \\@triggers, they need to be\n * evaluated with the sub component's renderer (because that's where the animation\n * triggers are defined).\n *\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value New value to write.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @param {?=} nativeOnly Whether or not we should only set native properties and skip input check\n * (this is necessary for host property bindings)\n * @return {?}\n */\nexport function componentHostSyntheticProperty(index, propName, value, sanitizer, nativeOnly) {\n    elementPropertyInternal(index, propName, value, sanitizer, nativeOnly, loadComponentRenderer);\n}\n/**\n * Mapping between attributes names that don't correspond to their element property names.\n * @type {?}\n */\nconst ATTR_TO_PROP = {\n    'class': 'className',\n    'for': 'htmlFor',\n    'formaction': 'formAction',\n    'innerHtml': 'innerHTML',\n    'readonly': 'readOnly',\n    'tabindex': 'tabIndex',\n};\n/**\n * @template T\n * @param {?} index\n * @param {?} propName\n * @param {?} value\n * @param {?=} sanitizer\n * @param {?=} nativeOnly\n * @param {?=} loadRendererFn\n * @return {?}\n */\nfunction elementPropertyInternal(index, propName, value, sanitizer, nativeOnly, loadRendererFn) {\n    if (value === NO_CHANGE)\n        return;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const element = (/** @type {?} */ (getNativeByIndex(index, lView)));\n    /** @type {?} */\n    const tNode = getTNode(index, lView);\n    /** @type {?} */\n    let inputData;\n    /** @type {?} */\n    let dataValue;\n    if (!nativeOnly && (inputData = initializeTNodeInputs(tNode)) &&\n        (dataValue = inputData[propName])) {\n        setInputsForProperty(lView, dataValue, value);\n        if (isComponent(tNode))\n            markDirtyIfOnPush(lView, index + HEADER_OFFSET);\n        if (ngDevMode) {\n            if (tNode.type === 3 /* Element */ || tNode.type === 0 /* Container */) {\n                setNgReflectProperties(lView, element, tNode.type, dataValue, value);\n            }\n        }\n    }\n    else if (tNode.type === 3 /* Element */) {\n        propName = ATTR_TO_PROP[propName] || propName;\n        if (ngDevMode) {\n            validateAgainstEventProperties(propName);\n            validateAgainstUnknownProperties(lView, element, propName, tNode);\n            ngDevMode.rendererSetProperty++;\n        }\n        savePropertyDebugData(tNode, lView, propName, lView[TVIEW].data, nativeOnly);\n        /** @type {?} */\n        const renderer = loadRendererFn ? loadRendererFn(tNode, lView) : lView[RENDERER];\n        // It is assumed that the sanitizer is only added when the compiler determines that the property\n        // is risky, so sanitization can be done without further checks.\n        value = sanitizer != null ? ((/** @type {?} */ (sanitizer(value, tNode.tagName || '', propName)))) : value;\n        if (isProceduralRenderer(renderer)) {\n            renderer.setProperty((/** @type {?} */ (element)), propName, value);\n        }\n        else if (!isAnimationProp(propName)) {\n            ((/** @type {?} */ (element))).setProperty ? ((/** @type {?} */ (element))).setProperty(propName, value) :\n                ((/** @type {?} */ (element)))[propName] = value;\n        }\n    }\n}\n/**\n * @param {?} hostView\n * @param {?} element\n * @param {?} propName\n * @param {?} tNode\n * @return {?}\n */\nfunction validateAgainstUnknownProperties(hostView, element, propName, tNode) {\n    // If the tag matches any of the schemas we shouldn't throw.\n    if (matchingSchemas(hostView, tNode.tagName)) {\n        return;\n    }\n    // If prop is not a known property of the HTML element...\n    if (!(propName in element) &&\n        // and we are in a browser context... (web worker nodes should be skipped)\n        typeof Node === 'function' && element instanceof Node &&\n        // and isn't a synthetic animation property...\n        propName[0] !== ANIMATION_PROP_PREFIX) {\n        // ... it is probably a user error and we should throw.\n        throw new Error(`Template error: Can't bind to '${propName}' since it isn't a known property of '${tNode.tagName}'.`);\n    }\n}\n/**\n * @param {?} hostView\n * @param {?} tagName\n * @return {?}\n */\nfunction matchingSchemas(hostView, tagName) {\n    /** @type {?} */\n    const schemas = hostView[TVIEW].schemas;\n    if (schemas !== null) {\n        for (let i = 0; i < schemas.length; i++) {\n            /** @type {?} */\n            const schema = schemas[i];\n            if (schema === NO_ERRORS_SCHEMA ||\n                schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n/**\n * Stores debugging data for this property binding on first template pass.\n * This enables features like DebugElement.properties.\n * @param {?} tNode\n * @param {?} lView\n * @param {?} propName\n * @param {?} tData\n * @param {?} nativeOnly\n * @return {?}\n */\nfunction savePropertyDebugData(tNode, lView, propName, tData, nativeOnly) {\n    /** @type {?} */\n    const lastBindingIndex = lView[BINDING_INDEX] - 1;\n    // Bind/interpolation functions save binding metadata in the last binding index,\n    // but leave the property name blank. If the interpolation delimiter is at the 0\n    // index, we know that this is our first pass and the property name still needs to\n    // be set.\n    /** @type {?} */\n    const bindingMetadata = (/** @type {?} */ (tData[lastBindingIndex]));\n    if (bindingMetadata[0] == INTERPOLATION_DELIMITER) {\n        tData[lastBindingIndex] = propName + bindingMetadata;\n        // We don't want to store indices for host bindings because they are stored in a\n        // different part of LView (the expando section).\n        if (!nativeOnly) {\n            if (tNode.propertyMetadataStartIndex == -1) {\n                tNode.propertyMetadataStartIndex = lastBindingIndex;\n            }\n            tNode.propertyMetadataEndIndex = lastBindingIndex + 1;\n        }\n    }\n}\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param {?} tParent\n * @param {?} type The type of the node\n * @param {?} adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n * @param {?} tagName The tag name of the node\n * @param {?} attrs The attributes defined on this node\n * @return {?} the TNode object\n */\nexport function createTNode(tParent, type, adjustedIndex, tagName, attrs) {\n    ngDevMode && ngDevMode.tNode++;\n    return {\n        type: type,\n        index: adjustedIndex,\n        injectorIndex: tParent ? tParent.injectorIndex : -1,\n        directiveStart: -1,\n        directiveEnd: -1,\n        propertyMetadataStartIndex: -1,\n        propertyMetadataEndIndex: -1,\n        flags: 0,\n        providerIndexes: 0,\n        tagName: tagName,\n        attrs: attrs,\n        localNames: null,\n        initialInputs: undefined,\n        inputs: undefined,\n        outputs: undefined,\n        tViews: null,\n        next: null,\n        child: null,\n        parent: tParent,\n        stylingTemplate: null,\n        projection: null,\n        onElementCreationFns: null,\n    };\n}\n/**\n * Set the inputs of directives at the current node to corresponding value.\n *\n * @param {?} lView the `LView` which contains the directives.\n * @param {?} inputs\n * @param {?} value Value to set.\n * @return {?}\n */\nfunction setInputsForProperty(lView, inputs, value) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    for (let i = 0; i < inputs.length;) {\n        /** @type {?} */\n        const index = (/** @type {?} */ (inputs[i++]));\n        /** @type {?} */\n        const publicName = (/** @type {?} */ (inputs[i++]));\n        /** @type {?} */\n        const privateName = (/** @type {?} */ (inputs[i++]));\n        /** @type {?} */\n        const instance = lView[index];\n        ngDevMode && assertDataInRange(lView, index);\n        /** @type {?} */\n        const def = (/** @type {?} */ (tView.data[index]));\n        /** @type {?} */\n        const setInput = def.setInput;\n        if (setInput) {\n            (/** @type {?} */ (def.setInput))(instance, value, publicName, privateName);\n        }\n        else {\n            instance[privateName] = value;\n        }\n    }\n}\n/**\n * @param {?} lView\n * @param {?} element\n * @param {?} type\n * @param {?} inputs\n * @param {?} value\n * @return {?}\n */\nfunction setNgReflectProperties(lView, element, type, inputs, value) {\n    for (let i = 0; i < inputs.length; i += 3) {\n        /** @type {?} */\n        const renderer = lView[RENDERER];\n        /** @type {?} */\n        const attrName = normalizeDebugBindingName((/** @type {?} */ (inputs[i + 2])));\n        /** @type {?} */\n        const debugValue = normalizeDebugBindingValue(value);\n        if (type === 3 /* Element */) {\n            isProceduralRenderer(renderer) ?\n                renderer.setAttribute(((/** @type {?} */ (element))), attrName, debugValue) :\n                ((/** @type {?} */ (element))).setAttribute(attrName, debugValue);\n        }\n        else if (value !== undefined) {\n            /** @type {?} */\n            const value = `bindings=${JSON.stringify({ [attrName]: debugValue }, null, 2)}`;\n            if (isProceduralRenderer(renderer)) {\n                renderer.setValue(((/** @type {?} */ (element))), value);\n            }\n            else {\n                ((/** @type {?} */ (element))).textContent = value;\n            }\n        }\n    }\n}\n/**\n * Consolidates all inputs or outputs of all directives on this logical node.\n *\n * @param {?} tNode\n * @param {?} direction whether to consider inputs or outputs\n * @return {?} PropertyAliases|null aggregate of all properties if any, `null` otherwise\n */\nfunction generatePropertyAliases(tNode, direction) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    /** @type {?} */\n    let propStore = null;\n    /** @type {?} */\n    const start = tNode.directiveStart;\n    /** @type {?} */\n    const end = tNode.directiveEnd;\n    if (end > start) {\n        /** @type {?} */\n        const isInput = direction === 0 /* Input */;\n        /** @type {?} */\n        const defs = tView.data;\n        for (let i = start; i < end; i++) {\n            /** @type {?} */\n            const directiveDef = (/** @type {?} */ (defs[i]));\n            /** @type {?} */\n            const propertyAliasMap = isInput ? directiveDef.inputs : directiveDef.outputs;\n            for (let publicName in propertyAliasMap) {\n                if (propertyAliasMap.hasOwnProperty(publicName)) {\n                    propStore = propStore || {};\n                    /** @type {?} */\n                    const internalName = propertyAliasMap[publicName];\n                    /** @type {?} */\n                    const hasProperty = propStore.hasOwnProperty(publicName);\n                    hasProperty ? propStore[publicName].push(i, publicName, internalName) :\n                        (propStore[publicName] = [i, publicName, internalName]);\n                }\n            }\n        }\n    }\n    return propStore;\n}\n/**\n * Assign any inline style values to the element during creation mode.\n *\n * This instruction is meant to be called during creation mode to register all\n * dynamic style and class bindings on the element. Note for static values (no binding)\n * see `elementStart` and `elementHostAttrs`.\n *\n * \\@publicApi\n * @param {?=} classBindingNames An array containing bindable class names.\n *        The `elementClassProp` refers to the class name by index in this array.\n *        (i.e. `['foo', 'bar']` means `foo=0` and `bar=1`).\n * @param {?=} styleBindingNames An array containing bindable style properties.\n *        The `elementStyleProp` refers to the class name by index in this array.\n *        (i.e. `['width', 'height']` means `width=0` and `height=1`).\n * @param {?=} styleSanitizer An optional sanitizer function that will be used to sanitize any CSS\n *        property values that are applied to the element (during rendering).\n *        Note that the sanitizer instance itself is tied to the `directive` (if  provided).\n * @param {?=} directive A directive instance the styling is associated with. If not provided\n *        current view's controller instance is assumed.\n *\n * @return {?}\n */\nexport function elementStyling(classBindingNames, styleBindingNames, styleSanitizer, directive) {\n    /** @type {?} */\n    const tNode = getPreviousOrParentTNode();\n    if (!tNode.stylingTemplate) {\n        tNode.stylingTemplate = createEmptyStylingContext();\n    }\n    if (directive) {\n        // this will ALWAYS happen first before the bindings are applied so that the ordering\n        // of directives is correct (otherwise if a follow-up directive contains static styling,\n        // which is applied through elementHostAttrs, then it may end up being listed in the\n        // context directive array before a former one (because the former one didn't contain\n        // any static styling values))\n        allocateDirectiveIntoContext(tNode.stylingTemplate, directive);\n        /** @type {?} */\n        const fns = tNode.onElementCreationFns = tNode.onElementCreationFns || [];\n        fns.push(() => initElementStyling(tNode, classBindingNames, styleBindingNames, styleSanitizer, directive));\n    }\n    else {\n        // this will make sure that the root directive (the template) will always be\n        // run FIRST before all the other styling properties are populated into the\n        // context...\n        initElementStyling(tNode, classBindingNames, styleBindingNames, styleSanitizer, directive);\n    }\n}\n/**\n * @param {?} tNode\n * @param {?=} classBindingNames\n * @param {?=} styleBindingNames\n * @param {?=} styleSanitizer\n * @param {?=} directive\n * @return {?}\n */\nfunction initElementStyling(tNode, classBindingNames, styleBindingNames, styleSanitizer, directive) {\n    updateContextWithBindings((/** @type {?} */ (tNode.stylingTemplate)), directive || null, classBindingNames, styleBindingNames, styleSanitizer);\n}\n/**\n * Assign static attribute values to a host element.\n *\n * This instruction will assign static attribute values as well as class and style\n * values to an element within the host bindings function. Since attribute values\n * can consist of different types of values, the `attrs` array must include the values in\n * the following format:\n *\n * attrs = [\n *   // static attributes (like `title`, `name`, `id`...)\n *   attr1, value1, attr2, value,\n *\n *   // a single namespace value (like `x:id`)\n *   NAMESPACE_MARKER, namespaceUri1, name1, value1,\n *\n *   // another single namespace value (like `x:name`)\n *   NAMESPACE_MARKER, namespaceUri2, name2, value2,\n *\n *   // a series of CSS classes that will be applied to the element (no spaces)\n *   CLASSES_MARKER, class1, class2, class3,\n *\n *   // a series of CSS styles (property + value) that will be applied to the element\n *   STYLES_MARKER, prop1, value1, prop2, value2\n * ]\n *\n * All non-class and non-style attributes must be defined at the start of the list\n * first before all class and style values are set. When there is a change in value\n * type (like when classes and styles are introduced) a marker must be used to separate\n * the entries. The marker values themselves are set via entries found in the\n * [AttributeMarker] enum.\n *\n * NOTE: This instruction is meant to used from `hostBindings` function only.\n *\n * \\@publicApi\n * @param {?} directive A directive instance the styling is associated with.\n * @param {?} attrs An array of static values (attributes, classes and styles) with the correct marker\n * values.\n *\n * @return {?}\n */\nexport function elementHostAttrs(directive, attrs) {\n    /** @type {?} */\n    const tNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const native = (/** @type {?} */ (getNativeByTNode(tNode, lView)));\n    /** @type {?} */\n    const lastAttrIndex = setUpAttributes(native, attrs);\n    /** @type {?} */\n    const stylingAttrsStartIndex = attrsStylingIndexOf(attrs, lastAttrIndex);\n    if (stylingAttrsStartIndex >= 0) {\n        if (tNode.stylingTemplate) {\n            patchContextWithStaticAttrs(tNode.stylingTemplate, attrs, stylingAttrsStartIndex, directive);\n        }\n        else {\n            tNode.stylingTemplate =\n                initializeStaticStylingContext(attrs, stylingAttrsStartIndex, directive);\n        }\n    }\n}\n/**\n * Apply styling binding to the element.\n *\n * This instruction is meant to be run after `elementStyle` and/or `elementStyleProp`.\n * if any styling bindings have changed then the changes are flushed to the element.\n *\n *\n * \\@publicApi\n * @param {?} index Index of the element's with which styling is associated.\n * @param {?=} directive Directive instance that is attempting to change styling. (Defaults to the\n *        component of the current view).\n * components\n *\n * @return {?}\n */\nexport function elementStylingApply(index, directive) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const isFirstRender = (lView[FLAGS] & 8 /* FirstLViewPass */) !== 0;\n    /** @type {?} */\n    const totalPlayersQueued = renderStyling(getStylingContext(index + HEADER_OFFSET, lView), lView[RENDERER], lView, isFirstRender, null, null, directive);\n    if (totalPlayersQueued > 0) {\n        /** @type {?} */\n        const rootContext = getRootContext(lView);\n        scheduleTick(rootContext, 2 /* FlushPlayers */);\n    }\n}\n/**\n * Update a style bindings value on an element.\n *\n * If the style value is `null` then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `elementStyle` or any styles that are present\n * from when the element was created (with `elementStyling`).\n *\n * (Note that the styling element is updated as part of `elementStylingApply`.)\n *\n * \\@publicApi\n * @param {?} index Index of the element's with which styling is associated.\n * @param {?} styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `elementStlyingBindings`.\n * @param {?} value New value to write (null to remove). Note that if a directive also\n *        attempts to write to the same binding value then it will only be able to\n *        do so if the template binding value is `null` (or doesn't exist at all).\n * @param {?=} suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *        Note that when a suffix is provided then the underlying sanitizer will\n *        be ignored.\n * @param {?=} directive Directive instance that is attempting to change styling. (Defaults to the\n *        component of the current view).\n * components\n *\n * @param {?=} forceOverride\n * @return {?}\n */\nexport function elementStyleProp(index, styleIndex, value, suffix, directive, forceOverride) {\n    /** @type {?} */\n    let valueToAdd = null;\n    if (value !== null) {\n        if (suffix) {\n            // when a suffix is applied then it will bypass\n            // sanitization entirely (b/c a new string is created)\n            valueToAdd = renderStringify(value) + suffix;\n        }\n        else {\n            // sanitization happens by dealing with a String value\n            // this means that the string value will be passed through\n            // into the style rendering later (which is where the value\n            // will be sanitized before it is applied)\n            valueToAdd = (/** @type {?} */ ((/** @type {?} */ (value))));\n        }\n    }\n    updateElementStyleProp(getStylingContext(index + HEADER_OFFSET, getLView()), styleIndex, valueToAdd, directive, forceOverride);\n}\n/**\n * Add or remove a class via a class binding on a DOM element.\n *\n * This instruction is meant to handle the [class.foo]=\"exp\" case and, therefore,\n * the class itself must already be applied using `elementStyling` within\n * the creation block.\n *\n * \\@publicApi\n * @param {?} index Index of the element's with which styling is associated.\n * @param {?} classIndex Index of class to toggle. This index value refers to the\n *        index of the class in the class bindings array that was passed into\n *        `elementStlyingBindings` (which is meant to be called before this\n *        function is).\n * @param {?} value A true/false value which will turn the class on or off.\n * @param {?=} directive Directive instance that is attempting to change styling. (Defaults to the\n *        component of the current view).\n * @param {?=} forceOverride Whether or not this value will be applied regardless of where it is being\n *        set within the directive priority structure.\n *\n * @return {?}\n */\nexport function elementClassProp(index, classIndex, value, directive, forceOverride) {\n    /** @type {?} */\n    const input = (value instanceof BoundPlayerFactory) ?\n        ((/** @type {?} */ (value))) :\n        booleanOrNull(value);\n    updateElementClassProp(getStylingContext(index + HEADER_OFFSET, getLView()), classIndex, input, directive, forceOverride);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction booleanOrNull(value) {\n    if (typeof value === 'boolean')\n        return value;\n    return value ? true : null;\n}\n/**\n * Update style and/or class bindings using object literal.\n *\n * This instruction is meant apply styling via the `[style]=\"exp\"` and `[class]=\"exp\"` template\n * bindings. When styles are applied to the element they will then be placed with respect to\n * any styles set with `elementStyleProp`. If any styles are set to `null` then they will be\n * removed from the element. This instruction is also called for host bindings that write to\n * `[style]` and `[class]` (the directive param helps the instruction code determine where the\n * binding values come from).\n *\n * (Note that the styling instruction will not be applied until `elementStylingApply` is called.)\n *\n * \\@publicApi\n * @template T\n * @param {?} index Index of the element's with which styling is associated.\n * @param {?} classes A key/value style map of CSS classes that will be added to the given element.\n *        Any missing classes (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's list of CSS classes.\n * @param {?=} styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n * @param {?=} directive Directive instance that is attempting to change styling. (Defaults to the\n *        component of the current view).\n *\n * @return {?}\n */\nexport function elementStylingMap(index, classes, styles, directive) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tNode = getTNode(index, lView);\n    /** @type {?} */\n    const stylingContext = getStylingContext(index + HEADER_OFFSET, lView);\n    // inputs are only evaluated from a template binding into a directive, therefore,\n    // there should not be a situation where a directive host bindings function\n    // evaluates the inputs (this should only happen in the template function)\n    if (!directive) {\n        if (hasClassInput(tNode) && classes !== NO_CHANGE) {\n            /** @type {?} */\n            const initialClasses = getInitialClassNameValue(stylingContext);\n            /** @type {?} */\n            const classInputVal = (initialClasses.length ? (initialClasses + ' ') : '') + forceClassesAsString(classes);\n            setInputsForProperty(lView, (/** @type {?} */ ((/** @type {?} */ (tNode.inputs))['class'])), classInputVal);\n            classes = NO_CHANGE;\n        }\n        if (hasStyleInput(tNode) && styles !== NO_CHANGE) {\n            /** @type {?} */\n            const initialStyles = getInitialClassNameValue(stylingContext);\n            /** @type {?} */\n            const styleInputVal = (initialStyles.length ? (initialStyles + ' ') : '') + forceStylesAsString(styles);\n            setInputsForProperty(lView, (/** @type {?} */ ((/** @type {?} */ (tNode.inputs))['style'])), styleInputVal);\n            styles = NO_CHANGE;\n        }\n    }\n    updateStylingMap(stylingContext, classes, styles, directive);\n}\n//////////////////////////\n//// Text\n//////////////////////////\n/**\n * Create static text node\n *\n * @param {?} index Index of the node in the data array\n * @param {?=} value Value to write. This value will be stringified.\n * @return {?}\n */\nexport function text(index, value) {\n    /** @type {?} */\n    const lView = getLView();\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'text nodes should be created before any bindings');\n    ngDevMode && ngDevMode.rendererCreateTextNode++;\n    /** @type {?} */\n    const textNative = createTextNode(value, lView[RENDERER]);\n    /** @type {?} */\n    const tNode = createNodeAtIndex(index, 3 /* Element */, textNative, null, null);\n    // Text nodes are self closing.\n    setIsParent(false);\n    appendChild(textNative, tNode, lView);\n}\n/**\n * Create text node with binding\n * Bindings should be handled externally with the proper interpolation(1-8) method\n *\n * @template T\n * @param {?} index Index of the node in the data array.\n * @param {?} value Stringified value to write.\n * @return {?}\n */\nexport function textBinding(index, value) {\n    if (value !== NO_CHANGE) {\n        /** @type {?} */\n        const lView = getLView();\n        ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n        /** @type {?} */\n        const element = (/** @type {?} */ ((/** @type {?} */ (getNativeByIndex(index, lView)))));\n        ngDevMode && assertDefined(element, 'native element should exist');\n        ngDevMode && ngDevMode.rendererSetText++;\n        /** @type {?} */\n        const renderer = lView[RENDERER];\n        isProceduralRenderer(renderer) ? renderer.setValue(element, renderStringify(value)) :\n            element.textContent = renderStringify(value);\n    }\n}\n//////////////////////////\n//// Directive\n//////////////////////////\n/**\n * Instantiate a root component.\n * @template T\n * @param {?} tView\n * @param {?} viewData\n * @param {?} def\n * @return {?}\n */\nexport function instantiateRootComponent(tView, viewData, def) {\n    /** @type {?} */\n    const rootTNode = getPreviousOrParentTNode();\n    if (tView.firstTemplatePass) {\n        if (def.providersResolver)\n            def.providersResolver(def);\n        generateExpandoInstructionBlock(tView, rootTNode, 1);\n        baseResolveDirective(tView, viewData, def, def.factory);\n    }\n    /** @type {?} */\n    const directive = getNodeInjectable(tView.data, viewData, viewData.length - 1, (/** @type {?} */ (rootTNode)));\n    postProcessBaseDirective(viewData, rootTNode, directive);\n    return directive;\n}\n/**\n * Resolve the matched directives on a node.\n * @param {?} tView\n * @param {?} viewData\n * @param {?} directives\n * @param {?} tNode\n * @param {?} localRefs\n * @return {?}\n */\nfunction resolveDirectives(tView, viewData, directives, tNode, localRefs) {\n    // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in tsickle.\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'should run on first template pass only');\n    /** @type {?} */\n    const exportsMap = localRefs ? { '': -1 } : null;\n    if (directives) {\n        initNodeFlags(tNode, tView.data.length, directives.length);\n        // When the same token is provided by several directives on the same node, some rules apply in\n        // the viewEngine:\n        // - viewProviders have priority over providers\n        // - the last directive in NgModule.declarations has priority over the previous one\n        // So to match these rules, the order in which providers are added in the arrays is very\n        // important.\n        for (let i = 0; i < directives.length; i++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (directives[i]));\n            if (def.providersResolver)\n                def.providersResolver(def);\n        }\n        generateExpandoInstructionBlock(tView, tNode, directives.length);\n        /** @type {?} */\n        const initialPreOrderHooksLength = (tView.preOrderHooks && tView.preOrderHooks.length) || 0;\n        /** @type {?} */\n        const initialPreOrderCheckHooksLength = (tView.preOrderCheckHooks && tView.preOrderCheckHooks.length) || 0;\n        /** @type {?} */\n        const nodeIndex = tNode.index - HEADER_OFFSET;\n        for (let i = 0; i < directives.length; i++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (directives[i]));\n            /** @type {?} */\n            const directiveDefIdx = tView.data.length;\n            baseResolveDirective(tView, viewData, def, def.factory);\n            saveNameToExportMap((/** @type {?} */ (tView.data)).length - 1, def, exportsMap);\n            // Init hooks are queued now so ngOnInit is called in host components before\n            // any projected components.\n            registerPreOrderHooks(directiveDefIdx, def, tView, nodeIndex, initialPreOrderHooksLength, initialPreOrderCheckHooksLength);\n        }\n    }\n    if (exportsMap)\n        cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n}\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n * @param {?} tView\n * @param {?} lView\n * @param {?} tNode\n * @return {?}\n */\nfunction instantiateAllDirectives(tView, lView, tNode) {\n    /** @type {?} */\n    const start = tNode.directiveStart;\n    /** @type {?} */\n    const end = tNode.directiveEnd;\n    if (!tView.firstTemplatePass && start < end) {\n        getOrCreateNodeInjectorForNode((/** @type {?} */ (tNode)), lView);\n    }\n    for (let i = start; i < end; i++) {\n        /** @type {?} */\n        const def = (/** @type {?} */ (tView.data[i]));\n        if (isComponentDef(def)) {\n            addComponentLogic(lView, tNode, (/** @type {?} */ (def)));\n        }\n        /** @type {?} */\n        const directive = getNodeInjectable(tView.data, (/** @type {?} */ (lView)), i, (/** @type {?} */ (tNode)));\n        postProcessDirective(lView, directive, def, i);\n    }\n}\n/**\n * @param {?} tView\n * @param {?} viewData\n * @param {?} tNode\n * @return {?}\n */\nfunction invokeDirectivesHostBindings(tView, viewData, tNode) {\n    /** @type {?} */\n    const start = tNode.directiveStart;\n    /** @type {?} */\n    const end = tNode.directiveEnd;\n    /** @type {?} */\n    const expando = (/** @type {?} */ (tView.expandoInstructions));\n    /** @type {?} */\n    const firstTemplatePass = tView.firstTemplatePass;\n    for (let i = start; i < end; i++) {\n        /** @type {?} */\n        const def = (/** @type {?} */ (tView.data[i]));\n        /** @type {?} */\n        const directive = viewData[i];\n        if (def.hostBindings) {\n            invokeHostBindingsInCreationMode(def, expando, directive, tNode, firstTemplatePass);\n        }\n        else if (firstTemplatePass) {\n            expando.push(null);\n        }\n    }\n}\n/**\n * @param {?} def\n * @param {?} expando\n * @param {?} directive\n * @param {?} tNode\n * @param {?} firstTemplatePass\n * @return {?}\n */\nexport function invokeHostBindingsInCreationMode(def, expando, directive, tNode, firstTemplatePass) {\n    /** @type {?} */\n    const previousExpandoLength = expando.length;\n    setCurrentDirectiveDef(def);\n    (/** @type {?} */ (def.hostBindings))(1 /* Create */, directive, tNode.index - HEADER_OFFSET);\n    setCurrentDirectiveDef(null);\n    // `hostBindings` function may or may not contain `allocHostVars` call\n    // (e.g. it may not if it only contains host listeners), so we need to check whether\n    // `expandoInstructions` has changed and if not - we still push `hostBindings` to\n    // expando block, to make sure we execute it for DI cycle\n    if (previousExpandoLength === expando.length && firstTemplatePass) {\n        expando.push(def.hostBindings);\n    }\n}\n/**\n * Generates a new block in TView.expandoInstructions for this node.\n *\n * Each expando block starts with the element index (turned negative so we can distinguish\n * it from the hostVar count) and the directive count. See more in VIEW_DATA.md.\n * @param {?} tView\n * @param {?} tNode\n * @param {?} directiveCount\n * @return {?}\n */\nexport function generateExpandoInstructionBlock(tView, tNode, directiveCount) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'Expando block should only be generated on first template pass.');\n    /** @type {?} */\n    const elementIndex = -(tNode.index - HEADER_OFFSET);\n    /** @type {?} */\n    const providerStartIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n    /** @type {?} */\n    const providerCount = tView.data.length - providerStartIndex;\n    (tView.expandoInstructions || (tView.expandoInstructions = [])).push(elementIndex, providerCount, directiveCount);\n}\n/**\n * On the first template pass, we need to reserve space for host binding values\n * after directives are matched (so all directives are saved, then bindings).\n * Because we are updating the blueprint, we only need to do this once.\n * @param {?} tView\n * @param {?} lView\n * @param {?} totalHostVars\n * @return {?}\n */\nfunction prefillHostVars(tView, lView, totalHostVars) {\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called in first template pass.');\n    for (let i = 0; i < totalHostVars; i++) {\n        lView.push(NO_CHANGE);\n        tView.blueprint.push(NO_CHANGE);\n        tView.data.push(null);\n    }\n}\n/**\n * Process a directive on the current node after its creation.\n * @template T\n * @param {?} viewData\n * @param {?} directive\n * @param {?} def\n * @param {?} directiveDefIdx\n * @return {?}\n */\nfunction postProcessDirective(viewData, directive, def, directiveDefIdx) {\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    postProcessBaseDirective(viewData, previousOrParentTNode, directive);\n    ngDevMode && assertDefined(previousOrParentTNode, 'previousOrParentTNode');\n    if (previousOrParentTNode && previousOrParentTNode.attrs) {\n        setInputsFromAttrs(directiveDefIdx, directive, def, previousOrParentTNode);\n    }\n    if (viewData[TVIEW].firstTemplatePass && def.contentQueries) {\n        previousOrParentTNode.flags |= 4 /* hasContentQuery */;\n    }\n    if (isComponentDef(def)) {\n        /** @type {?} */\n        const componentView = getComponentViewByIndex(previousOrParentTNode.index, viewData);\n        componentView[CONTEXT] = directive;\n    }\n}\n/**\n * A lighter version of postProcessDirective() that is used for the root component.\n * @template T\n * @param {?} lView\n * @param {?} previousOrParentTNode\n * @param {?} directive\n * @return {?}\n */\nfunction postProcessBaseDirective(lView, previousOrParentTNode, directive) {\n    /** @type {?} */\n    const native = getNativeByTNode(previousOrParentTNode, lView);\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'directives should be created before any bindings');\n    ngDevMode && assertPreviousIsParent(getIsParent());\n    attachPatchData(directive, lView);\n    if (native) {\n        attachPatchData(native, lView);\n    }\n}\n/**\n * Matches the current node against all available selectors.\n * If a component is matched (at most one), it is returned in first position in the array.\n * @param {?} tView\n * @param {?} viewData\n * @param {?} tNode\n * @return {?}\n */\nfunction findDirectiveMatches(tView, viewData, tNode) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'should run on first template pass only');\n    /** @type {?} */\n    const registry = tView.directiveRegistry;\n    /** @type {?} */\n    let matches = null;\n    if (registry) {\n        for (let i = 0; i < registry.length; i++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (registry[i]));\n            if (isNodeMatchingSelectorList(tNode, (/** @type {?} */ (def.selectors)), /* isProjectionMode */ false)) {\n                matches || (matches = []);\n                diPublicInInjector(getOrCreateNodeInjectorForNode((/** @type {?} */ (getPreviousOrParentTNode())), viewData), viewData, def.type);\n                if (isComponentDef(def)) {\n                    if (tNode.flags & 1 /* isComponent */)\n                        throwMultipleComponentError(tNode);\n                    tNode.flags = 1 /* isComponent */;\n                    // The component is always stored first with directives after.\n                    matches.unshift(def);\n                }\n                else {\n                    matches.push(def);\n                }\n            }\n        }\n    }\n    return matches;\n}\n/**\n * Stores index of component's host element so it will be queued for view refresh during CD.\n * @param {?} previousOrParentTNode\n * @return {?}\n */\nexport function queueComponentIndexForCheck(previousOrParentTNode) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called in first template pass.');\n    (tView.components || (tView.components = [])).push(previousOrParentTNode.index);\n}\n/**\n * Stores host binding fn and number of host vars so it will be queued for binding refresh during\n * CD.\n * @param {?} tView\n * @param {?} def\n * @param {?} hostVars\n * @return {?}\n */\nfunction queueHostBindingForCheck(tView, def, hostVars) {\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called in first template pass.');\n    /** @type {?} */\n    const expando = (/** @type {?} */ (tView.expandoInstructions));\n    /** @type {?} */\n    const length = expando.length;\n    // Check whether a given `hostBindings` function already exists in expandoInstructions,\n    // which can happen in case directive definition was extended from base definition (as a part of\n    // the `InheritDefinitionFeature` logic). If we found the same `hostBindings` function in the\n    // list, we just increase the number of host vars associated with that function, but do not add it\n    // into the list again.\n    if (length >= 2 && expando[length - 2] === def.hostBindings) {\n        expando[length - 1] = ((/** @type {?} */ (expando[length - 1]))) + hostVars;\n    }\n    else {\n        expando.push((/** @type {?} */ (def.hostBindings)), hostVars);\n    }\n}\n/**\n * Caches local names and their matching directive indices for query and template lookups.\n * @param {?} tNode\n * @param {?} localRefs\n * @param {?} exportsMap\n * @return {?}\n */\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n    if (localRefs) {\n        /** @type {?} */\n        const localNames = tNode.localNames = [];\n        // Local names must be stored in tNode in the same order that localRefs are defined\n        // in the template to ensure the data is loaded in the same slots as their refs\n        // in the template (for template queries).\n        for (let i = 0; i < localRefs.length; i += 2) {\n            /** @type {?} */\n            const index = exportsMap[localRefs[i + 1]];\n            if (index == null)\n                throw new Error(`Export of name '${localRefs[i + 1]}' not found!`);\n            localNames.push(localRefs[i], index);\n        }\n    }\n}\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n * @param {?} index\n * @param {?} def\n * @param {?} exportsMap\n * @return {?}\n */\nfunction saveNameToExportMap(index, def, exportsMap) {\n    if (exportsMap) {\n        if (def.exportAs) {\n            for (let i = 0; i < def.exportAs.length; i++) {\n                exportsMap[def.exportAs[i]] = index;\n            }\n        }\n        if (((/** @type {?} */ (def))).template)\n            exportsMap[''] = index;\n    }\n}\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param {?} tNode\n * @param {?} index the initial index\n * @param {?} numberOfDirectives\n * @return {?}\n */\nexport function initNodeFlags(tNode, index, numberOfDirectives) {\n    /** @type {?} */\n    const flags = tNode.flags;\n    ngDevMode && assertEqual(flags === 0 || flags === 1 /* isComponent */, true, 'expected node flags to not be initialized');\n    ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');\n    // When the first directive is created on a node, save the index\n    tNode.flags = flags & 1 /* isComponent */;\n    tNode.directiveStart = index;\n    tNode.directiveEnd = index + numberOfDirectives;\n    tNode.providerIndexes = index;\n}\n/**\n * @template T\n * @param {?} tView\n * @param {?} viewData\n * @param {?} def\n * @param {?} directiveFactory\n * @return {?}\n */\nfunction baseResolveDirective(tView, viewData, def, directiveFactory) {\n    tView.data.push(def);\n    /** @type {?} */\n    const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);\n    tView.blueprint.push(nodeInjectorFactory);\n    viewData.push(nodeInjectorFactory);\n}\n/**\n * @template T\n * @param {?} lView\n * @param {?} previousOrParentTNode\n * @param {?} def\n * @return {?}\n */\nfunction addComponentLogic(lView, previousOrParentTNode, def) {\n    /** @type {?} */\n    const native = getNativeByTNode(previousOrParentTNode, lView);\n    /** @type {?} */\n    const tView = getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas);\n    // Only component views should be added to the view tree directly. Embedded views are\n    // accessed through their containers because they may be removed / re-added later.\n    /** @type {?} */\n    const rendererFactory = lView[RENDERER_FACTORY];\n    /** @type {?} */\n    const componentView = addToViewTree(lView, createLView(lView, tView, null, def.onPush ? 64 /* Dirty */ : 16 /* CheckAlways */, lView[previousOrParentTNode.index], (/** @type {?} */ (previousOrParentTNode)), rendererFactory, lView[RENDERER_FACTORY].createRenderer((/** @type {?} */ (native)), def)));\n    componentView[T_HOST] = (/** @type {?} */ (previousOrParentTNode));\n    // Component view will always be created before any injected LContainers,\n    // so this is a regular element, wrap it with the component view\n    lView[previousOrParentTNode.index] = componentView;\n    if (lView[TVIEW].firstTemplatePass) {\n        queueComponentIndexForCheck(previousOrParentTNode);\n    }\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @template T\n * @param {?} directiveIndex Index of the directive in directives array\n * @param {?} instance Instance of the directive on which to set the initial inputs\n * @param {?} def\n * @param {?} tNode The static data for this node\n * @return {?}\n */\nfunction setInputsFromAttrs(directiveIndex, instance, def, tNode) {\n    /** @type {?} */\n    let initialInputData = (/** @type {?} */ (tNode.initialInputs));\n    if (initialInputData === undefined || directiveIndex >= initialInputData.length) {\n        initialInputData = generateInitialInputs(directiveIndex, def.inputs, tNode);\n    }\n    /** @type {?} */\n    const initialInputs = initialInputData[directiveIndex];\n    if (initialInputs) {\n        /** @type {?} */\n        const setInput = def.setInput;\n        for (let i = 0; i < initialInputs.length;) {\n            /** @type {?} */\n            const publicName = initialInputs[i++];\n            /** @type {?} */\n            const privateName = initialInputs[i++];\n            /** @type {?} */\n            const value = initialInputs[i++];\n            if (setInput) {\n                (/** @type {?} */ (def.setInput))(instance, value, publicName, privateName);\n            }\n            else {\n                ((/** @type {?} */ (instance)))[privateName] = value;\n            }\n        }\n    }\n}\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an \\@Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` \\@Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param {?} directiveIndex Index to store the initial input data\n * @param {?} inputs The list of inputs from the directive def\n * @param {?} tNode The static data on this node\n * @return {?}\n */\nfunction generateInitialInputs(directiveIndex, inputs, tNode) {\n    /** @type {?} */\n    const initialInputData = tNode.initialInputs || (tNode.initialInputs = []);\n    initialInputData[directiveIndex] = null;\n    /** @type {?} */\n    const attrs = (/** @type {?} */ (tNode.attrs));\n    /** @type {?} */\n    let i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        const attrName = attrs[i];\n        // If we hit Select-Only, Classes or Styles, we're done anyway. None of those are valid inputs.\n        if (attrName === 3 /* SelectOnly */ || attrName === 1 /* Classes */ ||\n            attrName === 2 /* Styles */)\n            break;\n        if (attrName === 0 /* NamespaceURI */) {\n            // We do not allow inputs on namespaced attributes.\n            i += 4;\n            continue;\n        }\n        /** @type {?} */\n        const minifiedInputName = inputs[attrName];\n        /** @type {?} */\n        const attrValue = attrs[i + 1];\n        if (minifiedInputName !== undefined) {\n            /** @type {?} */\n            const inputsToStore = initialInputData[directiveIndex] || (initialInputData[directiveIndex] = []);\n            inputsToStore.push(attrName, minifiedInputName, (/** @type {?} */ (attrValue)));\n        }\n        i += 2;\n    }\n    return initialInputData;\n}\n//////////////////////////\n//// ViewContainer & View\n//////////////////////////\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param {?} hostNative The host element for the LContainer\n * @param {?} currentView The parent view of the LContainer\n * @param {?} native The native comment element\n * @param {?=} isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @return {?} LContainer\n */\nexport function createLContainer(hostNative, currentView, native, isForViewContainerRef) {\n    ngDevMode && assertDomNode(native);\n    ngDevMode && assertLView(currentView);\n    /** @type {?} */\n    const lContainer = [\n        hostNative,\n        true,\n        isForViewContainerRef ? -1 : 0,\n        currentView,\n        null,\n        null,\n        [],\n        native,\n    ];\n    ngDevMode && attachLContainerDebug(lContainer);\n    return lContainer;\n}\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param {?} index The index of the container in the data array\n * @param {?} templateFn Inline template\n * @param {?} consts The number of nodes, local refs, and pipes for this template\n * @param {?} vars The number of bindings for this template\n * @param {?=} tagName The name of the container element, if applicable\n * @param {?=} attrs The attrs attached to the container, if applicable\n * @param {?=} localRefs A set of local reference bindings on the element.\n * @param {?=} localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n * @return {?}\n */\nexport function template(index, templateFn, consts, vars, tagName, attrs, localRefs, localRefExtractor) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    // TODO: consider a separate node type for templates\n    /** @type {?} */\n    const tContainerNode = containerInternal(index, tagName || null, attrs || null);\n    if (tView.firstTemplatePass) {\n        tContainerNode.tViews = createTView(-1, templateFn, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null, null);\n    }\n    createDirectivesAndLocals(tView, lView, localRefs, localRefExtractor);\n    addTContainerToQueries(lView, tContainerNode);\n    attachPatchData(getNativeByTNode(tContainerNode, lView), lView);\n    registerPostOrderHooks(tView, tContainerNode);\n    setIsParent(false);\n}\n/**\n * Creates an LContainer for inline views, e.g.\n *\n * % if (showing) {\n *   <div></div>\n * % }\n *\n * @param {?} index The index of the container in the data array\n * @return {?}\n */\nexport function container(index) {\n    /** @type {?} */\n    const tNode = containerInternal(index, null, null);\n    /** @type {?} */\n    const lView = getLView();\n    if (lView[TVIEW].firstTemplatePass) {\n        tNode.tViews = [];\n    }\n    addTContainerToQueries(lView, tNode);\n    setIsParent(false);\n}\n/**\n * @param {?} index\n * @param {?} tagName\n * @param {?} attrs\n * @return {?}\n */\nfunction containerInternal(index, tagName, attrs) {\n    /** @type {?} */\n    const lView = getLView();\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'container nodes should be created before any bindings');\n    /** @type {?} */\n    const adjustedIndex = index + HEADER_OFFSET;\n    /** @type {?} */\n    const comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    /** @type {?} */\n    const tNode = createNodeAtIndex(index, 0 /* Container */, comment, tagName, attrs);\n    /** @type {?} */\n    const lContainer = lView[adjustedIndex] = createLContainer(lView[adjustedIndex], lView, comment);\n    appendChild(comment, tNode, lView);\n    // Containers are added to the current view tree instead of their embedded views\n    // because views can be removed and re-inserted.\n    addToViewTree(lView, lContainer);\n    ngDevMode && assertNodeType(getPreviousOrParentTNode(), 0 /* Container */);\n    return tNode;\n}\n/**\n * Reporting a TContainer node queries is a 2-step process as we need to:\n * - check if the container node itself is matching (query might match a <ng-template> node);\n * - prepare room for nodes from views that might be created based on the TemplateRef linked to this\n * container.\n *\n * Those 2 operations need to happen in the specific order (match the container node itself, then\n * prepare space for nodes from views).\n * @param {?} lView\n * @param {?} tContainerNode\n * @return {?}\n */\nfunction addTContainerToQueries(lView, tContainerNode) {\n    /** @type {?} */\n    const queries = lView[QUERIES];\n    if (queries) {\n        queries.addNode(tContainerNode);\n        /** @type {?} */\n        const lContainer = lView[tContainerNode.index];\n        lContainer[QUERIES] = queries.container();\n    }\n}\n/**\n * Sets a container up to receive views.\n *\n * @param {?} index The index of the container in the data array\n * @return {?}\n */\nexport function containerRefreshStart(index) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    let previousOrParentTNode = (/** @type {?} */ (loadInternal(tView.data, index)));\n    setPreviousOrParentTNode(previousOrParentTNode);\n    ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n    setIsParent(true);\n    lView[index + HEADER_OFFSET][ACTIVE_INDEX] = 0;\n    // We need to execute init hooks here so ngOnInit hooks are called in top level views\n    // before they are called in embedded views (for backwards compatibility).\n    executePreOrderHooks(lView, tView, getCheckNoChangesMode(), undefined);\n}\n/**\n * Marks the end of the LContainer.\n *\n * Marking the end of LContainer is the time when to child views get inserted or removed.\n * @return {?}\n */\nexport function containerRefreshEnd() {\n    /** @type {?} */\n    let previousOrParentTNode = getPreviousOrParentTNode();\n    if (getIsParent()) {\n        setIsParent(false);\n    }\n    else {\n        ngDevMode && assertNodeType(previousOrParentTNode, 2 /* View */);\n        ngDevMode && assertHasParent(previousOrParentTNode);\n        previousOrParentTNode = (/** @type {?} */ (previousOrParentTNode.parent));\n        setPreviousOrParentTNode(previousOrParentTNode);\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n    /** @type {?} */\n    const lContainer = getLView()[previousOrParentTNode.index];\n    /** @type {?} */\n    const nextIndex = lContainer[ACTIVE_INDEX];\n    // remove extra views at the end of the container\n    while (nextIndex < lContainer[VIEWS].length) {\n        removeView(lContainer, nextIndex);\n    }\n}\n/**\n * Goes over dynamic embedded views (ones created through ViewContainerRef APIs) and refreshes them\n * by executing an associated template function.\n * @param {?} lView\n * @return {?}\n */\nfunction refreshDynamicEmbeddedViews(lView) {\n    for (let current = lView[CHILD_HEAD]; current !== null; current = current[NEXT]) {\n        // Note: current can be an LView or an LContainer instance, but here we are only interested\n        // in LContainer. We can tell it's an LContainer because its length is less than the LView\n        // header.\n        if (current.length < HEADER_OFFSET && current[ACTIVE_INDEX] === -1) {\n            /** @type {?} */\n            const container = (/** @type {?} */ (current));\n            for (let i = 0; i < container[VIEWS].length; i++) {\n                /** @type {?} */\n                const dynamicViewData = container[VIEWS][i];\n                // The directives and pipes are not needed here as an existing view is only being refreshed.\n                ngDevMode && assertDefined(dynamicViewData[TVIEW], 'TView must be allocated');\n                renderEmbeddedTemplate(dynamicViewData, dynamicViewData[TVIEW], (/** @type {?} */ (dynamicViewData[CONTEXT])));\n            }\n        }\n    }\n}\n/**\n * Looks for a view with a given view block id inside a provided LContainer.\n * Removes views that need to be deleted in the process.\n *\n * @param {?} lContainer to search for views\n * @param {?} startIdx starting index in the views array to search from\n * @param {?} viewBlockId exact view block id to look for\n * @return {?} index of a found view or -1 if not found\n */\nfunction scanForView(lContainer, startIdx, viewBlockId) {\n    /** @type {?} */\n    const views = lContainer[VIEWS];\n    for (let i = startIdx; i < views.length; i++) {\n        /** @type {?} */\n        const viewAtPositionId = views[i][TVIEW].id;\n        if (viewAtPositionId === viewBlockId) {\n            return views[i];\n        }\n        else if (viewAtPositionId < viewBlockId) {\n            // found a view that should not be at this position - remove\n            removeView(lContainer, i);\n        }\n        else {\n            // found a view with id greater than the one we are searching for\n            // which means that required view doesn't exist and can't be found at\n            // later positions in the views array - stop the searchdef.cont here\n            break;\n        }\n    }\n    return null;\n}\n/**\n * Marks the start of an embedded view.\n *\n * @param {?} viewBlockId The ID of this view\n * @param {?} consts\n * @param {?} vars\n * @return {?} boolean Whether or not this view is in creation mode\n */\nexport function embeddedViewStart(viewBlockId, consts, vars) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    // The previous node can be a view node if we are processing an inline for loop\n    /** @type {?} */\n    const containerTNode = previousOrParentTNode.type === 2 /* View */ ?\n        (/** @type {?} */ (previousOrParentTNode.parent)) :\n        previousOrParentTNode;\n    /** @type {?} */\n    const lContainer = (/** @type {?} */ (lView[containerTNode.index]));\n    ngDevMode && assertNodeType(containerTNode, 0 /* Container */);\n    /** @type {?} */\n    let viewToRender = scanForView(lContainer, (/** @type {?} */ (lContainer[ACTIVE_INDEX])), viewBlockId);\n    if (viewToRender) {\n        setIsParent(true);\n        enterView(viewToRender, viewToRender[TVIEW].node);\n    }\n    else {\n        // When we create a new LView, we always reset the state of the instructions.\n        viewToRender = createLView(lView, getOrCreateEmbeddedTView(viewBlockId, consts, vars, (/** @type {?} */ (containerTNode))), null, 16 /* CheckAlways */, null, null);\n        if (lContainer[QUERIES]) {\n            viewToRender[QUERIES] = (/** @type {?} */ (lContainer[QUERIES])).createView();\n        }\n        /** @type {?} */\n        const tParentNode = getIsParent() ? previousOrParentTNode :\n            previousOrParentTNode && previousOrParentTNode.parent;\n        assignTViewNodeToLView(viewToRender[TVIEW], tParentNode, viewBlockId, viewToRender);\n        enterView(viewToRender, viewToRender[TVIEW].node);\n    }\n    if (lContainer) {\n        if (isCreationMode(viewToRender)) {\n            // it is a new view, insert it into collection of views for a given container\n            insertView(viewToRender, lContainer, (/** @type {?} */ (lContainer[ACTIVE_INDEX])));\n        }\n        (/** @type {?} */ (lContainer[ACTIVE_INDEX]))++;\n    }\n    return isCreationMode(viewToRender) ? 1 /* Create */ | 2 /* Update */ :\n        2 /* Update */;\n}\n/**\n * Initialize the TView (e.g. static data) for the active embedded view.\n *\n * Each embedded view block must create or retrieve its own TView. Otherwise, the embedded view's\n * static data for a particular node would overwrite the static data for a node in the view above\n * it with the same index (since it's in the same template).\n *\n * @param {?} viewIndex The index of the TView in TNode.tViews\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars The number of bindings and pure function bindings in this template\n * @param {?} parent\n * @return {?} TView\n */\nfunction getOrCreateEmbeddedTView(viewIndex, consts, vars, parent) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode && assertNodeType(parent, 0 /* Container */);\n    /** @type {?} */\n    const containerTViews = (/** @type {?} */ (parent.tViews));\n    ngDevMode && assertDefined(containerTViews, 'TView expected');\n    ngDevMode && assertEqual(Array.isArray(containerTViews), true, 'TViews should be in an array');\n    if (viewIndex >= containerTViews.length || containerTViews[viewIndex] == null) {\n        containerTViews[viewIndex] = createTView(viewIndex, null, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null, null);\n    }\n    return containerTViews[viewIndex];\n}\n/**\n * Marks the end of an embedded view.\n * @return {?}\n */\nexport function embeddedViewEnd() {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const viewHost = lView[T_HOST];\n    if (isCreationMode(lView)) {\n        refreshDescendantViews(lView); // creation mode pass\n        lView[FLAGS] &= ~4 /* CreationMode */;\n    }\n    resetPreOrderHookFlags(lView);\n    refreshDescendantViews(lView); // update mode pass\n    // update mode pass\n    /** @type {?} */\n    const lContainer = (/** @type {?} */ (lView[PARENT]));\n    ngDevMode && assertLContainerOrUndefined(lContainer);\n    leaveView((/** @type {?} */ (lContainer[PARENT])));\n    setPreviousOrParentTNode((/** @type {?} */ (viewHost)));\n    setIsParent(false);\n}\n/////////////\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @template T\n * @param {?} adjustedElementIndex  Element index in LView[] (adjusted for HEADER_OFFSET)\n * @return {?}\n */\nexport function componentRefresh(adjustedElementIndex) {\n    /** @type {?} */\n    const lView = getLView();\n    ngDevMode && assertDataInRange(lView, adjustedElementIndex);\n    /** @type {?} */\n    const hostView = getComponentViewByIndex(adjustedElementIndex, lView);\n    ngDevMode && assertNodeType((/** @type {?} */ (lView[TVIEW].data[adjustedElementIndex])), 3 /* Element */);\n    // Only attached CheckAlways components or attached, dirty OnPush components should be checked\n    if (viewAttachedToChangeDetector(hostView) &&\n        hostView[FLAGS] & (16 /* CheckAlways */ | 64 /* Dirty */)) {\n        syncViewWithBlueprint(hostView);\n        checkView(hostView, hostView[CONTEXT]);\n    }\n}\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param {?} componentView The view to sync\n * @return {?}\n */\nfunction syncViewWithBlueprint(componentView) {\n    /** @type {?} */\n    const componentTView = componentView[TVIEW];\n    for (let i = componentView.length; i < componentTView.blueprint.length; i++) {\n        componentView[i] = componentTView.blueprint[i];\n    }\n}\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param {?=} selectors A collection of parsed CSS selectors\n * @param {?=} textSelectors\n * @return {?}\n */\nexport function projectionDef(selectors, textSelectors) {\n    /** @type {?} */\n    const componentNode = (/** @type {?} */ (findComponentView(getLView())[T_HOST]));\n    if (!componentNode.projection) {\n        /** @type {?} */\n        const noOfNodeBuckets = selectors ? selectors.length + 1 : 1;\n        /** @type {?} */\n        const pData = componentNode.projection =\n            new Array(noOfNodeBuckets).fill(null);\n        /** @type {?} */\n        const tails = pData.slice();\n        /** @type {?} */\n        let componentChild = componentNode.child;\n        while (componentChild !== null) {\n            /** @type {?} */\n            const bucketIndex = selectors ? matchingSelectorIndex(componentChild, selectors, (/** @type {?} */ (textSelectors))) : 0;\n            /** @type {?} */\n            const nextNode = componentChild.next;\n            if (tails[bucketIndex]) {\n                (/** @type {?} */ (tails[bucketIndex])).next = componentChild;\n            }\n            else {\n                pData[bucketIndex] = componentChild;\n            }\n            componentChild.next = null;\n            tails[bucketIndex] = componentChild;\n            componentChild = nextNode;\n        }\n    }\n}\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param {?} nodeIndex\n * @param {?=} selectorIndex\n * @param {?=} attrs\n * @return {?}\n */\nexport function projection(nodeIndex, selectorIndex = 0, attrs) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tProjectionNode = createNodeAtIndex(nodeIndex, 1 /* Projection */, null, null, attrs || null);\n    // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n    if (tProjectionNode.projection === null)\n        tProjectionNode.projection = selectorIndex;\n    // `<ng-content>` has no content\n    setIsParent(false);\n    // re-distribution of projectable nodes is stored on a component's view level\n    appendProjectedNodes(lView, tProjectionNode, selectorIndex, findComponentView(lView));\n}\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @template T\n * @param {?} lView The view where LView or LContainer should be added\n * @param {?} lViewOrLContainer The LView or LContainer to add to the view tree\n * @return {?} The state passed in\n */\nexport function addToViewTree(lView, lViewOrLContainer) {\n    // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer to\n    // the end of the queue, which means if the developer retrieves the LContainers from RNodes out of\n    // order, the change detection will run out of order, as the act of retrieving the the LContainer\n    // from the RNode is what adds it to the queue.\n    if (lView[CHILD_HEAD]) {\n        (/** @type {?} */ (lView[CHILD_TAIL]))[NEXT] = lViewOrLContainer;\n    }\n    else {\n        lView[CHILD_HEAD] = lViewOrLContainer;\n    }\n    lView[CHILD_TAIL] = lViewOrLContainer;\n    return lViewOrLContainer;\n}\n///////////////////////////////\n//// Change detection\n///////////////////////////////\n/**\n * If node is an OnPush component, marks its LView dirty.\n * @param {?} lView\n * @param {?} viewIndex\n * @return {?}\n */\nfunction markDirtyIfOnPush(lView, viewIndex) {\n    ngDevMode && assertLView(lView);\n    /** @type {?} */\n    const childComponentLView = getComponentViewByIndex(viewIndex, lView);\n    if (!(childComponentLView[FLAGS] & 16 /* CheckAlways */)) {\n        childComponentLView[FLAGS] |= 64 /* Dirty */;\n    }\n}\n/**\n * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,\n * if applicable.\n *\n * @param {?} tNode The TNode associated with this listener\n * @param {?} lView The LView that contains this listener\n * @param {?} listenerFn The listener function to call\n * @param {?} wrapWithPreventDefault Whether or not to prevent default behavior\n * (the procedural renderer does this already, so in those cases, we should skip)\n * @return {?}\n */\nfunction wrapListener(tNode, lView, listenerFn, wrapWithPreventDefault) {\n    // Note: we are performing most of the work in the listener function itself\n    // to optimize listener registration.\n    return function wrapListenerIn_markDirtyAndPreventDefault(e) {\n        // In order to be backwards compatible with View Engine, events on component host nodes\n        // must also mark the component view itself dirty (i.e. the view that it owns).\n        /** @type {?} */\n        const startView = tNode.flags & 1 /* isComponent */ ? getComponentViewByIndex(tNode.index, lView) : lView;\n        // See interfaces/view.ts for more on LViewFlags.ManualOnPush\n        if ((lView[FLAGS] & 32 /* ManualOnPush */) === 0) {\n            markViewDirty(startView);\n        }\n        try {\n            /** @type {?} */\n            const result = listenerFn(e);\n            if (wrapWithPreventDefault && result === false) {\n                e.preventDefault();\n                // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n                e.returnValue = false;\n            }\n            return result;\n        }\n        catch (error) {\n            handleError(lView, error);\n        }\n    };\n}\n/**\n * Marks current view and all ancestors dirty.\n *\n * Returns the root view because it is found as a byproduct of marking the view tree\n * dirty, and can be used by methods that consume markViewDirty() to easily schedule\n * change detection. Otherwise, such methods would need to traverse up the view tree\n * an additional time to get the root view and schedule a tick on it.\n *\n * @param {?} lView The starting LView to mark dirty\n * @return {?} the root LView\n */\nexport function markViewDirty(lView) {\n    while (lView) {\n        lView[FLAGS] |= 64 /* Dirty */;\n        /** @type {?} */\n        const parent = getLViewParent(lView);\n        // Stop traversing up as soon as you find a root view that wasn't attached to any container\n        if (isRootView(lView) && !parent) {\n            return lView;\n        }\n        // continue otherwise\n        lView = (/** @type {?} */ (parent));\n    }\n    return null;\n}\n/**\n * Used to schedule change detection on the whole application.\n *\n * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n * It is usually called indirectly by calling `markDirty` when the view needs to be\n * re-rendered.\n *\n * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n * `scheduleTick` requests. The scheduling function can be overridden in\n * `renderComponent`'s `scheduler` option.\n * @template T\n * @param {?} rootContext\n * @param {?} flags\n * @return {?}\n */\nexport function scheduleTick(rootContext, flags) {\n    /** @type {?} */\n    const nothingScheduled = rootContext.flags === 0 /* Empty */;\n    rootContext.flags |= flags;\n    if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {\n        /** @type {?} */\n        let res;\n        rootContext.clean = new Promise((r) => res = r);\n        rootContext.scheduler(() => {\n            if (rootContext.flags & 1 /* DetectChanges */) {\n                rootContext.flags &= ~1 /* DetectChanges */;\n                tickRootContext(rootContext);\n            }\n            if (rootContext.flags & 2 /* FlushPlayers */) {\n                rootContext.flags &= ~2 /* FlushPlayers */;\n                /** @type {?} */\n                const playerHandler = rootContext.playerHandler;\n                if (playerHandler) {\n                    playerHandler.flushPlayers();\n                }\n            }\n            rootContext.clean = _CLEAN_PROMISE;\n            (/** @type {?} */ (res))(null);\n        });\n    }\n}\n/**\n * Used to perform change detection on the whole application.\n *\n * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`\n * executes lifecycle hooks and conditionally checks components based on their\n * `ChangeDetectionStrategy` and dirtiness.\n *\n * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally\n * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a\n * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can\n * be changed when calling `renderComponent` and providing the `scheduler` option.\n * @template T\n * @param {?} component\n * @return {?}\n */\nexport function tick(component) {\n    /** @type {?} */\n    const rootView = getRootView(component);\n    /** @type {?} */\n    const rootContext = (/** @type {?} */ (rootView[CONTEXT]));\n    tickRootContext(rootContext);\n}\n/**\n * @param {?} rootContext\n * @return {?}\n */\nfunction tickRootContext(rootContext) {\n    for (let i = 0; i < rootContext.components.length; i++) {\n        /** @type {?} */\n        const rootComponent = rootContext.components[i];\n        renderComponentOrTemplate((/** @type {?} */ (readPatchedLView(rootComponent))), rootComponent);\n    }\n}\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component. There should\n * be very little reason to call this function directly since a preferred way to do change\n * detection is to {\\@link markDirty} the component and wait for the scheduler to call this method\n * at some future point in time. This is because a single user action often results in many\n * components being invalidated and calling change detection on each component synchronously\n * would be inefficient. It is better to wait until all components are marked as dirty and\n * then perform single change detection across all of the components\n *\n * @template T\n * @param {?} component The component which the change detection should be performed on.\n * @return {?}\n */\nexport function detectChanges(component) {\n    /** @type {?} */\n    const view = getComponentViewByInstance(component);\n    detectChangesInternal(view, component);\n}\n/**\n * @template T\n * @param {?} view\n * @param {?} context\n * @return {?}\n */\nexport function detectChangesInternal(view, context) {\n    /** @type {?} */\n    const rendererFactory = view[RENDERER_FACTORY];\n    if (rendererFactory.begin)\n        rendererFactory.begin();\n    try {\n        if (isCreationMode(view)) {\n            checkView(view, context); // creation mode pass\n        }\n        checkView(view, context); // update mode pass\n    }\n    catch (error) {\n        handleError(view, error);\n        throw error;\n    }\n    finally {\n        if (rendererFactory.end)\n            rendererFactory.end();\n    }\n}\n/**\n * Synchronously perform change detection on a root view and its components.\n *\n * @param {?} lView The view which the change detection should be performed on.\n * @return {?}\n */\nexport function detectChangesInRootView(lView) {\n    tickRootContext((/** @type {?} */ (lView[CONTEXT])));\n}\n/**\n * Checks the change detector and its children, and throws if any changes are detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n * @template T\n * @param {?} component\n * @return {?}\n */\nexport function checkNoChanges(component) {\n    /** @type {?} */\n    const view = getComponentViewByInstance(component);\n    checkNoChangesInternal(view, component);\n}\n/**\n * @template T\n * @param {?} view\n * @param {?} context\n * @return {?}\n */\nexport function checkNoChangesInternal(view, context) {\n    setCheckNoChangesMode(true);\n    try {\n        detectChangesInternal(view, context);\n    }\n    finally {\n        setCheckNoChangesMode(false);\n    }\n}\n/**\n * Checks the change detector on a root view and its components, and throws if any changes are\n * detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n *\n * @param {?} lView The view which the change detection should be checked on.\n * @return {?}\n */\nexport function checkNoChangesInRootView(lView) {\n    setCheckNoChangesMode(true);\n    try {\n        detectChangesInRootView(lView);\n    }\n    finally {\n        setCheckNoChangesMode(false);\n    }\n}\n/**\n * Checks the view of the component provided. Does not gate on dirty checks or execute doCheck.\n * @template T\n * @param {?} hostView\n * @param {?} component\n * @return {?}\n */\nexport function checkView(hostView, component) {\n    /** @type {?} */\n    const hostTView = hostView[TVIEW];\n    /** @type {?} */\n    const oldView = enterView(hostView, hostView[T_HOST]);\n    /** @type {?} */\n    const templateFn = (/** @type {?} */ (hostTView.template));\n    /** @type {?} */\n    const creationMode = isCreationMode(hostView);\n    try {\n        resetPreOrderHookFlags(hostView);\n        namespaceHTML();\n        creationMode && executeViewQueryFn(1 /* Create */, hostTView, component);\n        templateFn(getRenderFlags(hostView), component);\n        refreshDescendantViews(hostView);\n        // Only check view queries again in creation mode if there are static view queries\n        if (!creationMode || hostTView.staticViewQueries) {\n            executeViewQueryFn(2 /* Update */, hostTView, component);\n        }\n    }\n    finally {\n        leaveView(oldView);\n    }\n}\n/**\n * @template T\n * @param {?} flags\n * @param {?} tView\n * @param {?} component\n * @return {?}\n */\nfunction executeViewQueryFn(flags, tView, component) {\n    /** @type {?} */\n    const viewQuery = tView.viewQuery;\n    if (viewQuery) {\n        setCurrentQueryIndex(tView.viewQueryStartIndex);\n        viewQuery(flags, component);\n    }\n}\n/**\n * Mark the component as dirty (needing change detection).\n *\n * Marking a component dirty will schedule a change detection on this\n * component at some point in the future. Marking an already dirty\n * component as dirty is a noop. Only one outstanding change detection\n * can be scheduled per component tree. (Two components bootstrapped with\n * separate `renderComponent` will have separate schedulers)\n *\n * When the root component is bootstrapped with `renderComponent`, a scheduler\n * can be provided.\n *\n * \\@publicApi\n * @template T\n * @param {?} component Component to mark as dirty.\n *\n * @return {?}\n */\nexport function markDirty(component) {\n    ngDevMode && assertDefined(component, 'component');\n    /** @type {?} */\n    const rootView = (/** @type {?} */ (markViewDirty(getComponentViewByInstance(component))));\n    ngDevMode && assertDefined(rootView[CONTEXT], 'rootContext should be defined');\n    scheduleTick((/** @type {?} */ (rootView[CONTEXT])), 1 /* DetectChanges */);\n}\n///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n/**\n * Creates a single value binding.\n *\n * @template T\n * @param {?} value Value to diff\n * @return {?}\n */\nexport function bind(value) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX]++;\n    storeBindingMetadata(lView);\n    return bindingUpdated(lView, bindingIndex, value) ? value : NO_CHANGE;\n}\n/**\n * Allocates the necessary amount of slots for host vars.\n *\n * @param {?} count Amount of vars to be allocated\n * @return {?}\n */\nexport function allocHostVars(count) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (!tView.firstTemplatePass)\n        return;\n    queueHostBindingForCheck(tView, (/** @type {?} */ (getCurrentDirectiveDef())), count);\n    prefillHostVars(tView, lView, count);\n}\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n * @param {?} values\n * @return {?}\n */\nexport function interpolationV(values) {\n    ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n    ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n    /** @type {?} */\n    let different = false;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tData = lView[TVIEW].data;\n    /** @type {?} */\n    let bindingIndex = lView[BINDING_INDEX];\n    if (tData[bindingIndex] == null) {\n        // 2 is the index of the first static interstitial value (ie. not prefix)\n        for (let i = 2; i < values.length; i += 2) {\n            tData[bindingIndex++] = values[i];\n        }\n        bindingIndex = lView[BINDING_INDEX];\n    }\n    for (let i = 1; i < values.length; i += 2) {\n        // Check if bindings (odd indexes) have changed\n        bindingUpdated(lView, bindingIndex++, values[i]) && (different = true);\n    }\n    lView[BINDING_INDEX] = bindingIndex;\n    storeBindingMetadata(lView, values[0], values[values.length - 1]);\n    if (!different) {\n        return NO_CHANGE;\n    }\n    // Build the updated content\n    /** @type {?} */\n    let content = values[0];\n    for (let i = 1; i < values.length; i += 2) {\n        content += renderStringify(values[i]) + values[i + 1];\n    }\n    return content;\n}\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param {?} prefix static value used for concatenation only.\n * @param {?} v0 value checked for change.\n * @param {?} suffix static value used for concatenation only.\n * @return {?}\n */\nexport function interpolation1(prefix, v0, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated(lView, lView[BINDING_INDEX]++, v0);\n    storeBindingMetadata(lView, prefix, suffix);\n    return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 2 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation2(prefix, v0, i0, v1, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    const different = bindingUpdated2(lView, bindingIndex, v0, v1);\n    lView[BINDING_INDEX] += 2;\n    // Only set static strings the first time (data will be null subsequent runs).\n    /** @type {?} */\n    const data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        lView[TVIEW].data[bindingIndex] = i0;\n    }\n    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 3 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation3(prefix, v0, i0, v1, i1, v2, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);\n    lView[BINDING_INDEX] += 3;\n    // Only set static strings the first time (data will be null subsequent runs).\n    /** @type {?} */\n    const data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        /** @type {?} */\n        const tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix :\n        NO_CHANGE;\n}\n/**\n * Create an interpolation binding with 4 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    lView[BINDING_INDEX] += 4;\n    // Only set static strings the first time (data will be null subsequent runs).\n    /** @type {?} */\n    const data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        /** @type {?} */\n        const tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n        tData[bindingIndex + 2] = i2;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 5 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n    lView[BINDING_INDEX] += 5;\n    // Only set static strings the first time (data will be null subsequent runs).\n    /** @type {?} */\n    const data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        /** @type {?} */\n        const tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n        tData[bindingIndex + 2] = i2;\n        tData[bindingIndex + 3] = i3;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + i3 + renderStringify(v4) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 6 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n    lView[BINDING_INDEX] += 6;\n    // Only set static strings the first time (data will be null subsequent runs).\n    /** @type {?} */\n    const data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        /** @type {?} */\n        const tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n        tData[bindingIndex + 2] = i2;\n        tData[bindingIndex + 3] = i3;\n        tData[bindingIndex + 4] = i4;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 7 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n    lView[BINDING_INDEX] += 7;\n    // Only set static strings the first time (data will be null subsequent runs).\n    /** @type {?} */\n    const data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        /** @type {?} */\n        const tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n        tData[bindingIndex + 2] = i2;\n        tData[bindingIndex + 3] = i3;\n        tData[bindingIndex + 4] = i4;\n        tData[bindingIndex + 5] = i5;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 +\n            renderStringify(v6) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 8 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} i6\n * @param {?} v7\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n    lView[BINDING_INDEX] += 8;\n    // Only set static strings the first time (data will be null subsequent runs).\n    /** @type {?} */\n    const data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        /** @type {?} */\n        const tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n        tData[bindingIndex + 2] = i2;\n        tData[bindingIndex + 3] = i3;\n        tData[bindingIndex + 4] = i4;\n        tData[bindingIndex + 5] = i5;\n        tData[bindingIndex + 6] = i6;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 +\n            renderStringify(v6) + i6 + renderStringify(v7) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates binding metadata for a particular binding and stores it in\n * TView.data. These are generated in order to support DebugElement.properties.\n *\n * Each binding / interpolation will have one (including attribute bindings)\n * because at the time of binding, we don't know to which instruction the binding\n * belongs. It is always stored in TView.data at the index of the last binding\n * value in LView (e.g. for interpolation8, it would be stored at the index of\n * the 8th value).\n *\n * @param {?} lView The LView that contains the current binding index.\n * @param {?=} prefix The static prefix string\n * @param {?=} suffix The static suffix string\n *\n * @return {?} Newly created binding metadata string for this binding or null\n */\nfunction storeBindingMetadata(lView, prefix = '', suffix = '') {\n    /** @type {?} */\n    const tData = lView[TVIEW].data;\n    /** @type {?} */\n    const lastBindingIndex = lView[BINDING_INDEX] - 1;\n    /** @type {?} */\n    const value = INTERPOLATION_DELIMITER + prefix + INTERPOLATION_DELIMITER + suffix;\n    return tData[lastBindingIndex] == null ? (tData[lastBindingIndex] = value) : null;\n}\n/**\n * Store a value in the `data` at a given `index`.\n * @template T\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nexport function store(index, value) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    // We don't store any static data for local variables, so the first time\n    // we see the template, we should store as null to avoid a sparse array\n    /** @type {?} */\n    const adjustedIndex = index + HEADER_OFFSET;\n    if (adjustedIndex >= tView.data.length) {\n        tView.data[adjustedIndex] = null;\n        tView.blueprint[adjustedIndex] = null;\n    }\n    lView[adjustedIndex] = value;\n}\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @template T\n * @param {?} index The index of the local ref in contextViewData.\n * @return {?}\n */\nexport function reference(index) {\n    /** @type {?} */\n    const contextLView = getContextLView();\n    return loadInternal(contextLView, index);\n}\n/**\n * Retrieves a value from current `viewData`.\n * @template T\n * @param {?} index\n * @return {?}\n */\nexport function load(index) {\n    return loadInternal(getLView(), index);\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nexport function directiveInject(token, flags = InjectFlags.Default) {\n    token = resolveForwardRef(token);\n    return getOrCreateInjectable((/** @type {?} */ (getPreviousOrParentTNode())), getLView(), token, flags);\n}\n/**\n * Facade for the attribute injection from DI.\n * @param {?} attrNameToInject\n * @return {?}\n */\nexport function injectAttribute(attrNameToInject) {\n    return injectAttributeImpl(getPreviousOrParentTNode(), attrNameToInject);\n}\n/** @type {?} */\nexport const CLEAN_PROMISE = _CLEAN_PROMISE;\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction initializeTNodeInputs(tNode) {\n    // If tNode.inputs is undefined, a listener has created outputs, but inputs haven't\n    // yet been checked.\n    if (tNode) {\n        if (tNode.inputs === undefined) {\n            // mark inputs as checked\n            tNode.inputs = generatePropertyAliases(tNode, 0 /* Input */);\n        }\n        return tNode.inputs;\n    }\n    return null;\n}\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n * @return {?}\n */\nexport function getCurrentView() {\n    return (/** @type {?} */ ((/** @type {?} */ (getLView()))));\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getCleanup(view) {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return view[CLEANUP] || (view[CLEANUP] = []);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getTViewCleanup(view) {\n    return view[TVIEW].cleanup || (view[TVIEW].cleanup = []);\n}\n/**\n * There are cases where the sub component's renderer needs to be included\n * instead of the current renderer (see the componentSyntheticHost* instructions).\n * @param {?} tNode\n * @param {?} lView\n * @return {?}\n */\nfunction loadComponentRenderer(tNode, lView) {\n    /** @type {?} */\n    const componentLView = (/** @type {?} */ (lView[tNode.index]));\n    return componentLView[RENDERER];\n}\n/**\n * Handles an error thrown in an LView.\n * @param {?} lView\n * @param {?} error\n * @return {?}\n */\nfunction handleError(lView, error) {\n    /** @type {?} */\n    const injector = lView[INJECTOR];\n    /** @type {?} */\n    const errorHandler = injector ? injector.get(ErrorHandler, null) : null;\n    errorHandler && errorHandler.handleError(error);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents an instance of an NgModule created via a {\\@link NgModuleFactory}.\n *\n * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n * NgModule Instance.\n *\n * \\@publicApi\n * @abstract\n * @template T\n */\nexport class NgModuleRef {\n}\nif (false) {\n    /**\n     * The injector that contains all of the providers of the NgModule.\n     * @abstract\n     * @return {?}\n     */\n    NgModuleRef.prototype.injector = function () { };\n    /**\n     * The ComponentFactoryResolver to get hold of the ComponentFactories\n     * declared in the `entryComponents` property of the module.\n     * @abstract\n     * @return {?}\n     */\n    NgModuleRef.prototype.componentFactoryResolver = function () { };\n    /**\n     * The NgModule instance.\n     * @abstract\n     * @return {?}\n     */\n    NgModuleRef.prototype.instance = function () { };\n    /**\n     * Destroys the module instance and all of the data structures associated with it.\n     * @abstract\n     * @return {?}\n     */\n    NgModuleRef.prototype.destroy = function () { };\n    /**\n     * Allows to register a callback that will be called when the module is destroyed.\n     * @abstract\n     * @param {?} callback\n     * @return {?}\n     */\n    NgModuleRef.prototype.onDestroy = function (callback) { };\n}\n/**\n * @record\n * @template T\n */\nexport function InternalNgModuleRef() { }\nif (false) {\n    /** @type {?} */\n    InternalNgModuleRef.prototype._bootstrapComponents;\n}\n/**\n * \\@publicApi\n * @abstract\n * @template T\n */\nexport class NgModuleFactory {\n}\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    NgModuleFactory.prototype.moduleType = function () { };\n    /**\n     * @abstract\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    NgModuleFactory.prototype.create = function (parentInjector) { };\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdfbW9kdWxlX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saW5rZXIvbmdfbW9kdWxlX2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JBLE1BQU0sT0FBZ0IsV0FBVztDQTBCaEM7Ozs7Ozs7SUF0QkMsaURBQWtDOzs7Ozs7O0lBTWxDLGlFQUFrRTs7Ozs7O0lBS2xFLGlEQUEyQjs7Ozs7O0lBSzNCLGdEQUF5Qjs7Ozs7OztJQUt6QiwwREFBK0M7Ozs7OztBQUdqRCx5Q0FJQzs7O0lBREMsbURBQWtDOzs7Ozs7O0FBTXBDLE1BQU0sT0FBZ0IsZUFBZTtDQUdwQzs7Ozs7O0lBRkMsdURBQW1DOzs7Ozs7SUFDbkMsaUVBQStEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0luamVjdG9yfSBmcm9tICcuLi9kaS9pbmplY3Rvcic7XG5pbXBvcnQge1R5cGV9IGZyb20gJy4uL2ludGVyZmFjZS90eXBlJztcblxuaW1wb3J0IHtDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJ9IGZyb20gJy4vY29tcG9uZW50X2ZhY3RvcnlfcmVzb2x2ZXInO1xuXG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBpbnN0YW5jZSBvZiBhbiBOZ01vZHVsZSBjcmVhdGVkIHZpYSBhIHtAbGluayBOZ01vZHVsZUZhY3Rvcnl9LlxuICpcbiAqIGBOZ01vZHVsZVJlZmAgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBOZ01vZHVsZSBJbnN0YW5jZSBhcyB3ZWxsIG90aGVyIG9iamVjdHMgcmVsYXRlZCB0byB0aGlzXG4gKiBOZ01vZHVsZSBJbnN0YW5jZS5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBOZ01vZHVsZVJlZjxUPiB7XG4gIC8qKlxuICAgKiBUaGUgaW5qZWN0b3IgdGhhdCBjb250YWlucyBhbGwgb2YgdGhlIHByb3ZpZGVycyBvZiB0aGUgTmdNb2R1bGUuXG4gICAqL1xuICBhYnN0cmFjdCBnZXQgaW5qZWN0b3IoKTogSW5qZWN0b3I7XG5cbiAgLyoqXG4gICAqIFRoZSBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgdG8gZ2V0IGhvbGQgb2YgdGhlIENvbXBvbmVudEZhY3Rvcmllc1xuICAgKiBkZWNsYXJlZCBpbiB0aGUgYGVudHJ5Q29tcG9uZW50c2AgcHJvcGVydHkgb2YgdGhlIG1vZHVsZS5cbiAgICovXG4gIGFic3RyYWN0IGdldCBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIoKTogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgTmdNb2R1bGUgaW5zdGFuY2UuXG4gICAqL1xuICBhYnN0cmFjdCBnZXQgaW5zdGFuY2UoKTogVDtcblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIG1vZHVsZSBpbnN0YW5jZSBhbmQgYWxsIG9mIHRoZSBkYXRhIHN0cnVjdHVyZXMgYXNzb2NpYXRlZCB3aXRoIGl0LlxuICAgKi9cbiAgYWJzdHJhY3QgZGVzdHJveSgpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBBbGxvd3MgdG8gcmVnaXN0ZXIgYSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIG1vZHVsZSBpcyBkZXN0cm95ZWQuXG4gICAqL1xuICBhYnN0cmFjdCBvbkRlc3Ryb3koY2FsbGJhY2s6ICgpID0+IHZvaWQpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEludGVybmFsTmdNb2R1bGVSZWY8VD4gZXh0ZW5kcyBOZ01vZHVsZVJlZjxUPiB7XG4gIC8vIE5vdGU6IHdlIGFyZSB1c2luZyB0aGUgcHJlZml4IF8gYXMgTmdNb2R1bGVEYXRhIGlzIGFuIE5nTW9kdWxlUmVmIGFuZCB0aGVyZWZvcmUgZGlyZWN0bHlcbiAgLy8gZXhwb3NlZCB0byB0aGUgdXNlci5cbiAgX2Jvb3RzdHJhcENvbXBvbmVudHM6IFR5cGU8YW55PltdO1xufVxuXG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE5nTW9kdWxlRmFjdG9yeTxUPiB7XG4gIGFic3RyYWN0IGdldCBtb2R1bGVUeXBlKCk6IFR5cGU8VD47XG4gIGFic3RyYWN0IGNyZWF0ZShwYXJlbnRJbmplY3RvcjogSW5qZWN0b3J8bnVsbCk6IE5nTW9kdWxlUmVmPFQ+O1xufVxuIl19","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { checkNoChangesInRootView, checkNoChangesInternal, detectChangesInRootView, detectChangesInternal, markViewDirty, storeCleanupFn } from './instructions';\nimport { FLAGS, HOST, T_HOST } from './interfaces/view';\nimport { destroyLView } from './node_manipulation';\nimport { findComponentView, getLViewParent } from './util/view_traversal_utils';\nimport { getNativeByTNode } from './util/view_utils';\n/**\n * @record\n */\nexport function viewEngine_ChangeDetectorRef_interface() { }\n/**\n * @template T\n */\nexport class ViewRef {\n    /**\n     * @param {?} _lView\n     * @param {?} _context\n     * @param {?} _componentIndex\n     */\n    constructor(_lView, _context, _componentIndex) {\n        this._context = _context;\n        this._componentIndex = _componentIndex;\n        this._appRef = null;\n        this._viewContainerRef = null;\n        /**\n         * \\@internal\n         */\n        this._tViewNode = null;\n        this._lView = _lView;\n    }\n    /**\n     * @return {?}\n     */\n    get rootNodes() {\n        if (this._lView[HOST] == null) {\n            /** @type {?} */\n            const tView = (/** @type {?} */ (this._lView[T_HOST]));\n            return collectNativeNodes(this._lView, tView, []);\n        }\n        return [];\n    }\n    /**\n     * @return {?}\n     */\n    get context() { return this._context ? this._context : this._lookUpContext(); }\n    /**\n     * @return {?}\n     */\n    get destroyed() {\n        return (this._lView[FLAGS] & 256 /* Destroyed */) === 256 /* Destroyed */;\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._viewContainerRef) {\n            /** @type {?} */\n            const index = this._viewContainerRef.indexOf(this);\n            if (index > -1) {\n                this._viewContainerRef.detach(index);\n            }\n            this._viewContainerRef = null;\n        }\n        destroyLView(this._lView);\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) { storeCleanupFn(this._lView, callback); }\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {\\@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     * @return {?}\n     */\n    markForCheck() { markViewDirty(this._lView); }\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {\\@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *  /\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     * @return {?}\n     */\n    detach() { this._lView[FLAGS] &= ~128 /* Attached */; }\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {\\@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *  /\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     * @return {?}\n     */\n    reattach() { this._lView[FLAGS] |= 128 /* Attached */; }\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {\\@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {\\@link ChangeDetectorRef#detach detach} for more information.\n     * @return {?}\n     */\n    detectChanges() { detectChangesInternal(this._lView, this.context); }\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     * @return {?}\n     */\n    checkNoChanges() { checkNoChangesInternal(this._lView, this.context); }\n    /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    attachToViewContainerRef(vcRef) {\n        if (this._appRef) {\n            throw new Error('This view is already attached directly to the ApplicationRef!');\n        }\n        this._viewContainerRef = vcRef;\n    }\n    /**\n     * @return {?}\n     */\n    detachFromAppRef() { this._appRef = null; }\n    /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    attachToAppRef(appRef) {\n        if (this._viewContainerRef) {\n            throw new Error('This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _lookUpContext() {\n        return this._context = (/** @type {?} */ ((/** @type {?} */ (getLViewParent(this._lView)))[this._componentIndex]));\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ViewRef.prototype._appRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    ViewRef.prototype._viewContainerRef;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewRef.prototype._tViewNode;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewRef.prototype._lView;\n    /**\n     * @type {?}\n     * @private\n     */\n    ViewRef.prototype._context;\n    /**\n     * @type {?}\n     * @private\n     */\n    ViewRef.prototype._componentIndex;\n}\n/**\n * \\@internal\n * @template T\n */\nexport class RootViewRef extends ViewRef {\n    /**\n     * @param {?} _view\n     */\n    constructor(_view) {\n        super(_view, null, -1);\n        this._view = _view;\n    }\n    /**\n     * @return {?}\n     */\n    detectChanges() { detectChangesInRootView(this._view); }\n    /**\n     * @return {?}\n     */\n    checkNoChanges() { checkNoChangesInRootView(this._view); }\n    /**\n     * @return {?}\n     */\n    get context() { return (/** @type {?} */ (null)); }\n}\nif (false) {\n    /** @type {?} */\n    RootViewRef.prototype._view;\n}\n/**\n * @param {?} lView\n * @param {?} parentTNode\n * @param {?} result\n * @return {?}\n */\nfunction collectNativeNodes(lView, parentTNode, result) {\n    /** @type {?} */\n    let tNodeChild = parentTNode.child;\n    while (tNodeChild) {\n        /** @type {?} */\n        const nativeNode = getNativeByTNode(tNodeChild, lView);\n        nativeNode && result.push(nativeNode);\n        if (tNodeChild.type === 4 /* ElementContainer */) {\n            collectNativeNodes(lView, tNodeChild, result);\n        }\n        else if (tNodeChild.type === 1 /* Projection */) {\n            /** @type {?} */\n            const componentView = findComponentView(lView);\n            /** @type {?} */\n            const componentHost = (/** @type {?} */ (componentView[T_HOST]));\n            /** @type {?} */\n            const parentView = getLViewParent(componentView);\n            /** @type {?} */\n            let currentProjectedNode = ((/** @type {?} */ (componentHost.projection)))[(/** @type {?} */ (tNodeChild.projection))];\n            while (currentProjectedNode && parentView) {\n                result.push(getNativeByTNode(currentProjectedNode, parentView));\n                currentProjectedNode = currentProjectedNode.next;\n            }\n        }\n        tNodeChild = tNodeChild.next;\n    }\n    return result;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModuleRef as viewEngine_NgModuleRef } from '../linker/ng_module_factory';\nimport { assertDefined, assertGreaterThan, assertLessThan } from '../util/assert';\nimport { NodeInjector, getParentInjectorLocation } from './di';\nimport { addToViewTree, createEmbeddedViewAndNode, createLContainer, renderEmbeddedTemplate } from './instructions';\nimport { ACTIVE_INDEX, NATIVE, VIEWS } from './interfaces/container';\nimport { isProceduralRenderer } from './interfaces/renderer';\nimport { CONTEXT, QUERIES, RENDERER, T_HOST } from './interfaces/view';\nimport { assertNodeOfPossibleTypes } from './node_assert';\nimport { addRemoveViewFromContainer, appendChild, detachView, getBeforeNodeForView, insertView, nativeInsertBefore, nativeNextSibling, nativeParentNode, removeView } from './node_manipulation';\nimport { getParentInjectorTNode } from './node_util';\nimport { getLView, getPreviousOrParentTNode } from './state';\nimport { getParentInjectorView, hasParentInjector } from './util/injector_utils';\nimport { findComponentView } from './util/view_traversal_utils';\nimport { getComponentViewByIndex, getNativeByTNode, isComponent, isLContainer, isRootView, viewAttachedToContainer } from './util/view_utils';\nimport { ViewRef } from './view_ref';\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @param {?} ElementRefToken\n * @return {?} The ElementRef instance to use\n */\nexport function injectElementRef(ElementRefToken) {\n    return createElementRef(ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\n/** @type {?} */\nlet R3ElementRef;\n/**\n * Creates an ElementRef given a node.\n *\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} tNode The node for which you'd like an ElementRef\n * @param {?} view The view to which the node belongs\n * @return {?} The ElementRef instance to use\n */\nexport function createElementRef(ElementRefToken, tNode, view) {\n    if (!R3ElementRef) {\n        // TODO: Fix class name, should be ElementRef, but there appears to be a rollup bug\n        R3ElementRef = class ElementRef_ extends ElementRefToken {\n        };\n    }\n    return new R3ElementRef((/** @type {?} */ (getNativeByTNode(tNode, view))));\n}\n/** @type {?} */\nlet R3TemplateRef;\n/**\n * Creates a TemplateRef given a node.\n *\n * @template T\n * @param {?} TemplateRefToken\n * @param {?} ElementRefToken\n * @return {?} The TemplateRef instance to use\n */\nexport function injectTemplateRef(TemplateRefToken, ElementRefToken) {\n    return createTemplateRef(TemplateRefToken, ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @template T\n * @param {?} TemplateRefToken The TemplateRef type\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} hostTNode The node that is requesting a TemplateRef\n * @param {?} hostView The view to which the node belongs\n * @return {?} The TemplateRef instance to use\n */\nexport function createTemplateRef(TemplateRefToken, ElementRefToken, hostTNode, hostView) {\n    if (!R3TemplateRef) {\n        // TODO: Fix class name, should be TemplateRef, but there appears to be a rollup bug\n        R3TemplateRef = class TemplateRef_ extends TemplateRefToken {\n            /**\n             * @param {?} _declarationParentView\n             * @param {?} elementRef\n             * @param {?} _tView\n             * @param {?} _hostLContainer\n             * @param {?} _injectorIndex\n             */\n            constructor(_declarationParentView, elementRef, _tView, _hostLContainer, _injectorIndex) {\n                super();\n                this._declarationParentView = _declarationParentView;\n                this.elementRef = elementRef;\n                this._tView = _tView;\n                this._hostLContainer = _hostLContainer;\n                this._injectorIndex = _injectorIndex;\n            }\n            /**\n             * @param {?} context\n             * @param {?=} container\n             * @param {?=} index\n             * @return {?}\n             */\n            createEmbeddedView(context, container, index) {\n                /** @type {?} */\n                const lView = createEmbeddedViewAndNode(this._tView, context, this._declarationParentView, this._hostLContainer[QUERIES], this._injectorIndex);\n                if (container) {\n                    insertView(lView, container, (/** @type {?} */ (index)));\n                }\n                renderEmbeddedTemplate(lView, this._tView, context);\n                /** @type {?} */\n                const viewRef = new ViewRef(lView, context, -1);\n                viewRef._tViewNode = (/** @type {?} */ (lView[T_HOST]));\n                return viewRef;\n            }\n        };\n    }\n    if (hostTNode.type === 0 /* Container */) {\n        /** @type {?} */\n        const hostContainer = hostView[hostTNode.index];\n        ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');\n        return new R3TemplateRef(hostView, createElementRef(ElementRefToken, hostTNode, hostView), (/** @type {?} */ (hostTNode.tViews)), hostContainer, hostTNode.injectorIndex);\n    }\n    else {\n        return null;\n    }\n}\n/** @type {?} */\nlet R3ViewContainerRef;\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @param {?} ViewContainerRefToken\n * @param {?} ElementRefToken\n * @return {?} The ViewContainerRef instance to use\n */\nexport function injectViewContainerRef(ViewContainerRefToken, ElementRefToken) {\n    /** @type {?} */\n    const previousTNode = (/** @type {?} */ (getPreviousOrParentTNode()));\n    return createContainerRef(ViewContainerRefToken, ElementRefToken, previousTNode, getLView());\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param {?} ViewContainerRefToken The ViewContainerRef type\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} hostTNode The node that is requesting a ViewContainerRef\n * @param {?} hostView The view to which the node belongs\n * @return {?} The ViewContainerRef instance to use\n */\nexport function createContainerRef(ViewContainerRefToken, ElementRefToken, hostTNode, hostView) {\n    if (!R3ViewContainerRef) {\n        // TODO: Fix class name, should be ViewContainerRef, but there appears to be a rollup bug\n        R3ViewContainerRef = class ViewContainerRef_ extends ViewContainerRefToken {\n            /**\n             * @param {?} _lContainer\n             * @param {?} _hostTNode\n             * @param {?} _hostView\n             */\n            constructor(_lContainer, _hostTNode, _hostView) {\n                super();\n                this._lContainer = _lContainer;\n                this._hostTNode = _hostTNode;\n                this._hostView = _hostView;\n                this._viewRefs = [];\n            }\n            /**\n             * @return {?}\n             */\n            get element() {\n                return createElementRef(ElementRefToken, this._hostTNode, this._hostView);\n            }\n            /**\n             * @return {?}\n             */\n            get injector() { return new NodeInjector(this._hostTNode, this._hostView); }\n            /**\n             * @deprecated No replacement\n             * @return {?}\n             */\n            get parentInjector() {\n                /** @type {?} */\n                const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostView);\n                /** @type {?} */\n                const parentView = getParentInjectorView(parentLocation, this._hostView);\n                /** @type {?} */\n                const parentTNode = getParentInjectorTNode(parentLocation, this._hostView, this._hostTNode);\n                return !hasParentInjector(parentLocation) || parentTNode == null ?\n                    new NodeInjector(null, this._hostView) :\n                    new NodeInjector(parentTNode, parentView);\n            }\n            /**\n             * @return {?}\n             */\n            clear() {\n                while (this._lContainer[VIEWS].length) {\n                    this.remove(0);\n                }\n            }\n            /**\n             * @param {?} index\n             * @return {?}\n             */\n            get(index) { return this._viewRefs[index] || null; }\n            /**\n             * @return {?}\n             */\n            get length() { return this._lContainer[VIEWS].length; }\n            /**\n             * @template C\n             * @param {?} templateRef\n             * @param {?=} context\n             * @param {?=} index\n             * @return {?}\n             */\n            createEmbeddedView(templateRef, context, index) {\n                /** @type {?} */\n                const adjustedIdx = this._adjustIndex(index);\n                /** @type {?} */\n                const viewRef = ((/** @type {?} */ (templateRef)))\n                    .createEmbeddedView(context || (/** @type {?} */ ({})), this._lContainer, adjustedIdx);\n                ((/** @type {?} */ (viewRef))).attachToViewContainerRef(this);\n                this._viewRefs.splice(adjustedIdx, 0, viewRef);\n                return viewRef;\n            }\n            /**\n             * @template C\n             * @param {?} componentFactory\n             * @param {?=} index\n             * @param {?=} injector\n             * @param {?=} projectableNodes\n             * @param {?=} ngModuleRef\n             * @return {?}\n             */\n            createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {\n                /** @type {?} */\n                const contextInjector = injector || this.parentInjector;\n                if (!ngModuleRef && ((/** @type {?} */ (componentFactory))).ngModule == null && contextInjector) {\n                    ngModuleRef = contextInjector.get(viewEngine_NgModuleRef, null);\n                }\n                /** @type {?} */\n                const componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n                this.insert(componentRef.hostView, index);\n                return componentRef;\n            }\n            /**\n             * @param {?} viewRef\n             * @param {?=} index\n             * @return {?}\n             */\n            insert(viewRef, index) {\n                if (viewRef.destroyed) {\n                    throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n                }\n                /** @type {?} */\n                const lView = (/** @type {?} */ (((/** @type {?} */ (viewRef)))._lView));\n                /** @type {?} */\n                const adjustedIdx = this._adjustIndex(index);\n                if (viewAttachedToContainer(lView)) {\n                    // If view is already attached, fall back to move() so we clean up\n                    // references appropriately.\n                    return this.move(viewRef, adjustedIdx);\n                }\n                insertView(lView, this._lContainer, adjustedIdx);\n                /** @type {?} */\n                const beforeNode = getBeforeNodeForView(adjustedIdx, this._lContainer[VIEWS], this._lContainer[NATIVE]);\n                addRemoveViewFromContainer(lView, true, beforeNode);\n                ((/** @type {?} */ (viewRef))).attachToViewContainerRef(this);\n                this._viewRefs.splice(adjustedIdx, 0, viewRef);\n                return viewRef;\n            }\n            /**\n             * @param {?} viewRef\n             * @param {?} newIndex\n             * @return {?}\n             */\n            move(viewRef, newIndex) {\n                if (viewRef.destroyed) {\n                    throw new Error('Cannot move a destroyed View in a ViewContainer!');\n                }\n                /** @type {?} */\n                const index = this.indexOf(viewRef);\n                if (index !== -1)\n                    this.detach(index);\n                this.insert(viewRef, newIndex);\n                return viewRef;\n            }\n            /**\n             * @param {?} viewRef\n             * @return {?}\n             */\n            indexOf(viewRef) { return this._viewRefs.indexOf(viewRef); }\n            /**\n             * @param {?=} index\n             * @return {?}\n             */\n            remove(index) {\n                /** @type {?} */\n                const adjustedIdx = this._adjustIndex(index, -1);\n                removeView(this._lContainer, adjustedIdx);\n                this._viewRefs.splice(adjustedIdx, 1);\n            }\n            /**\n             * @param {?=} index\n             * @return {?}\n             */\n            detach(index) {\n                /** @type {?} */\n                const adjustedIdx = this._adjustIndex(index, -1);\n                /** @type {?} */\n                const view = detachView(this._lContainer, adjustedIdx);\n                /** @type {?} */\n                const wasDetached = this._viewRefs.splice(adjustedIdx, 1)[0] != null;\n                return wasDetached ? new ViewRef(view, view[CONTEXT], -1) : null;\n            }\n            /**\n             * @private\n             * @param {?=} index\n             * @param {?=} shift\n             * @return {?}\n             */\n            _adjustIndex(index, shift = 0) {\n                if (index == null) {\n                    return this._lContainer[VIEWS].length + shift;\n                }\n                if (ngDevMode) {\n                    assertGreaterThan(index, -1, 'index must be positive');\n                    // +1 because it's legal to insert at the end.\n                    assertLessThan(index, this._lContainer[VIEWS].length + 1 + shift, 'index');\n                }\n                return index;\n            }\n        };\n    }\n    ngDevMode && assertNodeOfPossibleTypes(hostTNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    /** @type {?} */\n    let lContainer;\n    /** @type {?} */\n    const slotValue = hostView[hostTNode.index];\n    if (isLContainer(slotValue)) {\n        // If the host is a container, we don't need to create a new LContainer\n        lContainer = slotValue;\n        lContainer[ACTIVE_INDEX] = -1;\n    }\n    else {\n        /** @type {?} */\n        const commentNode = hostView[RENDERER].createComment(ngDevMode ? 'container' : '');\n        ngDevMode && ngDevMode.rendererCreateComment++;\n        // A container can be created on the root (topmost / bootstrapped) component and in this case we\n        // can't use LTree to insert container's marker node (both parent of a comment node and the\n        // commend node itself is located outside of elements hold by LTree). In this specific case we\n        // use low-level DOM manipulation to insert container's marker (comment) node.\n        if (isRootView(hostView)) {\n            /** @type {?} */\n            const renderer = hostView[RENDERER];\n            /** @type {?} */\n            const hostNative = (/** @type {?} */ (getNativeByTNode(hostTNode, hostView)));\n            /** @type {?} */\n            const parentOfHostNative = nativeParentNode(renderer, hostNative);\n            nativeInsertBefore(renderer, (/** @type {?} */ (parentOfHostNative)), commentNode, nativeNextSibling(renderer, hostNative));\n        }\n        else {\n            appendChild(commentNode, hostTNode, hostView);\n        }\n        hostView[hostTNode.index] = lContainer =\n            createLContainer(slotValue, hostView, commentNode, true);\n        addToViewTree(hostView, lContainer);\n    }\n    return new R3ViewContainerRef(lContainer, hostTNode, hostView);\n}\n/**\n * Returns a ChangeDetectorRef (a.k.a. a ViewRef)\n * @return {?}\n */\nexport function injectChangeDetectorRef() {\n    return createViewRef(getPreviousOrParentTNode(), getLView(), null);\n}\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param {?} hostTNode The node that is requesting a ChangeDetectorRef\n * @param {?} hostView The view to which the node belongs\n * @param {?} context The context for this change detector ref\n * @return {?} The ChangeDetectorRef to use\n */\nexport function createViewRef(hostTNode, hostView, context) {\n    if (isComponent(hostTNode)) {\n        /** @type {?} */\n        const componentIndex = hostTNode.directiveStart;\n        /** @type {?} */\n        const componentView = getComponentViewByIndex(hostTNode.index, hostView);\n        return new ViewRef(componentView, context, componentIndex);\n    }\n    else if (hostTNode.type === 3 /* Element */ || hostTNode.type === 0 /* Container */) {\n        /** @type {?} */\n        const hostComponentView = findComponentView(hostView);\n        return new ViewRef(hostComponentView, hostComponentView[CONTEXT], -1);\n    }\n    return (/** @type {?} */ (null));\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getOrCreateRenderer2(view) {\n    /** @type {?} */\n    const renderer = view[RENDERER];\n    if (isProceduralRenderer(renderer)) {\n        return (/** @type {?} */ (renderer));\n    }\n    else {\n        throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');\n    }\n}\n/**\n * Returns a Renderer2 (or throws when application was bootstrapped with Renderer3)\n * @return {?}\n */\nexport function injectRenderer2() {\n    return getOrCreateRenderer2(getLView());\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectElementRef as render3InjectElementRef } from '../render3/view_engine_compatibility';\nimport { noop } from '../util/noop';\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * \\@security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n * \\@publicApi\n * @template T\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nexport class ElementRef {\n    /**\n     * @param {?} nativeElement\n     */\n    constructor(nativeElement) { this.nativeElement = nativeElement; }\n}\n/**\n * \\@internal\n * @nocollapse\n */\nElementRef.__NG_ELEMENT_ID__ = () => SWITCH_ELEMENT_REF_FACTORY(ElementRef);\nif (false) {\n    /**\n     * \\@internal\n     * @nocollapse\n     * @type {?}\n     */\n    ElementRef.__NG_ELEMENT_ID__;\n    /**\n     * The underlying native element or `null` if direct access to native elements is not supported\n     * (e.g. when the application runs in a web worker).\n     *\n     * <div class=\"callout is-critical\">\n     *   <header>Use with caution</header>\n     *   <p>\n     *    Use this API as the last resort when direct access to DOM is needed. Use templating and\n     *    data-binding provided by Angular instead. Alternatively you can take a look at {\\@link\n     * Renderer2}\n     *    which provides API that can safely be used even when direct access to native elements is not\n     *    supported.\n     *   </p>\n     *   <p>\n     *    Relying on direct DOM access creates tight coupling between your application and rendering\n     *    layers which will make it impossible to separate the two and deploy your application into a\n     *    web worker.\n     *   </p>\n     * </div>\n     *\n     * @type {?}\n     */\n    ElementRef.prototype.nativeElement;\n}\n/** @type {?} */\nexport const SWITCH_ELEMENT_REF_FACTORY__POST_R3__ = render3InjectElementRef;\n/** @type {?} */\nconst SWITCH_ELEMENT_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_ELEMENT_REF_FACTORY = SWITCH_ELEMENT_REF_FACTORY__POST_R3__;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9tbnQvZi9naXQvaXZ5LWNvZGUtc2l6ZS9ub2RlX21vZHVsZXMvQGFuZ3VsYXIvY29yZS9lc20yMDE1L3NyYy9saW5rZXIvZWxlbWVudF9yZWYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7bUNBNEVtQyxxQ0FBb0MiLCJmaWxlIjoiL21udC9mL2dpdC9pdnktY29kZS1zaXplL25vZGVfbW9kdWxlcy9AYW5ndWxhci9jb3JlL2VzbTIwMTUvc3JjL2xpbmtlci9lbGVtZW50X3JlZi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsZXh0cmFSZXF1aXJlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IGluamVjdEVsZW1lbnRSZWYgYXMgcmVuZGVyM0luamVjdEVsZW1lbnRSZWYgfSBmcm9tICcuLi9yZW5kZXIzL3ZpZXdfZW5naW5lX2NvbXBhdGliaWxpdHknO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uL3V0aWwvbm9vcCc7XG4vKipcbiAqIEEgd3JhcHBlciBhcm91bmQgYSBuYXRpdmUgZWxlbWVudCBpbnNpZGUgb2YgYSBWaWV3LlxuICpcbiAqIEFuIGBFbGVtZW50UmVmYCBpcyBiYWNrZWQgYnkgYSByZW5kZXItc3BlY2lmaWMgZWxlbWVudC4gSW4gdGhlIGJyb3dzZXIsIHRoaXMgaXMgdXN1YWxseSBhIERPTVxuICogZWxlbWVudC5cbiAqXG4gKiBcXEBzZWN1cml0eSBQZXJtaXR0aW5nIGRpcmVjdCBhY2Nlc3MgdG8gdGhlIERPTSBjYW4gbWFrZSB5b3VyIGFwcGxpY2F0aW9uIG1vcmUgdnVsbmVyYWJsZSB0b1xuICogWFNTIGF0dGFja3MuIENhcmVmdWxseSByZXZpZXcgYW55IHVzZSBvZiBgRWxlbWVudFJlZmAgaW4geW91ciBjb2RlLiBGb3IgbW9yZSBkZXRhaWwsIHNlZSB0aGVcbiAqIFtTZWN1cml0eSBHdWlkZV0oaHR0cDovL2cuY28vbmcvc2VjdXJpdHkpLlxuICpcbiAqIFxcQHB1YmxpY0FwaVxuICogQHRlbXBsYXRlIFRcbiAqL1xuLy8gTm90ZTogV2UgZG9uJ3QgZXhwb3NlIHRoaW5ncyBsaWtlIGBJbmplY3RvcmAsIGBWaWV3Q29udGFpbmVyYCwgLi4uIGhlcmUsXG4vLyBpLmUuIHVzZXJzIGhhdmUgdG8gYXNrIGZvciB3aGF0IHRoZXkgbmVlZC4gV2l0aCB0aGF0LCB3ZSBjYW4gYnVpbGQgYmV0dGVyIGFuYWx5c2lzIHRvb2xzXG4vLyBhbmQgY291bGQgZG8gYmV0dGVyIGNvZGVnZW4gaW4gdGhlIGZ1dHVyZS5cbmV4cG9ydCBjbGFzcyBFbGVtZW50UmVmIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hdGl2ZUVsZW1lbnRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihuYXRpdmVFbGVtZW50KSB7IHRoaXMubmF0aXZlRWxlbWVudCA9IG5hdGl2ZUVsZW1lbnQ7IH1cbn1cbi8qKlxuICogXFxAaW50ZXJuYWxcbiAqIEBub2NvbGxhcHNlXG4gKi9cbkVsZW1lbnRSZWYuX19OR19FTEVNRU5UX0lEX18gPSAoKSA9PiBTV0lUQ0hfRUxFTUVOVF9SRUZfRkFDVE9SWShFbGVtZW50UmVmKTtcbmlmIChmYWxzZSkge1xuICAgIC8qKlxuICAgICAqIFxcQGludGVybmFsXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBFbGVtZW50UmVmLl9fTkdfRUxFTUVOVF9JRF9fO1xuICAgIC8qKlxuICAgICAqIFRoZSB1bmRlcmx5aW5nIG5hdGl2ZSBlbGVtZW50IG9yIGBudWxsYCBpZiBkaXJlY3QgYWNjZXNzIHRvIG5hdGl2ZSBlbGVtZW50cyBpcyBub3Qgc3VwcG9ydGVkXG4gICAgICogKGUuZy4gd2hlbiB0aGUgYXBwbGljYXRpb24gcnVucyBpbiBhIHdlYiB3b3JrZXIpLlxuICAgICAqXG4gICAgICogPGRpdiBjbGFzcz1cImNhbGxvdXQgaXMtY3JpdGljYWxcIj5cbiAgICAgKiAgIDxoZWFkZXI+VXNlIHdpdGggY2F1dGlvbjwvaGVhZGVyPlxuICAgICAqICAgPHA+XG4gICAgICogICAgVXNlIHRoaXMgQVBJIGFzIHRoZSBsYXN0IHJlc29ydCB3aGVuIGRpcmVjdCBhY2Nlc3MgdG8gRE9NIGlzIG5lZWRlZC4gVXNlIHRlbXBsYXRpbmcgYW5kXG4gICAgICogICAgZGF0YS1iaW5kaW5nIHByb3ZpZGVkIGJ5IEFuZ3VsYXIgaW5zdGVhZC4gQWx0ZXJuYXRpdmVseSB5b3UgY2FuIHRha2UgYSBsb29rIGF0IHtcXEBsaW5rXG4gICAgICogUmVuZGVyZXIyfVxuICAgICAqICAgIHdoaWNoIHByb3ZpZGVzIEFQSSB0aGF0IGNhbiBzYWZlbHkgYmUgdXNlZCBldmVuIHdoZW4gZGlyZWN0IGFjY2VzcyB0byBuYXRpdmUgZWxlbWVudHMgaXMgbm90XG4gICAgICogICAgc3VwcG9ydGVkLlxuICAgICAqICAgPC9wPlxuICAgICAqICAgPHA+XG4gICAgICogICAgUmVseWluZyBvbiBkaXJlY3QgRE9NIGFjY2VzcyBjcmVhdGVzIHRpZ2h0IGNvdXBsaW5nIGJldHdlZW4geW91ciBhcHBsaWNhdGlvbiBhbmQgcmVuZGVyaW5nXG4gICAgICogICAgbGF5ZXJzIHdoaWNoIHdpbGwgbWFrZSBpdCBpbXBvc3NpYmxlIHRvIHNlcGFyYXRlIHRoZSB0d28gYW5kIGRlcGxveSB5b3VyIGFwcGxpY2F0aW9uIGludG8gYVxuICAgICAqICAgIHdlYiB3b3JrZXIuXG4gICAgICogICA8L3A+XG4gICAgICogPC9kaXY+XG4gICAgICpcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBFbGVtZW50UmVmLnByb3RvdHlwZS5uYXRpdmVFbGVtZW50O1xufVxuLyoqIEB0eXBlIHs/fSAqL1xuZXhwb3J0IGNvbnN0IFNXSVRDSF9FTEVNRU5UX1JFRl9GQUNUT1JZX19QT1NUX1IzX18gPSByZW5kZXIzSW5qZWN0RWxlbWVudFJlZjtcbi8qKiBAdHlwZSB7P30gKi9cbmNvbnN0IFNXSVRDSF9FTEVNRU5UX1JFRl9GQUNUT1JZX19QUkVfUjNfXyA9IG5vb3A7XG4vKiogQHR5cGUgez99ICovXG5jb25zdCBTV0lUQ0hfRUxFTUVOVF9SRUZfRkFDVE9SWSA9IFNXSVRDSF9FTEVNRU5UX1JFRl9GQUNUT1JZX19QUkVfUjNfXztcbiJdfQ==","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectTemplateRef as render3InjectTemplateRef } from '../render3/view_engine_compatibility';\nimport { noop } from '../util/noop';\nimport { ElementRef } from './element_ref';\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * \\@publicApi\n * @abstract\n * @template C\n */\nexport class TemplateRef {\n}\n/**\n * \\@internal\n * @nocollapse\n */\nTemplateRef.__NG_ELEMENT_ID__ = () => SWITCH_TEMPLATE_REF_FACTORY(TemplateRef, ElementRef);\nif (false) {\n    /**\n     * \\@internal\n     * @nocollapse\n     * @type {?}\n     */\n    TemplateRef.__NG_ELEMENT_ID__;\n    /**\n     * The anchor element in the parent view for this embedded view.\n     *\n     * The data-binding and injection contexts of embedded views created from this `TemplateRef`\n     * inherit from the contexts of this location.\n     *\n     * Typically new embedded views are attached to the view container of this location, but in\n     * advanced use-cases, the view can be attached to a different container while keeping the\n     * data-binding and injection context from the original location.\n     *\n     * @abstract\n     * @return {?}\n     */\n    TemplateRef.prototype.elementRef = function () { };\n    /**\n     * Instantiates an embedded view based on this template,\n     * and attaches it to the view container.\n     * @abstract\n     * @param {?} context The data-binding context of the embedded view, as declared\n     * in the `<ng-template>` usage.\n     * @return {?} The new embedded view object.\n     */\n    TemplateRef.prototype.createEmbeddedView = function (context) { };\n}\n/** @type {?} */\nexport const SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = render3InjectTemplateRef;\n/** @type {?} */\nconst SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_TEMPLATE_REF_FACTORY = SWITCH_TEMPLATE_REF_FACTORY__POST_R3__;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9tbnQvZi9naXQvaXZ5LWNvZGUtc2l6ZS9ub2RlX21vZHVsZXMvQGFuZ3VsYXIvY29yZS9lc20yMDE1L3NyYy9saW5rZXIvdGVtcGxhdGVfcmVmLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQ0E2RW9DLHNDQUFxQyIsImZpbGUiOiIvbW50L2YvZ2l0L2l2eS1jb2RlLXNpemUvbm9kZV9tb2R1bGVzL0Bhbmd1bGFyL2NvcmUvZXNtMjAxNS9zcmMvbGlua2VyL3RlbXBsYXRlX3JlZi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsZXh0cmFSZXF1aXJlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IGluamVjdFRlbXBsYXRlUmVmIGFzIHJlbmRlcjNJbmplY3RUZW1wbGF0ZVJlZiB9IGZyb20gJy4uL3JlbmRlcjMvdmlld19lbmdpbmVfY29tcGF0aWJpbGl0eSc7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vdXRpbC9ub29wJztcbmltcG9ydCB7IEVsZW1lbnRSZWYgfSBmcm9tICcuL2VsZW1lbnRfcmVmJztcbi8qKlxuICogUmVwcmVzZW50cyBhbiBlbWJlZGRlZCB0ZW1wbGF0ZSB0aGF0IGNhbiBiZSB1c2VkIHRvIGluc3RhbnRpYXRlIGVtYmVkZGVkIHZpZXdzLlxuICogVG8gaW5zdGFudGlhdGUgZW1iZWRkZWQgdmlld3MgYmFzZWQgb24gYSB0ZW1wbGF0ZSwgdXNlIHRoZSBgVmlld0NvbnRhaW5lclJlZmBcbiAqIG1ldGhvZCBgY3JlYXRlRW1iZWRkZWRWaWV3KClgLlxuICpcbiAqIEFjY2VzcyBhIGBUZW1wbGF0ZVJlZmAgaW5zdGFuY2UgYnkgcGxhY2luZyBhIGRpcmVjdGl2ZSBvbiBhbiBgPG5nLXRlbXBsYXRlPmBcbiAqIGVsZW1lbnQgKG9yIGRpcmVjdGl2ZSBwcmVmaXhlZCB3aXRoIGAqYCkuIFRoZSBgVGVtcGxhdGVSZWZgIGZvciB0aGUgZW1iZWRkZWQgdmlld1xuICogaXMgaW5qZWN0ZWQgaW50byB0aGUgY29uc3RydWN0b3Igb2YgdGhlIGRpcmVjdGl2ZSxcbiAqIHVzaW5nIHRoZSBgVGVtcGxhdGVSZWZgIHRva2VuLlxuICpcbiAqIFlvdSBjYW4gYWxzbyB1c2UgYSBgUXVlcnlgIHRvIGZpbmQgYSBgVGVtcGxhdGVSZWZgIGFzc29jaWF0ZWQgd2l0aFxuICogYSBjb21wb25lbnQgb3IgYSBkaXJlY3RpdmUuXG4gKlxuICogQHNlZSBgVmlld0NvbnRhaW5lclJlZmBcbiAqIEBzZWUgW05hdmlnYXRlIHRoZSBDb21wb25lbnQgVHJlZSB3aXRoIERJXShndWlkZS9kZXBlbmRlbmN5LWluamVjdGlvbi1uYXZ0cmVlKVxuICpcbiAqIFxcQHB1YmxpY0FwaVxuICogQGFic3RyYWN0XG4gKiBAdGVtcGxhdGUgQ1xuICovXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVSZWYge1xufVxuLyoqXG4gKiBcXEBpbnRlcm5hbFxuICogQG5vY29sbGFwc2VcbiAqL1xuVGVtcGxhdGVSZWYuX19OR19FTEVNRU5UX0lEX18gPSAoKSA9PiBTV0lUQ0hfVEVNUExBVEVfUkVGX0ZBQ1RPUlkoVGVtcGxhdGVSZWYsIEVsZW1lbnRSZWYpO1xuaWYgKGZhbHNlKSB7XG4gICAgLyoqXG4gICAgICogXFxAaW50ZXJuYWxcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFRlbXBsYXRlUmVmLl9fTkdfRUxFTUVOVF9JRF9fO1xuICAgIC8qKlxuICAgICAqIFRoZSBhbmNob3IgZWxlbWVudCBpbiB0aGUgcGFyZW50IHZpZXcgZm9yIHRoaXMgZW1iZWRkZWQgdmlldy5cbiAgICAgKlxuICAgICAqIFRoZSBkYXRhLWJpbmRpbmcgYW5kIGluamVjdGlvbiBjb250ZXh0cyBvZiBlbWJlZGRlZCB2aWV3cyBjcmVhdGVkIGZyb20gdGhpcyBgVGVtcGxhdGVSZWZgXG4gICAgICogaW5oZXJpdCBmcm9tIHRoZSBjb250ZXh0cyBvZiB0aGlzIGxvY2F0aW9uLlxuICAgICAqXG4gICAgICogVHlwaWNhbGx5IG5ldyBlbWJlZGRlZCB2aWV3cyBhcmUgYXR0YWNoZWQgdG8gdGhlIHZpZXcgY29udGFpbmVyIG9mIHRoaXMgbG9jYXRpb24sIGJ1dCBpblxuICAgICAqIGFkdmFuY2VkIHVzZS1jYXNlcywgdGhlIHZpZXcgY2FuIGJlIGF0dGFjaGVkIHRvIGEgZGlmZmVyZW50IGNvbnRhaW5lciB3aGlsZSBrZWVwaW5nIHRoZVxuICAgICAqIGRhdGEtYmluZGluZyBhbmQgaW5qZWN0aW9uIGNvbnRleHQgZnJvbSB0aGUgb3JpZ2luYWwgbG9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRlbXBsYXRlUmVmLnByb3RvdHlwZS5lbGVtZW50UmVmID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIC8qKlxuICAgICAqIEluc3RhbnRpYXRlcyBhbiBlbWJlZGRlZCB2aWV3IGJhc2VkIG9uIHRoaXMgdGVtcGxhdGUsXG4gICAgICogYW5kIGF0dGFjaGVzIGl0IHRvIHRoZSB2aWV3IGNvbnRhaW5lci5cbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHQgVGhlIGRhdGEtYmluZGluZyBjb250ZXh0IG9mIHRoZSBlbWJlZGRlZCB2aWV3LCBhcyBkZWNsYXJlZFxuICAgICAqIGluIHRoZSBgPG5nLXRlbXBsYXRlPmAgdXNhZ2UuXG4gICAgICogQHJldHVybiB7P30gVGhlIG5ldyBlbWJlZGRlZCB2aWV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBUZW1wbGF0ZVJlZi5wcm90b3R5cGUuY3JlYXRlRW1iZWRkZWRWaWV3ID0gZnVuY3Rpb24gKGNvbnRleHQpIHsgfTtcbn1cbi8qKiBAdHlwZSB7P30gKi9cbmV4cG9ydCBjb25zdCBTV0lUQ0hfVEVNUExBVEVfUkVGX0ZBQ1RPUllfX1BPU1RfUjNfXyA9IHJlbmRlcjNJbmplY3RUZW1wbGF0ZVJlZjtcbi8qKiBAdHlwZSB7P30gKi9cbmNvbnN0IFNXSVRDSF9URU1QTEFURV9SRUZfRkFDVE9SWV9fUFJFX1IzX18gPSBub29wO1xuLyoqIEB0eXBlIHs/fSAqL1xuY29uc3QgU1dJVENIX1RFTVBMQVRFX1JFRl9GQUNUT1JZID0gU1dJVENIX1RFTVBMQVRFX1JFRl9GQUNUT1JZX19QUkVfUjNfXztcbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a basic change from a previous to a new value for a single\n * property on a directive instance. Passed as a value in a\n * {@link SimpleChanges} object to the `ngOnChanges` hook.\n *\n * @see `OnChanges`\n *\n * @publicApi\n */\nexport class SimpleChange {\n    constructor(previousValue, currentValue, firstChange) {\n        this.previousValue = previousValue;\n        this.currentValue = currentValue;\n        this.firstChange = firstChange;\n    }\n    /**\n     * Check whether the new value is the first value assigned.\n     */\n    isFirstChange() { return this.firstChange; }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlX2NoYW5nZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2ludGVyZmFjZS9zaW1wbGVfY2hhbmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVIOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxPQUFPLFlBQVk7SUFDdkIsWUFBbUIsYUFBa0IsRUFBUyxZQUFpQixFQUFTLFdBQW9CO1FBQXpFLGtCQUFhLEdBQWIsYUFBYSxDQUFLO1FBQVMsaUJBQVksR0FBWixZQUFZLENBQUs7UUFBUyxnQkFBVyxHQUFYLFdBQVcsQ0FBUztJQUFHLENBQUM7SUFDaEc7O09BRUc7SUFDSCxhQUFhLEtBQWMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztDQUN0RCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYmFzaWMgY2hhbmdlIGZyb20gYSBwcmV2aW91cyB0byBhIG5ldyB2YWx1ZSBmb3IgYSBzaW5nbGVcbiAqIHByb3BlcnR5IG9uIGEgZGlyZWN0aXZlIGluc3RhbmNlLiBQYXNzZWQgYXMgYSB2YWx1ZSBpbiBhXG4gKiB7QGxpbmsgU2ltcGxlQ2hhbmdlc30gb2JqZWN0IHRvIHRoZSBgbmdPbkNoYW5nZXNgIGhvb2suXG4gKlxuICogQHNlZSBgT25DaGFuZ2VzYFxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNsYXNzIFNpbXBsZUNoYW5nZSB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwcmV2aW91c1ZhbHVlOiBhbnksIHB1YmxpYyBjdXJyZW50VmFsdWU6IGFueSwgcHVibGljIGZpcnN0Q2hhbmdlOiBib29sZWFuKSB7fVxuICAvKipcbiAgICogQ2hlY2sgd2hldGhlciB0aGUgbmV3IHZhbHVlIGlzIHRoZSBmaXJzdCB2YWx1ZSBhc3NpZ25lZC5cbiAgICovXG4gIGlzRmlyc3RDaGFuZ2UoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLmZpcnN0Q2hhbmdlOyB9XG59XG5cbi8qKlxuICogQSBoYXNodGFibGUgb2YgY2hhbmdlcyByZXByZXNlbnRlZCBieSB7QGxpbmsgU2ltcGxlQ2hhbmdlfSBvYmplY3RzIHN0b3JlZFxuICogYXQgdGhlIGRlY2xhcmVkIHByb3BlcnR5IG5hbWUgdGhleSBiZWxvbmcgdG8gb24gYSBEaXJlY3RpdmUgb3IgQ29tcG9uZW50LiBUaGlzIGlzXG4gKiB0aGUgdHlwZSBwYXNzZWQgdG8gdGhlIGBuZ09uQ2hhbmdlc2AgaG9vay5cbiAqXG4gKiBAc2VlIGBPbkNoYW5nZXNgXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNpbXBsZUNoYW5nZXMgeyBbcHJvcE5hbWU6IHN0cmluZ106IFNpbXBsZUNoYW5nZTsgfVxuIl19","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SimpleChange } from '../../interface/simple_change';\nimport { EMPTY_OBJ } from '../empty';\n/** @type {?} */\nconst PRIVATE_PREFIX = '__ngOnChanges_';\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {\\@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ngComponentDef = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature()]\n * });\n * ```\n * @template T\n * @return {?}\n */\nexport function NgOnChangesFeature() {\n    // This option ensures that the ngOnChanges lifecycle hook will be inherited\n    // from superclasses (in InheritDefinitionFeature).\n    ((/** @type {?} */ (NgOnChangesFeatureImpl))).ngInherit = true;\n    return NgOnChangesFeatureImpl;\n}\n/**\n * @template T\n * @param {?} definition\n * @return {?}\n */\nfunction NgOnChangesFeatureImpl(definition) {\n    if (definition.type.prototype.ngOnChanges) {\n        definition.setInput = ngOnChangesSetInput;\n        definition.onChanges = wrapOnChanges();\n    }\n}\n/**\n * @return {?}\n */\nfunction wrapOnChanges() {\n    return function () {\n        /** @type {?} */\n        const simpleChangesStore = getSimpleChangesStore(this);\n        /** @type {?} */\n        const current = simpleChangesStore && simpleChangesStore.current;\n        if (current) {\n            /** @type {?} */\n            const previous = (/** @type {?} */ (simpleChangesStore)).previous;\n            if (previous === EMPTY_OBJ) {\n                (/** @type {?} */ (simpleChangesStore)).previous = current;\n            }\n            else {\n                // New changes are copied to the previous store, so that we don't lose history for inputs\n                // which were not changed this time\n                for (let key in current) {\n                    previous[key] = current[key];\n                }\n            }\n            (/** @type {?} */ (simpleChangesStore)).current = null;\n            this.ngOnChanges(current);\n        }\n    };\n}\n/**\n * @template T\n * @this {?}\n * @param {?} instance\n * @param {?} value\n * @param {?} publicName\n * @param {?} privateName\n * @return {?}\n */\nfunction ngOnChangesSetInput(instance, value, publicName, privateName) {\n    /** @type {?} */\n    const simpleChangesStore = getSimpleChangesStore(instance) ||\n        setSimpleChangesStore(instance, { previous: EMPTY_OBJ, current: null });\n    /** @type {?} */\n    const current = simpleChangesStore.current || (simpleChangesStore.current = {});\n    /** @type {?} */\n    const previous = simpleChangesStore.previous;\n    /** @type {?} */\n    const declaredName = ((/** @type {?} */ (this.declaredInputs)))[publicName];\n    /** @type {?} */\n    const previousChange = previous[declaredName];\n    current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);\n    ((/** @type {?} */ (instance)))[privateName] = value;\n}\n/** @type {?} */\nconst SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\n/**\n * @param {?} instance\n * @return {?}\n */\nfunction getSimpleChangesStore(instance) {\n    return instance[SIMPLE_CHANGES_STORE] || null;\n}\n/**\n * @param {?} instance\n * @param {?} store\n * @return {?}\n */\nfunction setSimpleChangesStore(instance, store) {\n    return instance[SIMPLE_CHANGES_STORE] = store;\n}\n/**\n * @record\n */\nfunction NgSimpleChangesStore() { }\nif (false) {\n    /** @type {?} */\n    NgSimpleChangesStore.prototype.previous;\n    /** @type {?} */\n    NgSimpleChangesStore.prototype.current;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdfb25jaGFuZ2VzX2ZlYXR1cmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL2ZlYXR1cmVzL25nX29uY2hhbmdlc19mZWF0dXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBU0EsT0FBTyxFQUFDLFlBQVksRUFBZ0IsTUFBTSwrQkFBK0IsQ0FBQztBQUMxRSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sVUFBVSxDQUFDOztNQUc3QixjQUFjLEdBQUcsZ0JBQWdCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTRCdkMsTUFBTSxVQUFVLGtCQUFrQjtJQUNoQyw0RUFBNEU7SUFDNUUsbURBQW1EO0lBQ25ELENBQUMsbUJBQUEsc0JBQXNCLEVBQXVCLENBQUMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0lBQ2pFLE9BQU8sc0JBQXNCLENBQUM7QUFDaEMsQ0FBQzs7Ozs7O0FBRUQsU0FBUyxzQkFBc0IsQ0FBSSxVQUEyQjtJQUM1RCxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRTtRQUN6QyxVQUFVLENBQUMsUUFBUSxHQUFHLG1CQUFtQixDQUFDO1FBQzFDLFVBQVUsQ0FBQyxTQUFTLEdBQUcsYUFBYSxFQUFFLENBQUM7S0FDeEM7QUFDSCxDQUFDOzs7O0FBRUQsU0FBUyxhQUFhO0lBQ3BCLE9BQU87O2NBQ0Msa0JBQWtCLEdBQUcscUJBQXFCLENBQUMsSUFBSSxDQUFDOztjQUNoRCxPQUFPLEdBQUcsa0JBQWtCLElBQUksa0JBQWtCLENBQUMsT0FBTztRQUVoRSxJQUFJLE9BQU8sRUFBRTs7a0JBQ0wsUUFBUSxHQUFHLG1CQUFBLGtCQUFrQixFQUFFLENBQUMsUUFBUTtZQUM5QyxJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7Z0JBQzFCLG1CQUFBLGtCQUFrQixFQUFFLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQzthQUN6QztpQkFBTTtnQkFDTCx5RkFBeUY7Z0JBQ3pGLG1DQUFtQztnQkFDbkMsS0FBSyxJQUFJLEdBQUcsSUFBSSxPQUFPLEVBQUU7b0JBQ3ZCLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQzlCO2FBQ0Y7WUFDRCxtQkFBQSxrQkFBa0IsRUFBRSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7WUFDcEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMzQjtJQUNILENBQUMsQ0FBQztBQUNKLENBQUM7Ozs7Ozs7Ozs7QUFFRCxTQUFTLG1CQUFtQixDQUNELFFBQVcsRUFBRSxLQUFVLEVBQUUsVUFBa0IsRUFBRSxXQUFtQjs7VUFDbkYsa0JBQWtCLEdBQUcscUJBQXFCLENBQUMsUUFBUSxDQUFDO1FBQ3RELHFCQUFxQixDQUFDLFFBQVEsRUFBRSxFQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBQyxDQUFDOztVQUNuRSxPQUFPLEdBQUcsa0JBQWtCLENBQUMsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQzs7VUFDekUsUUFBUSxHQUFHLGtCQUFrQixDQUFDLFFBQVE7O1VBRXRDLFlBQVksR0FBRyxDQUFDLG1CQUFBLElBQUksQ0FBQyxjQUFjLEVBQTBCLENBQUMsQ0FBQyxVQUFVLENBQUM7O1VBQzFFLGNBQWMsR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDO0lBQzdDLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxJQUFJLFlBQVksQ0FDcEMsY0FBYyxJQUFJLGNBQWMsQ0FBQyxZQUFZLEVBQUUsS0FBSyxFQUFFLFFBQVEsS0FBSyxTQUFTLENBQUMsQ0FBQztJQUVsRixDQUFDLG1CQUFBLFFBQVEsRUFBTyxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQ3pDLENBQUM7O01BRUssb0JBQW9CLEdBQUcscUJBQXFCOzs7OztBQUVsRCxTQUFTLHFCQUFxQixDQUFDLFFBQWE7SUFDMUMsT0FBTyxRQUFRLENBQUMsb0JBQW9CLENBQUMsSUFBSSxJQUFJLENBQUM7QUFDaEQsQ0FBQzs7Ozs7O0FBRUQsU0FBUyxxQkFBcUIsQ0FBQyxRQUFhLEVBQUUsS0FBMkI7SUFDdkUsT0FBTyxRQUFRLENBQUMsb0JBQW9CLENBQUMsR0FBRyxLQUFLLENBQUM7QUFDaEQsQ0FBQzs7OztBQUVELG1DQUdDOzs7SUFGQyx3Q0FBd0I7O0lBQ3hCLHVDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtPbkNoYW5nZXN9IGZyb20gJy4uLy4uL2ludGVyZmFjZS9saWZlY3ljbGVfaG9va3MnO1xuaW1wb3J0IHtTaW1wbGVDaGFuZ2UsIFNpbXBsZUNoYW5nZXN9IGZyb20gJy4uLy4uL2ludGVyZmFjZS9zaW1wbGVfY2hhbmdlJztcbmltcG9ydCB7RU1QVFlfT0JKfSBmcm9tICcuLi9lbXB0eSc7XG5pbXBvcnQge0RpcmVjdGl2ZURlZiwgRGlyZWN0aXZlRGVmRmVhdHVyZX0gZnJvbSAnLi4vaW50ZXJmYWNlcy9kZWZpbml0aW9uJztcblxuY29uc3QgUFJJVkFURV9QUkVGSVggPSAnX19uZ09uQ2hhbmdlc18nO1xuXG50eXBlIE9uQ2hhbmdlc0V4cGFuZG8gPSBPbkNoYW5nZXMgJiB7XG4gIF9fbmdPbkNoYW5nZXNfOiBTaW1wbGVDaGFuZ2VzfG51bGx8dW5kZWZpbmVkO1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IENhbiBob2xkIGFueSB2YWx1ZVxuICBba2V5OiBzdHJpbmddOiBhbnk7XG59O1xuXG4vKipcbiAqIFRoZSBOZ09uQ2hhbmdlc0ZlYXR1cmUgZGVjb3JhdGVzIGEgY29tcG9uZW50IHdpdGggc3VwcG9ydCBmb3IgdGhlIG5nT25DaGFuZ2VzXG4gKiBsaWZlY3ljbGUgaG9vaywgc28gaXQgc2hvdWxkIGJlIGluY2x1ZGVkIGluIGFueSBjb21wb25lbnQgdGhhdCBpbXBsZW1lbnRzXG4gKiB0aGF0IGhvb2suXG4gKlxuICogSWYgdGhlIGNvbXBvbmVudCBvciBkaXJlY3RpdmUgdXNlcyBpbmhlcml0YW5jZSwgdGhlIE5nT25DaGFuZ2VzRmVhdHVyZSBNVVNUXG4gKiBiZSBpbmNsdWRlZCBhcyBhIGZlYXR1cmUgQUZURVIge0BsaW5rIEluaGVyaXREZWZpbml0aW9uRmVhdHVyZX0sIG90aGVyd2lzZVxuICogaW5oZXJpdGVkIHByb3BlcnRpZXMgd2lsbCBub3QgYmUgcHJvcGFnYXRlZCB0byB0aGUgbmdPbkNoYW5nZXMgbGlmZWN5Y2xlXG4gKiBob29rLlxuICpcbiAqIEV4YW1wbGUgdXNhZ2U6XG4gKlxuICogYGBgXG4gKiBzdGF0aWMgbmdDb21wb25lbnREZWYgPSBkZWZpbmVDb21wb25lbnQoe1xuICogICAuLi5cbiAqICAgaW5wdXRzOiB7bmFtZTogJ3B1YmxpY05hbWUnfSxcbiAqICAgZmVhdHVyZXM6IFtOZ09uQ2hhbmdlc0ZlYXR1cmUoKV1cbiAqIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBOZ09uQ2hhbmdlc0ZlYXR1cmU8VD4oKTogRGlyZWN0aXZlRGVmRmVhdHVyZSB7XG4gIC8vIFRoaXMgb3B0aW9uIGVuc3VyZXMgdGhhdCB0aGUgbmdPbkNoYW5nZXMgbGlmZWN5Y2xlIGhvb2sgd2lsbCBiZSBpbmhlcml0ZWRcbiAgLy8gZnJvbSBzdXBlcmNsYXNzZXMgKGluIEluaGVyaXREZWZpbml0aW9uRmVhdHVyZSkuXG4gIChOZ09uQ2hhbmdlc0ZlYXR1cmVJbXBsIGFzIERpcmVjdGl2ZURlZkZlYXR1cmUpLm5nSW5oZXJpdCA9IHRydWU7XG4gIHJldHVybiBOZ09uQ2hhbmdlc0ZlYXR1cmVJbXBsO1xufVxuXG5mdW5jdGlvbiBOZ09uQ2hhbmdlc0ZlYXR1cmVJbXBsPFQ+KGRlZmluaXRpb246IERpcmVjdGl2ZURlZjxUPik6IHZvaWQge1xuICBpZiAoZGVmaW5pdGlvbi50eXBlLnByb3RvdHlwZS5uZ09uQ2hhbmdlcykge1xuICAgIGRlZmluaXRpb24uc2V0SW5wdXQgPSBuZ09uQ2hhbmdlc1NldElucHV0O1xuICAgIGRlZmluaXRpb24ub25DaGFuZ2VzID0gd3JhcE9uQ2hhbmdlcygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdyYXBPbkNoYW5nZXMoKSB7XG4gIHJldHVybiBmdW5jdGlvbih0aGlzOiBPbkNoYW5nZXMpIHtcbiAgICBjb25zdCBzaW1wbGVDaGFuZ2VzU3RvcmUgPSBnZXRTaW1wbGVDaGFuZ2VzU3RvcmUodGhpcyk7XG4gICAgY29uc3QgY3VycmVudCA9IHNpbXBsZUNoYW5nZXNTdG9yZSAmJiBzaW1wbGVDaGFuZ2VzU3RvcmUuY3VycmVudDtcblxuICAgIGlmIChjdXJyZW50KSB7XG4gICAgICBjb25zdCBwcmV2aW91cyA9IHNpbXBsZUNoYW5nZXNTdG9yZSAhLnByZXZpb3VzO1xuICAgICAgaWYgKHByZXZpb3VzID09PSBFTVBUWV9PQkopIHtcbiAgICAgICAgc2ltcGxlQ2hhbmdlc1N0b3JlICEucHJldmlvdXMgPSBjdXJyZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTmV3IGNoYW5nZXMgYXJlIGNvcGllZCB0byB0aGUgcHJldmlvdXMgc3RvcmUsIHNvIHRoYXQgd2UgZG9uJ3QgbG9zZSBoaXN0b3J5IGZvciBpbnB1dHNcbiAgICAgICAgLy8gd2hpY2ggd2VyZSBub3QgY2hhbmdlZCB0aGlzIHRpbWVcbiAgICAgICAgZm9yIChsZXQga2V5IGluIGN1cnJlbnQpIHtcbiAgICAgICAgICBwcmV2aW91c1trZXldID0gY3VycmVudFtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzaW1wbGVDaGFuZ2VzU3RvcmUgIS5jdXJyZW50ID0gbnVsbDtcbiAgICAgIHRoaXMubmdPbkNoYW5nZXMoY3VycmVudCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBuZ09uQ2hhbmdlc1NldElucHV0PFQ+KFxuICAgIHRoaXM6IERpcmVjdGl2ZURlZjxUPiwgaW5zdGFuY2U6IFQsIHZhbHVlOiBhbnksIHB1YmxpY05hbWU6IHN0cmluZywgcHJpdmF0ZU5hbWU6IHN0cmluZyk6IHZvaWQge1xuICBjb25zdCBzaW1wbGVDaGFuZ2VzU3RvcmUgPSBnZXRTaW1wbGVDaGFuZ2VzU3RvcmUoaW5zdGFuY2UpIHx8XG4gICAgICBzZXRTaW1wbGVDaGFuZ2VzU3RvcmUoaW5zdGFuY2UsIHtwcmV2aW91czogRU1QVFlfT0JKLCBjdXJyZW50OiBudWxsfSk7XG4gIGNvbnN0IGN1cnJlbnQgPSBzaW1wbGVDaGFuZ2VzU3RvcmUuY3VycmVudCB8fCAoc2ltcGxlQ2hhbmdlc1N0b3JlLmN1cnJlbnQgPSB7fSk7XG4gIGNvbnN0IHByZXZpb3VzID0gc2ltcGxlQ2hhbmdlc1N0b3JlLnByZXZpb3VzO1xuXG4gIGNvbnN0IGRlY2xhcmVkTmFtZSA9ICh0aGlzLmRlY2xhcmVkSW5wdXRzIGFze1trZXk6IHN0cmluZ106IHN0cmluZ30pW3B1YmxpY05hbWVdO1xuICBjb25zdCBwcmV2aW91c0NoYW5nZSA9IHByZXZpb3VzW2RlY2xhcmVkTmFtZV07XG4gIGN1cnJlbnRbZGVjbGFyZWROYW1lXSA9IG5ldyBTaW1wbGVDaGFuZ2UoXG4gICAgICBwcmV2aW91c0NoYW5nZSAmJiBwcmV2aW91c0NoYW5nZS5jdXJyZW50VmFsdWUsIHZhbHVlLCBwcmV2aW91cyA9PT0gRU1QVFlfT0JKKTtcblxuICAoaW5zdGFuY2UgYXMgYW55KVtwcml2YXRlTmFtZV0gPSB2YWx1ZTtcbn1cblxuY29uc3QgU0lNUExFX0NIQU5HRVNfU1RPUkUgPSAnX19uZ1NpbXBsZUNoYW5nZXNfXyc7XG5cbmZ1bmN0aW9uIGdldFNpbXBsZUNoYW5nZXNTdG9yZShpbnN0YW5jZTogYW55KTogbnVsbHxOZ1NpbXBsZUNoYW5nZXNTdG9yZSB7XG4gIHJldHVybiBpbnN0YW5jZVtTSU1QTEVfQ0hBTkdFU19TVE9SRV0gfHwgbnVsbDtcbn1cblxuZnVuY3Rpb24gc2V0U2ltcGxlQ2hhbmdlc1N0b3JlKGluc3RhbmNlOiBhbnksIHN0b3JlOiBOZ1NpbXBsZUNoYW5nZXNTdG9yZSk6IE5nU2ltcGxlQ2hhbmdlc1N0b3JlIHtcbiAgcmV0dXJuIGluc3RhbmNlW1NJTVBMRV9DSEFOR0VTX1NUT1JFXSA9IHN0b3JlO1xufVxuXG5pbnRlcmZhY2UgTmdTaW1wbGVDaGFuZ2VzU3RvcmUge1xuICBwcmV2aW91czogU2ltcGxlQ2hhbmdlcztcbiAgY3VycmVudDogU2ltcGxlQ2hhbmdlc3xudWxsO1xufVxuIl19","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable } from './interface/defs';\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * \\@usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * \\@publicApi\n * @template T\n */\nexport class InjectionToken {\n    /**\n     * @param {?} _desc\n     * @param {?=} options\n     */\n    constructor(_desc, options) {\n        this._desc = _desc;\n        /**\n         * \\@internal\n         */\n        this.ngMetadataName = 'InjectionToken';\n        /** @nocollapse */ this.ngInjectableDef = undefined;\n        if (typeof options == 'number') {\n            // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n            // __NG_ELEMENT_ID__ is Used by Ivy to determine bloom filter id.\n            // We are using it to assign `-1` which is used to identify `Injector`.\n            ((/** @type {?} */ (this))).__NG_ELEMENT_ID__ = options;\n        }\n        else if (options !== undefined) {\n            /** @nocollapse */ this.ngInjectableDef = defineInjectable({\n                providedIn: options.providedIn || 'root',\n                factory: options.factory,\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    toString() { return `InjectionToken ${this._desc}`; }\n}\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    InjectionToken.prototype.ngMetadataName;\n    /** @type {?} */\n    InjectionToken.prototype.ngInjectableDef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    InjectionToken.prototype._desc;\n}\n/**\n * @record\n * @template T\n */\nexport function InjectableDefToken() { }\nif (false) {\n    /** @type {?} */\n    InjectableDefToken.prototype.ngInjectableDef;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0aW9uX3Rva2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZGkvaW5qZWN0aW9uX3Rva2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBVUEsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sa0JBQWtCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBDbEQsTUFBTSxPQUFPLGNBQWM7Ozs7O0lBTXpCLFlBQXNCLEtBQWEsRUFBRSxPQUdwQztRQUhxQixVQUFLLEdBQUwsS0FBSyxDQUFROzs7O1FBSjFCLG1CQUFjLEdBQUcsZ0JBQWdCLENBQUM7UUFRekMsSUFBSSxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUM7UUFDakMsSUFBSSxPQUFPLE9BQU8sSUFBSSxRQUFRLEVBQUU7WUFDOUIsdUVBQXVFO1lBQ3ZFLGlFQUFpRTtZQUNqRSx1RUFBdUU7WUFDdkUsQ0FBQyxtQkFBQSxJQUFJLEVBQU8sQ0FBQyxDQUFDLGlCQUFpQixHQUFHLE9BQU8sQ0FBQztTQUMzQzthQUFNLElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtZQUNoQyxJQUFJLENBQUMsZUFBZSxHQUFHLGdCQUFnQixDQUFDO2dCQUN0QyxVQUFVLEVBQUUsT0FBTyxDQUFDLFVBQVUsSUFBSSxNQUFNO2dCQUN4QyxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87YUFDekIsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOzs7O0lBRUQsUUFBUSxLQUFhLE9BQU8sa0JBQWtCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDOUQ7Ozs7OztJQXZCQyx3Q0FBMkM7O0lBRTNDLHlDQUEwQzs7Ozs7SUFFOUIsK0JBQXVCOzs7Ozs7QUFxQnJDLHdDQUE0Rjs7O0lBQXpCLDZDQUF1QiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtUeXBlfSBmcm9tICcuLi9pbnRlcmZhY2UvdHlwZSc7XG5cbmltcG9ydCB7ZGVmaW5lSW5qZWN0YWJsZX0gZnJvbSAnLi9pbnRlcmZhY2UvZGVmcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRva2VuIHRoYXQgY2FuIGJlIHVzZWQgaW4gYSBESSBQcm92aWRlci5cbiAqXG4gKiBVc2UgYW4gYEluamVjdGlvblRva2VuYCB3aGVuZXZlciB0aGUgdHlwZSB5b3UgYXJlIGluamVjdGluZyBpcyBub3QgcmVpZmllZCAoZG9lcyBub3QgaGF2ZSBhXG4gKiBydW50aW1lIHJlcHJlc2VudGF0aW9uKSBzdWNoIGFzIHdoZW4gaW5qZWN0aW5nIGFuIGludGVyZmFjZSwgY2FsbGFibGUgdHlwZSwgYXJyYXkgb3JcbiAqIHBhcmFtZXRlcml6ZWQgdHlwZS5cbiAqXG4gKiBgSW5qZWN0aW9uVG9rZW5gIGlzIHBhcmFtZXRlcml6ZWQgb24gYFRgIHdoaWNoIGlzIHRoZSB0eXBlIG9mIG9iamVjdCB3aGljaCB3aWxsIGJlIHJldHVybmVkIGJ5XG4gKiB0aGUgYEluamVjdG9yYC4gVGhpcyBwcm92aWRlcyBhZGRpdGlvbmFsIGxldmVsIG9mIHR5cGUgc2FmZXR5LlxuICpcbiAqIGBgYFxuICogaW50ZXJmYWNlIE15SW50ZXJmYWNlIHsuLi59XG4gKiB2YXIgbXlJbnRlcmZhY2UgPSBpbmplY3Rvci5nZXQobmV3IEluamVjdGlvblRva2VuPE15SW50ZXJmYWNlPignU29tZVRva2VuJykpO1xuICogLy8gbXlJbnRlcmZhY2UgaXMgaW5mZXJyZWQgdG8gYmUgTXlJbnRlcmZhY2UuXG4gKiBgYGBcbiAqXG4gKiBXaGVuIGNyZWF0aW5nIGFuIGBJbmplY3Rpb25Ub2tlbmAsIHlvdSBjYW4gb3B0aW9uYWxseSBzcGVjaWZ5IGEgZmFjdG9yeSBmdW5jdGlvbiB3aGljaCByZXR1cm5zXG4gKiAocG9zc2libHkgYnkgY3JlYXRpbmcpIGEgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgcGFyYW1ldGVyaXplZCB0eXBlIGBUYC4gVGhpcyBzZXRzIHVwIHRoZVxuICogYEluamVjdGlvblRva2VuYCB1c2luZyB0aGlzIGZhY3RvcnkgYXMgYSBwcm92aWRlciBhcyBpZiBpdCB3YXMgZGVmaW5lZCBleHBsaWNpdGx5IGluIHRoZVxuICogYXBwbGljYXRpb24ncyByb290IGluamVjdG9yLiBJZiB0aGUgZmFjdG9yeSBmdW5jdGlvbiwgd2hpY2ggdGFrZXMgemVybyBhcmd1bWVudHMsIG5lZWRzIHRvIGluamVjdFxuICogZGVwZW5kZW5jaWVzLCBpdCBjYW4gZG8gc28gdXNpbmcgdGhlIGBpbmplY3RgIGZ1bmN0aW9uLiBTZWUgYmVsb3cgZm9yIGFuIGV4YW1wbGUuXG4gKlxuICogQWRkaXRpb25hbGx5LCBpZiBhIGBmYWN0b3J5YCBpcyBzcGVjaWZpZWQgeW91IGNhbiBhbHNvIHNwZWNpZnkgdGhlIGBwcm92aWRlZEluYCBvcHRpb24sIHdoaWNoXG4gKiBvdmVycmlkZXMgdGhlIGFib3ZlIGJlaGF2aW9yIGFuZCBtYXJrcyB0aGUgdG9rZW4gYXMgYmVsb25naW5nIHRvIGEgcGFydGljdWxhciBgQE5nTW9kdWxlYC4gQXNcbiAqIG1lbnRpb25lZCBhYm92ZSwgYCdyb290J2AgaXMgdGhlIGRlZmF1bHQgdmFsdWUgZm9yIGBwcm92aWRlZEluYC5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICogIyMjIEJhc2ljIEV4YW1wbGVcbiAqXG4gKiAjIyMgUGxhaW4gSW5qZWN0aW9uVG9rZW5cbiAqXG4gKiB7QGV4YW1wbGUgY29yZS9kaS90cy9pbmplY3Rvcl9zcGVjLnRzIHJlZ2lvbj0nSW5qZWN0aW9uVG9rZW4nfVxuICpcbiAqICMjIyBUcmVlLXNoYWthYmxlIEluamVjdGlvblRva2VuXG4gKlxuICoge0BleGFtcGxlIGNvcmUvZGkvdHMvaW5qZWN0b3Jfc3BlYy50cyByZWdpb249J1NoYWthYmxlSW5qZWN0aW9uVG9rZW4nfVxuICpcbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjbGFzcyBJbmplY3Rpb25Ub2tlbjxUPiB7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcmVhZG9ubHkgbmdNZXRhZGF0YU5hbWUgPSAnSW5qZWN0aW9uVG9rZW4nO1xuXG4gIHJlYWRvbmx5IG5nSW5qZWN0YWJsZURlZjogbmV2ZXJ8dW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBfZGVzYzogc3RyaW5nLCBvcHRpb25zPzoge1xuICAgIHByb3ZpZGVkSW4/OiBUeXBlPGFueT58ICdyb290JyB8IG51bGwsXG4gICAgZmFjdG9yeTogKCkgPT4gVFxuICB9KSB7XG4gICAgdGhpcy5uZ0luamVjdGFibGVEZWYgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09ICdudW1iZXInKSB7XG4gICAgICAvLyBUaGlzIGlzIGEgc3BlY2lhbCBoYWNrIHRvIGFzc2lnbiBfX05HX0VMRU1FTlRfSURfXyB0byB0aGlzIGluc3RhbmNlLlxuICAgICAgLy8gX19OR19FTEVNRU5UX0lEX18gaXMgVXNlZCBieSBJdnkgdG8gZGV0ZXJtaW5lIGJsb29tIGZpbHRlciBpZC5cbiAgICAgIC8vIFdlIGFyZSB1c2luZyBpdCB0byBhc3NpZ24gYC0xYCB3aGljaCBpcyB1c2VkIHRvIGlkZW50aWZ5IGBJbmplY3RvcmAuXG4gICAgICAodGhpcyBhcyBhbnkpLl9fTkdfRUxFTUVOVF9JRF9fID0gb3B0aW9ucztcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5uZ0luamVjdGFibGVEZWYgPSBkZWZpbmVJbmplY3RhYmxlKHtcbiAgICAgICAgcHJvdmlkZWRJbjogb3B0aW9ucy5wcm92aWRlZEluIHx8ICdyb290JyxcbiAgICAgICAgZmFjdG9yeTogb3B0aW9ucy5mYWN0b3J5LFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgdG9TdHJpbmcoKTogc3RyaW5nIHsgcmV0dXJuIGBJbmplY3Rpb25Ub2tlbiAke3RoaXMuX2Rlc2N9YDsgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEluamVjdGFibGVEZWZUb2tlbjxUPiBleHRlbmRzIEluamVjdGlvblRva2VuPFQ+IHsgbmdJbmplY3RhYmxlRGVmOiBuZXZlcjsgfVxuIl19","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getClosureSafeProperty } from '../util/property';\nimport { stringify } from '../util/stringify';\nimport { resolveForwardRef } from './forward_ref';\nimport { InjectionToken } from './injection_token';\nimport { inject } from './injector_compatibility';\nimport { defineInjectable } from './interface/defs';\nimport { InjectFlags } from './interface/injector';\nimport { Inject, Optional, Self, SkipSelf } from './metadata';\n/** @type {?} */\nexport const SOURCE = '__source';\n/** @type {?} */\nconst _THROW_IF_NOT_FOUND = new Object();\n/** @type {?} */\nexport const THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * \\@publicApi\n * @type {?}\n */\nexport const INJECTOR = new InjectionToken('INJECTOR', (/** @type {?} */ (-1)));\nexport class NullInjector {\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue = _THROW_IF_NOT_FOUND) {\n        if (notFoundValue === _THROW_IF_NOT_FOUND) {\n            // Intentionally left behind: With dev tools open the debugger will stop here. There is no\n            // reason why correctly written application should cause this exception.\n            // TODO(misko): uncomment the next line once `ngDevMode` works with closure.\n            // if(ngDevMode) debugger;\n            /** @type {?} */\n            const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n            error.name = 'NullInjectorError';\n            throw error;\n        }\n        return notFoundValue;\n    }\n}\n/**\n * Concrete injectors implement this interface.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * \\@publicApi\n * @abstract\n */\nexport class Injector {\n    /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     * @param {?} options\n     * @param {?=} parent\n     * @return {?}\n     */\n    static create(options, parent) {\n        if (Array.isArray(options)) {\n            return new StaticInjector(options, parent);\n        }\n        else {\n            return new StaticInjector(options.providers, options.parent, options.name || null);\n        }\n    }\n}\nInjector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\nInjector.NULL = new NullInjector();\n/** @nocollapse */\n/** @nocollapse */ Injector.ngInjectableDef = defineInjectable({\n    providedIn: (/** @type {?} */ ('any')),\n    factory: () => inject(INJECTOR),\n});\n/**\n * \\@internal\n * @nocollapse\n */\nInjector.__NG_ELEMENT_ID__ = -1;\nif (false) {\n    /** @type {?} */\n    Injector.THROW_IF_NOT_FOUND;\n    /** @type {?} */\n    Injector.NULL;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    Injector.ngInjectableDef;\n    /**\n     * \\@internal\n     * @nocollapse\n     * @type {?}\n     */\n    Injector.__NG_ELEMENT_ID__;\n    /**\n     * Retrieves an instance from the injector based on the provided token.\n     * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n     * @abstract\n     * @template T\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?} The instance from the injector if defined, otherwise the `notFoundValue`.\n     */\n    Injector.prototype.get = function (token, notFoundValue, flags) { };\n    /**\n     * @deprecated from v4.0.0 use Type<T> or InjectionToken<T>\n     * @suppress {duplicate}\n     * @abstract\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    Injector.prototype.get = function (token, notFoundValue) { };\n}\n/** @type {?} */\nconst IDENT = function (value) {\n    return value;\n};\nconst ɵ0 = IDENT;\n/** @type {?} */\nconst EMPTY = (/** @type {?} */ ([]));\n/** @type {?} */\nconst CIRCULAR = IDENT;\n/** @type {?} */\nconst MULTI_PROVIDER_FN = function () {\n    return Array.prototype.slice.call(arguments);\n};\nconst ɵ1 = MULTI_PROVIDER_FN;\n/** @type {?} */\nexport const USE_VALUE = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\n/** @type {?} */\nconst NG_TOKEN_PATH = 'ngTokenPath';\n/** @type {?} */\nexport const NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\n/** @enum {number} */\nconst OptionFlags = {\n    Optional: 1,\n    CheckSelf: 2,\n    CheckParent: 4,\n    Default: 6,\n};\n/** @type {?} */\nconst NULL_INJECTOR = Injector.NULL;\n/** @type {?} */\nconst NEW_LINE = /\\n/gm;\n/** @type {?} */\nconst NO_NEW_LINE = 'ɵ';\nexport class StaticInjector {\n    /**\n     * @param {?} providers\n     * @param {?=} parent\n     * @param {?=} source\n     */\n    constructor(providers, parent = NULL_INJECTOR, source = null) {\n        this.parent = parent;\n        this.source = source;\n        /** @type {?} */\n        const records = this._records = new Map();\n        records.set(Injector, (/** @type {?} */ ({ token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false })));\n        records.set(INJECTOR, (/** @type {?} */ ({ token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false })));\n        recursivelyProcessProviders(records, providers);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    get(token, notFoundValue, flags = InjectFlags.Default) {\n        /** @type {?} */\n        const record = this._records.get(token);\n        try {\n            return tryResolveToken(token, record, this._records, this.parent, notFoundValue, flags);\n        }\n        catch (e) {\n            return catchInjectorError(e, token, 'StaticInjectorError', this.source);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const tokens = (/** @type {?} */ ([]));\n        /** @type {?} */\n        const records = this._records;\n        records.forEach((v, token) => tokens.push(stringify(token)));\n        return `StaticInjector[${tokens.join(', ')}]`;\n    }\n}\nif (false) {\n    /** @type {?} */\n    StaticInjector.prototype.parent;\n    /** @type {?} */\n    StaticInjector.prototype.source;\n    /**\n     * @type {?}\n     * @private\n     */\n    StaticInjector.prototype._records;\n}\n/**\n * @record\n */\nfunction Record() { }\nif (false) {\n    /** @type {?} */\n    Record.prototype.fn;\n    /** @type {?} */\n    Record.prototype.useNew;\n    /** @type {?} */\n    Record.prototype.deps;\n    /** @type {?} */\n    Record.prototype.value;\n}\n/**\n * @record\n */\nfunction DependencyRecord() { }\nif (false) {\n    /** @type {?} */\n    DependencyRecord.prototype.token;\n    /** @type {?} */\n    DependencyRecord.prototype.options;\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction resolveProvider(provider) {\n    /** @type {?} */\n    const deps = computeDeps(provider);\n    /** @type {?} */\n    let fn = IDENT;\n    /** @type {?} */\n    let value = EMPTY;\n    /** @type {?} */\n    let useNew = false;\n    /** @type {?} */\n    let provide = resolveForwardRef(provider.provide);\n    if (USE_VALUE in provider) {\n        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n        value = ((/** @type {?} */ (provider))).useValue;\n    }\n    else if (((/** @type {?} */ (provider))).useFactory) {\n        fn = ((/** @type {?} */ (provider))).useFactory;\n    }\n    else if (((/** @type {?} */ (provider))).useExisting) {\n        // Just use IDENT\n    }\n    else if (((/** @type {?} */ (provider))).useClass) {\n        useNew = true;\n        fn = resolveForwardRef(((/** @type {?} */ (provider))).useClass);\n    }\n    else if (typeof provide == 'function') {\n        useNew = true;\n        fn = provide;\n    }\n    else {\n        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);\n    }\n    return { deps, fn, useNew, value };\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction multiProviderMixError(token) {\n    return staticError('Cannot mix multi providers and regular providers', token);\n}\n/**\n * @param {?} records\n * @param {?} provider\n * @return {?}\n */\nfunction recursivelyProcessProviders(records, provider) {\n    if (provider) {\n        provider = resolveForwardRef(provider);\n        if (provider instanceof Array) {\n            // if we have an array recurse into the array\n            for (let i = 0; i < provider.length; i++) {\n                recursivelyProcessProviders(records, provider[i]);\n            }\n        }\n        else if (typeof provider === 'function') {\n            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n            // error messages\n            throw staticError('Function/Class not supported', provider);\n        }\n        else if (provider && typeof provider === 'object' && provider.provide) {\n            // At this point we have what looks like a provider: {provide: ?, ....}\n            /** @type {?} */\n            let token = resolveForwardRef(provider.provide);\n            /** @type {?} */\n            const resolvedProvider = resolveProvider(provider);\n            if (provider.multi === true) {\n                // This is a multi provider.\n                /** @type {?} */\n                let multiProvider = records.get(token);\n                if (multiProvider) {\n                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n                        throw multiProviderMixError(token);\n                    }\n                }\n                else {\n                    // Create a placeholder factory which will look up the constituents of the multi provider.\n                    records.set(token, multiProvider = (/** @type {?} */ ({\n                        token: provider.provide,\n                        deps: [],\n                        useNew: false,\n                        fn: MULTI_PROVIDER_FN,\n                        value: EMPTY\n                    })));\n                }\n                // Treat the provider as the token.\n                token = provider;\n                multiProvider.deps.push({ token, options: 6 /* Default */ });\n            }\n            /** @type {?} */\n            const record = records.get(token);\n            if (record && record.fn == MULTI_PROVIDER_FN) {\n                throw multiProviderMixError(token);\n            }\n            records.set(token, resolvedProvider);\n        }\n        else {\n            throw staticError('Unexpected provider', provider);\n        }\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction tryResolveToken(token, record, records, parent, notFoundValue, flags) {\n    try {\n        return resolveToken(token, record, records, parent, notFoundValue, flags);\n    }\n    catch (e) {\n        // ensure that 'e' is of type Error.\n        if (!(e instanceof Error)) {\n            e = new Error(e);\n        }\n        /** @type {?} */\n        const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(token);\n        if (record && record.value == CIRCULAR) {\n            // Reset the Circular flag.\n            record.value = EMPTY;\n        }\n        throw e;\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction resolveToken(token, record, records, parent, notFoundValue, flags) {\n    /** @type {?} */\n    let value;\n    if (record && !(flags & InjectFlags.SkipSelf)) {\n        // If we don't have a record, this implies that we don't own the provider hence don't know how\n        // to resolve it.\n        value = record.value;\n        if (value == CIRCULAR) {\n            throw Error(NO_NEW_LINE + 'Circular dependency');\n        }\n        else if (value === EMPTY) {\n            record.value = CIRCULAR;\n            /** @type {?} */\n            let obj = undefined;\n            /** @type {?} */\n            let useNew = record.useNew;\n            /** @type {?} */\n            let fn = record.fn;\n            /** @type {?} */\n            let depRecords = record.deps;\n            /** @type {?} */\n            let deps = EMPTY;\n            if (depRecords.length) {\n                deps = [];\n                for (let i = 0; i < depRecords.length; i++) {\n                    /** @type {?} */\n                    const depRecord = depRecords[i];\n                    /** @type {?} */\n                    const options = depRecord.options;\n                    /** @type {?} */\n                    const childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;\n                    deps.push(tryResolveToken(\n                    // Current Token to resolve\n                    depRecord.token, \n                    // A record which describes how to resolve the token.\n                    // If undefined, this means we don't have such a record\n                    childRecord, \n                    // Other records we know about.\n                    records, \n                    // If we don't know how to resolve dependency and we should not check parent for it,\n                    // than pass in Null injector.\n                    !childRecord && !(options & 4 /* CheckParent */) ? NULL_INJECTOR : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND, InjectFlags.Default));\n                }\n            }\n            record.value = value = useNew ? new ((/** @type {?} */ (fn)))(...deps) : fn.apply(obj, deps);\n        }\n    }\n    else if (!(flags & InjectFlags.Self)) {\n        value = parent.get(token, notFoundValue, InjectFlags.Default);\n    }\n    return value;\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction computeDeps(provider) {\n    /** @type {?} */\n    let deps = EMPTY;\n    /** @type {?} */\n    const providerDeps = ((/** @type {?} */ (provider))).deps;\n    if (providerDeps && providerDeps.length) {\n        deps = [];\n        for (let i = 0; i < providerDeps.length; i++) {\n            /** @type {?} */\n            let options = 6 /* Default */;\n            /** @type {?} */\n            let token = resolveForwardRef(providerDeps[i]);\n            if (token instanceof Array) {\n                for (let j = 0, annotations = token; j < annotations.length; j++) {\n                    /** @type {?} */\n                    const annotation = annotations[j];\n                    if (annotation instanceof Optional || annotation == Optional) {\n                        options = options | 1 /* Optional */;\n                    }\n                    else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\n                        options = options & ~2 /* CheckSelf */;\n                    }\n                    else if (annotation instanceof Self || annotation == Self) {\n                        options = options & ~4 /* CheckParent */;\n                    }\n                    else if (annotation instanceof Inject) {\n                        token = ((/** @type {?} */ (annotation))).token;\n                    }\n                    else {\n                        token = resolveForwardRef(annotation);\n                    }\n                }\n            }\n            deps.push({ token, options });\n        }\n    }\n    else if (((/** @type {?} */ (provider))).useExisting) {\n        /** @type {?} */\n        const token = resolveForwardRef(((/** @type {?} */ (provider))).useExisting);\n        deps = [{ token, options: 6 /* Default */ }];\n    }\n    else if (!providerDeps && !(USE_VALUE in provider)) {\n        // useValue & useExisting are the only ones which are exempt from deps all others need it.\n        throw staticError('\\'deps\\' required', provider);\n    }\n    return deps;\n}\n/**\n * @param {?} e\n * @param {?} token\n * @param {?} injectorErrorName\n * @param {?} source\n * @return {?}\n */\nexport function catchInjectorError(e, token, injectorErrorName, source) {\n    /** @type {?} */\n    const tokenPath = e[NG_TEMP_TOKEN_PATH];\n    if (token[SOURCE]) {\n        tokenPath.unshift(token[SOURCE]);\n    }\n    e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\n    e[NG_TOKEN_PATH] = tokenPath;\n    e[NG_TEMP_TOKEN_PATH] = null;\n    throw e;\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @param {?} injectorErrorName\n * @param {?=} source\n * @return {?}\n */\nfunction formatError(text, obj, injectorErrorName, source = null) {\n    text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n    /** @type {?} */\n    let context = stringify(obj);\n    if (obj instanceof Array) {\n        context = obj.map(stringify).join(' -> ');\n    }\n    else if (typeof obj === 'object') {\n        /** @type {?} */\n        let parts = (/** @type {?} */ ([]));\n        for (let key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                /** @type {?} */\n                let value = obj[key];\n                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n            }\n        }\n        context = `{${parts.join(', ')}}`;\n    }\n    return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${text.replace(NEW_LINE, '\\n  ')}`;\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @return {?}\n */\nfunction staticError(text, obj) {\n    return new Error(formatError(text, obj, 'StaticInjectorError'));\n}\nexport { ɵ0, ɵ1 };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util/stringify';\nimport { resolveForwardRef } from './forward_ref';\nimport { InjectionToken } from './injection_token';\nimport { INJECTOR, Injector, NG_TEMP_TOKEN_PATH, NullInjector, USE_VALUE, catchInjectorError } from './injector';\nimport { inject, injectArgs, setCurrentInjector } from './injector_compatibility';\nimport { getInjectableDef, getInjectorDef } from './interface/defs';\nimport { InjectFlags } from './interface/injector';\nimport { APP_ROOT } from './scope';\n/**\n * Marker which indicates that a value has not yet been created from the factory function.\n * @type {?}\n */\nconst NOT_YET = {};\n/**\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n * @type {?}\n */\nconst CIRCULAR = {};\n/** @type {?} */\nconst EMPTY_ARRAY = (/** @type {?} */ ([]));\n/**\n * A lazily initialized NullInjector.\n * @type {?}\n */\nlet NULL_INJECTOR = undefined;\n/**\n * @return {?}\n */\nfunction getNullInjector() {\n    if (NULL_INJECTOR === undefined) {\n        NULL_INJECTOR = new NullInjector();\n    }\n    return NULL_INJECTOR;\n}\n/**\n * An entry in the injector which tracks information about the given token, including a possible\n * current value.\n * @record\n * @template T\n */\nfunction Record() { }\nif (false) {\n    /** @type {?} */\n    Record.prototype.factory;\n    /** @type {?} */\n    Record.prototype.value;\n    /** @type {?} */\n    Record.prototype.multi;\n}\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * \\@publicApi\n * @param {?} defType\n * @param {?=} parent\n * @param {?=} additionalProviders\n * @param {?=} name\n * @return {?}\n */\nexport function createInjector(defType, parent = null, additionalProviders = null, name) {\n    parent = parent || getNullInjector();\n    return new R3Injector(defType, additionalProviders, parent, name);\n}\nexport class R3Injector {\n    /**\n     * @param {?} def\n     * @param {?} additionalProviders\n     * @param {?} parent\n     * @param {?=} source\n     */\n    constructor(def, additionalProviders, parent, source = null) {\n        this.parent = parent;\n        /**\n         * Map of tokens to records which contain the instances of those tokens.\n         */\n        this.records = new Map();\n        /**\n         * The transitive set of `InjectorType`s which define this injector.\n         */\n        this.injectorDefTypes = new Set();\n        /**\n         * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n         */\n        this.onDestroy = new Set();\n        this._destroyed = false;\n        // Start off by creating Records for every provider declared in every InjectorType\n        // included transitively in `def`.\n        /** @type {?} */\n        const dedupStack = [];\n        deepForEach([def], injectorDef => this.processInjectorType(injectorDef, [], dedupStack));\n        additionalProviders && deepForEach(additionalProviders, provider => this.processProvider(provider, def, additionalProviders));\n        // Make sure the INJECTOR token provides this injector.\n        this.records.set(INJECTOR, makeRecord(undefined, this));\n        // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n        // any injectable scoped to APP_ROOT_SCOPE.\n        this.isRootInjector = this.records.has(APP_ROOT);\n        // Eagerly instantiate the InjectorType classes themselves.\n        this.injectorDefTypes.forEach(defType => this.get(defType));\n        // Source name, used for debugging\n        this.source = source || (def instanceof Array ? null : stringify(def));\n    }\n    /**\n     * Flag indicating that this injector was previously destroyed.\n     * @return {?}\n     */\n    get destroyed() { return this._destroyed; }\n    /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     * @return {?}\n     */\n    destroy() {\n        this.assertNotDestroyed();\n        // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n        this._destroyed = true;\n        try {\n            // Call all the lifecycle hooks.\n            this.onDestroy.forEach(service => service.ngOnDestroy());\n        }\n        finally {\n            // Release all references.\n            this.records.clear();\n            this.onDestroy.clear();\n            this.injectorDefTypes.clear();\n        }\n    }\n    /**\n     * @template T\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n        this.assertNotDestroyed();\n        // Set the injection context.\n        /** @type {?} */\n        const previousInjector = setCurrentInjector(this);\n        try {\n            // Check for the SkipSelf flag.\n            if (!(flags & InjectFlags.SkipSelf)) {\n                // SkipSelf isn't set, check if the record belongs to this injector.\n                /** @type {?} */\n                let record = this.records.get(token);\n                if (record === undefined) {\n                    // No record, but maybe the token is scoped to this injector. Look for an ngInjectableDef\n                    // with a scope matching this injector.\n                    /** @type {?} */\n                    const def = couldBeInjectableType(token) && getInjectableDef(token);\n                    if (def && this.injectableDefInScope(def)) {\n                        // Found an ngInjectableDef and it's scoped to this injector. Pretend as if it was here\n                        // all along.\n                        record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n                        this.records.set(token, record);\n                    }\n                }\n                // If a record was found, get the instance for it and return it.\n                if (record !== undefined) {\n                    return this.hydrate(token, record);\n                }\n            }\n            // Select the next injector based on the Self flag - if self is set, the next injector is\n            // the NullInjector, otherwise it's the parent.\n            /** @type {?} */\n            const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();\n            return nextInjector.get(token, flags & InjectFlags.Optional ? null : notFoundValue);\n        }\n        catch (e) {\n            if (e.name === 'NullInjectorError') {\n                /** @type {?} */\n                const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n                path.unshift(stringify(token));\n                if (previousInjector) {\n                    // We still have a parent injector, keep throwing\n                    throw e;\n                }\n                else {\n                    // Format & throw the final error message when we don't have any previous injector\n                    return catchInjectorError(e, token, 'R3InjectorError', this.source);\n                }\n            }\n            else {\n                throw e;\n            }\n        }\n        finally {\n            // Lastly, clean up the state by restoring the previous injector.\n            setCurrentInjector(previousInjector);\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    assertNotDestroyed() {\n        if (this._destroyed) {\n            throw new Error('Injector has already been destroyed.');\n        }\n    }\n    /**\n     * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers\n     * to this injector.\n     * @private\n     * @param {?} defOrWrappedDef\n     * @param {?} parents\n     * @param {?} dedupStack\n     * @return {?}\n     */\n    processInjectorType(defOrWrappedDef, parents, dedupStack) {\n        defOrWrappedDef = resolveForwardRef(defOrWrappedDef);\n        if (!defOrWrappedDef)\n            return;\n        // Either the defOrWrappedDef is an InjectorType (with ngInjectorDef) or an\n        // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic\n        // read, so care is taken to only do the read once.\n        // First attempt to read the ngInjectorDef.\n        /** @type {?} */\n        let def = getInjectorDef(defOrWrappedDef);\n        // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.\n        /** @type {?} */\n        const ngModule = (def == null) && ((/** @type {?} */ (defOrWrappedDef))).ngModule || undefined;\n        // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,\n        // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type\n        // is the `ngModule`.\n        /** @type {?} */\n        const defType = (ngModule === undefined) ? ((/** @type {?} */ (defOrWrappedDef))) : ngModule;\n        // Check for circular dependencies.\n        if (ngDevMode && parents.indexOf(defType) !== -1) {\n            /** @type {?} */\n            const defName = stringify(defType);\n            throw new Error(`Circular dependency in DI detected for type ${defName}. Dependency path: ${parents.map(defType => stringify(defType)).join(' > ')} > ${defName}.`);\n        }\n        // Check for multiple imports of the same module\n        /** @type {?} */\n        const isDuplicate = dedupStack.indexOf(defType) !== -1;\n        // If defOrWrappedType was an InjectorDefTypeWithProviders, then .providers may hold some\n        // extra providers.\n        /** @type {?} */\n        const providers = (ngModule !== undefined) && ((/** @type {?} */ (defOrWrappedDef))).providers ||\n            EMPTY_ARRAY;\n        // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual\n        // `InjectorDef` is on its `ngModule`.\n        if (ngModule !== undefined) {\n            def = getInjectorDef(ngModule);\n        }\n        // If no definition was found, it might be from exports. Remove it.\n        if (def == null) {\n            return;\n        }\n        // Track the InjectorType and add a provider for it.\n        this.injectorDefTypes.add(defType);\n        this.records.set(defType, makeRecord(def.factory, NOT_YET));\n        // Add providers in the same way that @NgModule resolution did:\n        // First, include providers from any imports.\n        if (def.imports != null && !isDuplicate) {\n            // Before processing defType's imports, add it to the set of parents. This way, if it ends\n            // up deeply importing itself, this can be detected.\n            ngDevMode && parents.push(defType);\n            // Add it to the set of dedups. This way we can detect multiple imports of the same module\n            dedupStack.push(defType);\n            try {\n                deepForEach(def.imports, imported => this.processInjectorType(imported, parents, dedupStack));\n            }\n            finally {\n                // Remove it from the parents set when finished.\n                ngDevMode && parents.pop();\n            }\n        }\n        // Next, include providers listed on the definition itself.\n        /** @type {?} */\n        const defProviders = def.providers;\n        if (defProviders != null && !isDuplicate) {\n            /** @type {?} */\n            const injectorType = (/** @type {?} */ (defOrWrappedDef));\n            deepForEach(defProviders, provider => this.processProvider(provider, injectorType, defProviders));\n        }\n        // Finally, include providers from an InjectorDefTypeWithProviders if there was one.\n        /** @type {?} */\n        const ngModuleType = ((/** @type {?} */ (defOrWrappedDef))).ngModule;\n        deepForEach(providers, provider => this.processProvider(provider, ngModuleType, providers));\n    }\n    /**\n     * Process a `SingleProvider` and add it.\n     * @private\n     * @param {?} provider\n     * @param {?} ngModuleType\n     * @param {?} providers\n     * @return {?}\n     */\n    processProvider(provider, ngModuleType, providers) {\n        // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n        // property.\n        provider = resolveForwardRef(provider);\n        /** @type {?} */\n        let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n        // Construct a `Record` for the provider.\n        /** @type {?} */\n        const record = providerToRecord(provider, ngModuleType, providers);\n        if (!isTypeProvider(provider) && provider.multi === true) {\n            // If the provider indicates that it's a multi-provider, process it specially.\n            // First check whether it's been defined already.\n            /** @type {?} */\n            let multiRecord = this.records.get(token);\n            if (multiRecord) {\n                // It has. Throw a nice error if\n                if (multiRecord.multi === undefined) {\n                    throw new Error(`Mixed multi-provider for ${token}.`);\n                }\n            }\n            else {\n                multiRecord = makeRecord(undefined, NOT_YET, true);\n                multiRecord.factory = () => injectArgs((/** @type {?} */ ((/** @type {?} */ (multiRecord)).multi)));\n                this.records.set(token, multiRecord);\n            }\n            token = provider;\n            (/** @type {?} */ (multiRecord.multi)).push(provider);\n        }\n        else {\n            /** @type {?} */\n            const existing = this.records.get(token);\n            if (existing && existing.multi !== undefined) {\n                throw new Error(`Mixed multi-provider for ${stringify(token)}`);\n            }\n        }\n        this.records.set(token, record);\n    }\n    /**\n     * @private\n     * @template T\n     * @param {?} token\n     * @param {?} record\n     * @return {?}\n     */\n    hydrate(token, record) {\n        if (record.value === CIRCULAR) {\n            throw new Error(`Cannot instantiate cyclic dependency! ${stringify(token)}`);\n        }\n        else if (record.value === NOT_YET) {\n            record.value = CIRCULAR;\n            record.value = (/** @type {?} */ (record.factory))();\n        }\n        if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n            this.onDestroy.add(record.value);\n        }\n        return (/** @type {?} */ (record.value));\n    }\n    /**\n     * @private\n     * @param {?} def\n     * @return {?}\n     */\n    injectableDefInScope(def) {\n        if (!def.providedIn) {\n            return false;\n        }\n        else if (typeof def.providedIn === 'string') {\n            return def.providedIn === 'any' || (def.providedIn === 'root' && this.isRootInjector);\n        }\n        else {\n            return this.injectorDefTypes.has(def.providedIn);\n        }\n    }\n}\nif (false) {\n    /**\n     * Map of tokens to records which contain the instances of those tokens.\n     * @type {?}\n     * @private\n     */\n    R3Injector.prototype.records;\n    /**\n     * The transitive set of `InjectorType`s which define this injector.\n     * @type {?}\n     * @private\n     */\n    R3Injector.prototype.injectorDefTypes;\n    /**\n     * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n     * @type {?}\n     * @private\n     */\n    R3Injector.prototype.onDestroy;\n    /**\n     * Flag indicating this injector provides the APP_ROOT_SCOPE token, and thus counts as the\n     * root scope.\n     * @type {?}\n     * @private\n     */\n    R3Injector.prototype.isRootInjector;\n    /** @type {?} */\n    R3Injector.prototype.source;\n    /**\n     * @type {?}\n     * @private\n     */\n    R3Injector.prototype._destroyed;\n    /** @type {?} */\n    R3Injector.prototype.parent;\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction injectableDefOrInjectorDefFactory(token) {\n    /** @type {?} */\n    const injectableDef = getInjectableDef((/** @type {?} */ (token)));\n    if (injectableDef === null) {\n        /** @type {?} */\n        const injectorDef = getInjectorDef((/** @type {?} */ (token)));\n        if (injectorDef !== null) {\n            return injectorDef.factory;\n        }\n        else if (token instanceof InjectionToken) {\n            throw new Error(`Token ${stringify(token)} is missing an ngInjectableDef definition.`);\n        }\n        else if (token instanceof Function) {\n            /** @type {?} */\n            const paramLength = token.length;\n            if (paramLength > 0) {\n                /** @type {?} */\n                const args = new Array(paramLength).fill('?');\n                throw new Error(`Can't resolve all parameters for ${stringify(token)}: (${args.join(', ')}).`);\n            }\n            return () => new ((/** @type {?} */ (token)))();\n        }\n        throw new Error('unreachable');\n    }\n    return injectableDef.factory;\n}\n/**\n * @param {?} provider\n * @param {?} ngModuleType\n * @param {?} providers\n * @return {?}\n */\nfunction providerToRecord(provider, ngModuleType, providers) {\n    /** @type {?} */\n    let factory = providerToFactory(provider, ngModuleType, providers);\n    if (isValueProvider(provider)) {\n        return makeRecord(undefined, provider.useValue);\n    }\n    else {\n        return makeRecord(factory, NOT_YET);\n    }\n}\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param {?} provider provider to convert to factory\n * @param {?=} ngModuleType\n * @param {?=} providers\n * @return {?}\n */\nexport function providerToFactory(provider, ngModuleType, providers) {\n    /** @type {?} */\n    let factory = undefined;\n    if (isTypeProvider(provider)) {\n        return injectableDefOrInjectorDefFactory(resolveForwardRef(provider));\n    }\n    else {\n        if (isValueProvider(provider)) {\n            factory = () => resolveForwardRef(provider.useValue);\n        }\n        else if (isExistingProvider(provider)) {\n            factory = () => inject(resolveForwardRef(provider.useExisting));\n        }\n        else if (isFactoryProvider(provider)) {\n            factory = () => provider.useFactory(...injectArgs(provider.deps || []));\n        }\n        else {\n            /** @type {?} */\n            const classRef = resolveForwardRef(provider &&\n                (((/** @type {?} */ (provider))).useClass || provider.provide));\n            if (!classRef) {\n                /** @type {?} */\n                let ngModuleDetail = '';\n                if (ngModuleType && providers) {\n                    /** @type {?} */\n                    const providerDetail = providers.map(v => v == provider ? '?' + provider + '?' : '...');\n                    ngModuleDetail =\n                        ` - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`;\n                }\n                throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}'` + ngModuleDetail);\n            }\n            if (hasDeps(provider)) {\n                factory = () => new (classRef)(...injectArgs(provider.deps));\n            }\n            else {\n                return injectableDefOrInjectorDefFactory(classRef);\n            }\n        }\n    }\n    return factory;\n}\n/**\n * @template T\n * @param {?} factory\n * @param {?} value\n * @param {?=} multi\n * @return {?}\n */\nfunction makeRecord(factory, value, multi = false) {\n    return {\n        factory: factory,\n        value: value,\n        multi: multi ? [] : undefined,\n    };\n}\n/**\n * @template T\n * @param {?} input\n * @param {?} fn\n * @return {?}\n */\nfunction deepForEach(input, fn) {\n    input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isValueProvider(value) {\n    return value !== null && typeof value == 'object' && USE_VALUE in value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isExistingProvider(value) {\n    return !!(value && ((/** @type {?} */ (value))).useExisting);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isFactoryProvider(value) {\n    return !!(value && ((/** @type {?} */ (value))).useFactory);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function isTypeProvider(value) {\n    return typeof value === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function isClassProvider(value) {\n    return !!((/** @type {?} */ (value))).useClass;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hasDeps(value) {\n    return !!((/** @type {?} */ (value))).deps;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hasOnDestroy(value) {\n    return value !== null && typeof value === 'object' &&\n        typeof ((/** @type {?} */ (value))).ngOnDestroy === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction couldBeInjectableType(value) {\n    return (typeof value === 'function') ||\n        (typeof value === 'object' && value instanceof InjectionToken);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { resolveForwardRef } from '../di/forward_ref';\nimport { isClassProvider, isTypeProvider, providerToFactory } from '../di/r3_injector';\nimport { diPublicInInjector, getNodeInjectable, getOrCreateNodeInjectorForNode } from './di';\nimport { directiveInject } from './instructions';\nimport { NodeInjectorFactory } from './interfaces/injector';\nimport { TVIEW } from './interfaces/view';\nimport { getLView, getPreviousOrParentTNode } from './state';\nimport { isComponentDef } from './util/view_utils';\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @template T\n * @param {?} def the directive definition\n * @param {?} providers\n * @param {?} viewProviders\n * @return {?}\n */\nexport function providersResolver(def, providers, viewProviders) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (tView.firstTemplatePass) {\n        /** @type {?} */\n        const isComponent = isComponentDef(def);\n        // The list of view providers is processed first, and the flags are updated\n        resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent, true);\n        // Then, the list of providers is processed, and the flags are updated\n        resolveProvider(providers, tView.data, tView.blueprint, isComponent, false);\n    }\n}\n/**\n * Resolves a provider and publishes it to the DI system.\n * @param {?} provider\n * @param {?} tInjectables\n * @param {?} lInjectablesBlueprint\n * @param {?} isComponent\n * @param {?} isViewProvider\n * @return {?}\n */\nfunction resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {\n    provider = resolveForwardRef(provider);\n    if (Array.isArray(provider)) {\n        // Recursively call `resolveProvider`\n        // Recursion is OK in this case because this code will not be in hot-path once we implement\n        // cloning of the initial state.\n        for (let i = 0; i < provider.length; i++) {\n            resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\n        }\n    }\n    else {\n        /** @type {?} */\n        const lView = getLView();\n        /** @type {?} */\n        let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n        /** @type {?} */\n        let providerFactory = providerToFactory(provider);\n        /** @type {?} */\n        const tNode = getPreviousOrParentTNode();\n        /** @type {?} */\n        const beginIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n        /** @type {?} */\n        const endIndex = tNode.directiveStart;\n        /** @type {?} */\n        const cptViewProvidersCount = tNode.providerIndexes >> 16 /* CptViewProvidersCountShift */;\n        if (isClassProvider(provider) || isTypeProvider(provider)) {\n            /** @type {?} */\n            const prototype = (((/** @type {?} */ (provider))).useClass || provider).prototype;\n            /** @type {?} */\n            const ngOnDestroy = prototype.ngOnDestroy;\n            if (ngOnDestroy) {\n                /** @type {?} */\n                const tView = lView[TVIEW];\n                (tView.destroyHooks || (tView.destroyHooks = [])).push(tInjectables.length, ngOnDestroy);\n            }\n        }\n        if (isTypeProvider(provider) || !provider.multi) {\n            // Single provider case: the factory is created and pushed immediately\n            /** @type {?} */\n            const factory = new NodeInjectorFactory(providerFactory, isViewProvider, directiveInject);\n            /** @type {?} */\n            const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\n            if (existingFactoryIndex == -1) {\n                diPublicInInjector(getOrCreateNodeInjectorForNode((/** @type {?} */ (tNode)), lView), lView, token);\n                tInjectables.push(token);\n                tNode.directiveStart++;\n                tNode.directiveEnd++;\n                if (isViewProvider) {\n                    tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                lView.push(factory);\n            }\n            else {\n                lInjectablesBlueprint[existingFactoryIndex] = factory;\n                lView[existingFactoryIndex] = factory;\n            }\n        }\n        else {\n            // Multi provider case:\n            // We create a multi factory which is going to aggregate all the values.\n            // Since the output of such a factory depends on content or view injection,\n            // we create two of them, which are linked together.\n            //\n            // The first one (for view providers) is always in the first block of the injectables array,\n            // and the second one (for providers) is always in the second block.\n            // This is important because view providers have higher priority. When a multi token\n            // is being looked up, the view providers should be found first.\n            // Note that it is not possible to have a multi factory in the third block (directive block).\n            //\n            // The algorithm to process multi providers is as follows:\n            // 1) If the multi provider comes from the `viewProviders` of the component:\n            //   a) If the special view providers factory doesn't exist, it is created and pushed.\n            //   b) Else, the multi provider is added to the existing multi factory.\n            // 2) If the multi provider comes from the `providers` of the component or of another\n            // directive:\n            //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n            //      It is also linked to the multi factory for view providers, if it exists.\n            //   b) Else, the multi provider is added to the existing multi factory.\n            /** @type {?} */\n            const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n            /** @type {?} */\n            const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n            /** @type {?} */\n            const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingProvidersFactoryIndex];\n            /** @type {?} */\n            const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n            if (isViewProvider && !doesViewProvidersFactoryExist ||\n                !isViewProvider && !doesProvidersFactoryExist) {\n                // Cases 1.a and 2.a\n                diPublicInInjector(getOrCreateNodeInjectorForNode((/** @type {?} */ (tNode)), lView), lView, token);\n                /** @type {?} */\n                const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);\n                if (!isViewProvider && doesViewProvidersFactoryExist) {\n                    lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n                }\n                tInjectables.push(token);\n                tNode.directiveStart++;\n                tNode.directiveEnd++;\n                if (isViewProvider) {\n                    tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                lView.push(factory);\n            }\n            else {\n                // Cases 1.b and 2.b\n                multiFactoryAdd((/** @type {?} */ (lInjectablesBlueprint))[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);\n            }\n            if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n                (/** @type {?} */ (lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders))++;\n            }\n        }\n    }\n}\n/**\n * Add a factory in a multi factory.\n * @param {?} multiFactory\n * @param {?} factory\n * @param {?} isComponentProvider\n * @return {?}\n */\nfunction multiFactoryAdd(multiFactory, factory, isComponentProvider) {\n    (/** @type {?} */ (multiFactory.multi)).push(factory);\n    if (isComponentProvider) {\n        (/** @type {?} */ (multiFactory.componentProviders))++;\n    }\n}\n/**\n * Returns the index of item in the array, but only in the begin to end range.\n * @param {?} item\n * @param {?} arr\n * @param {?} begin\n * @param {?} end\n * @return {?}\n */\nfunction indexOf(item, arr, begin, end) {\n    for (let i = begin; i < end; i++) {\n        if (arr[i] === item)\n            return i;\n    }\n    return -1;\n}\n/**\n * Use this with `multi` `providers`.\n * @this {?}\n * @param {?} _\n * @param {?} tData\n * @param {?} lData\n * @param {?} tNode\n * @return {?}\n */\nfunction multiProvidersFactoryResolver(_, tData, lData, tNode) {\n    return multiResolve((/** @type {?} */ (this.multi)), []);\n}\n/**\n * Use this with `multi` `viewProviders`.\n *\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\n * @this {?}\n * @param {?} _\n * @param {?} tData\n * @param {?} lData\n * @param {?} tNode\n * @return {?}\n */\nfunction multiViewProvidersFactoryResolver(_, tData, lData, tNode) {\n    /** @type {?} */\n    const factories = (/** @type {?} */ (this.multi));\n    /** @type {?} */\n    let result;\n    if (this.providerFactory) {\n        /** @type {?} */\n        const componentCount = (/** @type {?} */ (this.providerFactory.componentProviders));\n        /** @type {?} */\n        const multiProviders = getNodeInjectable(tData, lData, (/** @type {?} */ ((/** @type {?} */ (this.providerFactory)).index)), tNode);\n        // Copy the section of the array which contains `multi` `providers` from the component\n        result = multiProviders.slice(0, componentCount);\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n        // Copy the section of the array which contains `multi` `providers` from other directives\n        for (let i = componentCount; i < multiProviders.length; i++) {\n            result.push(multiProviders[i]);\n        }\n    }\n    else {\n        result = [];\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n    }\n    return result;\n}\n/**\n * Maps an array of factories into an array of values.\n * @param {?} factories\n * @param {?} result\n * @return {?}\n */\nfunction multiResolve(factories, result) {\n    for (let i = 0; i < factories.length; i++) {\n        /** @type {?} */\n        const factory = (/** @type {?} */ ((/** @type {?} */ (factories[i]))));\n        result.push(factory());\n    }\n    return result;\n}\n/**\n * Creates a multi factory.\n * @param {?} factoryFn\n * @param {?} index\n * @param {?} isViewProvider\n * @param {?} isComponent\n * @param {?} f\n * @return {?}\n */\nfunction multiFactory(factoryFn, index, isViewProvider, isComponent, f) {\n    /** @type {?} */\n    const factory = new NodeInjectorFactory(factoryFn, isViewProvider, directiveInject);\n    factory.multi = [];\n    factory.index = index;\n    factory.componentProviders = 0;\n    multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n    return factory;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { fillProperties } from '../../util/property';\nimport { EMPTY_ARRAY, EMPTY_OBJ } from '../empty';\nimport { isComponentDef } from '../util/view_utils';\nimport { NgOnChangesFeature } from './ng_onchanges_feature';\n/**\n * @param {?} type\n * @return {?}\n */\nfunction getSuperType(type) {\n    return Object.getPrototypeOf(type.prototype).constructor;\n}\n/**\n * Merges the definition from a super class to a sub class.\n * @param {?} definition The definition that is a SubClass of another directive of component\n * @return {?}\n */\nexport function InheritDefinitionFeature(definition) {\n    /** @type {?} */\n    let superType = getSuperType(definition.type);\n    while (superType) {\n        /** @type {?} */\n        let superDef = undefined;\n        if (isComponentDef(definition)) {\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ngComponentDef || superType.ngDirectiveDef;\n        }\n        else {\n            if (superType.ngComponentDef) {\n                throw new Error('Directives cannot inherit Components');\n            }\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ngDirectiveDef;\n        }\n        /** @nocollapse @type {?} */\n        const baseDef = ((/** @type {?} */ (superType))).ngBaseDef;\n        // Some fields in the definition may be empty, if there were no values to put in them that\n        // would've justified object creation. Unwrap them if necessary.\n        if (baseDef || superDef) {\n            /** @type {?} */\n            const writeableDef = (/** @type {?} */ (definition));\n            writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n            writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n            writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n        }\n        if (baseDef) {\n            // Merge inputs and outputs\n            fillProperties(definition.inputs, baseDef.inputs);\n            fillProperties(definition.declaredInputs, baseDef.declaredInputs);\n            fillProperties(definition.outputs, baseDef.outputs);\n        }\n        if (superDef) {\n            // Merge hostBindings\n            /** @type {?} */\n            const prevHostBindings = definition.hostBindings;\n            /** @type {?} */\n            const superHostBindings = superDef.hostBindings;\n            if (superHostBindings) {\n                if (prevHostBindings) {\n                    definition.hostBindings = (rf, ctx, elementIndex) => {\n                        superHostBindings(rf, ctx, elementIndex);\n                        prevHostBindings(rf, ctx, elementIndex);\n                    };\n                }\n                else {\n                    definition.hostBindings = superHostBindings;\n                }\n            }\n            // Merge View Queries\n            if (isComponentDef(definition) && isComponentDef(superDef)) {\n                /** @type {?} */\n                const prevViewQuery = definition.viewQuery;\n                /** @type {?} */\n                const superViewQuery = superDef.viewQuery;\n                if (superViewQuery) {\n                    if (prevViewQuery) {\n                        definition.viewQuery = (rf, ctx) => {\n                            superViewQuery(rf, ctx);\n                            prevViewQuery(rf, ctx);\n                        };\n                    }\n                    else {\n                        definition.viewQuery = superViewQuery;\n                    }\n                }\n            }\n            // Merge Content Queries\n            /** @type {?} */\n            const prevContentQueries = definition.contentQueries;\n            /** @type {?} */\n            const superContentQueries = superDef.contentQueries;\n            if (superContentQueries) {\n                if (prevContentQueries) {\n                    definition.contentQueries = (rf, ctx, directiveIndex) => {\n                        superContentQueries(rf, ctx, directiveIndex);\n                        prevContentQueries(rf, ctx, directiveIndex);\n                    };\n                }\n                else {\n                    definition.contentQueries = superContentQueries;\n                }\n            }\n            // Merge inputs and outputs\n            fillProperties(definition.inputs, superDef.inputs);\n            fillProperties(definition.declaredInputs, superDef.declaredInputs);\n            fillProperties(definition.outputs, superDef.outputs);\n            // Inherit hooks\n            // Assume super class inheritance feature has already run.\n            definition.afterContentChecked =\n                definition.afterContentChecked || superDef.afterContentChecked;\n            definition.afterContentInit = definition.afterContentInit || superDef.afterContentInit;\n            definition.afterViewChecked = definition.afterViewChecked || superDef.afterViewChecked;\n            definition.afterViewInit = definition.afterViewInit || superDef.afterViewInit;\n            definition.doCheck = definition.doCheck || superDef.doCheck;\n            definition.onDestroy = definition.onDestroy || superDef.onDestroy;\n            definition.onInit = definition.onInit || superDef.onInit;\n            // Run parent features\n            /** @type {?} */\n            const features = superDef.features;\n            if (features) {\n                for (const feature of features) {\n                    if (feature && feature.ngInherit) {\n                        ((/** @type {?} */ (feature)))(definition);\n                    }\n                }\n            }\n        }\n        else {\n            // Even if we don't have a definition, check the type for the hooks and use those if need be\n            /** @type {?} */\n            const superPrototype = superType.prototype;\n            if (superPrototype) {\n                definition.afterContentChecked =\n                    definition.afterContentChecked || superPrototype.ngAfterContentChecked;\n                definition.afterContentInit =\n                    definition.afterContentInit || superPrototype.ngAfterContentInit;\n                definition.afterViewChecked =\n                    definition.afterViewChecked || superPrototype.ngAfterViewChecked;\n                definition.afterViewInit = definition.afterViewInit || superPrototype.ngAfterViewInit;\n                definition.doCheck = definition.doCheck || superPrototype.ngDoCheck;\n                definition.onDestroy = definition.onDestroy || superPrototype.ngOnDestroy;\n                definition.onInit = definition.onInit || superPrototype.ngOnInit;\n                if (superPrototype.ngOnChanges) {\n                    NgOnChangesFeature()(definition);\n                }\n            }\n        }\n        superType = Object.getPrototypeOf(superType);\n    }\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction maybeUnwrapEmpty(value) {\n    if (value === EMPTY_OBJ) {\n        return {};\n    }\n    else if (value === EMPTY_ARRAY) {\n        return [];\n    }\n    else {\n        return value;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { bindingUpdated, bindingUpdated2, bindingUpdated3, bindingUpdated4, getBinding, updateBinding } from './bindings';\nimport { getBindingRoot, getLView, isCreationMode } from './state';\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |------consts------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @template T\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn Function that returns a value\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} value\n */\nexport function pureFunction0(slotOffset, pureFn, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    return isCreationMode() ?\n        updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) :\n        getBinding(lView, bindingIndex);\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn Function that returns an updated value\n * @param {?} exp Updated expression value\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction1(slotOffset, pureFn, exp, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    return bindingUpdated(lView, bindingIndex, exp) ?\n        updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n        getBinding(lView, bindingIndex + 1);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    return bindingUpdated2(lView, bindingIndex, exp1, exp2) ?\n        updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n        getBinding(lView, bindingIndex + 2);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ?\n        updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n        getBinding(lView, bindingIndex + 3);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ?\n        updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n        getBinding(lView, bindingIndex + 4);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated(lView, bindingIndex + 4, exp5) || different ?\n        updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n            pureFn(exp1, exp2, exp3, exp4, exp5)) :\n        getBinding(lView, bindingIndex + 5);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ?\n        updateBinding(lView, bindingIndex + 6, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n        getBinding(lView, bindingIndex + 6);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ?\n        updateBinding(lView, bindingIndex + 7, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n        getBinding(lView, bindingIndex + 7);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?} exp8\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ?\n        updateBinding(lView, bindingIndex + 8, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n        getBinding(lView, bindingIndex + 8);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param {?} exps An array of binding values\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunctionV(slotOffset, pureFn, exps, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    let bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    let different = false;\n    /** @type {?} */\n    const lView = getLView();\n    for (let i = 0; i < exps.length; i++) {\n        bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n    }\n    return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) :\n        getBinding(lView, bindingIndex);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from './injection_token';\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n * @type {?}\n */\nexport const APP_ROOT = new InjectionToken('The presence of this token marks an injector as being the root injector.');\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NvcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9kaS9zY29wZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQVFBLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQzs7Ozs7OztBQVFqRCxNQUFNLE9BQU8sUUFBUSxHQUFHLElBQUksY0FBYyxDQUN0QywwRUFBMEUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtJbmplY3Rpb25Ub2tlbn0gZnJvbSAnLi9pbmplY3Rpb25fdG9rZW4nO1xuXG5cbi8qKlxuICogQW4gaW50ZXJuYWwgdG9rZW4gd2hvc2UgcHJlc2VuY2UgaW4gYW4gaW5qZWN0b3IgaW5kaWNhdGVzIHRoYXQgdGhlIGluamVjdG9yIHNob3VsZCB0cmVhdCBpdHNlbGZcbiAqIGFzIGEgcm9vdCBzY29wZWQgaW5qZWN0b3Igd2hlbiBwcm9jZXNzaW5nIHJlcXVlc3RzIGZvciB1bmtub3duIHRva2VucyB3aGljaCBtYXkgaW5kaWNhdGVcbiAqIHRoZXkgYXJlIHByb3ZpZGVkIGluIHRoZSByb290IHNjb3BlLlxuICovXG5leHBvcnQgY29uc3QgQVBQX1JPT1QgPSBuZXcgSW5qZWN0aW9uVG9rZW48Ym9vbGVhbj4oXG4gICAgJ1RoZSBwcmVzZW5jZSBvZiB0aGlzIHRva2VuIG1hcmtzIGFuIGluamVjdG9yIGFzIGJlaW5nIHRoZSByb290IGluamVjdG9yLicpO1xuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { global as _global } from './global';\nlet _symbolIterator = null;\nexport function getSymbolIterator() {\n    if (!_symbolIterator) {\n        const Symbol = _global['Symbol'];\n        if (Symbol && Symbol.iterator) {\n            _symbolIterator = Symbol.iterator;\n        }\n        else {\n            // es6-shim specific logic\n            const keys = Object.getOwnPropertyNames(Map.prototype);\n            for (let i = 0; i < keys.length; ++i) {\n                const key = keys[i];\n                if (key !== 'entries' && key !== 'size' &&\n                    Map.prototype[key] === Map.prototype['entries']) {\n                    _symbolIterator = key;\n                }\n            }\n        }\n    }\n    return _symbolIterator;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9sLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvdXRpbC9zeW1ib2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFDLE1BQU0sSUFBSSxPQUFPLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFJM0MsSUFBSSxlQUFlLEdBQVEsSUFBSSxDQUFDO0FBQ2hDLE1BQU0sVUFBVSxpQkFBaUI7SUFDL0IsSUFBSSxDQUFDLGVBQWUsRUFBRTtRQUNwQixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakMsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUM3QixlQUFlLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztTQUNuQzthQUFNO1lBQ0wsMEJBQTBCO1lBQzFCLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDdkQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7Z0JBQ3BDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDcEIsSUFBSSxHQUFHLEtBQUssU0FBUyxJQUFJLEdBQUcsS0FBSyxNQUFNO29CQUNsQyxHQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUU7b0JBQzVELGVBQWUsR0FBRyxHQUFHLENBQUM7aUJBQ3ZCO2FBQ0Y7U0FDRjtLQUNGO0lBQ0QsT0FBTyxlQUFlLENBQUM7QUFDekIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtnbG9iYWwgYXMgX2dsb2JhbH0gZnJvbSAnLi9nbG9iYWwnO1xuXG4vLyBXaGVuIFN5bWJvbC5pdGVyYXRvciBkb2Vzbid0IGV4aXN0LCByZXRyaWV2ZXMgdGhlIGtleSB1c2VkIGluIGVzNi1zaGltXG5kZWNsYXJlIGNvbnN0IFN5bWJvbDogYW55O1xubGV0IF9zeW1ib2xJdGVyYXRvcjogYW55ID0gbnVsbDtcbmV4cG9ydCBmdW5jdGlvbiBnZXRTeW1ib2xJdGVyYXRvcigpOiBzdHJpbmd8c3ltYm9sIHtcbiAgaWYgKCFfc3ltYm9sSXRlcmF0b3IpIHtcbiAgICBjb25zdCBTeW1ib2wgPSBfZ2xvYmFsWydTeW1ib2wnXTtcbiAgICBpZiAoU3ltYm9sICYmIFN5bWJvbC5pdGVyYXRvcikge1xuICAgICAgX3N5bWJvbEl0ZXJhdG9yID0gU3ltYm9sLml0ZXJhdG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlczYtc2hpbSBzcGVjaWZpYyBsb2dpY1xuICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE1hcC5wcm90b3R5cGUpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICAgIGlmIChrZXkgIT09ICdlbnRyaWVzJyAmJiBrZXkgIT09ICdzaXplJyAmJlxuICAgICAgICAgICAgKE1hcCBhcyBhbnkpLnByb3RvdHlwZVtrZXldID09PSBNYXAucHJvdG90eXBlWydlbnRyaWVzJ10pIHtcbiAgICAgICAgICBfc3ltYm9sSXRlcmF0b3IgPSBrZXk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9zeW1ib2xJdGVyYXRvcjtcbn1cbiJdfQ==","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { looseIdentical } from '../util/comparison';\nimport { getSymbolIterator } from '../util/symbol';\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function devModeEqual(a, b) {\n    /** @type {?} */\n    const isListLikeIterableA = isListLikeIterable(a);\n    /** @type {?} */\n    const isListLikeIterableB = isListLikeIterable(b);\n    if (isListLikeIterableA && isListLikeIterableB) {\n        return areIterablesEqual(a, b, devModeEqual);\n    }\n    else {\n        /** @type {?} */\n        const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n        /** @type {?} */\n        const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n            return true;\n        }\n        else {\n            return looseIdentical(a, b);\n        }\n    }\n}\n/**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n * \\@publicApi\n */\nexport class WrappedValue {\n    /**\n     * @param {?} value\n     */\n    constructor(value) { this.wrapped = value; }\n    /**\n     * Creates a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    static wrap(value) { return new WrappedValue(value); }\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    static unwrap(value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; }\n    /**\n     * Returns true if `value` is a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    static isWrapped(value) { return value instanceof WrappedValue; }\n}\nif (false) {\n    /**\n     * @deprecated from 5.3, use `unwrap()` instead - will switch to protected\n     * @type {?}\n     */\n    WrappedValue.prototype.wrapped;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function isListLikeIterable(obj) {\n    if (!isJsObject(obj))\n        return false;\n    return Array.isArray(obj) ||\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n}\n/**\n * @param {?} a\n * @param {?} b\n * @param {?} comparator\n * @return {?}\n */\nexport function areIterablesEqual(a, b, comparator) {\n    /** @type {?} */\n    const iterator1 = a[getSymbolIterator()]();\n    /** @type {?} */\n    const iterator2 = b[getSymbolIterator()]();\n    while (true) {\n        /** @type {?} */\n        const item1 = iterator1.next();\n        /** @type {?} */\n        const item2 = iterator2.next();\n        if (item1.done && item2.done)\n            return true;\n        if (item1.done || item2.done)\n            return false;\n        if (!comparator(item1.value, item2.value))\n            return false;\n    }\n}\n/**\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nexport function iterateListLike(obj, fn) {\n    if (Array.isArray(obj)) {\n        for (let i = 0; i < obj.length; i++) {\n            fn(obj[i]);\n        }\n    }\n    else {\n        /** @type {?} */\n        const iterator = obj[getSymbolIterator()]();\n        /** @type {?} */\n        let item;\n        while (!((item = iterator.next()).done)) {\n            fn(item.value);\n        }\n    }\n}\n/**\n * @param {?} o\n * @return {?}\n */\nexport function isJsObject(o) {\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { WrappedValue } from '../change_detection/change_detection_util';\nimport { load, store } from './instructions';\nimport { BINDING_INDEX, HEADER_OFFSET, TVIEW } from './interfaces/view';\nimport { pureFunction1, pureFunction2, pureFunction3, pureFunction4, pureFunctionV } from './pure_function';\nimport { getLView } from './state';\nimport { NO_CHANGE } from './tokens';\n/**\n * Create a pipe.\n *\n * @param {?} index Pipe index where the pipe will be stored.\n * @param {?} pipeName The name of the pipe\n * @return {?} T the instance of the pipe.\n */\nexport function pipe(index, pipeName) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    /** @type {?} */\n    let pipeDef;\n    /** @type {?} */\n    const adjustedIndex = index + HEADER_OFFSET;\n    if (tView.firstTemplatePass) {\n        pipeDef = getPipeDef(pipeName, tView.pipeRegistry);\n        tView.data[adjustedIndex] = pipeDef;\n        if (pipeDef.onDestroy) {\n            (tView.destroyHooks || (tView.destroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);\n        }\n    }\n    else {\n        pipeDef = (/** @type {?} */ (tView.data[adjustedIndex]));\n    }\n    /** @type {?} */\n    const pipeInstance = pipeDef.factory(null);\n    store(index, pipeInstance);\n    return pipeInstance;\n}\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * @param {?} name Name of pipe to resolve\n * @param {?} registry Full list of available pipes\n * @return {?} Matching PipeDef\n */\nfunction getPipeDef(name, registry) {\n    if (registry) {\n        for (let i = registry.length - 1; i >= 0; i--) {\n            /** @type {?} */\n            const pipeDef = registry[i];\n            if (name === pipeDef.name) {\n                return pipeDef;\n            }\n        }\n    }\n    throw new Error(`The pipe '${name}' could not be found!`);\n}\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind1(index, slotOffset, v1) {\n    /** @type {?} */\n    const pipeInstance = load(index);\n    return unwrapValue(isPure(index) ? pureFunction1(slotOffset, pipeInstance.transform, v1, pipeInstance) :\n        pipeInstance.transform(v1));\n}\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind2(index, slotOffset, v1, v2) {\n    /** @type {?} */\n    const pipeInstance = load(index);\n    return unwrapValue(isPure(index) ? pureFunction2(slotOffset, pipeInstance.transform, v1, v2, pipeInstance) :\n        pipeInstance.transform(v1, v2));\n}\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 4rd argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind3(index, slotOffset, v1, v2, v3) {\n    /** @type {?} */\n    const pipeInstance = load(index);\n    return unwrapValue(isPure(index) ? pureFunction3(slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3));\n}\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 3rd argument to {\\@link PipeTransform#transform}.\n * @param {?} v4 4th argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind4(index, slotOffset, v1, v2, v3, v4) {\n    /** @type {?} */\n    const pipeInstance = load(index);\n    return unwrapValue(isPure(index) ?\n        pureFunction4(slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3, v4));\n}\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} values Array of arguments to pass to {\\@link PipeTransform#transform} method.\n * @return {?}\n */\nexport function pipeBindV(index, slotOffset, values) {\n    /** @type {?} */\n    const pipeInstance = load(index);\n    return unwrapValue(isPure(index) ? pureFunctionV(slotOffset, pipeInstance.transform, values, pipeInstance) :\n        pipeInstance.transform.apply(pipeInstance, values));\n}\n/**\n * @param {?} index\n * @return {?}\n */\nfunction isPure(index) {\n    return ((/** @type {?} */ (getLView()[TVIEW].data[index + HEADER_OFFSET]))).pure;\n}\n/**\n * Unwrap the output of a pipe transformation.\n * In order to trick change detection into considering that the new value is always different from\n * the old one, the old value is overwritten by NO_CHANGE.\n *\n * @param {?} newValue the pipe transformation output.\n * @return {?}\n */\nfunction unwrapValue(newValue) {\n    if (WrappedValue.isWrapped(newValue)) {\n        newValue = WrappedValue.unwrap(newValue);\n        /** @type {?} */\n        const lView = getLView();\n        // The NO_CHANGE value needs to be written at the index where the impacted binding value is\n        // stored\n        /** @type {?} */\n        const bindingToInvalidateIdx = lView[BINDING_INDEX];\n        lView[bindingToInvalidateIdx] = NO_CHANGE;\n    }\n    return newValue;\n}\n//# sourceMappingURL=data:application/json;base64,","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar _enable_super_gross_mode_that_will_cause_bad_things = false;\nexport var config = {\n    Promise: undefined,\n    set useDeprecatedSynchronousErrorHandling(value) {\n        if (value) {\n            var error = /*@__PURE__*/ new Error();\n            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n        }\n        else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n            /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');\n        }\n        _enable_super_gross_mode_that_will_cause_bad_things = value;\n    },\n    get useDeprecatedSynchronousErrorHandling() {\n        return _enable_super_gross_mode_that_will_cause_bad_things;\n    },\n};\n//# sourceMappingURL=config.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function hostReportError(err) {\n    setTimeout(function () { throw err; });\n}\n//# sourceMappingURL=hostReportError.js.map\n","/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport var empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) {\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            throw err;\n        }\n        else {\n            hostReportError(err);\n        }\n    },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map\n","/** PURE_IMPORTS_START _errorObject PURE_IMPORTS_END */\nimport { errorObject } from './errorObject';\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject.e = e;\n        return errorObject;\n    }\n}\nexport function tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n//# sourceMappingURL=tryCatch.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction UnsubscriptionErrorImpl(errors) {\n    Error.call(this);\n    this.message = errors ?\n        errors.length + \" errors occurred during unsubscription:\\n\" + errors.map(function (err, i) { return i + 1 + \") \" + err.toString(); }).join('\\n  ') : '';\n    this.name = 'UnsubscriptionError';\n    this.errors = errors;\n    return this;\n}\nUnsubscriptionErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);\nexport var UnsubscriptionError = UnsubscriptionErrorImpl;\n//# sourceMappingURL=UnsubscriptionError.js.map\n","/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_tryCatch,_util_errorObject,_util_UnsubscriptionError PURE_IMPORTS_END */\nimport { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nvar Subscription = /*@__PURE__*/ (function () {\n    function Subscription(unsubscribe) {\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        while (_parent) {\n            _parent.remove(this);\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            var trial = tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    var trial = tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject.e;\n                        if (err instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    };\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function') {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexport { Subscription };\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isObject(x) {\n    return x != null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var rxSubscriber = typeof Symbol === 'function'\n    ? /*@__PURE__*/ Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + /*@__PURE__*/ Math.random();\nexport var $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n","/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nvar Subscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Subscriber, _super);\n    function Subscriber(destinationOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        _this.syncErrorValue = null;\n        _this.syncErrorThrown = false;\n        _this.syncErrorThrowable = false;\n        _this.isStopped = false;\n        _this._parentSubscription = null;\n        switch (arguments.length) {\n            case 0:\n                _this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    _this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n                        _this.destination = destinationOrNext;\n                        destinationOrNext.add(_this);\n                    }\n                    else {\n                        _this.syncErrorThrowable = true;\n                        _this.destination = new SafeSubscriber(_this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                _this.syncErrorThrowable = true;\n                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);\n                break;\n        }\n        return _this;\n    }\n    Subscriber.prototype[rxSubscriberSymbol] = function () { return this; };\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        this._parentSubscription = null;\n        return this;\n    };\n    return Subscriber;\n}(Subscription));\nexport { Subscriber };\nvar SafeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        _this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = _this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    _this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = _this.unsubscribe.bind(_this);\n            }\n        }\n        _this._context = context;\n        _this._next = next;\n        _this._error = error;\n        _this._complete = complete;\n        return _this;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;\n            if (this._error) {\n                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                if (useDeprecatedSynchronousErrorHandling) {\n                    throw err;\n                }\n                hostReportError(err);\n            }\n            else {\n                if (useDeprecatedSynchronousErrorHandling) {\n                    _parentSubscriber.syncErrorValue = err;\n                    _parentSubscriber.syncErrorThrown = true;\n                }\n                else {\n                    hostReportError(err);\n                }\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                throw err;\n            }\n            else {\n                hostReportError(err);\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        if (!config.useDeprecatedSynchronousErrorHandling) {\n            throw new Error('bad call');\n        }\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                parent.syncErrorValue = err;\n                parent.syncErrorThrown = true;\n                return true;\n            }\n            else {\n                hostReportError(err);\n                return true;\n            }\n        }\n        return false;\n    };\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nexport { SafeSubscriber };\n//# sourceMappingURL=Subscriber.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';\n//# sourceMappingURL=observable.js.map\n","/** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_internal_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */\nimport { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nvar Observable = /*@__PURE__*/ (function () {\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n                this._subscribe(sink) :\n                this._trySubscribe(sink));\n        }\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            if (sink.syncErrorThrowable) {\n                sink.syncErrorThrowable = false;\n                if (sink.syncErrorThrown) {\n                    throw sink.syncErrorValue;\n                }\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                sink.syncErrorThrown = true;\n                sink.syncErrorValue = err;\n            }\n            if (canReportError(sink)) {\n                sink.error(err);\n            }\n            else {\n                console.warn(err);\n            }\n        }\n    };\n    Observable.prototype.forEach = function (next, promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    if (subscription) {\n                        subscription.unsubscribe();\n                    }\n                }\n            }, reject, resolve);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        return source && source.subscribe(subscriber);\n    };\n    Observable.prototype[Symbol_observable] = function () {\n        return this;\n    };\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    };\n    Observable.prototype.toPromise = function (promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexport { Observable };\nfunction getPromiseCtor(promiseCtor) {\n    if (!promiseCtor) {\n        promiseCtor = config.Promise || Promise;\n    }\n    if (!promiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return promiseCtor;\n}\n//# sourceMappingURL=Observable.js.map\n","/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */\nimport { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map\n","/** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */\nimport { Subscriber } from '../Subscriber';\nexport function canReportError(observer) {\n    while (observer) {\n        var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;\n        if (closed_1 || isStopped) {\n            return false;\n        }\n        else if (destination && destination instanceof Subscriber) {\n            observer = destination;\n        }\n        else {\n            observer = null;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=canReportError.js.map\n","/** PURE_IMPORTS_START _noop PURE_IMPORTS_END */\nimport { noop } from './noop';\nexport function pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nexport function pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function noop() { }\n//# sourceMappingURL=noop.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction ObjectUnsubscribedErrorImpl() {\n    Error.call(this);\n    this.message = 'object unsubscribed';\n    this.name = 'ObjectUnsubscribedError';\n    return this;\n}\nObjectUnsubscribedErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);\nexport var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from './Subscription';\nvar SubjectSubscription = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        var _this = _super.call(this) || this;\n        _this.subject = subject;\n        _this.subscriber = subscriber;\n        _this.closed = false;\n        return _this;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription));\nexport { SubjectSubscription };\n//# sourceMappingURL=SubjectSubscription.js.map\n","/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nvar SubjectSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        return _this;\n    }\n    return SubjectSubscriber;\n}(Subscriber));\nexport { SubjectSubscriber };\nvar Subject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Subject, _super);\n    function Subject() {\n        var _this = _super.call(this) || this;\n        _this.observers = [];\n        _this.closed = false;\n        _this.isStopped = false;\n        _this.hasError = false;\n        _this.thrownError = null;\n        return _this;\n    }\n    Subject.prototype[rxSubscriberSymbol] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable));\nexport { Subject };\nvar AnonymousSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        var _this = _super.call(this) || this;\n        _this.destination = destination;\n        _this.source = source;\n        return _this;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexport { AnonymousSubject };\n//# sourceMappingURL=Subject.js.map\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/// <reference types=\"rxjs\" />\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/// <reference types=\"rxjs\" />\nimport { Subject, Subscription } from 'rxjs';\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * \\@usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n * \\@Output() open: EventEmitter<any> = new EventEmitter();\n * \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * \\@publicApi\n * @template T\n */\nexport class EventEmitter extends Subject {\n    // tslint:disable-line\n    /**\n     * Creates an instance of this class that can\n     * deliver events synchronously or asynchronously.\n     *\n     * @param {?=} isAsync When true, deliver events asynchronously.\n     *\n     */\n    constructor(isAsync = false) {\n        super();\n        this.__isAsync = isAsync;\n    }\n    /**\n     * Emits an event containing a given value.\n     * @param {?=} value The value to emit.\n     * @return {?}\n     */\n    emit(value) { super.next(value); }\n    /**\n     * Registers handlers for events emitted by this instance.\n     * @param {?=} generatorOrNext When supplied, a custom handler for emitted events.\n     * @param {?=} error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param {?=} complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     * @return {?}\n     */\n    subscribe(generatorOrNext, error, complete) {\n        /** @type {?} */\n        let schedulerFn;\n        /** @type {?} */\n        let errorFn = (err) => null;\n        /** @type {?} */\n        let completeFn = () => null;\n        if (generatorOrNext && typeof generatorOrNext === 'object') {\n            schedulerFn = this.__isAsync ? (value) => {\n                setTimeout(() => generatorOrNext.next(value));\n            } : (value) => { generatorOrNext.next(value); };\n            if (generatorOrNext.error) {\n                errorFn = this.__isAsync ? (err) => { setTimeout(() => generatorOrNext.error(err)); } :\n                    (err) => { generatorOrNext.error(err); };\n            }\n            if (generatorOrNext.complete) {\n                completeFn = this.__isAsync ? () => { setTimeout(() => generatorOrNext.complete()); } :\n                    () => { generatorOrNext.complete(); };\n            }\n        }\n        else {\n            schedulerFn = this.__isAsync ? (value) => { setTimeout(() => generatorOrNext(value)); } :\n                (value) => { generatorOrNext(value); };\n            if (error) {\n                errorFn =\n                    this.__isAsync ? (err) => { setTimeout(() => error(err)); } : (err) => { error(err); };\n            }\n            if (complete) {\n                completeFn =\n                    this.__isAsync ? () => { setTimeout(() => complete()); } : () => { complete(); };\n            }\n        }\n        /** @type {?} */\n        const sink = super.subscribe(schedulerFn, errorFn, completeFn);\n        if (generatorOrNext instanceof Subscription) {\n            generatorOrNext.add(sink);\n        }\n        return sink;\n    }\n}\nif (false) {\n    /**\n     * Internal\n     * @type {?}\n     */\n    EventEmitter.prototype.__isAsync;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\nimport { getSymbolIterator } from '../util/symbol';\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * \\@usageNotes\n * ### Example\n * ```typescript\n * \\@Component({...})\n * class Container {\n * \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * \\@publicApi\n * @template T\n */\nexport class QueryList {\n    constructor() {\n        this.dirty = true;\n        this._results = [];\n        this.changes = new EventEmitter();\n        this.length = 0;\n    }\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    map(fn) { return this._results.map(fn); }\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    filter(fn) {\n        return this._results.filter(fn);\n    }\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    find(fn) {\n        return this._results.find(fn);\n    }\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    reduce(fn, init) {\n        return this._results.reduce(fn, init);\n    }\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) { this._results.forEach(fn); }\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    some(fn) {\n        return this._results.some(fn);\n    }\n    /**\n     * @return {?}\n     */\n    toArray() { return this._results.slice(); }\n    /**\n     * @return {?}\n     */\n    [getSymbolIterator()]() { return ((/** @type {?} */ (this._results)))[getSymbolIterator()](); }\n    /**\n     * @return {?}\n     */\n    toString() { return this._results.toString(); }\n    /**\n     * @param {?} res\n     * @return {?}\n     */\n    reset(res) {\n        this._results = flatten(res);\n        ((/** @type {?} */ (this))).dirty = false;\n        ((/** @type {?} */ (this))).length = this._results.length;\n        ((/** @type {?} */ (this))).last = this._results[this.length - 1];\n        ((/** @type {?} */ (this))).first = this._results[0];\n    }\n    /**\n     * @return {?}\n     */\n    notifyOnChanges() { ((/** @type {?} */ (this.changes))).emit(this); }\n    /**\n     * internal\n     * @return {?}\n     */\n    setDirty() { ((/** @type {?} */ (this))).dirty = true; }\n    /**\n     * internal\n     * @return {?}\n     */\n    destroy() {\n        ((/** @type {?} */ (this.changes))).complete();\n        ((/** @type {?} */ (this.changes))).unsubscribe();\n    }\n}\nif (false) {\n    /** @type {?} */\n    QueryList.prototype.dirty;\n    /**\n     * @type {?}\n     * @private\n     */\n    QueryList.prototype._results;\n    /** @type {?} */\n    QueryList.prototype.changes;\n    /** @type {?} */\n    QueryList.prototype.length;\n    /** @type {?} */\n    QueryList.prototype.first;\n    /** @type {?} */\n    QueryList.prototype.last;\n}\n/**\n * @template T\n * @param {?} list\n * @return {?}\n */\nfunction flatten(list) {\n    return list.reduce((flat, item) => {\n        /** @type {?} */\n        const flatItem = Array.isArray(item) ? flatten(item) : item;\n        return ((/** @type {?} */ (flat))).concat(flatItem);\n    }, []);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnlfbGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2xpbmtlci9xdWVyeV9saXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBVUEsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBQzlDLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNkJqRCxNQUFNLE9BQU8sU0FBUztJQUF0QjtRQUNrQixVQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLGFBQVEsR0FBYSxFQUFFLENBQUM7UUFDaEIsWUFBTyxHQUFvQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBRXJELFdBQU0sR0FBVyxDQUFDLENBQUM7SUEwRTlCLENBQUM7Ozs7Ozs7O0lBaEVDLEdBQUcsQ0FBSSxFQUE2QyxJQUFTLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7Ozs7O0lBTTVGLE1BQU0sQ0FBQyxFQUFtRDtRQUN4RCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Ozs7Ozs7SUFNRCxJQUFJLENBQUMsRUFBbUQ7UUFDdEQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7Ozs7Ozs7SUFNRCxNQUFNLENBQUksRUFBa0UsRUFBRSxJQUFPO1FBQ25GLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Ozs7Ozs7SUFNRCxPQUFPLENBQUMsRUFBZ0QsSUFBVSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7SUFNOUYsSUFBSSxDQUFDLEVBQW9EO1FBQ3ZELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7OztJQUVELE9BQU8sS0FBVSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDOzs7O0lBRWhELENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxLQUFrQixPQUFPLENBQUMsbUJBQUEsSUFBSSxDQUFDLFFBQVEsRUFBTyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOzs7O0lBRTlGLFFBQVEsS0FBYSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDOzs7OztJQUV2RCxLQUFLLENBQUMsR0FBbUI7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0IsQ0FBQyxtQkFBQSxJQUFJLEVBQW1CLENBQUMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ3hDLENBQUMsbUJBQUEsSUFBSSxFQUFtQixDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1FBQ3hELENBQUMsbUJBQUEsSUFBSSxFQUFZLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3pELENBQUMsbUJBQUEsSUFBSSxFQUFhLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7O0lBRUQsZUFBZSxLQUFXLENBQUMsbUJBQUEsSUFBSSxDQUFDLE9BQU8sRUFBcUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7O0lBRzNFLFFBQVEsS0FBSyxDQUFDLG1CQUFBLElBQUksRUFBbUIsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDOzs7OztJQUd0RCxPQUFPO1FBQ0wsQ0FBQyxtQkFBQSxJQUFJLENBQUMsT0FBTyxFQUFxQixDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDL0MsQ0FBQyxtQkFBQSxJQUFJLENBQUMsT0FBTyxFQUFxQixDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDcEQsQ0FBQztDQUNGOzs7SUE5RUMsMEJBQTZCOzs7OztJQUM3Qiw2QkFBZ0M7O0lBQ2hDLDRCQUE4RDs7SUFFOUQsMkJBQTRCOztJQUU1QiwwQkFBb0I7O0lBRXBCLHlCQUFtQjs7Ozs7OztBQXdFckIsU0FBUyxPQUFPLENBQUksSUFBa0I7SUFDcEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBVyxFQUFFLElBQWEsRUFBTyxFQUFFOztjQUMvQyxRQUFRLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO1FBQzNELE9BQU8sQ0FBQyxtQkFBSyxJQUFJLEVBQUEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN0QyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDVCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQge0V2ZW50RW1pdHRlcn0gZnJvbSAnLi4vZXZlbnRfZW1pdHRlcic7XG5pbXBvcnQge2dldFN5bWJvbEl0ZXJhdG9yfSBmcm9tICcuLi91dGlsL3N5bWJvbCc7XG5cblxuLyoqXG4gKiBBbiB1bm1vZGlmaWFibGUgbGlzdCBvZiBpdGVtcyB0aGF0IEFuZ3VsYXIga2VlcHMgdXAgdG8gZGF0ZSB3aGVuIHRoZSBzdGF0ZVxuICogb2YgdGhlIGFwcGxpY2F0aW9uIGNoYW5nZXMuXG4gKlxuICogVGhlIHR5cGUgb2Ygb2JqZWN0IHRoYXQge0BsaW5rIFZpZXdDaGlsZHJlbn0sIHtAbGluayBDb250ZW50Q2hpbGRyZW59LCBhbmQge0BsaW5rIFF1ZXJ5TGlzdH1cbiAqIHByb3ZpZGUuXG4gKlxuICogSW1wbGVtZW50cyBhbiBpdGVyYWJsZSBpbnRlcmZhY2UsIHRoZXJlZm9yZSBpdCBjYW4gYmUgdXNlZCBpbiBib3RoIEVTNlxuICogamF2YXNjcmlwdCBgZm9yICh2YXIgaSBvZiBpdGVtcylgIGxvb3BzIGFzIHdlbGwgYXMgaW4gQW5ndWxhciB0ZW1wbGF0ZXMgd2l0aFxuICogYCpuZ0Zvcj1cImxldCBpIG9mIG15TGlzdFwiYC5cbiAqXG4gKiBDaGFuZ2VzIGNhbiBiZSBvYnNlcnZlZCBieSBzdWJzY3JpYmluZyB0byB0aGUgY2hhbmdlcyBgT2JzZXJ2YWJsZWAuXG4gKlxuICogTk9URTogSW4gdGhlIGZ1dHVyZSB0aGlzIGNsYXNzIHdpbGwgaW1wbGVtZW50IGFuIGBPYnNlcnZhYmxlYCBpbnRlcmZhY2UuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBAQ29tcG9uZW50KHsuLi59KVxuICogY2xhc3MgQ29udGFpbmVyIHtcbiAqICAgQFZpZXdDaGlsZHJlbihJdGVtKSBpdGVtczpRdWVyeUxpc3Q8SXRlbT47XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjbGFzcyBRdWVyeUxpc3Q8VD4vKiBpbXBsZW1lbnRzIEl0ZXJhYmxlPFQ+ICovIHtcbiAgcHVibGljIHJlYWRvbmx5IGRpcnR5ID0gdHJ1ZTtcbiAgcHJpdmF0ZSBfcmVzdWx0czogQXJyYXk8VD4gPSBbXTtcbiAgcHVibGljIHJlYWRvbmx5IGNoYW5nZXM6IE9ic2VydmFibGU8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICByZWFkb25seSBsZW5ndGg6IG51bWJlciA9IDA7XG4gIC8vIFRPRE8oaXNzdWUvMjQ1NzEpOiByZW1vdmUgJyEnLlxuICByZWFkb25seSBmaXJzdCAhOiBUO1xuICAvLyBUT0RPKGlzc3VlLzI0NTcxKTogcmVtb3ZlICchJy5cbiAgcmVhZG9ubHkgbGFzdCAhOiBUO1xuXG4gIC8qKlxuICAgKiBTZWVcbiAgICogW0FycmF5Lm1hcF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvbWFwKVxuICAgKi9cbiAgbWFwPFU+KGZuOiAoaXRlbTogVCwgaW5kZXg6IG51bWJlciwgYXJyYXk6IFRbXSkgPT4gVSk6IFVbXSB7IHJldHVybiB0aGlzLl9yZXN1bHRzLm1hcChmbik7IH1cblxuICAvKipcbiAgICogU2VlXG4gICAqIFtBcnJheS5maWx0ZXJdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2ZpbHRlcilcbiAgICovXG4gIGZpbHRlcihmbjogKGl0ZW06IFQsIGluZGV4OiBudW1iZXIsIGFycmF5OiBUW10pID0+IGJvb2xlYW4pOiBUW10ge1xuICAgIHJldHVybiB0aGlzLl9yZXN1bHRzLmZpbHRlcihmbik7XG4gIH1cblxuICAvKipcbiAgICogU2VlXG4gICAqIFtBcnJheS5maW5kXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9maW5kKVxuICAgKi9cbiAgZmluZChmbjogKGl0ZW06IFQsIGluZGV4OiBudW1iZXIsIGFycmF5OiBUW10pID0+IGJvb2xlYW4pOiBUfHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc3VsdHMuZmluZChmbik7XG4gIH1cblxuICAvKipcbiAgICogU2VlXG4gICAqIFtBcnJheS5yZWR1Y2VdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L3JlZHVjZSlcbiAgICovXG4gIHJlZHVjZTxVPihmbjogKHByZXZWYWx1ZTogVSwgY3VyVmFsdWU6IFQsIGN1ckluZGV4OiBudW1iZXIsIGFycmF5OiBUW10pID0+IFUsIGluaXQ6IFUpOiBVIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzdWx0cy5yZWR1Y2UoZm4sIGluaXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlZVxuICAgKiBbQXJyYXkuZm9yRWFjaF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZm9yRWFjaClcbiAgICovXG4gIGZvckVhY2goZm46IChpdGVtOiBULCBpbmRleDogbnVtYmVyLCBhcnJheTogVFtdKSA9PiB2b2lkKTogdm9pZCB7IHRoaXMuX3Jlc3VsdHMuZm9yRWFjaChmbik7IH1cblxuICAvKipcbiAgICogU2VlXG4gICAqIFtBcnJheS5zb21lXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9zb21lKVxuICAgKi9cbiAgc29tZShmbjogKHZhbHVlOiBULCBpbmRleDogbnVtYmVyLCBhcnJheTogVFtdKSA9PiBib29sZWFuKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc3VsdHMuc29tZShmbik7XG4gIH1cblxuICB0b0FycmF5KCk6IFRbXSB7IHJldHVybiB0aGlzLl9yZXN1bHRzLnNsaWNlKCk7IH1cblxuICBbZ2V0U3ltYm9sSXRlcmF0b3IoKV0oKTogSXRlcmF0b3I8VD4geyByZXR1cm4gKHRoaXMuX3Jlc3VsdHMgYXMgYW55KVtnZXRTeW1ib2xJdGVyYXRvcigpXSgpOyB9XG5cbiAgdG9TdHJpbmcoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuX3Jlc3VsdHMudG9TdHJpbmcoKTsgfVxuXG4gIHJlc2V0KHJlczogQXJyYXk8VHxhbnlbXT4pOiB2b2lkIHtcbiAgICB0aGlzLl9yZXN1bHRzID0gZmxhdHRlbihyZXMpO1xuICAgICh0aGlzIGFze2RpcnR5OiBib29sZWFufSkuZGlydHkgPSBmYWxzZTtcbiAgICAodGhpcyBhc3tsZW5ndGg6IG51bWJlcn0pLmxlbmd0aCA9IHRoaXMuX3Jlc3VsdHMubGVuZ3RoO1xuICAgICh0aGlzIGFze2xhc3Q6IFR9KS5sYXN0ID0gdGhpcy5fcmVzdWx0c1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgICh0aGlzIGFze2ZpcnN0OiBUfSkuZmlyc3QgPSB0aGlzLl9yZXN1bHRzWzBdO1xuICB9XG5cbiAgbm90aWZ5T25DaGFuZ2VzKCk6IHZvaWQgeyAodGhpcy5jaGFuZ2VzIGFzIEV2ZW50RW1pdHRlcjxhbnk+KS5lbWl0KHRoaXMpOyB9XG5cbiAgLyoqIGludGVybmFsICovXG4gIHNldERpcnR5KCkgeyAodGhpcyBhc3tkaXJ0eTogYm9vbGVhbn0pLmRpcnR5ID0gdHJ1ZTsgfVxuXG4gIC8qKiBpbnRlcm5hbCAqL1xuICBkZXN0cm95KCk6IHZvaWQge1xuICAgICh0aGlzLmNoYW5nZXMgYXMgRXZlbnRFbWl0dGVyPGFueT4pLmNvbXBsZXRlKCk7XG4gICAgKHRoaXMuY2hhbmdlcyBhcyBFdmVudEVtaXR0ZXI8YW55PikudW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmbGF0dGVuPFQ+KGxpc3Q6IEFycmF5PFR8VFtdPik6IFRbXSB7XG4gIHJldHVybiBsaXN0LnJlZHVjZSgoZmxhdDogYW55W10sIGl0ZW06IFQgfCBUW10pOiBUW10gPT4ge1xuICAgIGNvbnN0IGZsYXRJdGVtID0gQXJyYXkuaXNBcnJheShpdGVtKSA/IGZsYXR0ZW4oaXRlbSkgOiBpdGVtO1xuICAgIHJldHVybiAoPFRbXT5mbGF0KS5jb25jYXQoZmxhdEl0ZW0pO1xuICB9LCBbXSk7XG59XG4iXX0=","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// We are temporarily importing the existing viewEngine_from core so we can be sure we are\n// correctly implementing its interfaces for backwards compatibility.\nimport { ElementRef as ViewEngine_ElementRef } from '../linker/element_ref';\nimport { QueryList } from '../linker/query_list';\nimport { TemplateRef as ViewEngine_TemplateRef } from '../linker/template_ref';\nimport { assertDataInRange, assertDefined, assertEqual } from '../util/assert';\nimport { assertPreviousIsParent } from './assert';\nimport { getNodeInjectable, locateDirectiveOrProvider } from './di';\nimport { NG_ELEMENT_ID } from './fields';\nimport { load, store, storeCleanupWithContext } from './instructions';\nimport { unusedValueExportToPlacateAjd as unused1 } from './interfaces/definition';\nimport { unusedValueExportToPlacateAjd as unused2 } from './interfaces/injector';\nimport { unusedValueExportToPlacateAjd as unused3 } from './interfaces/node';\nimport { unusedValueExportToPlacateAjd as unused4 } from './interfaces/query';\nimport { CONTENT_QUERIES, HEADER_OFFSET, QUERIES, TVIEW } from './interfaces/view';\nimport { getCurrentQueryIndex, getIsParent, getLView, isCreationMode, setCurrentQueryIndex } from './state';\nimport { createElementRef, createTemplateRef } from './view_engine_compatibility';\n/** @type {?} */\nconst unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4;\n/**\n * A predicate which determines if a given element/directive should be included in the query\n * results.\n * @record\n * @template T\n */\nexport function QueryPredicate() { }\nif (false) {\n    /**\n     * If looking for directives then it contains the directive type.\n     * @type {?}\n     */\n    QueryPredicate.prototype.type;\n    /**\n     * If selector then contains local names to query for.\n     * @type {?}\n     */\n    QueryPredicate.prototype.selector;\n    /**\n     * Indicates which token should be read from DI for this query.\n     * @type {?}\n     */\n    QueryPredicate.prototype.read;\n}\n/**\n * An object representing a query, which is a combination of:\n * - query predicate to determines if a given element/directive should be included in the query\n * - values collected based on a predicate\n * - `QueryList` to which collected values should be reported\n * @record\n * @template T\n */\nexport function LQuery() { }\nif (false) {\n    /**\n     * Next query. Used when queries are stored as a linked list in `LQueries`.\n     * @type {?}\n     */\n    LQuery.prototype.next;\n    /**\n     * Destination to which the value should be added.\n     * @type {?}\n     */\n    LQuery.prototype.list;\n    /**\n     * A predicate which determines if a given element/directive should be included in the query\n     * results.\n     * @type {?}\n     */\n    LQuery.prototype.predicate;\n    /**\n     * Values which have been located.\n     *\n     * This is what builds up the `QueryList._valuesTree`.\n     * @type {?}\n     */\n    LQuery.prototype.values;\n    /**\n     * A pointer to an array that stores collected values from views. This is necessary so we know a\n     * container into which to insert nodes collected from views.\n     * @type {?}\n     */\n    LQuery.prototype.containerValues;\n}\nexport class LQueries_ {\n    /**\n     * @param {?} parent\n     * @param {?} shallow\n     * @param {?} deep\n     */\n    constructor(parent, shallow, deep) {\n        this.parent = parent;\n        this.shallow = shallow;\n        this.deep = deep;\n    }\n    /**\n     * @template T\n     * @param {?} queryList\n     * @param {?} predicate\n     * @param {?=} descend\n     * @param {?=} read\n     * @return {?}\n     */\n    track(queryList, predicate, descend, read) {\n        if (descend) {\n            this.deep = createQuery(this.deep, queryList, predicate, read != null ? read : null);\n        }\n        else {\n            this.shallow = createQuery(this.shallow, queryList, predicate, read != null ? read : null);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    clone() { return new LQueries_(this, null, this.deep); }\n    /**\n     * @return {?}\n     */\n    container() {\n        /** @type {?} */\n        const shallowResults = copyQueriesToContainer(this.shallow);\n        /** @type {?} */\n        const deepResults = copyQueriesToContainer(this.deep);\n        return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n    }\n    /**\n     * @return {?}\n     */\n    createView() {\n        /** @type {?} */\n        const shallowResults = copyQueriesToView(this.shallow);\n        /** @type {?} */\n        const deepResults = copyQueriesToView(this.deep);\n        return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    insertView(index) {\n        insertView(index, this.shallow);\n        insertView(index, this.deep);\n    }\n    /**\n     * @param {?} tNode\n     * @return {?}\n     */\n    addNode(tNode) {\n        add(this.deep, tNode);\n        add(this.shallow, tNode);\n    }\n    /**\n     * @return {?}\n     */\n    removeView() {\n        removeView(this.shallow);\n        removeView(this.deep);\n    }\n}\nif (false) {\n    /** @type {?} */\n    LQueries_.prototype.parent;\n    /**\n     * @type {?}\n     * @private\n     */\n    LQueries_.prototype.shallow;\n    /**\n     * @type {?}\n     * @private\n     */\n    LQueries_.prototype.deep;\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction copyQueriesToContainer(query) {\n    /** @type {?} */\n    let result = null;\n    while (query) {\n        /** @type {?} */\n        const containerValues = [];\n        query.values.push(containerValues);\n        /** @type {?} */\n        const clonedQuery = {\n            next: result,\n            list: query.list,\n            predicate: query.predicate,\n            values: containerValues,\n            containerValues: null\n        };\n        result = clonedQuery;\n        query = query.next;\n    }\n    return result;\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction copyQueriesToView(query) {\n    /** @type {?} */\n    let result = null;\n    while (query) {\n        /** @type {?} */\n        const clonedQuery = {\n            next: result,\n            list: query.list,\n            predicate: query.predicate,\n            values: [],\n            containerValues: query.values\n        };\n        result = clonedQuery;\n        query = query.next;\n    }\n    return result;\n}\n/**\n * @param {?} index\n * @param {?} query\n * @return {?}\n */\nfunction insertView(index, query) {\n    while (query) {\n        ngDevMode && assertViewQueryhasPointerToDeclarationContainer(query);\n        (/** @type {?} */ (query.containerValues)).splice(index, 0, query.values);\n        // mark a query as dirty only when inserted view had matching modes\n        if (query.values.length) {\n            query.list.setDirty();\n        }\n        query = query.next;\n    }\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction removeView(query) {\n    while (query) {\n        ngDevMode && assertViewQueryhasPointerToDeclarationContainer(query);\n        /** @type {?} */\n        const containerValues = (/** @type {?} */ (query.containerValues));\n        /** @type {?} */\n        const viewValuesIdx = containerValues.indexOf(query.values);\n        /** @type {?} */\n        const removed = containerValues.splice(viewValuesIdx, 1);\n        // mark a query as dirty only when removed view had matching modes\n        ngDevMode && assertEqual(removed.length, 1, 'removed.length');\n        if (removed[0].length) {\n            query.list.setDirty();\n        }\n        query = query.next;\n    }\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction assertViewQueryhasPointerToDeclarationContainer(query) {\n    assertDefined(query.containerValues, 'View queries need to have a pointer to container values.');\n}\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param {?} tNode static data of a node to check\n * @param {?} selector selector to match\n * @return {?} directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode, selector) {\n    /** @type {?} */\n    const localNames = tNode.localNames;\n    if (localNames) {\n        for (let i = 0; i < localNames.length; i += 2) {\n            if (localNames[i] === selector) {\n                return (/** @type {?} */ (localNames[i + 1]));\n            }\n        }\n    }\n    return null;\n}\n// TODO: \"read\" should be an AbstractType (FW-486)\n/**\n * @param {?} read\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction queryByReadToken(read, tNode, currentView) {\n    /** @type {?} */\n    const factoryFn = ((/** @type {?} */ (read)))[NG_ELEMENT_ID];\n    if (typeof factoryFn === 'function') {\n        return factoryFn();\n    }\n    else {\n        /** @type {?} */\n        const matchingIdx = locateDirectiveOrProvider(tNode, currentView, (/** @type {?} */ (read)), false, false);\n        if (matchingIdx !== null) {\n            return getNodeInjectable(currentView[TVIEW].data, currentView, matchingIdx, (/** @type {?} */ (tNode)));\n        }\n    }\n    return null;\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction queryByTNodeType(tNode, currentView) {\n    if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n        return createElementRef(ViewEngine_ElementRef, tNode, currentView);\n    }\n    if (tNode.type === 0 /* Container */) {\n        return createTemplateRef(ViewEngine_TemplateRef, ViewEngine_ElementRef, tNode, currentView);\n    }\n    return null;\n}\n/**\n * @param {?} templateRefToken\n * @param {?} tNode\n * @param {?} currentView\n * @param {?} read\n * @return {?}\n */\nfunction queryByTemplateRef(templateRefToken, tNode, currentView, read) {\n    /** @type {?} */\n    const templateRefResult = ((/** @type {?} */ (templateRefToken)))[NG_ELEMENT_ID]();\n    if (read) {\n        return templateRefResult ? queryByReadToken(read, tNode, currentView) : null;\n    }\n    return templateRefResult;\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @param {?} read\n * @param {?} matchingIdx\n * @return {?}\n */\nfunction queryRead(tNode, currentView, read, matchingIdx) {\n    if (read) {\n        return queryByReadToken(read, tNode, currentView);\n    }\n    if (matchingIdx > -1) {\n        return getNodeInjectable(currentView[TVIEW].data, currentView, matchingIdx, (/** @type {?} */ (tNode)));\n    }\n    // if read token and / or strategy is not specified,\n    // detect it using appropriate tNode type\n    return queryByTNodeType(tNode, currentView);\n}\n/**\n * @param {?} query\n * @param {?} tNode\n * @return {?}\n */\nfunction add(query, tNode) {\n    /** @type {?} */\n    const currentView = getLView();\n    while (query) {\n        /** @type {?} */\n        const predicate = query.predicate;\n        /** @type {?} */\n        const type = (/** @type {?} */ (predicate.type));\n        if (type) {\n            /** @type {?} */\n            let result = null;\n            if (type === ViewEngine_TemplateRef) {\n                result = queryByTemplateRef(type, tNode, currentView, predicate.read);\n            }\n            else {\n                /** @type {?} */\n                const matchingIdx = locateDirectiveOrProvider(tNode, currentView, type, false, false);\n                if (matchingIdx !== null) {\n                    result = queryRead(tNode, currentView, predicate.read, matchingIdx);\n                }\n            }\n            if (result !== null) {\n                addMatch(query, result);\n            }\n        }\n        else {\n            /** @type {?} */\n            const selector = (/** @type {?} */ (predicate.selector));\n            for (let i = 0; i < selector.length; i++) {\n                /** @type {?} */\n                const matchingIdx = getIdxOfMatchingSelector(tNode, selector[i]);\n                if (matchingIdx !== null) {\n                    /** @type {?} */\n                    const result = queryRead(tNode, currentView, predicate.read, matchingIdx);\n                    if (result !== null) {\n                        addMatch(query, result);\n                    }\n                }\n            }\n        }\n        query = query.next;\n    }\n}\n/**\n * @param {?} query\n * @param {?} matchingValue\n * @return {?}\n */\nfunction addMatch(query, matchingValue) {\n    query.values.push(matchingValue);\n    query.list.setDirty();\n}\n/**\n * @template T\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createPredicate(predicate, read) {\n    /** @type {?} */\n    const isArray = Array.isArray(predicate);\n    return {\n        type: isArray ? null : (/** @type {?} */ (predicate)),\n        selector: isArray ? (/** @type {?} */ (predicate)) : null,\n        read: read\n    };\n}\n/**\n * @template T\n * @param {?} previous\n * @param {?} queryList\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createQuery(previous, queryList, predicate, read) {\n    return {\n        next: previous,\n        list: queryList,\n        predicate: createPredicate(predicate, read),\n        values: ((/** @type {?} */ ((/** @type {?} */ (queryList)))))._valuesTree,\n        containerValues: null\n    };\n}\n/**\n * Creates and returns a QueryList.\n *\n * @template T\n * @param {?} predicate The type for which the query will search\n * @param {?} descend Whether or not to descend into children\n * @param {?} read What to save in the query\n * @return {?} QueryList<T>\n */\nexport function query(\n// TODO: \"read\" should be an AbstractType (FW-486)\npredicate, descend, read) {\n    ngDevMode && assertPreviousIsParent(getIsParent());\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const queryList = (/** @type {?} */ (new QueryList()));\n    /** @type {?} */\n    const queries = lView[QUERIES] || (lView[QUERIES] = new LQueries_(null, null, null));\n    queryList._valuesTree = [];\n    queryList._static = false;\n    queries.track(queryList, predicate, descend, read);\n    storeCleanupWithContext(lView, queryList, queryList.destroy);\n    return queryList;\n}\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n * Returns true if a query got dirty during change detection, false otherwise.\n * @param {?} queryList\n * @return {?}\n */\nexport function queryRefresh(queryList) {\n    /** @type {?} */\n    const queryListImpl = ((/** @type {?} */ ((/** @type {?} */ (queryList)))));\n    /** @type {?} */\n    const creationMode = isCreationMode();\n    // if creation mode and static or update mode and not static\n    if (queryList.dirty && creationMode === queryListImpl._static) {\n        queryList.reset(queryListImpl._valuesTree || []);\n        queryList.notifyOnChanges();\n        return true;\n    }\n    return false;\n}\n/**\n * Creates new QueryList for a static view query.\n *\n * @template T\n * @param {?} predicate The type for which the query will search\n * @param {?} descend Whether or not to descend into children\n * @param {?} read What to save in the query\n * @return {?}\n */\nexport function staticViewQuery(\n// TODO(FW-486): \"read\" should be an AbstractType\npredicate, descend, read) {\n    /** @type {?} */\n    const queryList = (/** @type {?} */ (viewQuery(predicate, descend, read)));\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    queryList._static = true;\n    if (!tView.staticViewQueries) {\n        tView.staticViewQueries = true;\n    }\n}\n/**\n * Creates new QueryList, stores the reference in LView and returns QueryList.\n *\n * @template T\n * @param {?} predicate The type for which the query will search\n * @param {?} descend Whether or not to descend into children\n * @param {?} read What to save in the query\n * @return {?} QueryList<T>\n */\nexport function viewQuery(\n// TODO(FW-486): \"read\" should be an AbstractType\npredicate, descend, read) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (tView.firstTemplatePass) {\n        tView.expandoStartIndex++;\n    }\n    /** @type {?} */\n    const index = getCurrentQueryIndex();\n    /** @type {?} */\n    const viewQuery = query(predicate, descend, read);\n    store(index - HEADER_OFFSET, viewQuery);\n    setCurrentQueryIndex(index + 1);\n    return viewQuery;\n}\n/**\n * Loads current View Query and moves the pointer/index to the next View Query in LView.\n * @template T\n * @return {?}\n */\nexport function loadViewQuery() {\n    /** @type {?} */\n    const index = getCurrentQueryIndex();\n    setCurrentQueryIndex(index + 1);\n    return load(index - HEADER_OFFSET);\n}\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n *\n * @template T\n * @param {?} directiveIndex Current directive index\n * @param {?} predicate The type for which the query will search\n * @param {?} descend Whether or not to descend into children\n * @param {?} read What to save in the query\n * @return {?} QueryList<T>\n */\nexport function contentQuery(directiveIndex, predicate, descend, \n// TODO(FW-486): \"read\" should be an AbstractType\nread) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const contentQuery = query(predicate, descend, read);\n    (lView[CONTENT_QUERIES] || (lView[CONTENT_QUERIES] = [])).push(contentQuery);\n    if (tView.firstTemplatePass) {\n        /** @type {?} */\n        const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n        /** @type {?} */\n        const lastSavedDirectiveIndex = tView.contentQueries.length ? tView.contentQueries[tView.contentQueries.length - 1] : -1;\n        if (directiveIndex !== lastSavedDirectiveIndex) {\n            tViewContentQueries.push(directiveIndex);\n        }\n    }\n    return contentQuery;\n}\n/**\n * Registers a QueryList, associated with a static content query, for later refresh\n * (part of a view refresh).\n *\n * @template T\n * @param {?} directiveIndex Current directive index\n * @param {?} predicate The type for which the query will search\n * @param {?} descend Whether or not to descend into children\n * @param {?} read What to save in the query\n * @return {?} QueryList<T>\n */\nexport function staticContentQuery(directiveIndex, predicate, descend, \n// TODO(FW-486): \"read\" should be an AbstractType\nread) {\n    /** @type {?} */\n    const queryList = (/** @type {?} */ (contentQuery(directiveIndex, predicate, descend, read)));\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    queryList._static = true;\n    if (!tView.staticContentQueries) {\n        tView.staticContentQueries = true;\n    }\n}\n/**\n * @template T\n * @return {?}\n */\nexport function loadContentQuery() {\n    /** @type {?} */\n    const lView = getLView();\n    ngDevMode &&\n        assertDefined(lView[CONTENT_QUERIES], 'Content QueryList array should be defined if reading a query.');\n    /** @type {?} */\n    const index = getCurrentQueryIndex();\n    ngDevMode && assertDataInRange((/** @type {?} */ (lView[CONTENT_QUERIES])), index);\n    setCurrentQueryIndex(index + 1);\n    return (/** @type {?} */ (lView[CONTENT_QUERIES]))[index];\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.\n *\n * For more information on how to run and debug tests with either Ivy or View Engine (legacy),\n * please see [BAZEL.md](./docs/BAZEL.md).\n */\nlet _devMode = true;\nlet _runModeLocked = false;\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n *\n * @publicApi\n */\nexport function isDevMode() {\n    _runModeLocked = true;\n    return _devMode;\n}\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * @publicApi\n */\nexport function enableProdMode() {\n    if (_runModeLocked) {\n        throw new Error('Cannot enable prod mode after platform setup.');\n    }\n    _devMode = false;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNfZGV2X21vZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy91dGlsL2lzX2Rldl9tb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVIOzs7OztHQUtHO0FBRUgsSUFBSSxRQUFRLEdBQVksSUFBSSxDQUFDO0FBQzdCLElBQUksY0FBYyxHQUFZLEtBQUssQ0FBQztBQUdwQzs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLFNBQVM7SUFDdkIsY0FBYyxHQUFHLElBQUksQ0FBQztJQUN0QixPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxVQUFVLGNBQWM7SUFDNUIsSUFBSSxjQUFjLEVBQUU7UUFDbEIsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0tBQ2xFO0lBQ0QsUUFBUSxHQUFHLEtBQUssQ0FBQztBQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vKipcbiAqIFRoaXMgZmlsZSBpcyB1c2VkIHRvIGNvbnRyb2wgaWYgdGhlIGRlZmF1bHQgcmVuZGVyaW5nIHBpcGVsaW5lIHNob3VsZCBiZSBgVmlld0VuZ2luZWAgb3IgYEl2eWAuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gaG93IHRvIHJ1biBhbmQgZGVidWcgdGVzdHMgd2l0aCBlaXRoZXIgSXZ5IG9yIFZpZXcgRW5naW5lIChsZWdhY3kpLFxuICogcGxlYXNlIHNlZSBbQkFaRUwubWRdKC4vZG9jcy9CQVpFTC5tZCkuXG4gKi9cblxubGV0IF9kZXZNb2RlOiBib29sZWFuID0gdHJ1ZTtcbmxldCBfcnVuTW9kZUxvY2tlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIEFuZ3VsYXIgaXMgaW4gZGV2ZWxvcG1lbnQgbW9kZS4gQWZ0ZXIgY2FsbGVkIG9uY2UsXG4gKiB0aGUgdmFsdWUgaXMgbG9ja2VkIGFuZCB3b24ndCBjaGFuZ2UgYW55IG1vcmUuXG4gKlxuICogQnkgZGVmYXVsdCwgdGhpcyBpcyB0cnVlLCB1bmxlc3MgYSB1c2VyIGNhbGxzIGBlbmFibGVQcm9kTW9kZWAgYmVmb3JlIGNhbGxpbmcgdGhpcy5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Rldk1vZGUoKTogYm9vbGVhbiB7XG4gIF9ydW5Nb2RlTG9ja2VkID0gdHJ1ZTtcbiAgcmV0dXJuIF9kZXZNb2RlO1xufVxuXG4vKipcbiAqIERpc2FibGUgQW5ndWxhcidzIGRldmVsb3BtZW50IG1vZGUsIHdoaWNoIHR1cm5zIG9mZiBhc3NlcnRpb25zIGFuZCBvdGhlclxuICogY2hlY2tzIHdpdGhpbiB0aGUgZnJhbWV3b3JrLlxuICpcbiAqIE9uZSBpbXBvcnRhbnQgYXNzZXJ0aW9uIHRoaXMgZGlzYWJsZXMgdmVyaWZpZXMgdGhhdCBhIGNoYW5nZSBkZXRlY3Rpb24gcGFzc1xuICogZG9lcyBub3QgcmVzdWx0IGluIGFkZGl0aW9uYWwgY2hhbmdlcyB0byBhbnkgYmluZGluZ3MgKGFsc28ga25vd24gYXNcbiAqIHVuaWRpcmVjdGlvbmFsIGRhdGEgZmxvdykuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlUHJvZE1vZGUoKTogdm9pZCB7XG4gIGlmIChfcnVuTW9kZUxvY2tlZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGVuYWJsZSBwcm9kIG1vZGUgYWZ0ZXIgcGxhdGZvcm0gc2V0dXAuJyk7XG4gIH1cbiAgX2Rldk1vZGUgPSBmYWxzZTtcbn0iXX0=","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nexport class InertBodyHelper {\n    /**\n     * @param {?} defaultDoc\n     */\n    constructor(defaultDoc) {\n        this.defaultDoc = defaultDoc;\n        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n        this.inertBodyElement = this.inertDocument.body;\n        if (this.inertBodyElement == null) {\n            // usually there should be only one body element in the document, but IE doesn't have any, so\n            // we need to create one.\n            /** @type {?} */\n            const inertHtml = this.inertDocument.createElement('html');\n            this.inertDocument.appendChild(inertHtml);\n            this.inertBodyElement = this.inertDocument.createElement('body');\n            inertHtml.appendChild(this.inertBodyElement);\n        }\n        this.inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n        if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {\n            // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element\n            // so use the XHR strategy.\n            this.getInertBodyElement = this.getInertBodyElement_XHR;\n            return;\n        }\n        this.inertBodyElement.innerHTML =\n            '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n        if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {\n            // We just hit the Firefox bug - which prevents the inner img JS from being sanitized\n            // so use the DOMParser strategy, if it is available.\n            // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we\n            // fall through to the default strategy below.\n            if (isDOMParserAvailable()) {\n                this.getInertBodyElement = this.getInertBodyElement_DOMParser;\n                return;\n            }\n        }\n        // None of the bugs were hit so it is safe for us to use the default InertDocument strategy\n        this.getInertBodyElement = this.getInertBodyElement_InertDocument;\n    }\n    /**\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\n     * See\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n     * @private\n     * @param {?} html\n     * @return {?}\n     */\n    getInertBodyElement_XHR(html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            html = encodeURI(html);\n        }\n        catch (_a) {\n            return null;\n        }\n        /** @type {?} */\n        const xhr = new XMLHttpRequest();\n        xhr.responseType = 'document';\n        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n        xhr.send(undefined);\n        /** @type {?} */\n        const body = xhr.response.body;\n        body.removeChild((/** @type {?} */ (body.firstChild)));\n        return body;\n    }\n    /**\n     * Use DOMParser to create and fill an inert body element (on Firefox)\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n     *\n     * @private\n     * @param {?} html\n     * @return {?}\n     */\n    getInertBodyElement_DOMParser(html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            /** @type {?} */\n            const body = (/** @type {?} */ (new ((/** @type {?} */ (window)))\n                .DOMParser()\n                .parseFromString(html, 'text/html')\n                .body));\n            body.removeChild((/** @type {?} */ (body.firstChild)));\n            return body;\n        }\n        catch (_a) {\n            return null;\n        }\n    }\n    /**\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\n     * `createHtmlDocument` to create and fill an inert DOM element.\n     * This is the default sane strategy to use if the browser does not require one of the specialised\n     * strategies above.\n     * @private\n     * @param {?} html\n     * @return {?}\n     */\n    getInertBodyElement_InertDocument(html) {\n        // Prefer using <template> element if supported.\n        /** @type {?} */\n        const templateEl = this.inertDocument.createElement('template');\n        if ('content' in templateEl) {\n            templateEl.innerHTML = html;\n            return templateEl;\n        }\n        this.inertBodyElement.innerHTML = html;\n        // Support: IE 9-11 only\n        // strip custom-namespaced attributes on IE<=11\n        if (((/** @type {?} */ (this.defaultDoc))).documentMode) {\n            this.stripCustomNsAttrs(this.inertBodyElement);\n        }\n        return this.inertBodyElement;\n    }\n    /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     * @private\n     * @param {?} el\n     * @return {?}\n     */\n    stripCustomNsAttrs(el) {\n        /** @type {?} */\n        const elAttrs = el.attributes;\n        // loop backwards so that we can support removals.\n        for (let i = elAttrs.length - 1; 0 < i; i--) {\n            /** @type {?} */\n            const attrib = elAttrs.item(i);\n            /** @type {?} */\n            const attrName = (/** @type {?} */ (attrib)).name;\n            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n                el.removeAttribute(attrName);\n            }\n        }\n        /** @type {?} */\n        let childNode = (/** @type {?} */ (el.firstChild));\n        while (childNode) {\n            if (childNode.nodeType === Node.ELEMENT_NODE)\n                this.stripCustomNsAttrs((/** @type {?} */ (childNode)));\n            childNode = childNode.nextSibling;\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    InertBodyHelper.prototype.inertBodyElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    InertBodyHelper.prototype.inertDocument;\n    /**\n     * Get an inert DOM element containing DOM created from the dirty HTML string provided.\n     * The implementation of this is determined in the constructor, when the class is instantiated.\n     * @type {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    InertBodyHelper.prototype.defaultDoc;\n}\n/**\n * We need to determine whether the DOMParser exists in the global context.\n * The try-catch is because, on some browsers, trying to access this property\n * on window can actually throw an error.\n *\n * @suppress {uselessCode}\n * @return {?}\n */\nfunction isDOMParserAvailable() {\n    try {\n        return !!((/** @type {?} */ (window))).DOMParser;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5lcnRfYm9keS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3Nhbml0aXphdGlvbi9pbmVydF9ib2R5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQkEsTUFBTSxPQUFPLGVBQWU7Ozs7SUFJMUIsWUFBb0IsVUFBb0I7UUFBcEIsZUFBVSxHQUFWLFVBQVUsQ0FBVTtRQUN0QyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLGtCQUFrQixDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDN0YsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO1FBRWhELElBQUksSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksRUFBRTs7OztrQkFHM0IsU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQztZQUMxRCxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUMxQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDakUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUM5QztRQUVELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEdBQUcsc0RBQXNELENBQUM7UUFDekYsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN0RixvRkFBb0Y7WUFDcEYsMkJBQTJCO1lBQzNCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUM7WUFDeEQsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVM7WUFDM0Isa0VBQWtFLENBQUM7UUFDdkUsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDekYscUZBQXFGO1lBQ3JGLHFEQUFxRDtZQUNyRCx5RkFBeUY7WUFDekYsOENBQThDO1lBQzlDLElBQUksb0JBQW9CLEVBQUUsRUFBRTtnQkFDMUIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyw2QkFBNkIsQ0FBQztnQkFDOUQsT0FBTzthQUNSO1NBQ0Y7UUFFRCwyRkFBMkY7UUFDM0YsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQztJQUNwRSxDQUFDOzs7Ozs7Ozs7SUFhTyx1QkFBdUIsQ0FBQyxJQUFZO1FBQzFDLDJGQUEyRjtRQUMzRix5RkFBeUY7UUFDekYsZ0JBQWdCO1FBQ2hCLElBQUksR0FBRyx5QkFBeUIsR0FBRyxJQUFJLEdBQUcsU0FBUyxDQUFDO1FBQ3BELElBQUk7WUFDRixJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3hCO1FBQUMsV0FBTTtZQUNOLE9BQU8sSUFBSSxDQUFDO1NBQ2I7O2NBQ0ssR0FBRyxHQUFHLElBQUksY0FBYyxFQUFFO1FBQ2hDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsVUFBVSxDQUFDO1FBQzlCLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLCtCQUErQixHQUFHLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMvRCxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDOztjQUNkLElBQUksR0FBb0IsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJO1FBQy9DLElBQUksQ0FBQyxXQUFXLENBQUMsbUJBQUEsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFDcEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7Ozs7Ozs7SUFPTyw2QkFBNkIsQ0FBQyxJQUFZO1FBQ2hELDJGQUEyRjtRQUMzRix5RkFBeUY7UUFDekYsZ0JBQWdCO1FBQ2hCLElBQUksR0FBRyx5QkFBeUIsR0FBRyxJQUFJLEdBQUcsU0FBUyxDQUFDO1FBQ3BELElBQUk7O2tCQUNJLElBQUksR0FBRyxtQkFBQSxJQUFJLENBQUMsbUJBQUEsTUFBTSxFQUFPLENBQUM7aUJBQ2QsU0FBUyxFQUFFO2lCQUNYLGVBQWUsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDO2lCQUNsQyxJQUFJLEVBQW1CO1lBQ3pDLElBQUksQ0FBQyxXQUFXLENBQUMsbUJBQUEsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7WUFDcEMsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUFDLFdBQU07WUFDTixPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQzs7Ozs7Ozs7OztJQVFPLGlDQUFpQyxDQUFDLElBQVk7OztjQUU5QyxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDO1FBQy9ELElBQUksU0FBUyxJQUFJLFVBQVUsRUFBRTtZQUMzQixVQUFVLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztZQUM1QixPQUFPLFVBQVUsQ0FBQztTQUNuQjtRQUVELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBRXZDLHdCQUF3QjtRQUN4QiwrQ0FBK0M7UUFDL0MsSUFBSSxDQUFDLG1CQUFBLElBQUksQ0FBQyxVQUFVLEVBQU8sQ0FBQyxDQUFDLFlBQVksRUFBRTtZQUN6QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDaEQ7UUFFRCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUMvQixDQUFDOzs7Ozs7Ozs7Ozs7SUFVTyxrQkFBa0IsQ0FBQyxFQUFXOztjQUM5QixPQUFPLEdBQUcsRUFBRSxDQUFDLFVBQVU7UUFDN0Isa0RBQWtEO1FBQ2xELEtBQUssSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTs7a0JBQ3JDLE1BQU0sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzs7a0JBQ3hCLFFBQVEsR0FBRyxtQkFBQSxNQUFNLEVBQUUsQ0FBQyxJQUFJO1lBQzlCLElBQUksUUFBUSxLQUFLLFdBQVcsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDOUQsRUFBRSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUM5QjtTQUNGOztZQUNHLFNBQVMsR0FBRyxtQkFBQSxFQUFFLENBQUMsVUFBVSxFQUFlO1FBQzVDLE9BQU8sU0FBUyxFQUFFO1lBQ2hCLElBQUksU0FBUyxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsWUFBWTtnQkFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsbUJBQUEsU0FBUyxFQUFXLENBQUMsQ0FBQztZQUM1RixTQUFTLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQztTQUNuQztJQUNILENBQUM7Q0FDRjs7Ozs7O0lBOUlDLDJDQUFzQzs7Ozs7SUFDdEMsd0NBQWdDOzs7Ozs7SUE0Q2hDLDhDQUEwRDs7Ozs7SUExQzlDLHFDQUE0Qjs7Ozs7Ozs7OztBQW9KMUMsU0FBUyxvQkFBb0I7SUFDM0IsSUFBSTtRQUNGLE9BQU8sQ0FBQyxDQUFDLENBQUMsbUJBQUEsTUFBTSxFQUFPLENBQUMsQ0FBQyxTQUFTLENBQUM7S0FDcEM7SUFBQyxXQUFNO1FBQ04sT0FBTyxLQUFLLENBQUM7S0FDZDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8qKlxuICogVGhpcyBoZWxwZXIgY2xhc3MgaXMgdXNlZCB0byBnZXQgaG9sZCBvZiBhbiBpbmVydCB0cmVlIG9mIERPTSBlbGVtZW50cyBjb250YWluaW5nIGRpcnR5IEhUTUxcbiAqIHRoYXQgbmVlZHMgc2FuaXRpemluZy5cbiAqIERlcGVuZGluZyB1cG9uIGJyb3dzZXIgc3VwcG9ydCB3ZSBtdXN0IHVzZSBvbmUgb2YgdGhyZWUgc3RyYXRlZ2llcyBmb3IgZG9pbmcgdGhpcy5cbiAqIFN1cHBvcnQ6IFNhZmFyaSAxMC54IC0+IFhIUiBzdHJhdGVneVxuICogU3VwcG9ydDogRmlyZWZveCAtPiBEb21QYXJzZXIgc3RyYXRlZ3lcbiAqIERlZmF1bHQ6IEluZXJ0RG9jdW1lbnQgc3RyYXRlZ3lcbiAqL1xuZXhwb3J0IGNsYXNzIEluZXJ0Qm9keUhlbHBlciB7XG4gIHByaXZhdGUgaW5lcnRCb2R5RWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgaW5lcnREb2N1bWVudDogRG9jdW1lbnQ7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkZWZhdWx0RG9jOiBEb2N1bWVudCkge1xuICAgIHRoaXMuaW5lcnREb2N1bWVudCA9IHRoaXMuZGVmYXVsdERvYy5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoJ3Nhbml0aXphdGlvbi1pbmVydCcpO1xuICAgIHRoaXMuaW5lcnRCb2R5RWxlbWVudCA9IHRoaXMuaW5lcnREb2N1bWVudC5ib2R5O1xuXG4gICAgaWYgKHRoaXMuaW5lcnRCb2R5RWxlbWVudCA9PSBudWxsKSB7XG4gICAgICAvLyB1c3VhbGx5IHRoZXJlIHNob3VsZCBiZSBvbmx5IG9uZSBib2R5IGVsZW1lbnQgaW4gdGhlIGRvY3VtZW50LCBidXQgSUUgZG9lc24ndCBoYXZlIGFueSwgc29cbiAgICAgIC8vIHdlIG5lZWQgdG8gY3JlYXRlIG9uZS5cbiAgICAgIGNvbnN0IGluZXJ0SHRtbCA9IHRoaXMuaW5lcnREb2N1bWVudC5jcmVhdGVFbGVtZW50KCdodG1sJyk7XG4gICAgICB0aGlzLmluZXJ0RG9jdW1lbnQuYXBwZW5kQ2hpbGQoaW5lcnRIdG1sKTtcbiAgICAgIHRoaXMuaW5lcnRCb2R5RWxlbWVudCA9IHRoaXMuaW5lcnREb2N1bWVudC5jcmVhdGVFbGVtZW50KCdib2R5Jyk7XG4gICAgICBpbmVydEh0bWwuYXBwZW5kQ2hpbGQodGhpcy5pbmVydEJvZHlFbGVtZW50KTtcbiAgICB9XG5cbiAgICB0aGlzLmluZXJ0Qm9keUVsZW1lbnQuaW5uZXJIVE1MID0gJzxzdmc+PGcgb25sb2FkPVwidGhpcy5wYXJlbnROb2RlLnJlbW92ZSgpXCI+PC9nPjwvc3ZnPic7XG4gICAgaWYgKHRoaXMuaW5lcnRCb2R5RWxlbWVudC5xdWVyeVNlbGVjdG9yICYmICF0aGlzLmluZXJ0Qm9keUVsZW1lbnQucXVlcnlTZWxlY3Rvcignc3ZnJykpIHtcbiAgICAgIC8vIFdlIGp1c3QgaGl0IHRoZSBTYWZhcmkgMTAuMSBidWcgLSB3aGljaCBhbGxvd3MgSlMgdG8gcnVuIGluc2lkZSB0aGUgU1ZHIEcgZWxlbWVudFxuICAgICAgLy8gc28gdXNlIHRoZSBYSFIgc3RyYXRlZ3kuXG4gICAgICB0aGlzLmdldEluZXJ0Qm9keUVsZW1lbnQgPSB0aGlzLmdldEluZXJ0Qm9keUVsZW1lbnRfWEhSO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuaW5lcnRCb2R5RWxlbWVudC5pbm5lckhUTUwgPVxuICAgICAgICAnPHN2Zz48cD48c3R5bGU+PGltZyBzcmM9XCI8L3N0eWxlPjxpbWcgc3JjPXggb25lcnJvcj1hbGVydCgxKS8vXCI+JztcbiAgICBpZiAodGhpcy5pbmVydEJvZHlFbGVtZW50LnF1ZXJ5U2VsZWN0b3IgJiYgdGhpcy5pbmVydEJvZHlFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3N2ZyBpbWcnKSkge1xuICAgICAgLy8gV2UganVzdCBoaXQgdGhlIEZpcmVmb3ggYnVnIC0gd2hpY2ggcHJldmVudHMgdGhlIGlubmVyIGltZyBKUyBmcm9tIGJlaW5nIHNhbml0aXplZFxuICAgICAgLy8gc28gdXNlIHRoZSBET01QYXJzZXIgc3RyYXRlZ3ksIGlmIGl0IGlzIGF2YWlsYWJsZS5cbiAgICAgIC8vIElmIHRoZSBET01QYXJzZXIgaXMgbm90IGF2YWlsYWJsZSB0aGVuIHdlIGFyZSBub3QgaW4gRmlyZWZveCAoU2VydmVyL1dlYldvcmtlcj8pIHNvIHdlXG4gICAgICAvLyBmYWxsIHRocm91Z2ggdG8gdGhlIGRlZmF1bHQgc3RyYXRlZ3kgYmVsb3cuXG4gICAgICBpZiAoaXNET01QYXJzZXJBdmFpbGFibGUoKSkge1xuICAgICAgICB0aGlzLmdldEluZXJ0Qm9keUVsZW1lbnQgPSB0aGlzLmdldEluZXJ0Qm9keUVsZW1lbnRfRE9NUGFyc2VyO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTm9uZSBvZiB0aGUgYnVncyB3ZXJlIGhpdCBzbyBpdCBpcyBzYWZlIGZvciB1cyB0byB1c2UgdGhlIGRlZmF1bHQgSW5lcnREb2N1bWVudCBzdHJhdGVneVxuICAgIHRoaXMuZ2V0SW5lcnRCb2R5RWxlbWVudCA9IHRoaXMuZ2V0SW5lcnRCb2R5RWxlbWVudF9JbmVydERvY3VtZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbiBpbmVydCBET00gZWxlbWVudCBjb250YWluaW5nIERPTSBjcmVhdGVkIGZyb20gdGhlIGRpcnR5IEhUTUwgc3RyaW5nIHByb3ZpZGVkLlxuICAgKiBUaGUgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBpcyBkZXRlcm1pbmVkIGluIHRoZSBjb25zdHJ1Y3Rvciwgd2hlbiB0aGUgY2xhc3MgaXMgaW5zdGFudGlhdGVkLlxuICAgKi9cbiAgZ2V0SW5lcnRCb2R5RWxlbWVudDogKGh0bWw6IHN0cmluZykgPT4gSFRNTEVsZW1lbnQgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBVc2UgWEhSIHRvIGNyZWF0ZSBhbmQgZmlsbCBhbiBpbmVydCBib2R5IGVsZW1lbnQgKG9uIFNhZmFyaSAxMC4xKVxuICAgKiBTZWVcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2N1cmU1My9ET01QdXJpZnkvYmxvYi9hOTkyZDNhNzUwMzFjYjhiYjAzMmU1ZWE4Mzk5YmE5NzJiZGY5YTY1L3NyYy9wdXJpZnkuanMjTDQzOS1MNDQ5XG4gICAqL1xuICBwcml2YXRlIGdldEluZXJ0Qm9keUVsZW1lbnRfWEhSKGh0bWw6IHN0cmluZykge1xuICAgIC8vIFdlIGFkZCB0aGVzZSBleHRyYSBlbGVtZW50cyB0byBlbnN1cmUgdGhhdCB0aGUgcmVzdCBvZiB0aGUgY29udGVudCBpcyBwYXJzZWQgYXMgZXhwZWN0ZWRcbiAgICAvLyBlLmcuIGxlYWRpbmcgd2hpdGVzcGFjZSBpcyBtYWludGFpbmVkIGFuZCB0YWdzIGxpa2UgYDxtZXRhPmAgZG8gbm90IGdldCBob2lzdGVkIHRvIHRoZVxuICAgIC8vIGA8aGVhZD5gIHRhZy5cbiAgICBodG1sID0gJzxib2R5PjxyZW1vdmU+PC9yZW1vdmU+JyArIGh0bWwgKyAnPC9ib2R5Pic7XG4gICAgdHJ5IHtcbiAgICAgIGh0bWwgPSBlbmNvZGVVUkkoaHRtbCk7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdkb2N1bWVudCc7XG4gICAgeGhyLm9wZW4oJ0dFVCcsICdkYXRhOnRleHQvaHRtbDtjaGFyc2V0PXV0Zi04LCcgKyBodG1sLCBmYWxzZSk7XG4gICAgeGhyLnNlbmQodW5kZWZpbmVkKTtcbiAgICBjb25zdCBib2R5OiBIVE1MQm9keUVsZW1lbnQgPSB4aHIucmVzcG9uc2UuYm9keTtcbiAgICBib2R5LnJlbW92ZUNoaWxkKGJvZHkuZmlyc3RDaGlsZCAhKTtcbiAgICByZXR1cm4gYm9keTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2UgRE9NUGFyc2VyIHRvIGNyZWF0ZSBhbmQgZmlsbCBhbiBpbmVydCBib2R5IGVsZW1lbnQgKG9uIEZpcmVmb3gpXG4gICAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vY3VyZTUzL0RPTVB1cmlmeS9yZWxlYXNlcy90YWcvMC42LjdcbiAgICpcbiAgICovXG4gIHByaXZhdGUgZ2V0SW5lcnRCb2R5RWxlbWVudF9ET01QYXJzZXIoaHRtbDogc3RyaW5nKSB7XG4gICAgLy8gV2UgYWRkIHRoZXNlIGV4dHJhIGVsZW1lbnRzIHRvIGVuc3VyZSB0aGF0IHRoZSByZXN0IG9mIHRoZSBjb250ZW50IGlzIHBhcnNlZCBhcyBleHBlY3RlZFxuICAgIC8vIGUuZy4gbGVhZGluZyB3aGl0ZXNwYWNlIGlzIG1haW50YWluZWQgYW5kIHRhZ3MgbGlrZSBgPG1ldGE+YCBkbyBub3QgZ2V0IGhvaXN0ZWQgdG8gdGhlXG4gICAgLy8gYDxoZWFkPmAgdGFnLlxuICAgIGh0bWwgPSAnPGJvZHk+PHJlbW92ZT48L3JlbW92ZT4nICsgaHRtbCArICc8L2JvZHk+JztcbiAgICB0cnkge1xuICAgICAgY29uc3QgYm9keSA9IG5ldyAod2luZG93IGFzIGFueSlcbiAgICAgICAgICAgICAgICAgICAgICAgLkRPTVBhcnNlcigpXG4gICAgICAgICAgICAgICAgICAgICAgIC5wYXJzZUZyb21TdHJpbmcoaHRtbCwgJ3RleHQvaHRtbCcpXG4gICAgICAgICAgICAgICAgICAgICAgIC5ib2R5IGFzIEhUTUxCb2R5RWxlbWVudDtcbiAgICAgIGJvZHkucmVtb3ZlQ2hpbGQoYm9keS5maXJzdENoaWxkICEpO1xuICAgICAgcmV0dXJuIGJvZHk7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXNlIGFuIEhUTUw1IGB0ZW1wbGF0ZWAgZWxlbWVudCwgaWYgc3VwcG9ydGVkLCBvciBhbiBpbmVydCBib2R5IGVsZW1lbnQgY3JlYXRlZCB2aWFcbiAgICogYGNyZWF0ZUh0bWxEb2N1bWVudGAgdG8gY3JlYXRlIGFuZCBmaWxsIGFuIGluZXJ0IERPTSBlbGVtZW50LlxuICAgKiBUaGlzIGlzIHRoZSBkZWZhdWx0IHNhbmUgc3RyYXRlZ3kgdG8gdXNlIGlmIHRoZSBicm93c2VyIGRvZXMgbm90IHJlcXVpcmUgb25lIG9mIHRoZSBzcGVjaWFsaXNlZFxuICAgKiBzdHJhdGVnaWVzIGFib3ZlLlxuICAgKi9cbiAgcHJpdmF0ZSBnZXRJbmVydEJvZHlFbGVtZW50X0luZXJ0RG9jdW1lbnQoaHRtbDogc3RyaW5nKSB7XG4gICAgLy8gUHJlZmVyIHVzaW5nIDx0ZW1wbGF0ZT4gZWxlbWVudCBpZiBzdXBwb3J0ZWQuXG4gICAgY29uc3QgdGVtcGxhdGVFbCA9IHRoaXMuaW5lcnREb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xuICAgIGlmICgnY29udGVudCcgaW4gdGVtcGxhdGVFbCkge1xuICAgICAgdGVtcGxhdGVFbC5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgcmV0dXJuIHRlbXBsYXRlRWw7XG4gICAgfVxuXG4gICAgdGhpcy5pbmVydEJvZHlFbGVtZW50LmlubmVySFRNTCA9IGh0bWw7XG5cbiAgICAvLyBTdXBwb3J0OiBJRSA5LTExIG9ubHlcbiAgICAvLyBzdHJpcCBjdXN0b20tbmFtZXNwYWNlZCBhdHRyaWJ1dGVzIG9uIElFPD0xMVxuICAgIGlmICgodGhpcy5kZWZhdWx0RG9jIGFzIGFueSkuZG9jdW1lbnRNb2RlKSB7XG4gICAgICB0aGlzLnN0cmlwQ3VzdG9tTnNBdHRycyh0aGlzLmluZXJ0Qm9keUVsZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmluZXJ0Qm9keUVsZW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICogV2hlbiBJRTktMTEgY29tZXMgYWNyb3NzIGFuIHVua25vd24gbmFtZXNwYWNlZCBhdHRyaWJ1dGUgZS5nLiAneGxpbms6Zm9vJyBpdCBhZGRzICd4bWxuczpuczEnXG4gICAqIGF0dHJpYnV0ZSB0byBkZWNsYXJlIG5zMSBuYW1lc3BhY2UgYW5kIHByZWZpeGVzIHRoZSBhdHRyaWJ1dGUgd2l0aCAnbnMxJyAoZS5nLlxuICAgKiAnbnMxOnhsaW5rOmZvbycpLlxuICAgKlxuICAgKiBUaGlzIGlzIHVuZGVzaXJhYmxlIHNpbmNlIHdlIGRvbid0IHdhbnQgdG8gYWxsb3cgYW55IG9mIHRoZXNlIGN1c3RvbSBhdHRyaWJ1dGVzLiBUaGlzIG1ldGhvZFxuICAgKiBzdHJpcHMgdGhlbSBhbGwuXG4gICAqL1xuICBwcml2YXRlIHN0cmlwQ3VzdG9tTnNBdHRycyhlbDogRWxlbWVudCkge1xuICAgIGNvbnN0IGVsQXR0cnMgPSBlbC5hdHRyaWJ1dGVzO1xuICAgIC8vIGxvb3AgYmFja3dhcmRzIHNvIHRoYXQgd2UgY2FuIHN1cHBvcnQgcmVtb3ZhbHMuXG4gICAgZm9yIChsZXQgaSA9IGVsQXR0cnMubGVuZ3RoIC0gMTsgMCA8IGk7IGktLSkge1xuICAgICAgY29uc3QgYXR0cmliID0gZWxBdHRycy5pdGVtKGkpO1xuICAgICAgY29uc3QgYXR0ck5hbWUgPSBhdHRyaWIgIS5uYW1lO1xuICAgICAgaWYgKGF0dHJOYW1lID09PSAneG1sbnM6bnMxJyB8fCBhdHRyTmFtZS5pbmRleE9mKCduczE6JykgPT09IDApIHtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IGNoaWxkTm9kZSA9IGVsLmZpcnN0Q2hpbGQgYXMgTm9kZSB8IG51bGw7XG4gICAgd2hpbGUgKGNoaWxkTm9kZSkge1xuICAgICAgaWYgKGNoaWxkTm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHRoaXMuc3RyaXBDdXN0b21Oc0F0dHJzKGNoaWxkTm9kZSBhcyBFbGVtZW50KTtcbiAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5uZXh0U2libGluZztcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBXZSBuZWVkIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSBET01QYXJzZXIgZXhpc3RzIGluIHRoZSBnbG9iYWwgY29udGV4dC5cbiAqIFRoZSB0cnktY2F0Y2ggaXMgYmVjYXVzZSwgb24gc29tZSBicm93c2VycywgdHJ5aW5nIHRvIGFjY2VzcyB0aGlzIHByb3BlcnR5XG4gKiBvbiB3aW5kb3cgY2FuIGFjdHVhbGx5IHRocm93IGFuIGVycm9yLlxuICpcbiAqIEBzdXBwcmVzcyB7dXNlbGVzc0NvZGV9XG4gKi9cbmZ1bmN0aW9uIGlzRE9NUGFyc2VyQXZhaWxhYmxlKCkge1xuICB0cnkge1xuICAgIHJldHVybiAhISh3aW5kb3cgYXMgYW55KS5ET01QYXJzZXI7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIl19","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../util/is_dev_mode';\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n * @type {?}\n */\nconst SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/* A pattern that matches safe srcset values */\n/** @type {?} */\nconst SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/**\n * A pattern that matches safe data URLs. Only matches image, video and audio types.\n * @type {?}\n */\nconst DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n/**\n * @param {?} url\n * @return {?}\n */\nexport function _sanitizeUrl(url) {\n    url = String(url);\n    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))\n        return url;\n    if (isDevMode()) {\n        console.warn(`WARNING: sanitizing unsafe URL value ${url} (see http://g.co/ng/security#xss)`);\n    }\n    return 'unsafe:' + url;\n}\n/**\n * @param {?} srcset\n * @return {?}\n */\nexport function sanitizeSrcset(srcset) {\n    srcset = String(srcset);\n    return srcset.split(',').map((srcset) => _sanitizeUrl(srcset.trim())).join(', ');\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJsX3Nhbml0aXplci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3Nhbml0aXphdGlvbi91cmxfc2FuaXRpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLHFCQUFxQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01BNEJ4QyxnQkFBZ0IsR0FBRyw2REFBNkQ7OztNQUdoRixtQkFBbUIsR0FBRyw4Q0FBOEM7Ozs7O01BR3BFLGdCQUFnQixHQUNsQixzSUFBc0k7Ozs7O0FBRTFJLE1BQU0sVUFBVSxZQUFZLENBQUMsR0FBVztJQUN0QyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xCLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7UUFBRSxPQUFPLEdBQUcsQ0FBQztJQUUzRSxJQUFJLFNBQVMsRUFBRSxFQUFFO1FBQ2YsT0FBTyxDQUFDLElBQUksQ0FBQyx3Q0FBd0MsR0FBRyxvQ0FBb0MsQ0FBQyxDQUFDO0tBQy9GO0lBRUQsT0FBTyxTQUFTLEdBQUcsR0FBRyxDQUFDO0FBQ3pCLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxNQUFjO0lBQzNDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEIsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ25GLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7aXNEZXZNb2RlfSBmcm9tICcuLi91dGlsL2lzX2Rldl9tb2RlJztcblxuLyoqXG4gKiBBIHBhdHRlcm4gdGhhdCByZWNvZ25pemVzIGEgY29tbW9ubHkgdXNlZnVsIHN1YnNldCBvZiBVUkxzIHRoYXQgYXJlIHNhZmUuXG4gKlxuICogVGhpcyByZWd1bGFyIGV4cHJlc3Npb24gbWF0Y2hlcyBhIHN1YnNldCBvZiBVUkxzIHRoYXQgd2lsbCBub3QgY2F1c2Ugc2NyaXB0XG4gKiBleGVjdXRpb24gaWYgdXNlZCBpbiBVUkwgY29udGV4dCB3aXRoaW4gYSBIVE1MIGRvY3VtZW50LiBTcGVjaWZpY2FsbHksIHRoaXNcbiAqIHJlZ3VsYXIgZXhwcmVzc2lvbiBtYXRjaGVzIGlmIChjb21tZW50IGZyb20gaGVyZSBvbiBhbmQgcmVnZXggY29waWVkIGZyb21cbiAqIFNveSdzIEVzY2FwaW5nQ29udmVudGlvbnMpOlxuICogKDEpIEVpdGhlciBhIHByb3RvY29sIGluIGEgd2hpdGVsaXN0IChodHRwLCBodHRwcywgbWFpbHRvIG9yIGZ0cCkuXG4gKiAoMikgb3Igbm8gcHJvdG9jb2wuICBBIHByb3RvY29sIG11c3QgYmUgZm9sbG93ZWQgYnkgYSBjb2xvbi4gVGhlIGJlbG93XG4gKiAgICAgYWxsb3dzIHRoYXQgYnkgYWxsb3dpbmcgY29sb25zIG9ubHkgYWZ0ZXIgb25lIG9mIHRoZSBjaGFyYWN0ZXJzIFsvPyNdLlxuICogICAgIEEgY29sb24gYWZ0ZXIgYSBoYXNoICgjKSBtdXN0IGJlIGluIHRoZSBmcmFnbWVudC5cbiAqICAgICBPdGhlcndpc2UsIGEgY29sb24gYWZ0ZXIgYSAoPykgbXVzdCBiZSBpbiBhIHF1ZXJ5LlxuICogICAgIE90aGVyd2lzZSwgYSBjb2xvbiBhZnRlciBhIHNpbmdsZSBzb2xpZHVzICgvKSBtdXN0IGJlIGluIGEgcGF0aC5cbiAqICAgICBPdGhlcndpc2UsIGEgY29sb24gYWZ0ZXIgYSBkb3VibGUgc29saWR1cyAoLy8pIG11c3QgYmUgaW4gdGhlIGF1dGhvcml0eVxuICogICAgIChiZWZvcmUgcG9ydCkuXG4gKlxuICogVGhlIHBhdHRlcm4gZGlzYWxsb3dzICYsIHVzZWQgaW4gSFRNTCBlbnRpdHkgZGVjbGFyYXRpb25zIGJlZm9yZVxuICogb25lIG9mIHRoZSBjaGFyYWN0ZXJzIGluIFsvPyNdLiBUaGlzIGRpc2FsbG93cyBIVE1MIGVudGl0aWVzIHVzZWQgaW4gdGhlXG4gKiBwcm90b2NvbCBuYW1lLCB3aGljaCBzaG91bGQgbmV2ZXIgaGFwcGVuLCBlLmcuIFwiaCYjMTE2O3RwXCIgZm9yIFwiaHR0cFwiLlxuICogSXQgYWxzbyBkaXNhbGxvd3MgSFRNTCBlbnRpdGllcyBpbiB0aGUgZmlyc3QgcGF0aCBwYXJ0IG9mIGEgcmVsYXRpdmUgcGF0aCxcbiAqIGUuZy4gXCJmb28mbHQ7YmFyL2JhelwiLiAgT3VyIGV4aXN0aW5nIGVzY2FwaW5nIGZ1bmN0aW9ucyBzaG91bGQgbm90IHByb2R1Y2VcbiAqIHRoYXQuIE1vcmUgaW1wb3J0YW50bHksIGl0IGRpc2FsbG93cyBtYXNraW5nIG9mIGEgY29sb24sXG4gKiBlLmcuIFwiamF2YXNjcmlwdCYjNTg7Li4uXCIuXG4gKlxuICogVGhpcyByZWd1bGFyIGV4cHJlc3Npb24gd2FzIHRha2VuIGZyb20gdGhlIENsb3N1cmUgc2FuaXRpemF0aW9uIGxpYnJhcnkuXG4gKi9cbmNvbnN0IFNBRkVfVVJMX1BBVFRFUk4gPSAvXig/Oig/Omh0dHBzP3xtYWlsdG98ZnRwfHRlbHxmaWxlKTp8W14mOi8/I10qKD86Wy8/I118JCkpL2dpO1xuXG4vKiBBIHBhdHRlcm4gdGhhdCBtYXRjaGVzIHNhZmUgc3Jjc2V0IHZhbHVlcyAqL1xuY29uc3QgU0FGRV9TUkNTRVRfUEFUVEVSTiA9IC9eKD86KD86aHR0cHM/fGZpbGUpOnxbXiY6Lz8jXSooPzpbLz8jXXwkKSkvZ2k7XG5cbi8qKiBBIHBhdHRlcm4gdGhhdCBtYXRjaGVzIHNhZmUgZGF0YSBVUkxzLiBPbmx5IG1hdGNoZXMgaW1hZ2UsIHZpZGVvIGFuZCBhdWRpbyB0eXBlcy4gKi9cbmNvbnN0IERBVEFfVVJMX1BBVFRFUk4gPVxuICAgIC9eZGF0YTooPzppbWFnZVxcLyg/OmJtcHxnaWZ8anBlZ3xqcGd8cG5nfHRpZmZ8d2VicCl8dmlkZW9cXC8oPzptcGVnfG1wNHxvZ2d8d2VibSl8YXVkaW9cXC8oPzptcDN8b2dhfG9nZ3xvcHVzKSk7YmFzZTY0LFthLXowLTkrXFwvXSs9KiQvaTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9zYW5pdGl6ZVVybCh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gIHVybCA9IFN0cmluZyh1cmwpO1xuICBpZiAodXJsLm1hdGNoKFNBRkVfVVJMX1BBVFRFUk4pIHx8IHVybC5tYXRjaChEQVRBX1VSTF9QQVRURVJOKSkgcmV0dXJuIHVybDtcblxuICBpZiAoaXNEZXZNb2RlKCkpIHtcbiAgICBjb25zb2xlLndhcm4oYFdBUk5JTkc6IHNhbml0aXppbmcgdW5zYWZlIFVSTCB2YWx1ZSAke3VybH0gKHNlZSBodHRwOi8vZy5jby9uZy9zZWN1cml0eSN4c3MpYCk7XG4gIH1cblxuICByZXR1cm4gJ3Vuc2FmZTonICsgdXJsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2FuaXRpemVTcmNzZXQoc3Jjc2V0OiBzdHJpbmcpOiBzdHJpbmcge1xuICBzcmNzZXQgPSBTdHJpbmcoc3Jjc2V0KTtcbiAgcmV0dXJuIHNyY3NldC5zcGxpdCgnLCcpLm1hcCgoc3Jjc2V0KSA9PiBfc2FuaXRpemVVcmwoc3Jjc2V0LnRyaW0oKSkpLmpvaW4oJywgJyk7XG59XG4iXX0=","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../util/is_dev_mode';\nimport { InertBodyHelper } from './inert_body';\nimport { _sanitizeUrl, sanitizeSrcset } from './url_sanitizer';\n/**\n * @param {?} tags\n * @return {?}\n */\nfunction tagSet(tags) {\n    /** @type {?} */\n    const res = {};\n    for (const t of tags.split(','))\n        res[t] = true;\n    return res;\n}\n/**\n * @param {...?} sets\n * @return {?}\n */\nfunction merge(...sets) {\n    /** @type {?} */\n    const res = {};\n    for (const s of sets) {\n        for (const v in s) {\n            if (s.hasOwnProperty(v))\n                res[v] = true;\n        }\n    }\n    return res;\n}\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\n/** @type {?} */\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\n/** @type {?} */\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\n/** @type {?} */\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\n/** @type {?} */\nconst OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n// Safe Block Elements - HTML5\n/** @type {?} */\nconst BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n// Inline Elements - HTML5\n/** @type {?} */\nconst INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n/** @type {?} */\nexport const VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n// Attributes that have href and hence need to be sanitized\n/** @type {?} */\nexport const URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n// Attributes that have special href set hence need to be sanitized\n/** @type {?} */\nexport const SRCSET_ATTRS = tagSet('srcset');\n/** @type {?} */\nconst HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\n/** @type {?} */\nexport const VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\n/** @type {?} */\nconst SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\n    constructor() {\n        // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n        // because characters were re-encoded.\n        this.sanitizedSomething = false;\n        this.buf = [];\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    sanitizeChildren(el) {\n        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n        // However this code never accesses properties off of `document` before deleting its contents\n        // again, so it shouldn't be vulnerable to DOM clobbering.\n        /** @type {?} */\n        let current = (/** @type {?} */ (el.firstChild));\n        /** @type {?} */\n        let traverseContent = true;\n        while (current) {\n            if (current.nodeType === Node.ELEMENT_NODE) {\n                traverseContent = this.startElement((/** @type {?} */ (current)));\n            }\n            else if (current.nodeType === Node.TEXT_NODE) {\n                this.chars((/** @type {?} */ (current.nodeValue)));\n            }\n            else {\n                // Strip non-element, non-text nodes.\n                this.sanitizedSomething = true;\n            }\n            if (traverseContent && current.firstChild) {\n                current = (/** @type {?} */ (current.firstChild));\n                continue;\n            }\n            while (current) {\n                // Leaving the element. Walk up and to the right, closing tags as we go.\n                if (current.nodeType === Node.ELEMENT_NODE) {\n                    this.endElement((/** @type {?} */ (current)));\n                }\n                /** @type {?} */\n                let next = this.checkClobberedElement(current, (/** @type {?} */ (current.nextSibling)));\n                if (next) {\n                    current = next;\n                    break;\n                }\n                current = this.checkClobberedElement(current, (/** @type {?} */ (current.parentNode)));\n            }\n        }\n        return this.buf.join('');\n    }\n    /**\n     * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n     * be traversed. Element content must always be traversed (even if the element itself is not\n     * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n     *\n     * @private\n     * @param {?} element The element to sanitize.\n     * @return {?} True if the element's contents should be traversed.\n     */\n    startElement(element) {\n        /** @type {?} */\n        const tagName = element.nodeName.toLowerCase();\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.sanitizedSomething = true;\n            return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n        }\n        this.buf.push('<');\n        this.buf.push(tagName);\n        /** @type {?} */\n        const elAttrs = element.attributes;\n        for (let i = 0; i < elAttrs.length; i++) {\n            /** @type {?} */\n            const elAttr = elAttrs.item(i);\n            /** @type {?} */\n            const attrName = (/** @type {?} */ (elAttr)).name;\n            /** @type {?} */\n            const lower = attrName.toLowerCase();\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                this.sanitizedSomething = true;\n                continue;\n            }\n            /** @type {?} */\n            let value = (/** @type {?} */ (elAttr)).value;\n            // TODO(martinprobst): Special case image URIs for data:image/...\n            if (URI_ATTRS[lower])\n                value = _sanitizeUrl(value);\n            if (SRCSET_ATTRS[lower])\n                value = sanitizeSrcset(value);\n            this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n        }\n        this.buf.push('>');\n        return true;\n    }\n    /**\n     * @private\n     * @param {?} current\n     * @return {?}\n     */\n    endElement(current) {\n        /** @type {?} */\n        const tagName = current.nodeName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.buf.push('</');\n            this.buf.push(tagName);\n            this.buf.push('>');\n        }\n    }\n    /**\n     * @private\n     * @param {?} chars\n     * @return {?}\n     */\n    chars(chars) { this.buf.push(encodeEntities(chars)); }\n    /**\n     * @param {?} node\n     * @param {?} nextNode\n     * @return {?}\n     */\n    checkClobberedElement(node, nextNode) {\n        if (nextNode &&\n            (node.compareDocumentPosition(nextNode) &\n                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n            throw new Error(`Failed to sanitize html because the element is clobbered: ${((/** @type {?} */ (node))).outerHTML}`);\n        }\n        return nextNode;\n    }\n}\nif (false) {\n    /** @type {?} */\n    SanitizingHtmlSerializer.prototype.sanitizedSomething;\n    /**\n     * @type {?}\n     * @private\n     */\n    SanitizingHtmlSerializer.prototype.buf;\n}\n// Regular Expressions for parsing tags and attributes\n/** @type {?} */\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\n/** @type {?} */\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param {?} value\n * @return {?}\n */\nfunction encodeEntities(value) {\n    return value.replace(/&/g, '&amp;')\n        .replace(SURROGATE_PAIR_REGEXP, function (match) {\n        /** @type {?} */\n        const hi = match.charCodeAt(0);\n        /** @type {?} */\n        const low = match.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    })\n        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\n/** @type {?} */\nlet inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n * @param {?} defaultDoc\n * @param {?} unsafeHtmlInput\n * @return {?}\n */\nexport function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n    /** @type {?} */\n    let inertBodyElement = null;\n    try {\n        inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\n        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n        /** @type {?} */\n        let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n        /** @type {?} */\n        let mXSSAttempts = 5;\n        /** @type {?} */\n        let parsedHtml = unsafeHtml;\n        do {\n            if (mXSSAttempts === 0) {\n                throw new Error('Failed to sanitize html because the input is unstable');\n            }\n            mXSSAttempts--;\n            unsafeHtml = parsedHtml;\n            parsedHtml = (/** @type {?} */ (inertBodyElement)).innerHTML;\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        } while (unsafeHtml !== parsedHtml);\n        /** @type {?} */\n        const sanitizer = new SanitizingHtmlSerializer();\n        /** @type {?} */\n        const safeHtml = sanitizer.sanitizeChildren((/** @type {?} */ (getTemplateContent((/** @type {?} */ (inertBodyElement))))) || inertBodyElement);\n        if (isDevMode() && sanitizer.sanitizedSomething) {\n            console.warn('WARNING: sanitizing HTML stripped some content, see http://g.co/ng/security#xss');\n        }\n        return safeHtml;\n    }\n    finally {\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n        if (inertBodyElement) {\n            /** @type {?} */\n            const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\n            while (parent.firstChild) {\n                parent.removeChild(parent.firstChild);\n            }\n        }\n    }\n}\n/**\n * @param {?} el\n * @return {?}\n */\nexport function getTemplateContent(el) {\n    return 'content' in ((/** @type {?} */ (el))) && isTemplateElement(el) ?\n        el.content :\n        null;\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction isTemplateElement(el) {\n    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst I18nMutateOpCode = {\n    /// Stores shift amount for bits 17-3 that contain reference index.\n    SHIFT_REF: 3,\n    /// Stores shift amount for bits 31-17 that contain parent index.\n    SHIFT_PARENT: 17,\n    /// Mask for OpCode\n    MASK_OPCODE: 7,\n    /// Mask for reference index.\n    MASK_REF: 136,\n    /// OpCode to select a node. (next OpCode will contain the operation.)\n    Select: 0,\n    /// OpCode to append the current node to `PARENT`.\n    AppendChild: 1,\n    /// OpCode to insert the current node to `PARENT` before `REF`.\n    InsertBefore: 2,\n    /// OpCode to remove the `REF` node from `PARENT`.\n    Remove: 3,\n    /// OpCode to set the attribute of a node.\n    Attr: 4,\n    /// OpCode to simulate elementEnd()\n    ElementEnd: 5,\n    /// OpCode to read the remove OpCodes for the nested ICU\n    RemoveNestedIcu: 6,\n};\nexport { I18nMutateOpCode };\n/**\n * Marks that the next string is for element.\n *\n * See `I18nMutateOpCodes` documentation.\n * @type {?}\n */\nexport const ELEMENT_MARKER = {\n    marker: 'element'\n};\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Marks that the next string is for comment.\n *\n * See `I18nMutateOpCodes` documentation.\n * @type {?}\n */\nexport const COMMENT_MARKER = {\n    marker: 'comment'\n};\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Array storing OpCode for dynamically creating `i18n` blocks.\n *\n * Example:\n * ```\n * <I18nCreateOpCode>[\n *   // For adding text nodes\n *   // ---------------------\n *   // Equivalent to:\n *   //   const node = lView[index++] = document.createTextNode('abc');\n *   //   lView[1].insertBefore(node, lView[2]);\n *   'abc', 1 << SHIFT_PARENT | 2 << SHIFT_REF | InsertBefore,\n *\n *   // Equivalent to:\n *   //   const node = lView[index++] = document.createTextNode('xyz');\n *   //   lView[1].appendChild(node);\n *   'xyz', 1 << SHIFT_PARENT | AppendChild,\n *\n *   // For adding element nodes\n *   // ---------------------\n *   // Equivalent to:\n *   //   const node = lView[index++] = document.createElement('div');\n *   //   lView[1].insertBefore(node, lView[2]);\n *   ELEMENT_MARKER, 'div', 1 << SHIFT_PARENT | 2 << SHIFT_REF | InsertBefore,\n *\n *   // Equivalent to:\n *   //   const node = lView[index++] = document.createElement('div');\n *   //   lView[1].appendChild(node);\n *   ELEMENT_MARKER, 'div', 1 << SHIFT_PARENT | AppendChild,\n *\n *   // For adding comment nodes\n *   // ---------------------\n *   // Equivalent to:\n *   //   const node = lView[index++] = document.createComment('');\n *   //   lView[1].insertBefore(node, lView[2]);\n *   COMMENT_MARKER, '', 1 << SHIFT_PARENT | 2 << SHIFT_REF | InsertBefore,\n *\n *   // Equivalent to:\n *   //   const node = lView[index++] = document.createComment('');\n *   //   lView[1].appendChild(node);\n *   COMMENT_MARKER, '', 1 << SHIFT_PARENT | AppendChild,\n *\n *   // For moving existing nodes to a different location\n *   // --------------------------------------------------\n *   // Equivalent to:\n *   //   const node = lView[1];\n *   //   lView[2].insertBefore(node, lView[3]);\n *   1 << SHIFT_REF | Select, 2 << SHIFT_PARENT | 3 << SHIFT_REF | InsertBefore,\n *\n *   // Equivalent to:\n *   //   const node = lView[1];\n *   //   lView[2].appendChild(node);\n *   1 << SHIFT_REF | Select, 2 << SHIFT_PARENT | AppendChild,\n *\n *   // For removing existing nodes\n *   // --------------------------------------------------\n *   //   const node = lView[1];\n *   //   removeChild(tView.data(1), node, lView);\n *   1 << SHIFT_REF | Remove,\n *\n *   // For writing attributes\n *   // --------------------------------------------------\n *   //   const node = lView[1];\n *   //   node.setAttribute('attr', 'value');\n *   1 << SHIFT_REF | Select, 'attr', 'value'\n *            // NOTE: Select followed by two string (vs select followed by OpCode)\n * ];\n * ```\n * NOTE:\n *   - `index` is initial location where the extra nodes should be stored in the EXPANDO section of\n * `LVIewData`.\n *\n * See: `applyI18nCreateOpCodes`;\n * @record\n */\nexport function I18nMutateOpCodes() { }\n/** @enum {number} */\nconst I18nUpdateOpCode = {\n    /// Stores shift amount for bits 17-2 that contain reference index.\n    SHIFT_REF: 2,\n    /// Stores shift amount for bits 31-17 that contain which ICU in i18n block are we referring to.\n    SHIFT_ICU: 17,\n    /// Mask for OpCode\n    MASK_OPCODE: 3,\n    /// Mask for reference index.\n    MASK_REF: 68,\n    /// OpCode to update a text node.\n    Text: 0,\n    /// OpCode to update a attribute of a node.\n    Attr: 1,\n    /// OpCode to switch the current ICU case.\n    IcuSwitch: 2,\n    /// OpCode to update the current ICU case.\n    IcuUpdate: 3,\n};\nexport { I18nUpdateOpCode };\n/**\n * Stores DOM operations which need to be applied to update DOM render tree due to changes in\n * expressions.\n *\n * The basic idea is that `i18nExp` OpCodes capture expression changes and update a change\n * mask bit. (Bit 1 for expression 1, bit 2 for expression 2 etc..., bit 32 for expression 32 and\n * higher.) The OpCodes then compare its own change mask against the expression change mask to\n * determine if the OpCodes should execute.\n *\n * These OpCodes can be used by both the i18n block as well as ICU sub-block.\n *\n * ## Example\n *\n * Assume\n * ```\n *   if (rf & RenderFlags.Update) {\n *    i18nExp(bind(ctx.exp1)); // If changed set mask bit 1\n *    i18nExp(bind(ctx.exp2)); // If changed set mask bit 2\n *    i18nExp(bind(ctx.exp3)); // If changed set mask bit 3\n *    i18nExp(bind(ctx.exp4)); // If changed set mask bit 4\n *    i18nApply(0);            // Apply all changes by executing the OpCodes.\n *  }\n * ```\n * We can assume that each call to `i18nExp` sets an internal `changeMask` bit depending on the\n * index of `i18nExp`.\n *\n * OpCodes\n * ```\n * <I18nUpdateOpCodes>[\n *   // The following OpCodes represent: `<div i18n-title=\"pre{{exp1}}in{{exp2}}post\">`\n *   // If `changeMask & 0b11`\n *   //        has changed then execute update OpCodes.\n *   //        has NOT changed then skip `7` values and start processing next OpCodes.\n *   0b11, 7,\n *   // Concatenate `newValue = 'pre'+lView[bindIndex-4]+'in'+lView[bindIndex-3]+'post';`.\n *   'pre', -4, 'in', -3, 'post',\n *   // Update attribute: `elementAttribute(1, 'title', sanitizerFn(newValue));`\n *   1 << SHIFT_REF | Attr, 'title', sanitizerFn,\n *\n *   // The following OpCodes represent: `<div i18n>Hello {{exp3}}!\">`\n *   // If `changeMask & 0b100`\n *   //        has changed then execute update OpCodes.\n *   //        has NOT changed then skip `4` values and start processing next OpCodes.\n *   0b100, 4,\n *   // Concatenate `newValue = 'Hello ' + lView[bindIndex -2] + '!';`.\n *   'Hello ', -2, '!',\n *   // Update text: `lView[1].textContent = newValue;`\n *   1 << SHIFT_REF | Text,\n *\n *   // The following OpCodes represent: `<div i18n>{exp4, plural, ... }\">`\n *   // If `changeMask & 0b1000`\n *   //        has changed then execute update OpCodes.\n *   //        has NOT changed then skip `4` values and start processing next OpCodes.\n *   0b1000, 4,\n *   // Concatenate `newValue = lView[bindIndex -1];`.\n *   -1,\n *   // Switch ICU: `icuSwitchCase(lView[1], 0, newValue);`\n *   0 << SHIFT_ICU | 1 << SHIFT_REF | IcuSwitch,\n *\n *   // Note `changeMask & -1` is always true, so the IcuUpdate will always execute.\n *   -1, 1,\n *   // Update ICU: `icuUpdateCase(lView[1], 0);`\n *   0 << SHIFT_ICU | 1 << SHIFT_REF | IcuUpdate,\n *\n * ];\n * ```\n *\n * @record\n */\nexport function I18nUpdateOpCodes() { }\n/**\n * Store information for the i18n translation block.\n * @record\n */\nexport function TI18n() { }\nif (false) {\n    /**\n     * Number of slots to allocate in expando.\n     *\n     * This is the max number of DOM elements which will be created by this i18n + ICU blocks. When\n     * the DOM elements are being created they are stored in the EXPANDO, so that update OpCodes can\n     * write into them.\n     * @type {?}\n     */\n    TI18n.prototype.vars;\n    /**\n     * A set of OpCodes which will create the Text Nodes and ICU anchors for the translation blocks.\n     *\n     * NOTE: The ICU anchors are filled in with ICU Update OpCode.\n     * @type {?}\n     */\n    TI18n.prototype.create;\n    /**\n     * A set of OpCodes which will be executed on each change detection to determine if any changes to\n     * DOM are required.\n     * @type {?}\n     */\n    TI18n.prototype.update;\n    /**\n     * A list of ICUs in a translation block (or `null` if block has no ICUs).\n     *\n     * Example:\n     * Given: `<div i18n>You have {count, plural, ...} and {state, switch, ...}</div>`\n     * There would be 2 ICUs in this array.\n     *   1. `{count, plural, ...}`\n     *   2. `{state, switch, ...}`\n     * @type {?}\n     */\n    TI18n.prototype.icus;\n}\n/** @enum {number} */\nconst IcuType = {\n    select: 0,\n    plural: 1,\n};\nexport { IcuType };\n/**\n * @record\n */\nexport function TIcu() { }\nif (false) {\n    /**\n     * Defines the ICU type of `select` or `plural`\n     * @type {?}\n     */\n    TIcu.prototype.type;\n    /**\n     * Number of slots to allocate in expando for each case.\n     *\n     * This is the max number of DOM elements which will be created by this i18n + ICU blocks. When\n     * the DOM elements are being created they are stored in the EXPANDO, so that update OpCodes can\n     * write into them.\n     * @type {?}\n     */\n    TIcu.prototype.vars;\n    /**\n     * An optional array of child/sub ICUs.\n     *\n     * In case of nested ICUs such as:\n     * ```\n     * {�0�, plural,\n     *   =0 {zero}\n     *   other {�0� {�1�, select,\n     *                     cat {cats}\n     *                     dog {dogs}\n     *                     other {animals}\n     *                   }!\n     *   }\n     * }\n     * ```\n     * When the parent ICU is changing it must clean up child ICUs as well. For this reason it needs\n     * to know which child ICUs to run clean up for as well.\n     *\n     * In the above example this would be:\n     * ```\n     * [\n     *   [],   // `=0` has no sub ICUs\n     *   [1],  // `other` has one subICU at `1`st index.\n     * ]\n     * ```\n     *\n     * The reason why it is Array of Arrays is because first array represents the case, and second\n     * represents the child ICUs to clean up. There may be more than one child ICUs per case.\n     * @type {?}\n     */\n    TIcu.prototype.childIcus;\n    /**\n     * A list of case values which the current ICU will try to match.\n     *\n     * The last value is `other`\n     * @type {?}\n     */\n    TIcu.prototype.cases;\n    /**\n     * A set of OpCodes to apply in order to build up the DOM render tree for the ICU\n     * @type {?}\n     */\n    TIcu.prototype.create;\n    /**\n     * A set of OpCodes to apply in order to destroy the DOM render tree for the ICU.\n     * @type {?}\n     */\n    TIcu.prototype.remove;\n    /**\n     * A set of OpCodes to apply in order to update the DOM render tree for the ICU bindings.\n     * @type {?}\n     */\n    TIcu.prototype.update;\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n/** @type {?} */\nexport const unusedValueExportToPlacateAjd = 1;\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Equivalent to ES6 spread, add each item to an array.\n *\n * @param {?} items The items to add\n * @param {?} arr The array to which you want to add the items\n * @return {?}\n */\nexport function addAllToArray(items, arr) {\n    for (let i = 0; i < items.length; i++) {\n        arr.push(items[i]);\n    }\n}\n/**\n * Flattens an array in non-recursive way. Input arrays are not modified.\n * @param {?} list\n * @return {?}\n */\nexport function flatten(list) {\n    /** @type {?} */\n    const result = [];\n    /** @type {?} */\n    let i = 0;\n    while (i < list.length) {\n        /** @type {?} */\n        const item = list[i];\n        if (Array.isArray(item)) {\n            if (item.length > 0) {\n                list = item.concat(list.slice(i + 1));\n                i = 0;\n            }\n            else {\n                i++;\n            }\n        }\n        else {\n            result.push(item);\n            i++;\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXlfdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL3V0aWwvYXJyYXlfdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBY0EsTUFBTSxVQUFVLGFBQWEsQ0FBQyxLQUFZLEVBQUUsR0FBVTtJQUNwRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3BCO0FBQ0gsQ0FBQzs7Ozs7O0FBS0QsTUFBTSxVQUFVLE9BQU8sQ0FBQyxJQUFXOztVQUMzQixNQUFNLEdBQVUsRUFBRTs7UUFDcEIsQ0FBQyxHQUFHLENBQUM7SUFDVCxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFOztjQUNoQixJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNwQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdkIsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDbkIsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdEMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNQO2lCQUFNO2dCQUNMLENBQUMsRUFBRSxDQUFDO2FBQ0w7U0FDRjthQUFNO1lBQ0wsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNsQixDQUFDLEVBQUUsQ0FBQztTQUNMO0tBQ0Y7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vKipcbiogRXF1aXZhbGVudCB0byBFUzYgc3ByZWFkLCBhZGQgZWFjaCBpdGVtIHRvIGFuIGFycmF5LlxuKlxuKiBAcGFyYW0gaXRlbXMgVGhlIGl0ZW1zIHRvIGFkZFxuKiBAcGFyYW0gYXJyIFRoZSBhcnJheSB0byB3aGljaCB5b3Ugd2FudCB0byBhZGQgdGhlIGl0ZW1zXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZEFsbFRvQXJyYXkoaXRlbXM6IGFueVtdLCBhcnI6IGFueVtdKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICBhcnIucHVzaChpdGVtc1tpXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBGbGF0dGVucyBhbiBhcnJheSBpbiBub24tcmVjdXJzaXZlIHdheS4gSW5wdXQgYXJyYXlzIGFyZSBub3QgbW9kaWZpZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmbGF0dGVuKGxpc3Q6IGFueVtdKTogYW55W10ge1xuICBjb25zdCByZXN1bHQ6IGFueVtdID0gW107XG4gIGxldCBpID0gMDtcbiAgd2hpbGUgKGkgPCBsaXN0Lmxlbmd0aCkge1xuICAgIGNvbnN0IGl0ZW0gPSBsaXN0W2ldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pKSB7XG4gICAgICBpZiAoaXRlbS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxpc3QgPSBpdGVtLmNvbmNhdChsaXN0LnNsaWNlKGkgKyAxKSk7XG4gICAgICAgIGkgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucHVzaChpdGVtKTtcbiAgICAgIGkrKztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdfQ==","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SRCSET_ATTRS, URI_ATTRS, VALID_ATTRS, VALID_ELEMENTS, getTemplateContent } from '../sanitization/html_sanitizer';\nimport { InertBodyHelper } from '../sanitization/inert_body';\nimport { _sanitizeUrl, sanitizeSrcset } from '../sanitization/url_sanitizer';\nimport { assertDefined, assertEqual, assertGreaterThan } from '../util/assert';\nimport { attachPatchData } from './context_discovery';\nimport { allocExpando, createNodeAtIndex, elementAttribute, load, textBinding } from './instructions';\nimport { NATIVE } from './interfaces/container';\nimport { COMMENT_MARKER, ELEMENT_MARKER } from './interfaces/i18n';\nimport { BINDING_INDEX, HEADER_OFFSET, RENDERER, TVIEW, T_HOST } from './interfaces/view';\nimport { appendChild, createTextNode, nativeRemoveNode } from './node_manipulation';\nimport { getIsParent, getLView, getPreviousOrParentTNode, setIsParent, setPreviousOrParentTNode } from './state';\nimport { NO_CHANGE } from './tokens';\nimport { addAllToArray } from './util/array_utils';\nimport { renderStringify } from './util/misc_utils';\nimport { getNativeByIndex, getNativeByTNode, getTNode, isLContainer } from './util/view_utils';\n/** @type {?} */\nconst MARKER = `�`;\n/** @type {?} */\nconst ICU_BLOCK_REGEXP = /^\\s*(�\\d+:?\\d*�)\\s*,\\s*(select|plural)\\s*,/;\n/** @type {?} */\nconst SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\n/** @type {?} */\nconst PH_REGEXP = /�(\\/?[#*]\\d+):?\\d*�/gi;\n/** @type {?} */\nconst BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\n/** @type {?} */\nconst ICU_REGEXP = /({\\s*�\\d+:?\\d*�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\n// i18nPostprocess consts\n/** @type {?} */\nconst ROOT_TEMPLATE_ID = 0;\n/** @type {?} */\nconst PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]/;\n/** @type {?} */\nconst PP_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]|(�\\/?\\*\\d+:\\d+�)/g;\n/** @type {?} */\nconst PP_ICU_VARS_REGEXP = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\n/** @type {?} */\nconst PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\\d+)?)�/g;\n/** @type {?} */\nconst PP_CLOSE_TEMPLATE_REGEXP = /\\/\\*/;\n/** @type {?} */\nconst PP_TEMPLATE_ID_REGEXP = /\\d+\\:(\\d+)/;\n/**\n * @record\n */\nfunction IcuExpression() { }\nif (false) {\n    /** @type {?} */\n    IcuExpression.prototype.type;\n    /** @type {?} */\n    IcuExpression.prototype.mainBinding;\n    /** @type {?} */\n    IcuExpression.prototype.cases;\n    /** @type {?} */\n    IcuExpression.prototype.values;\n}\n/**\n * @record\n */\nfunction IcuCase() { }\nif (false) {\n    /**\n     * Number of slots to allocate in expando for this case.\n     *\n     * This is the max number of DOM elements which will be created by this i18n + ICU blocks. When\n     * the DOM elements are being created they are stored in the EXPANDO, so that update OpCodes can\n     * write into them.\n     * @type {?}\n     */\n    IcuCase.prototype.vars;\n    /**\n     * An optional array of child/sub ICUs.\n     * @type {?}\n     */\n    IcuCase.prototype.childIcus;\n    /**\n     * A set of OpCodes to apply in order to build up the DOM render tree for the ICU\n     * @type {?}\n     */\n    IcuCase.prototype.create;\n    /**\n     * A set of OpCodes to apply in order to destroy the DOM render tree for the ICU.\n     * @type {?}\n     */\n    IcuCase.prototype.remove;\n    /**\n     * A set of OpCodes to apply in order to update the DOM render tree for the ICU bindings.\n     * @type {?}\n     */\n    IcuCase.prototype.update;\n}\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression into\n * keys and cases.\n * Original code from closure library, modified for Angular.\n *\n * @param {?} pattern (sub)Pattern to be broken.\n *\n * @return {?}\n */\nfunction extractParts(pattern) {\n    if (!pattern) {\n        return [];\n    }\n    /** @type {?} */\n    let prevPos = 0;\n    /** @type {?} */\n    const braceStack = [];\n    /** @type {?} */\n    const results = [];\n    /** @type {?} */\n    const braces = /[{}]/g;\n    // lastIndex doesn't get set to 0 so we have to.\n    braces.lastIndex = 0;\n    /** @type {?} */\n    let match;\n    while (match = braces.exec(pattern)) {\n        /** @type {?} */\n        const pos = match.index;\n        if (match[0] == '}') {\n            braceStack.pop();\n            if (braceStack.length == 0) {\n                // End of the block.\n                /** @type {?} */\n                const block = pattern.substring(prevPos, pos);\n                if (ICU_BLOCK_REGEXP.test(block)) {\n                    results.push(parseICUBlock(block));\n                }\n                else if (block) { // Don't push empty strings\n                    results.push(block);\n                }\n                prevPos = pos + 1;\n            }\n        }\n        else {\n            if (braceStack.length == 0) {\n                /** @type {?} */\n                const substring = pattern.substring(prevPos, pos);\n                results.push(substring);\n                prevPos = pos + 1;\n            }\n            braceStack.push('{');\n        }\n    }\n    /** @type {?} */\n    const substring = pattern.substring(prevPos);\n    if (substring != '') {\n        results.push(substring);\n    }\n    return results;\n}\n/**\n * Parses text containing an ICU expression and produces a JSON object for it.\n * Original code from closure library, modified for Angular.\n *\n * @param {?} pattern Text containing an ICU expression that needs to be parsed.\n *\n * @return {?}\n */\nfunction parseICUBlock(pattern) {\n    /** @type {?} */\n    const cases = [];\n    /** @type {?} */\n    const values = [];\n    /** @type {?} */\n    let icuType = 1 /* plural */;\n    /** @type {?} */\n    let mainBinding = 0;\n    pattern = pattern.replace(ICU_BLOCK_REGEXP, function (str, binding, type) {\n        if (type === 'select') {\n            icuType = 0 /* select */;\n        }\n        else {\n            icuType = 1 /* plural */;\n        }\n        mainBinding = parseInt(binding.substr(1), 10);\n        return '';\n    });\n    /** @type {?} */\n    const parts = (/** @type {?} */ (extractParts(pattern)));\n    // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n    for (let pos = 0; pos < parts.length;) {\n        /** @type {?} */\n        let key = parts[pos++].trim();\n        if (icuType === 1 /* plural */) {\n            // Key can be \"=x\", we just want \"x\"\n            key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n        }\n        if (key.length) {\n            cases.push(key);\n        }\n        /** @type {?} */\n        const blocks = (/** @type {?} */ (extractParts(parts[pos++])));\n        if (blocks.length) {\n            values.push(blocks);\n        }\n    }\n    assertGreaterThan(cases.indexOf('other'), -1, 'Missing key \"other\" in ICU statement.');\n    // TODO(ocombe): support ICU expressions in attributes, see #21615\n    return { type: icuType, mainBinding: mainBinding, cases, values };\n}\n/**\n * Removes everything inside the sub-templates of a message.\n * @param {?} message\n * @return {?}\n */\nfunction removeInnerTemplateTranslation(message) {\n    /** @type {?} */\n    let match;\n    /** @type {?} */\n    let res = '';\n    /** @type {?} */\n    let index = 0;\n    /** @type {?} */\n    let inTemplate = false;\n    /** @type {?} */\n    let tagMatched;\n    while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n        if (!inTemplate) {\n            res += message.substring(index, match.index + match[0].length);\n            tagMatched = match[1];\n            inTemplate = true;\n        }\n        else {\n            if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {\n                index = match.index;\n                inTemplate = false;\n            }\n        }\n    }\n    ngDevMode &&\n        assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation \"${message}\"`);\n    res += message.substr(index);\n    return res;\n}\n/**\n * Extracts a part of a message and removes the rest.\n *\n * This method is used for extracting a part of the message associated with a template. A translated\n * message can span multiple templates.\n *\n * Example:\n * ```\n * <div i18n>Translate <span *ngIf>me</span>!</div>\n * ```\n *\n * @param {?} message The message to crop\n * @param {?=} subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n * external template and removes all sub-templates.\n * @return {?}\n */\nexport function getTranslationForTemplate(message, subTemplateIndex) {\n    if (typeof subTemplateIndex !== 'number') {\n        // We want the root template message, ignore all sub-templates\n        return removeInnerTemplateTranslation(message);\n    }\n    else {\n        // We want a specific sub-template\n        /** @type {?} */\n        const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;\n        /** @type {?} */\n        const end = message.search(new RegExp(`${MARKER}\\\\/\\\\*\\\\d+:${subTemplateIndex}${MARKER}`));\n        return removeInnerTemplateTranslation(message.substring(start, end));\n    }\n}\n/**\n * Generate the OpCodes to update the bindings of a string.\n *\n * @param {?} str The string containing the bindings.\n * @param {?} destinationNode Index of the destination node which will receive the binding.\n * @param {?=} attrName Name of the attribute, if the string belongs to an attribute.\n * @param {?=} sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n * @return {?}\n */\nfunction generateBindingUpdateOpCodes(str, destinationNode, attrName, sanitizeFn = null) {\n    /** @type {?} */\n    const updateOpCodes = [null, null];\n    // Alloc space for mask and size\n    /** @type {?} */\n    const textParts = str.split(BINDING_REGEXP);\n    /** @type {?} */\n    let mask = 0;\n    for (let j = 0; j < textParts.length; j++) {\n        /** @type {?} */\n        const textValue = textParts[j];\n        if (j & 1) {\n            // Odd indexes are bindings\n            /** @type {?} */\n            const bindingIndex = parseInt(textValue, 10);\n            updateOpCodes.push(-1 - bindingIndex);\n            mask = mask | toMaskBit(bindingIndex);\n        }\n        else if (textValue !== '') {\n            // Even indexes are text\n            updateOpCodes.push(textValue);\n        }\n    }\n    updateOpCodes.push(destinationNode << 2 /* SHIFT_REF */ |\n        (attrName ? 1 /* Attr */ : 0 /* Text */));\n    if (attrName) {\n        updateOpCodes.push(attrName, sanitizeFn);\n    }\n    updateOpCodes[0] = mask;\n    updateOpCodes[1] = updateOpCodes.length - 2;\n    return updateOpCodes;\n}\n/**\n * @param {?} icuExpression\n * @param {?=} mask\n * @return {?}\n */\nfunction getBindingMask(icuExpression, mask = 0) {\n    mask = mask | toMaskBit(icuExpression.mainBinding);\n    /** @type {?} */\n    let match;\n    for (let i = 0; i < icuExpression.values.length; i++) {\n        /** @type {?} */\n        const valueArr = icuExpression.values[i];\n        for (let j = 0; j < valueArr.length; j++) {\n            /** @type {?} */\n            const value = valueArr[j];\n            if (typeof value === 'string') {\n                while (match = BINDING_REGEXP.exec(value)) {\n                    mask = mask | toMaskBit(parseInt(match[1], 10));\n                }\n            }\n            else {\n                mask = getBindingMask((/** @type {?} */ (value)), mask);\n            }\n        }\n    }\n    return mask;\n}\n/** @type {?} */\nconst i18nIndexStack = [];\n/** @type {?} */\nlet i18nIndexStackPointer = -1;\n/**\n * Convert binding index to mask bit.\n *\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to have\n * more than 32 bindings this will be hit very rarely. The downside of hitting this corner case is\n * that we will execute binding code more often than necessary. (penalty of performance)\n * @param {?} bindingIndex\n * @return {?}\n */\nfunction toMaskBit(bindingIndex) {\n    return 1 << Math.min(bindingIndex, 31);\n}\n/** @type {?} */\nconst parentIndexStack = [];\n/**\n * Marks a block of text as translatable.\n *\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param {?} index A unique index of the translation in the static block.\n * @param {?} message The translation message.\n * @param {?=} subTemplateIndex Optional sub-template index in the `message`.\n * @return {?}\n */\nexport function i18nStart(index, message, subTemplateIndex) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    i18nIndexStack[++i18nIndexStackPointer] = index;\n    if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n        i18nStartFirstPass(tView, index, message, subTemplateIndex);\n    }\n}\n// Count for the number of vars that will be allocated for each i18n block.\n// It is global because this is used in multiple functions that include loops and recursive calls.\n// This is reset to 0 when `i18nStartFirstPass` is called.\n/** @type {?} */\nlet i18nVarsCount;\n/**\n * See `i18nStart` above.\n * @param {?} tView\n * @param {?} index\n * @param {?} message\n * @param {?=} subTemplateIndex\n * @return {?}\n */\nfunction i18nStartFirstPass(tView, index, message, subTemplateIndex) {\n    /** @type {?} */\n    const viewData = getLView();\n    /** @type {?} */\n    const startIndex = tView.blueprint.length - HEADER_OFFSET;\n    i18nVarsCount = 0;\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const parentTNode = getIsParent() ? getPreviousOrParentTNode() :\n        previousOrParentTNode && previousOrParentTNode.parent;\n    /** @type {?} */\n    let parentIndex = parentTNode && parentTNode !== viewData[T_HOST] ? parentTNode.index - HEADER_OFFSET : index;\n    /** @type {?} */\n    let parentIndexPointer = 0;\n    parentIndexStack[parentIndexPointer] = parentIndex;\n    /** @type {?} */\n    const createOpCodes = [];\n    // If the previous node wasn't the direct parent then we have a translation without top level\n    // element and we need to keep a reference of the previous element if there is one\n    if (index > 0 && previousOrParentTNode !== parentTNode) {\n        // Create an OpCode to select the previous TNode\n        createOpCodes.push(previousOrParentTNode.index << 3 /* SHIFT_REF */ | 0 /* Select */);\n    }\n    /** @type {?} */\n    const updateOpCodes = [];\n    /** @type {?} */\n    const icuExpressions = [];\n    /** @type {?} */\n    const templateTranslation = getTranslationForTemplate(message, subTemplateIndex);\n    /** @type {?} */\n    const msgParts = templateTranslation.split(PH_REGEXP);\n    for (let i = 0; i < msgParts.length; i++) {\n        /** @type {?} */\n        let value = msgParts[i];\n        if (i & 1) {\n            // Odd indexes are placeholders (elements and sub-templates)\n            if (value.charAt(0) === '/') {\n                // It is a closing tag\n                if (value.charAt(1) === '#') {\n                    /** @type {?} */\n                    const phIndex = parseInt(value.substr(2), 10);\n                    parentIndex = parentIndexStack[--parentIndexPointer];\n                    createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 5 /* ElementEnd */);\n                }\n            }\n            else {\n                /** @type {?} */\n                const phIndex = parseInt(value.substr(1), 10);\n                // The value represents a placeholder that we move to the designated index\n                createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 0 /* Select */, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                if (value.charAt(0) === '#') {\n                    parentIndexStack[++parentIndexPointer] = parentIndex = phIndex;\n                }\n            }\n        }\n        else {\n            // Even indexes are text (including bindings & ICU expressions)\n            /** @type {?} */\n            const parts = extractParts(value);\n            for (let j = 0; j < parts.length; j++) {\n                if (j & 1) {\n                    // Odd indexes are ICU expressions\n                    // Create the comment node that will anchor the ICU expression\n                    /** @type {?} */\n                    const icuNodeIndex = startIndex + i18nVarsCount++;\n                    createOpCodes.push(COMMENT_MARKER, ngDevMode ? `ICU ${icuNodeIndex}` : '', icuNodeIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    // Update codes for the ICU expression\n                    /** @type {?} */\n                    const icuExpression = (/** @type {?} */ (parts[j]));\n                    /** @type {?} */\n                    const mask = getBindingMask(icuExpression);\n                    icuStart(icuExpressions, icuExpression, icuNodeIndex, icuNodeIndex);\n                    // Since this is recursive, the last TIcu that was pushed is the one we want\n                    /** @type {?} */\n                    const tIcuIndex = icuExpressions.length - 1;\n                    updateOpCodes.push(toMaskBit(icuExpression.mainBinding), // mask of the main binding\n                    3, // skip 3 opCodes if not changed\n                    -1 - icuExpression.mainBinding, icuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, tIcuIndex, mask, // mask of all the bindings of this ICU expression\n                    2, // skip 2 opCodes if not changed\n                    icuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, tIcuIndex);\n                }\n                else if (parts[j] !== '') {\n                    /** @type {?} */\n                    const text = (/** @type {?} */ (parts[j]));\n                    // Even indexes are text (including bindings)\n                    /** @type {?} */\n                    const hasBinding = text.match(BINDING_REGEXP);\n                    // Create text nodes\n                    /** @type {?} */\n                    const textNodeIndex = startIndex + i18nVarsCount++;\n                    createOpCodes.push(\n                    // If there is a binding, the value will be set during update\n                    hasBinding ? '' : text, textNodeIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    if (hasBinding) {\n                        addAllToArray(generateBindingUpdateOpCodes(text, textNodeIndex), updateOpCodes);\n                    }\n                }\n            }\n        }\n    }\n    allocExpando(viewData, i18nVarsCount);\n    // NOTE: local var needed to properly assert the type of `TI18n`.\n    /** @type {?} */\n    const tI18n = {\n        vars: i18nVarsCount,\n        create: createOpCodes,\n        update: updateOpCodes,\n        icus: icuExpressions.length ? icuExpressions : null,\n    };\n    tView.data[index + HEADER_OFFSET] = tI18n;\n}\n/**\n * @param {?} tNode\n * @param {?} parentTNode\n * @param {?} previousTNode\n * @return {?}\n */\nfunction appendI18nNode(tNode, parentTNode, previousTNode) {\n    ngDevMode && ngDevMode.rendererMoveNode++;\n    /** @type {?} */\n    const nextNode = tNode.next;\n    /** @type {?} */\n    const viewData = getLView();\n    if (!previousTNode) {\n        previousTNode = parentTNode;\n    }\n    // Re-organize node tree to put this node in the correct position.\n    if (previousTNode === parentTNode && tNode !== parentTNode.child) {\n        tNode.next = parentTNode.child;\n        parentTNode.child = tNode;\n    }\n    else if (previousTNode !== parentTNode && tNode !== previousTNode.next) {\n        tNode.next = previousTNode.next;\n        previousTNode.next = tNode;\n    }\n    else {\n        tNode.next = null;\n    }\n    if (parentTNode !== viewData[T_HOST]) {\n        tNode.parent = (/** @type {?} */ (parentTNode));\n    }\n    // If tNode was moved around, we might need to fix a broken link.\n    /** @type {?} */\n    let cursor = tNode.next;\n    while (cursor) {\n        if (cursor.next === tNode) {\n            cursor.next = nextNode;\n        }\n        cursor = cursor.next;\n    }\n    appendChild(getNativeByTNode(tNode, viewData), tNode, viewData);\n    /** @type {?} */\n    const slotValue = viewData[tNode.index];\n    if (tNode.type !== 0 /* Container */ && isLContainer(slotValue)) {\n        // Nodes that inject ViewContainerRef also have a comment node that should be moved\n        appendChild(slotValue[NATIVE], tNode, viewData);\n    }\n    return tNode;\n}\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * \\@publicAPI\n * @param {?} message Raw translation string for post processing\n * @param {?=} replacements Set of replacements that should be applied\n *\n * @return {?} Transformed string that can be consumed by i18nStart instruction\n *\n */\nexport function i18nPostprocess(message, replacements = {}) {\n    /**\n     * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]\n     *\n     * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically\n     * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root\n     * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index\n     * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in\n     * front of �#6�. The post processing step restores the right order by keeping track of the\n     * template id stack and looks for placeholders that belong to the currently active template.\n     * @type {?}\n     */\n    let result = message;\n    if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {\n        /** @type {?} */\n        const matches = {};\n        /** @type {?} */\n        const templateIdsStack = [ROOT_TEMPLATE_ID];\n        result = result.replace(PP_PLACEHOLDERS_REGEXP, (m, phs, tmpl) => {\n            /** @type {?} */\n            const content = phs || tmpl;\n            if (!matches[content]) {\n                /** @type {?} */\n                const placeholders = [];\n                content.split('|').forEach((placeholder) => {\n                    /** @type {?} */\n                    const match = placeholder.match(PP_TEMPLATE_ID_REGEXP);\n                    /** @type {?} */\n                    const templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;\n                    /** @type {?} */\n                    const isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);\n                    placeholders.push([templateId, isCloseTemplateTag, placeholder]);\n                });\n                matches[content] = placeholders;\n            }\n            if (!matches[content].length) {\n                throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);\n            }\n            /** @type {?} */\n            const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];\n            /** @type {?} */\n            const placeholders = matches[content];\n            /** @type {?} */\n            let idx = 0;\n            // find placeholder index that matches current template id\n            for (let i = 0; i < placeholders.length; i++) {\n                if (placeholders[i][0] === currentTemplateId) {\n                    idx = i;\n                    break;\n                }\n            }\n            // update template id stack based on the current tag extracted\n            const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];\n            if (isCloseTemplateTag) {\n                templateIdsStack.pop();\n            }\n            else if (currentTemplateId !== templateId) {\n                templateIdsStack.push(templateId);\n            }\n            // remove processed tag from the list\n            placeholders.splice(idx, 1);\n            return placeholder;\n        });\n        // verify that we injected all values\n        /** @type {?} */\n        const hasUnmatchedValues = Object.keys(matches).some(key => !!matches[key].length);\n        if (hasUnmatchedValues) {\n            throw new Error(`i18n postprocess: unmatched values - ${JSON.stringify(matches)}`);\n        }\n    }\n    // return current result if no replacements specified\n    if (!Object.keys(replacements).length) {\n        return result;\n    }\n    /**\n     * Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n     */\n    result = result.replace(PP_ICU_VARS_REGEXP, (match, start, key, _type, _idx, end) => {\n        return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;\n    });\n    /**\n     * Step 3: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case\n     * multiple ICUs have the same placeholder name\n     */\n    result = result.replace(PP_ICUS_REGEXP, (match, key) => {\n        if (replacements.hasOwnProperty(key)) {\n            /** @type {?} */\n            const list = (/** @type {?} */ (replacements[key]));\n            if (!list.length) {\n                throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);\n            }\n            return (/** @type {?} */ (list.shift()));\n        }\n        return match;\n    });\n    return result;\n}\n/**\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n * @return {?}\n */\nexport function i18nEnd() {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    i18nEndFirstPass(tView);\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction findLastNode(node) {\n    while (node.next) {\n        node = node.next;\n    }\n    if (node.child) {\n        return findLastNode(node.child);\n    }\n    return node;\n}\n/**\n * See `i18nEnd` above.\n * @param {?} tView\n * @return {?}\n */\nfunction i18nEndFirstPass(tView) {\n    /** @type {?} */\n    const viewData = getLView();\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], viewData[TVIEW].bindingStartIndex, 'i18nEnd should be called before any binding');\n    /** @type {?} */\n    const rootIndex = i18nIndexStack[i18nIndexStackPointer--];\n    /** @type {?} */\n    const tI18n = (/** @type {?} */ (tView.data[rootIndex + HEADER_OFFSET]));\n    ngDevMode && assertDefined(tI18n, `You should call i18nStart before i18nEnd`);\n    // The last placeholder that was added before `i18nEnd`\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const visitedNodes = readCreateOpCodes(rootIndex, tI18n.create, tI18n.icus, viewData);\n    // Find the last node that was added before `i18nEnd`\n    /** @type {?} */\n    let lastCreatedNode = previousOrParentTNode;\n    if (lastCreatedNode.child) {\n        lastCreatedNode = findLastNode(lastCreatedNode.child);\n    }\n    // Remove deleted nodes\n    for (let i = rootIndex + 1; i <= lastCreatedNode.index - HEADER_OFFSET; i++) {\n        if (visitedNodes.indexOf(i) === -1) {\n            removeNode(i, viewData);\n        }\n    }\n}\n/**\n * Creates and stores the dynamic TNode, and unhooks it from the tree for now.\n * @param {?} index\n * @param {?} type\n * @param {?} native\n * @param {?} name\n * @return {?}\n */\nfunction createDynamicNodeAtIndex(index, type, native, name) {\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const tNode = createNodeAtIndex(index, (/** @type {?} */ (type)), native, name, null);\n    // We are creating a dynamic node, the previous tNode might not be pointing at this node.\n    // We will link ourselves into the tree later with `appendI18nNode`.\n    if (previousOrParentTNode.next === tNode) {\n        previousOrParentTNode.next = null;\n    }\n    return tNode;\n}\n/**\n * @param {?} index\n * @param {?} createOpCodes\n * @param {?} icus\n * @param {?} viewData\n * @return {?}\n */\nfunction readCreateOpCodes(index, createOpCodes, icus, viewData) {\n    /** @type {?} */\n    const renderer = getLView()[RENDERER];\n    /** @type {?} */\n    let currentTNode = null;\n    /** @type {?} */\n    let previousTNode = null;\n    /** @type {?} */\n    const visitedNodes = [];\n    for (let i = 0; i < createOpCodes.length; i++) {\n        /** @type {?} */\n        const opCode = createOpCodes[i];\n        if (typeof opCode == 'string') {\n            /** @type {?} */\n            const textRNode = createTextNode(opCode, renderer);\n            /** @type {?} */\n            const textNodeIndex = (/** @type {?} */ (createOpCodes[++i]));\n            ngDevMode && ngDevMode.rendererCreateTextNode++;\n            previousTNode = currentTNode;\n            currentTNode = createDynamicNodeAtIndex(textNodeIndex, 3 /* Element */, textRNode, null);\n            visitedNodes.push(textNodeIndex);\n            setIsParent(false);\n        }\n        else if (typeof opCode == 'number') {\n            switch (opCode & 7 /* MASK_OPCODE */) {\n                case 1 /* AppendChild */:\n                    /** @type {?} */\n                    const destinationNodeIndex = opCode >>> 17 /* SHIFT_PARENT */;\n                    /** @type {?} */\n                    let destinationTNode;\n                    if (destinationNodeIndex === index) {\n                        // If the destination node is `i18nStart`, we don't have a\n                        // top-level node and we should use the host node instead\n                        destinationTNode = (/** @type {?} */ (viewData[T_HOST]));\n                    }\n                    else {\n                        destinationTNode = getTNode(destinationNodeIndex, viewData);\n                    }\n                    ngDevMode &&\n                        assertDefined((/** @type {?} */ (currentTNode)), `You need to create or select a node before you can insert it into the DOM`);\n                    previousTNode = appendI18nNode((/** @type {?} */ (currentTNode)), destinationTNode, previousTNode);\n                    destinationTNode.next = null;\n                    break;\n                case 0 /* Select */:\n                    /** @type {?} */\n                    const nodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                    visitedNodes.push(nodeIndex);\n                    previousTNode = currentTNode;\n                    currentTNode = getTNode(nodeIndex, viewData);\n                    if (currentTNode) {\n                        setPreviousOrParentTNode(currentTNode);\n                        if (currentTNode.type === 3 /* Element */) {\n                            setIsParent(true);\n                        }\n                    }\n                    break;\n                case 5 /* ElementEnd */:\n                    /** @type {?} */\n                    const elementIndex = opCode >>> 3 /* SHIFT_REF */;\n                    previousTNode = currentTNode = getTNode(elementIndex, viewData);\n                    setPreviousOrParentTNode(currentTNode);\n                    setIsParent(false);\n                    break;\n                case 4 /* Attr */:\n                    /** @type {?} */\n                    const elementNodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                    /** @type {?} */\n                    const attrName = (/** @type {?} */ (createOpCodes[++i]));\n                    /** @type {?} */\n                    const attrValue = (/** @type {?} */ (createOpCodes[++i]));\n                    elementAttribute(elementNodeIndex, attrName, attrValue);\n                    break;\n                default:\n                    throw new Error(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n            }\n        }\n        else {\n            switch (opCode) {\n                case COMMENT_MARKER:\n                    /** @type {?} */\n                    const commentValue = (/** @type {?} */ (createOpCodes[++i]));\n                    /** @type {?} */\n                    const commentNodeIndex = (/** @type {?} */ (createOpCodes[++i]));\n                    ngDevMode && assertEqual(typeof commentValue, 'string', `Expected \"${commentValue}\" to be a comment node value`);\n                    /** @type {?} */\n                    const commentRNode = renderer.createComment(commentValue);\n                    ngDevMode && ngDevMode.rendererCreateComment++;\n                    previousTNode = currentTNode;\n                    currentTNode = createDynamicNodeAtIndex(commentNodeIndex, 5 /* IcuContainer */, commentRNode, null);\n                    visitedNodes.push(commentNodeIndex);\n                    attachPatchData(commentRNode, viewData);\n                    ((/** @type {?} */ (currentTNode))).activeCaseIndex = null;\n                    // We will add the case nodes later, during the update phase\n                    setIsParent(false);\n                    break;\n                case ELEMENT_MARKER:\n                    /** @type {?} */\n                    const tagNameValue = (/** @type {?} */ (createOpCodes[++i]));\n                    /** @type {?} */\n                    const elementNodeIndex = (/** @type {?} */ (createOpCodes[++i]));\n                    ngDevMode && assertEqual(typeof tagNameValue, 'string', `Expected \"${tagNameValue}\" to be an element node tag name`);\n                    /** @type {?} */\n                    const elementRNode = renderer.createElement(tagNameValue);\n                    ngDevMode && ngDevMode.rendererCreateElement++;\n                    previousTNode = currentTNode;\n                    currentTNode = createDynamicNodeAtIndex(elementNodeIndex, 3 /* Element */, elementRNode, tagNameValue);\n                    visitedNodes.push(elementNodeIndex);\n                    break;\n                default:\n                    throw new Error(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n            }\n        }\n    }\n    setIsParent(false);\n    return visitedNodes;\n}\n/**\n * @param {?} updateOpCodes\n * @param {?} icus\n * @param {?} bindingsStartIndex\n * @param {?} changeMask\n * @param {?} viewData\n * @param {?=} bypassCheckBit\n * @return {?}\n */\nfunction readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, viewData, bypassCheckBit = false) {\n    /** @type {?} */\n    let caseCreated = false;\n    for (let i = 0; i < updateOpCodes.length; i++) {\n        // bit code to check if we should apply the next update\n        /** @type {?} */\n        const checkBit = (/** @type {?} */ (updateOpCodes[i]));\n        // Number of opCodes to skip until next set of update codes\n        /** @type {?} */\n        const skipCodes = (/** @type {?} */ (updateOpCodes[++i]));\n        if (bypassCheckBit || (checkBit & changeMask)) {\n            // The value has been updated since last checked\n            /** @type {?} */\n            let value = '';\n            for (let j = i + 1; j <= (i + skipCodes); j++) {\n                /** @type {?} */\n                const opCode = updateOpCodes[j];\n                if (typeof opCode == 'string') {\n                    value += opCode;\n                }\n                else if (typeof opCode == 'number') {\n                    if (opCode < 0) {\n                        // It's a binding index whose value is negative\n                        value += renderStringify(viewData[bindingsStartIndex - opCode]);\n                    }\n                    else {\n                        /** @type {?} */\n                        const nodeIndex = opCode >>> 2 /* SHIFT_REF */;\n                        /** @type {?} */\n                        let tIcuIndex;\n                        /** @type {?} */\n                        let tIcu;\n                        /** @type {?} */\n                        let icuTNode;\n                        switch (opCode & 3 /* MASK_OPCODE */) {\n                            case 1 /* Attr */:\n                                /** @type {?} */\n                                const attrName = (/** @type {?} */ (updateOpCodes[++j]));\n                                /** @type {?} */\n                                const sanitizeFn = (/** @type {?} */ (updateOpCodes[++j]));\n                                elementAttribute(nodeIndex, attrName, value, sanitizeFn);\n                                break;\n                            case 0 /* Text */:\n                                textBinding(nodeIndex, value);\n                                break;\n                            case 2 /* IcuSwitch */:\n                                tIcuIndex = (/** @type {?} */ (updateOpCodes[++j]));\n                                tIcu = (/** @type {?} */ (icus))[tIcuIndex];\n                                icuTNode = (/** @type {?} */ (getTNode(nodeIndex, viewData)));\n                                // If there is an active case, delete the old nodes\n                                if (icuTNode.activeCaseIndex !== null) {\n                                    /** @type {?} */\n                                    const removeCodes = tIcu.remove[icuTNode.activeCaseIndex];\n                                    for (let k = 0; k < removeCodes.length; k++) {\n                                        /** @type {?} */\n                                        const removeOpCode = (/** @type {?} */ (removeCodes[k]));\n                                        switch (removeOpCode & 7 /* MASK_OPCODE */) {\n                                            case 3 /* Remove */:\n                                                /** @type {?} */\n                                                const nodeIndex = removeOpCode >>> 3 /* SHIFT_REF */;\n                                                removeNode(nodeIndex, viewData);\n                                                break;\n                                            case 6 /* RemoveNestedIcu */:\n                                                /** @type {?} */\n                                                const nestedIcuNodeIndex = (/** @type {?} */ (removeCodes[k + 1])) >>> 3 /* SHIFT_REF */;\n                                                /** @type {?} */\n                                                const nestedIcuTNode = (/** @type {?} */ (getTNode(nestedIcuNodeIndex, viewData)));\n                                                /** @type {?} */\n                                                const activeIndex = nestedIcuTNode.activeCaseIndex;\n                                                if (activeIndex !== null) {\n                                                    /** @type {?} */\n                                                    const nestedIcuTIndex = removeOpCode >>> 3 /* SHIFT_REF */;\n                                                    /** @type {?} */\n                                                    const nestedTIcu = (/** @type {?} */ (icus))[nestedIcuTIndex];\n                                                    addAllToArray(nestedTIcu.remove[activeIndex], removeCodes);\n                                                }\n                                                break;\n                                        }\n                                    }\n                                }\n                                // Update the active caseIndex\n                                /** @type {?} */\n                                const caseIndex = getCaseIndex(tIcu, value);\n                                icuTNode.activeCaseIndex = caseIndex !== -1 ? caseIndex : null;\n                                // Add the nodes for the new case\n                                readCreateOpCodes(-1, tIcu.create[caseIndex], icus, viewData);\n                                caseCreated = true;\n                                break;\n                            case 3 /* IcuUpdate */:\n                                tIcuIndex = (/** @type {?} */ (updateOpCodes[++j]));\n                                tIcu = (/** @type {?} */ (icus))[tIcuIndex];\n                                icuTNode = (/** @type {?} */ (getTNode(nodeIndex, viewData)));\n                                readUpdateOpCodes(tIcu.update[(/** @type {?} */ (icuTNode.activeCaseIndex))], icus, bindingsStartIndex, changeMask, viewData, caseCreated);\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        i += skipCodes;\n    }\n}\n/**\n * @param {?} index\n * @param {?} viewData\n * @return {?}\n */\nfunction removeNode(index, viewData) {\n    /** @type {?} */\n    const removedPhTNode = getTNode(index, viewData);\n    /** @type {?} */\n    const removedPhRNode = getNativeByIndex(index, viewData);\n    if (removedPhRNode) {\n        nativeRemoveNode(viewData[RENDERER], removedPhRNode);\n    }\n    /** @type {?} */\n    const slotValue = (/** @type {?} */ (load(index)));\n    if (isLContainer(slotValue)) {\n        /** @type {?} */\n        const lContainer = (/** @type {?} */ (slotValue));\n        if (removedPhTNode.type !== 0 /* Container */) {\n            nativeRemoveNode(viewData[RENDERER], lContainer[NATIVE]);\n        }\n    }\n    ngDevMode && ngDevMode.rendererRemoveNode++;\n}\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {\\@link i18nStart} and {\\@link i18nEnd} in one instruction.\n *\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param {?} index A unique index of the translation in the static block.\n * @param {?} message The translation message.\n * @param {?=} subTemplateIndex Optional sub-template index in the `message`.\n * @return {?}\n */\nexport function i18n(index, message, subTemplateIndex) {\n    i18nStart(index, message, subTemplateIndex);\n    i18nEnd();\n}\n/**\n * Marks a list of attributes as translatable.\n *\n * @param {?} index A unique index in the static block\n * @param {?} values\n * @return {?}\n */\nexport function i18nAttributes(index, values) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n        i18nAttributesFirstPass(tView, index, values);\n    }\n}\n/**\n * See `i18nAttributes` above.\n * @param {?} tView\n * @param {?} index\n * @param {?} values\n * @return {?}\n */\nfunction i18nAttributesFirstPass(tView, index, values) {\n    /** @type {?} */\n    const previousElement = getPreviousOrParentTNode();\n    /** @type {?} */\n    const previousElementIndex = previousElement.index - HEADER_OFFSET;\n    /** @type {?} */\n    const updateOpCodes = [];\n    for (let i = 0; i < values.length; i += 2) {\n        /** @type {?} */\n        const attrName = values[i];\n        /** @type {?} */\n        const message = values[i + 1];\n        /** @type {?} */\n        const parts = message.split(ICU_REGEXP);\n        for (let j = 0; j < parts.length; j++) {\n            /** @type {?} */\n            const value = parts[j];\n            if (j & 1) {\n                // Odd indexes are ICU expressions\n                // TODO(ocombe): support ICU expressions in attributes\n            }\n            else if (value !== '') {\n                // Even indexes are text (including bindings)\n                /** @type {?} */\n                const hasBinding = !!value.match(BINDING_REGEXP);\n                if (hasBinding) {\n                    addAllToArray(generateBindingUpdateOpCodes(value, previousElementIndex, attrName), updateOpCodes);\n                }\n                else {\n                    elementAttribute(previousElementIndex, attrName, value);\n                }\n            }\n        }\n    }\n    tView.data[index + HEADER_OFFSET] = updateOpCodes;\n}\n/** @type {?} */\nlet changeMask = 0b0;\n/** @type {?} */\nlet shiftsCounter = 0;\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * @template T\n * @param {?} expression The binding's new value or NO_CHANGE\n * @return {?}\n */\nexport function i18nExp(expression) {\n    if (expression !== NO_CHANGE) {\n        changeMask = changeMask | (1 << shiftsCounter);\n    }\n    shiftsCounter++;\n}\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * @param {?} index Index of either {\\@link i18nStart} (translation block) or {\\@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n * @return {?}\n */\nexport function i18nApply(index) {\n    if (shiftsCounter) {\n        /** @type {?} */\n        const lView = getLView();\n        /** @type {?} */\n        const tView = lView[TVIEW];\n        ngDevMode && assertDefined(tView, `tView should be defined`);\n        /** @type {?} */\n        const tI18n = tView.data[index + HEADER_OFFSET];\n        /** @type {?} */\n        let updateOpCodes;\n        /** @type {?} */\n        let icus = null;\n        if (Array.isArray(tI18n)) {\n            updateOpCodes = (/** @type {?} */ (tI18n));\n        }\n        else {\n            updateOpCodes = ((/** @type {?} */ (tI18n))).update;\n            icus = ((/** @type {?} */ (tI18n))).icus;\n        }\n        /** @type {?} */\n        const bindingsStartIndex = lView[BINDING_INDEX] - shiftsCounter - 1;\n        readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, lView);\n        // Reset changeMask & maskBit to default for the next update cycle\n        changeMask = 0b0;\n        shiftsCounter = 0;\n    }\n}\n/** @enum {number} */\nconst Plural = {\n    Zero: 0,\n    One: 1,\n    Two: 2,\n    Few: 3,\n    Many: 4,\n    Other: 5,\n};\nPlural[Plural.Zero] = 'Zero';\nPlural[Plural.One] = 'One';\nPlural[Plural.Two] = 'Two';\nPlural[Plural.Few] = 'Few';\nPlural[Plural.Many] = 'Many';\nPlural[Plural.Other] = 'Other';\n/**\n * Returns the plural case based on the locale.\n * This is a copy of the deprecated function that we used in Angular v4.\n * // TODO(ocombe): remove this once we can the real getPluralCase function\n *\n * @deprecated from v5 the plural case function is in locale data files common/locales/*.ts\n * @param {?} locale\n * @param {?} nLike\n * @return {?}\n */\nfunction getPluralCase(locale, nLike) {\n    if (typeof nLike === 'string') {\n        nLike = parseInt((/** @type {?} */ (nLike)), 10);\n    }\n    /** @type {?} */\n    const n = (/** @type {?} */ (nLike));\n    /** @type {?} */\n    const nDecimal = n.toString().replace(/^[^.]*\\.?/, '');\n    /** @type {?} */\n    const i = Math.floor(Math.abs(n));\n    /** @type {?} */\n    const v = nDecimal.length;\n    /** @type {?} */\n    const f = parseInt(nDecimal, 10);\n    /** @type {?} */\n    const t = parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\n    /** @type {?} */\n    const lang = locale.split('-')[0].toLowerCase();\n    switch (lang) {\n        case 'af':\n        case 'asa':\n        case 'az':\n        case 'bem':\n        case 'bez':\n        case 'bg':\n        case 'brx':\n        case 'ce':\n        case 'cgg':\n        case 'chr':\n        case 'ckb':\n        case 'ee':\n        case 'el':\n        case 'eo':\n        case 'es':\n        case 'eu':\n        case 'fo':\n        case 'fur':\n        case 'gsw':\n        case 'ha':\n        case 'haw':\n        case 'hu':\n        case 'jgo':\n        case 'jmc':\n        case 'ka':\n        case 'kk':\n        case 'kkj':\n        case 'kl':\n        case 'ks':\n        case 'ksb':\n        case 'ky':\n        case 'lb':\n        case 'lg':\n        case 'mas':\n        case 'mgo':\n        case 'ml':\n        case 'mn':\n        case 'nb':\n        case 'nd':\n        case 'ne':\n        case 'nn':\n        case 'nnh':\n        case 'nyn':\n        case 'om':\n        case 'or':\n        case 'os':\n        case 'ps':\n        case 'rm':\n        case 'rof':\n        case 'rwk':\n        case 'saq':\n        case 'seh':\n        case 'sn':\n        case 'so':\n        case 'sq':\n        case 'ta':\n        case 'te':\n        case 'teo':\n        case 'tk':\n        case 'tr':\n        case 'ug':\n        case 'uz':\n        case 'vo':\n        case 'vun':\n        case 'wae':\n        case 'xog':\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ak':\n        case 'ln':\n        case 'mg':\n        case 'pa':\n        case 'ti':\n            if (n === Math.floor(n) && n >= 0 && n <= 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'am':\n        case 'as':\n        case 'bn':\n        case 'fa':\n        case 'gu':\n        case 'hi':\n        case 'kn':\n        case 'mr':\n        case 'zu':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ar':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)\n                return Plural.Many;\n            return Plural.Other;\n        case 'ast':\n        case 'ca':\n        case 'de':\n        case 'en':\n        case 'et':\n        case 'fi':\n        case 'fy':\n        case 'gl':\n        case 'it':\n        case 'nl':\n        case 'sv':\n        case 'sw':\n        case 'ur':\n        case 'yi':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            return Plural.Other;\n        case 'be':\n            if (n % 10 === 1 && !(n % 100 === 11))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&\n                !(n % 100 >= 12 && n % 100 <= 14))\n                return Plural.Few;\n            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||\n                n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'br':\n            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))\n                return Plural.One;\n            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))\n                return Plural.Two;\n            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&\n                !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||\n                    n % 100 >= 90 && n % 100 <= 99))\n                return Plural.Few;\n            if (!(n === 0) && n % 1e6 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'bs':\n        case 'hr':\n        case 'sr':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14) ||\n                f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&\n                    !(f % 100 >= 12 && f % 100 <= 14))\n                return Plural.Few;\n            return Plural.Other;\n        case 'cs':\n        case 'sk':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'cy':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === 3)\n                return Plural.Few;\n            if (n === 6)\n                return Plural.Many;\n            return Plural.Other;\n        case 'da':\n            if (n === 1 || !(t === 0) && (i === 0 || i === 1))\n                return Plural.One;\n            return Plural.Other;\n        case 'dsb':\n        case 'hsb':\n            if (v === 0 && i % 100 === 1 || f % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2 || f % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||\n                f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ff':\n        case 'fr':\n        case 'hy':\n        case 'kab':\n            if (i === 0 || i === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'fil':\n            if (v === 0 && (i === 1 || i === 2 || i === 3) ||\n                v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||\n                !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))\n                return Plural.One;\n            return Plural.Other;\n        case 'ga':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === Math.floor(n) && n >= 3 && n <= 6)\n                return Plural.Few;\n            if (n === Math.floor(n) && n >= 7 && n <= 10)\n                return Plural.Many;\n            return Plural.Other;\n        case 'gd':\n            if (n === 1 || n === 11)\n                return Plural.One;\n            if (n === 2 || n === 12)\n                return Plural.Two;\n            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))\n                return Plural.Few;\n            return Plural.Other;\n        case 'gv':\n            if (v === 0 && i % 10 === 1)\n                return Plural.One;\n            if (v === 0 && i % 10 === 2)\n                return Plural.Two;\n            if (v === 0 &&\n                (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'he':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === 2 && v === 0)\n                return Plural.Two;\n            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'is':\n            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'ksh':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'kw':\n        case 'naq':\n        case 'se':\n        case 'smn':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            return Plural.Other;\n        case 'lag':\n            if (n === 0)\n                return Plural.Zero;\n            if ((i === 0 || i === 1) && !(n === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'lt':\n            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&\n                !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.Few;\n            if (!(f === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'lv':\n        case 'prg':\n            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||\n                v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)\n                return Plural.Zero;\n            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||\n                !(v === 2) && f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mk':\n            if (v === 0 && i % 10 === 1 || f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mt':\n            if (n === 1)\n                return Plural.One;\n            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pl':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pt':\n            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))\n                return Plural.One;\n            return Plural.Other;\n        case 'ro':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (!(v === 0) || n === 0 ||\n                !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ru':\n        case 'uk':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && i % 10 === 0 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'shi':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            if (n === Math.floor(n) && n >= 2 && n <= 10)\n                return Plural.Few;\n            return Plural.Other;\n        case 'si':\n            if (n === 0 || n === 1 || i === 0 && f === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'sl':\n            if (v === 0 && i % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))\n                return Plural.Few;\n            return Plural.Other;\n        case 'tzm':\n            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)\n                return Plural.One;\n            return Plural.Other;\n        // When there is no specification, the default is always \"other\"\n        // Spec: http://cldr.unicode.org/index/cldr-spec/plural-rules\n        // > other (required—general plural form — also used if the language only has a single form)\n        default:\n            return Plural.Other;\n    }\n}\n/**\n * @param {?} value\n * @param {?} locale\n * @return {?}\n */\nfunction getPluralCategory(value, locale) {\n    /** @type {?} */\n    const plural = getPluralCase(locale, value);\n    switch (plural) {\n        case Plural.Zero:\n            return 'zero';\n        case Plural.One:\n            return 'one';\n        case Plural.Two:\n            return 'two';\n        case Plural.Few:\n            return 'few';\n        case Plural.Many:\n            return 'many';\n        default:\n            return 'other';\n    }\n}\n/**\n * Returns the index of the current case of an ICU expression depending on the main binding value\n *\n * @param {?} icuExpression\n * @param {?} bindingValue The value of the main binding used by this ICU expression\n * @return {?}\n */\nfunction getCaseIndex(icuExpression, bindingValue) {\n    /** @type {?} */\n    let index = icuExpression.cases.indexOf(bindingValue);\n    if (index === -1) {\n        switch (icuExpression.type) {\n            case 1 /* plural */: {\n                // TODO(ocombe): replace this hard-coded value by the real LOCALE_ID value\n                /** @type {?} */\n                const locale = 'en-US';\n                /** @type {?} */\n                const resolvedCase = getPluralCategory(bindingValue, locale);\n                index = icuExpression.cases.indexOf(resolvedCase);\n                if (index === -1 && resolvedCase !== 'other') {\n                    index = icuExpression.cases.indexOf('other');\n                }\n                break;\n            }\n            case 0 /* select */: {\n                index = icuExpression.cases.indexOf('other');\n                break;\n            }\n        }\n    }\n    return index;\n}\n/**\n * Generate the OpCodes for ICU expressions.\n *\n * @param {?} tIcus\n * @param {?} icuExpression\n * @param {?} startIndex\n * @param {?} expandoStartIndex\n * @return {?}\n */\nfunction icuStart(tIcus, icuExpression, startIndex, expandoStartIndex) {\n    /** @type {?} */\n    const createCodes = [];\n    /** @type {?} */\n    const removeCodes = [];\n    /** @type {?} */\n    const updateCodes = [];\n    /** @type {?} */\n    const vars = [];\n    /** @type {?} */\n    const childIcus = [];\n    for (let i = 0; i < icuExpression.values.length; i++) {\n        // Each value is an array of strings & other ICU expressions\n        /** @type {?} */\n        const valueArr = icuExpression.values[i];\n        /** @type {?} */\n        const nestedIcus = [];\n        for (let j = 0; j < valueArr.length; j++) {\n            /** @type {?} */\n            const value = valueArr[j];\n            if (typeof value !== 'string') {\n                // It is an nested ICU expression\n                /** @type {?} */\n                const icuIndex = nestedIcus.push((/** @type {?} */ (value))) - 1;\n                // Replace nested ICU expression by a comment node\n                valueArr[j] = `<!--�${icuIndex}�-->`;\n            }\n        }\n        /** @type {?} */\n        const icuCase = parseIcuCase(valueArr.join(''), startIndex, nestedIcus, tIcus, expandoStartIndex);\n        createCodes.push(icuCase.create);\n        removeCodes.push(icuCase.remove);\n        updateCodes.push(icuCase.update);\n        vars.push(icuCase.vars);\n        childIcus.push(icuCase.childIcus);\n    }\n    /** @type {?} */\n    const tIcu = {\n        type: icuExpression.type,\n        vars,\n        childIcus,\n        cases: icuExpression.cases,\n        create: createCodes,\n        remove: removeCodes,\n        update: updateCodes\n    };\n    tIcus.push(tIcu);\n    // Adding the maximum possible of vars needed (based on the cases with the most vars)\n    i18nVarsCount += Math.max(...vars);\n}\n/**\n * Transforms a string template into an HTML template and a list of instructions used to update\n * attributes or nodes that contain bindings.\n *\n * @param {?} unsafeHtml The string to parse\n * @param {?} parentIndex\n * @param {?} nestedIcus\n * @param {?} tIcus\n * @param {?} expandoStartIndex\n * @return {?}\n */\nfunction parseIcuCase(unsafeHtml, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n    /** @type {?} */\n    const inertBodyHelper = new InertBodyHelper(document);\n    /** @type {?} */\n    const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    if (!inertBodyElement) {\n        throw new Error('Unable to generate inert body element');\n    }\n    /** @type {?} */\n    const wrapper = (/** @type {?} */ (getTemplateContent((/** @type {?} */ (inertBodyElement))))) || inertBodyElement;\n    /** @type {?} */\n    const opCodes = { vars: 0, childIcus: [], create: [], remove: [], update: [] };\n    parseNodes(wrapper.firstChild, opCodes, parentIndex, nestedIcus, tIcus, expandoStartIndex);\n    return opCodes;\n}\n/** @type {?} */\nconst NESTED_ICU = /�(\\d+)�/;\n/**\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n *\n * @param {?} currentNode The first node to parse\n * @param {?} icuCase The data for the ICU expression case that contains those nodes\n * @param {?} parentIndex Index of the current node's parent\n * @param {?} nestedIcus Data for the nested ICU expressions that this case contains\n * @param {?} tIcus Data for all ICU expressions of the current message\n * @param {?} expandoStartIndex Expando start index for the current ICU expression\n * @return {?}\n */\nfunction parseNodes(currentNode, icuCase, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n    if (currentNode) {\n        /** @type {?} */\n        const nestedIcusToCreate = [];\n        while (currentNode) {\n            /** @type {?} */\n            const nextNode = currentNode.nextSibling;\n            /** @type {?} */\n            const newIndex = expandoStartIndex + ++icuCase.vars;\n            switch (currentNode.nodeType) {\n                case Node.ELEMENT_NODE:\n                    /** @type {?} */\n                    const element = (/** @type {?} */ (currentNode));\n                    /** @type {?} */\n                    const tagName = element.tagName.toLowerCase();\n                    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n                        // This isn't a valid element, we won't create an element for it\n                        icuCase.vars--;\n                    }\n                    else {\n                        icuCase.create.push(ELEMENT_MARKER, tagName, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        /** @type {?} */\n                        const elAttrs = element.attributes;\n                        for (let i = 0; i < elAttrs.length; i++) {\n                            /** @type {?} */\n                            const attr = (/** @type {?} */ (elAttrs.item(i)));\n                            /** @type {?} */\n                            const lowerAttrName = attr.name.toLowerCase();\n                            /** @type {?} */\n                            const hasBinding = !!attr.value.match(BINDING_REGEXP);\n                            // we assume the input string is safe, unless it's using a binding\n                            if (hasBinding) {\n                                if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                                    if (URI_ATTRS[lowerAttrName]) {\n                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, _sanitizeUrl), icuCase.update);\n                                    }\n                                    else if (SRCSET_ATTRS[lowerAttrName]) {\n                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, sanitizeSrcset), icuCase.update);\n                                    }\n                                    else {\n                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name), icuCase.update);\n                                    }\n                                }\n                                else {\n                                    ngDevMode &&\n                                        console.warn(`WARNING: ignoring unsafe attribute value ${lowerAttrName} on element ${tagName} (see http://g.co/ng/security#xss)`);\n                                }\n                            }\n                            else {\n                                icuCase.create.push(newIndex << 3 /* SHIFT_REF */ | 4 /* Attr */, attr.name, attr.value);\n                            }\n                        }\n                        // Parse the children of this node (if any)\n                        parseNodes(currentNode.firstChild, icuCase, newIndex, nestedIcus, tIcus, expandoStartIndex);\n                        // Remove the parent node after the children\n                        icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n                    }\n                    break;\n                case Node.TEXT_NODE:\n                    /** @type {?} */\n                    const value = currentNode.textContent || '';\n                    /** @type {?} */\n                    const hasBinding = value.match(BINDING_REGEXP);\n                    icuCase.create.push(hasBinding ? '' : value, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n                    if (hasBinding) {\n                        addAllToArray(generateBindingUpdateOpCodes(value, newIndex), icuCase.update);\n                    }\n                    break;\n                case Node.COMMENT_NODE:\n                    // Check if the comment node is a placeholder for a nested ICU\n                    /** @type {?} */\n                    const match = NESTED_ICU.exec(currentNode.textContent || '');\n                    if (match) {\n                        /** @type {?} */\n                        const nestedIcuIndex = parseInt(match[1], 10);\n                        /** @type {?} */\n                        const newLocal = ngDevMode ? `nested ICU ${nestedIcuIndex}` : '';\n                        // Create the comment node that will anchor the ICU expression\n                        icuCase.create.push(COMMENT_MARKER, newLocal, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        /** @type {?} */\n                        const nestedIcu = nestedIcus[nestedIcuIndex];\n                        nestedIcusToCreate.push([nestedIcu, newIndex]);\n                    }\n                    else {\n                        // We do not handle any other type of comment\n                        icuCase.vars--;\n                    }\n                    break;\n                default:\n                    // We do not handle any other type of element\n                    icuCase.vars--;\n            }\n            currentNode = (/** @type {?} */ (nextNode));\n        }\n        for (let i = 0; i < nestedIcusToCreate.length; i++) {\n            /** @type {?} */\n            const nestedIcu = nestedIcusToCreate[i][0];\n            /** @type {?} */\n            const nestedIcuNodeIndex = nestedIcusToCreate[i][1];\n            icuStart(tIcus, nestedIcu, nestedIcuNodeIndex, expandoStartIndex + icuCase.vars);\n            // Since this is recursive, the last TIcu that was pushed is the one we want\n            /** @type {?} */\n            const nestTIcuIndex = tIcus.length - 1;\n            icuCase.vars += Math.max(...tIcus[nestTIcuIndex].vars);\n            icuCase.childIcus.push(nestTIcuIndex);\n            /** @type {?} */\n            const mask = getBindingMask(nestedIcu);\n            icuCase.update.push(toMaskBit(nestedIcu.mainBinding), // mask of the main binding\n            3, // skip 3 opCodes if not changed\n            -1 - nestedIcu.mainBinding, nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, nestTIcuIndex, mask, // mask of all the bindings of this ICU expression\n            2, // skip 2 opCodes if not changed\n            nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, nestTIcuIndex);\n            icuCase.remove.push(nestTIcuIndex << 3 /* SHIFT_REF */ | 6 /* RemoveNestedIcu */, nestedIcuNodeIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// The functions in this file verify that the assumptions we are making\n// about state in an instruction are correct before implementing any logic.\n// They are meant only to be called in dev mode as sanity checks.\nexport function assertNumber(actual, msg) {\n    if (typeof actual != 'number') {\n        throwError(msg);\n    }\n}\nexport function assertEqual(actual, expected, msg) {\n    if (actual != expected) {\n        throwError(msg);\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (actual == expected) {\n        throwError(msg);\n    }\n}\nexport function assertSame(actual, expected, msg) {\n    if (actual !== expected) {\n        throwError(msg);\n    }\n}\nexport function assertLessThan(actual, expected, msg) {\n    if (actual >= expected) {\n        throwError(msg);\n    }\n}\nexport function assertGreaterThan(actual, expected, msg) {\n    if (actual <= expected) {\n        throwError(msg);\n    }\n}\nexport function assertNotDefined(actual, msg) {\n    if (actual != null) {\n        throwError(msg);\n    }\n}\nexport function assertDefined(actual, msg) {\n    if (actual == null) {\n        throwError(msg);\n    }\n}\nexport function throwError(msg) {\n    // tslint:disable-next-line\n    debugger; // Left intentionally for better debugger experience.\n    throw new Error(`ASSERTION ERROR: ${msg}`);\n}\nexport function assertDomNode(node) {\n    // If we're in a worker, `Node` will not be defined.\n    assertEqual((typeof Node !== 'undefined' && node instanceof Node) ||\n        (typeof node === 'object' && node.constructor.name === 'WebWorkerRenderNode'), true, 'The provided value must be an instance of a DOM Node');\n}\nexport function assertDataInRange(arr, index) {\n    assertLessThan(index, arr ? arr.length : 0, 'index expected to be a valid data index');\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvdXRpbC9hc3NlcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsdUVBQXVFO0FBQ3ZFLDJFQUEyRTtBQUMzRSxpRUFBaUU7QUFFakUsTUFBTSxVQUFVLFlBQVksQ0FBQyxNQUFXLEVBQUUsR0FBVztJQUNuRCxJQUFJLE9BQU8sTUFBTSxJQUFJLFFBQVEsRUFBRTtRQUM3QixVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDakI7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBSSxNQUFTLEVBQUUsUUFBVyxFQUFFLEdBQVc7SUFDaEUsSUFBSSxNQUFNLElBQUksUUFBUSxFQUFFO1FBQ3RCLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNqQjtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFJLE1BQVMsRUFBRSxRQUFXLEVBQUUsR0FBVztJQUNuRSxJQUFJLE1BQU0sSUFBSSxRQUFRLEVBQUU7UUFDdEIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2pCO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUksTUFBUyxFQUFFLFFBQVcsRUFBRSxHQUFXO0lBQy9ELElBQUksTUFBTSxLQUFLLFFBQVEsRUFBRTtRQUN2QixVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDakI7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FBSSxNQUFTLEVBQUUsUUFBVyxFQUFFLEdBQVc7SUFDbkUsSUFBSSxNQUFNLElBQUksUUFBUSxFQUFFO1FBQ3RCLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNqQjtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQUksTUFBUyxFQUFFLFFBQVcsRUFBRSxHQUFXO0lBQ3RFLElBQUksTUFBTSxJQUFJLFFBQVEsRUFBRTtRQUN0QixVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDakI7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUFJLE1BQVMsRUFBRSxHQUFXO0lBQ3hELElBQUksTUFBTSxJQUFJLElBQUksRUFBRTtRQUNsQixVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDakI7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBSSxNQUFTLEVBQUUsR0FBVztJQUNyRCxJQUFJLE1BQU0sSUFBSSxJQUFJLEVBQUU7UUFDbEIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2pCO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsR0FBVztJQUNwQywyQkFBMkI7SUFDM0IsUUFBUSxDQUFDLENBQUUscURBQXFEO0lBQ2hFLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsSUFBUztJQUNyQyxvREFBb0Q7SUFDcEQsV0FBVyxDQUNQLENBQUMsT0FBTyxJQUFJLEtBQUssV0FBVyxJQUFJLElBQUksWUFBWSxJQUFJLENBQUM7UUFDakQsQ0FBQyxPQUFPLElBQUksS0FBSyxRQUFRLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUsscUJBQXFCLENBQUMsRUFDakYsSUFBSSxFQUFFLHNEQUFzRCxDQUFDLENBQUM7QUFDcEUsQ0FBQztBQUdELE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxHQUFVLEVBQUUsS0FBYTtJQUN6RCxjQUFjLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLHlDQUF5QyxDQUFDLENBQUM7QUFDekYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLy8gVGhlIGZ1bmN0aW9ucyBpbiB0aGlzIGZpbGUgdmVyaWZ5IHRoYXQgdGhlIGFzc3VtcHRpb25zIHdlIGFyZSBtYWtpbmdcbi8vIGFib3V0IHN0YXRlIGluIGFuIGluc3RydWN0aW9uIGFyZSBjb3JyZWN0IGJlZm9yZSBpbXBsZW1lbnRpbmcgYW55IGxvZ2ljLlxuLy8gVGhleSBhcmUgbWVhbnQgb25seSB0byBiZSBjYWxsZWQgaW4gZGV2IG1vZGUgYXMgc2FuaXR5IGNoZWNrcy5cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydE51bWJlcihhY3R1YWw6IGFueSwgbXNnOiBzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBhY3R1YWwgIT0gJ251bWJlcicpIHtcbiAgICB0aHJvd0Vycm9yKG1zZyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEVxdWFsPFQ+KGFjdHVhbDogVCwgZXhwZWN0ZWQ6IFQsIG1zZzogc3RyaW5nKSB7XG4gIGlmIChhY3R1YWwgIT0gZXhwZWN0ZWQpIHtcbiAgICB0aHJvd0Vycm9yKG1zZyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydE5vdEVxdWFsPFQ+KGFjdHVhbDogVCwgZXhwZWN0ZWQ6IFQsIG1zZzogc3RyaW5nKSB7XG4gIGlmIChhY3R1YWwgPT0gZXhwZWN0ZWQpIHtcbiAgICB0aHJvd0Vycm9yKG1zZyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFNhbWU8VD4oYWN0dWFsOiBULCBleHBlY3RlZDogVCwgbXNnOiBzdHJpbmcpIHtcbiAgaWYgKGFjdHVhbCAhPT0gZXhwZWN0ZWQpIHtcbiAgICB0aHJvd0Vycm9yKG1zZyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydExlc3NUaGFuPFQ+KGFjdHVhbDogVCwgZXhwZWN0ZWQ6IFQsIG1zZzogc3RyaW5nKSB7XG4gIGlmIChhY3R1YWwgPj0gZXhwZWN0ZWQpIHtcbiAgICB0aHJvd0Vycm9yKG1zZyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEdyZWF0ZXJUaGFuPFQ+KGFjdHVhbDogVCwgZXhwZWN0ZWQ6IFQsIG1zZzogc3RyaW5nKSB7XG4gIGlmIChhY3R1YWwgPD0gZXhwZWN0ZWQpIHtcbiAgICB0aHJvd0Vycm9yKG1zZyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydE5vdERlZmluZWQ8VD4oYWN0dWFsOiBULCBtc2c6IHN0cmluZykge1xuICBpZiAoYWN0dWFsICE9IG51bGwpIHtcbiAgICB0aHJvd0Vycm9yKG1zZyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydERlZmluZWQ8VD4oYWN0dWFsOiBULCBtc2c6IHN0cmluZykge1xuICBpZiAoYWN0dWFsID09IG51bGwpIHtcbiAgICB0aHJvd0Vycm9yKG1zZyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRocm93RXJyb3IobXNnOiBzdHJpbmcpOiBuZXZlciB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICBkZWJ1Z2dlcjsgIC8vIExlZnQgaW50ZW50aW9uYWxseSBmb3IgYmV0dGVyIGRlYnVnZ2VyIGV4cGVyaWVuY2UuXG4gIHRocm93IG5ldyBFcnJvcihgQVNTRVJUSU9OIEVSUk9SOiAke21zZ31gKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydERvbU5vZGUobm9kZTogYW55KSB7XG4gIC8vIElmIHdlJ3JlIGluIGEgd29ya2VyLCBgTm9kZWAgd2lsbCBub3QgYmUgZGVmaW5lZC5cbiAgYXNzZXJ0RXF1YWwoXG4gICAgICAodHlwZW9mIE5vZGUgIT09ICd1bmRlZmluZWQnICYmIG5vZGUgaW5zdGFuY2VvZiBOb2RlKSB8fFxuICAgICAgICAgICh0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcgJiYgbm9kZS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnV2ViV29ya2VyUmVuZGVyTm9kZScpLFxuICAgICAgdHJ1ZSwgJ1RoZSBwcm92aWRlZCB2YWx1ZSBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIGEgRE9NIE5vZGUnKTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RGF0YUluUmFuZ2UoYXJyOiBhbnlbXSwgaW5kZXg6IG51bWJlcikge1xuICBhc3NlcnRMZXNzVGhhbihpbmRleCwgYXJyID8gYXJyLmxlbmd0aCA6IDAsICdpbmRleCBleHBlY3RlZCB0byBiZSBhIHZhbGlkIGRhdGEgaW5kZXgnKTtcbn1cbiJdfQ==","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst BRAND = '__SANITIZER_TRUSTED_BRAND__';\n/** @enum {string} */\nconst BypassType = {\n    Url: 'Url',\n    Html: 'Html',\n    ResourceUrl: 'ResourceUrl',\n    Script: 'Script',\n    Style: 'Style',\n};\nexport { BypassType };\n/**\n * A branded trusted string used with sanitization.\n *\n * See: {\\@link TrustedHtmlString}, {\\@link TrustedResourceUrlString}, {\\@link TrustedScriptString},\n * {\\@link TrustedStyleString}, {\\@link TrustedUrlString}\n * @record\n */\nexport function TrustedString() { }\nif (false) {\n    /* Skipping unnamed member:\n    [BRAND]: BypassType;*/\n}\n/**\n * A branded trusted string used with sanitization of `html` strings.\n *\n * See: {\\@link bypassSanitizationTrustHtml} and {\\@link htmlSanitizer}.\n * @record\n */\nexport function TrustedHtmlString() { }\nif (false) {\n    /* Skipping unnamed member:\n    [BRAND]: BypassType.Html;*/\n}\n/**\n * A branded trusted string used with sanitization of `style` strings.\n *\n * See: {\\@link bypassSanitizationTrustStyle} and {\\@link styleSanitizer}.\n * @record\n */\nexport function TrustedStyleString() { }\nif (false) {\n    /* Skipping unnamed member:\n    [BRAND]: BypassType.Style;*/\n}\n/**\n * A branded trusted string used with sanitization of `url` strings.\n *\n * See: {\\@link bypassSanitizationTrustScript} and {\\@link scriptSanitizer}.\n * @record\n */\nexport function TrustedScriptString() { }\nif (false) {\n    /* Skipping unnamed member:\n    [BRAND]: BypassType.Script;*/\n}\n/**\n * A branded trusted string used with sanitization of `url` strings.\n *\n * See: {\\@link bypassSanitizationTrustUrl} and {\\@link urlSanitizer}.\n * @record\n */\nexport function TrustedUrlString() { }\nif (false) {\n    /* Skipping unnamed member:\n    [BRAND]: BypassType.Url;*/\n}\n/**\n * A branded trusted string used with sanitization of `resourceUrl` strings.\n *\n * See: {\\@link bypassSanitizationTrustResourceUrl} and {\\@link resourceUrlSanitizer}.\n * @record\n */\nexport function TrustedResourceUrlString() { }\nif (false) {\n    /* Skipping unnamed member:\n    [BRAND]: BypassType.ResourceUrl;*/\n}\n/**\n * @param {?} value\n * @param {?} type\n * @return {?}\n */\nexport function allowSanitizationBypass(value, type) {\n    return (value instanceof String && ((/** @type {?} */ (value)))[BRAND] === type);\n}\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link htmlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedHtml `html` string which needs to be implicitly trusted.\n * @return {?} a `html` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustHtml(trustedHtml) {\n    return bypassSanitizationTrustString(trustedHtml, \"Html\" /* Html */);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link styleSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedStyle `style` string which needs to be implicitly trusted.\n * @return {?} a `style` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustStyle(trustedStyle) {\n    return bypassSanitizationTrustString(trustedStyle, \"Style\" /* Style */);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link scriptSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedScript `script` string which needs to be implicitly trusted.\n * @return {?} a `script` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustScript(trustedScript) {\n    return bypassSanitizationTrustString(trustedScript, \"Script\" /* Script */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link urlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustUrl(trustedUrl) {\n    return bypassSanitizationTrustString(trustedUrl, \"Url\" /* Url */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n    return bypassSanitizationTrustString(trustedResourceUrl, \"ResourceUrl\" /* ResourceUrl */);\n}\n/**\n * @param {?} trustedString\n * @param {?} mode\n * @return {?}\n */\nfunction bypassSanitizationTrustString(trustedString, mode) {\n    /** @type {?} */\n    const trusted = (/** @type {?} */ (new String(trustedString)));\n    trusted[BRAND] = mode;\n    return trusted;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst SecurityContext = {\n    NONE: 0,\n    HTML: 1,\n    STYLE: 2,\n    SCRIPT: 3,\n    URL: 4,\n    RESOURCE_URL: 5,\n};\nexport { SecurityContext };\nSecurityContext[SecurityContext.NONE] = 'NONE';\nSecurityContext[SecurityContext.HTML] = 'HTML';\nSecurityContext[SecurityContext.STYLE] = 'STYLE';\nSecurityContext[SecurityContext.SCRIPT] = 'SCRIPT';\nSecurityContext[SecurityContext.URL] = 'URL';\nSecurityContext[SecurityContext.RESOURCE_URL] = 'RESOURCE_URL';\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * \\@publicApi\n * @abstract\n */\nexport class Sanitizer {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} context\n     * @param {?} value\n     * @return {?}\n     */\n    Sanitizer.prototype.sanitize = function (context, value) { };\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdXJpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9zYW5pdGl6YXRpb24vc2VjdXJpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztJQWtCRSxPQUFRO0lBQ1IsT0FBUTtJQUNSLFFBQVM7SUFDVCxTQUFVO0lBQ1YsTUFBTztJQUNQLGVBQWdCOzs7Ozs7Ozs7Ozs7Ozs7QUFRbEIsTUFBTSxPQUFnQixTQUFTO0NBRTlCOzs7Ozs7OztJQURDLDZEQUFnRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLyoqXG4gKiBBIFNlY3VyaXR5Q29udGV4dCBtYXJrcyBhIGxvY2F0aW9uIHRoYXQgaGFzIGRhbmdlcm91cyBzZWN1cml0eSBpbXBsaWNhdGlvbnMsIGUuZy4gYSBET00gcHJvcGVydHlcbiAqIGxpa2UgYGlubmVySFRNTGAgdGhhdCBjb3VsZCBjYXVzZSBDcm9zcyBTaXRlIFNjcmlwdGluZyAoWFNTKSBzZWN1cml0eSBidWdzIHdoZW4gaW1wcm9wZXJseVxuICogaGFuZGxlZC5cbiAqXG4gKiBTZWUgRG9tU2FuaXRpemVyIGZvciBtb3JlIGRldGFpbHMgb24gc2VjdXJpdHkgaW4gQW5ndWxhciBhcHBsaWNhdGlvbnMuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgZW51bSBTZWN1cml0eUNvbnRleHQge1xuICBOT05FID0gMCxcbiAgSFRNTCA9IDEsXG4gIFNUWUxFID0gMixcbiAgU0NSSVBUID0gMyxcbiAgVVJMID0gNCxcbiAgUkVTT1VSQ0VfVVJMID0gNSxcbn1cblxuLyoqXG4gKiBTYW5pdGl6ZXIgaXMgdXNlZCBieSB0aGUgdmlld3MgdG8gc2FuaXRpemUgcG90ZW50aWFsbHkgZGFuZ2Vyb3VzIHZhbHVlcy5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTYW5pdGl6ZXIge1xuICBhYnN0cmFjdCBzYW5pdGl6ZShjb250ZXh0OiBTZWN1cml0eUNvbnRleHQsIHZhbHVlOiB7fXxzdHJpbmd8bnVsbCk6IHN0cmluZ3xudWxsO1xufVxuIl19","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../util/is_dev_mode';\nimport { _sanitizeUrl } from './url_sanitizer';\n/**\n * Regular expression for safe style values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n *\n * The function expression checks only for XSS safety, not for CSS validity.\n *\n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n * @type {?}\n */\nconst VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\n/** @type {?} */\nconst TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\n/** @type {?} */\nconst COLOR_FNS = '(?:rgb|hsl)a?';\n/** @type {?} */\nconst GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\n/** @type {?} */\nconst CSS3_FNS = '(?:calc|attr)';\n/** @type {?} */\nconst FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\n/** @type {?} */\nconst SAFE_STYLE_VALUE = new RegExp(`^(${VALUES}|` +\n    `(?:${TRANSFORMATION_FNS}|${COLOR_FNS}|${GRADIENTS}|${CSS3_FNS})` +\n    `${FN_ARGS})$`, 'g');\n/**\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n *\n * The URL value still needs to be sanitized separately.\n *\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n *\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n *\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n * @type {?}\n */\nconst URL_RE = /^url\\(([^)]+)\\)$/;\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n *\n * This code was taken from the Closure sanitization library.\n * @param {?} value\n * @return {?}\n */\nfunction hasBalancedQuotes(value) {\n    /** @type {?} */\n    let outsideSingle = true;\n    /** @type {?} */\n    let outsideDouble = true;\n    for (let i = 0; i < value.length; i++) {\n        /** @type {?} */\n        const c = value.charAt(i);\n        if (c === '\\'' && outsideDouble) {\n            outsideSingle = !outsideSingle;\n        }\n        else if (c === '\"' && outsideSingle) {\n            outsideDouble = !outsideDouble;\n        }\n    }\n    return outsideSingle && outsideDouble;\n}\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n * @param {?} value\n * @return {?}\n */\nexport function _sanitizeStyle(value) {\n    value = String(value).trim(); // Make sure it's actually a string.\n    if (!value)\n        return '';\n    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n    // reasoning behind this.\n    /** @type {?} */\n    const urlMatch = value.match(URL_RE);\n    if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n        return value; // Safe style values.\n    }\n    if (isDevMode()) {\n        console.warn(`WARNING: sanitizing unsafe style value ${value} (see http://g.co/ng/security#xss).`);\n    }\n    return 'unsafe';\n}\n/**\n * Used to intercept and sanitize style values before they are written to the renderer.\n *\n * This function is designed to be called in two modes. When a value is not provided\n * then the function will return a boolean whether a property will be sanitized later.\n * If a value is provided then the sanitized version of that will be returned.\n * @record\n */\nexport function StyleSanitizeFn() { }\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SANITIZER } from '../render3/interfaces/view';\nimport { getLView } from '../render3/state';\nimport { renderStringify } from '../render3/util/misc_utils';\nimport { allowSanitizationBypass } from './bypass';\nimport { _sanitizeHtml as _sanitizeHtml } from './html_sanitizer';\nimport { SecurityContext } from './security';\nimport { _sanitizeStyle as _sanitizeStyle } from './style_sanitizer';\nimport { _sanitizeUrl as _sanitizeUrl } from './url_sanitizer';\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustHtml}.\n *\n * @param {?} unsafeHtml untrusted `html`, typically from the user.\n * @return {?} `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n */\nexport function sanitizeHtml(unsafeHtml) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '';\n    }\n    if (allowSanitizationBypass(unsafeHtml, \"Html\" /* Html */)) {\n        return unsafeHtml.toString();\n    }\n    return _sanitizeHtml(document, renderStringify(unsafeHtml));\n}\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `style` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustStyle}.\n *\n * @param {?} unsafeStyle untrusted `style`, typically from the user.\n * @return {?} `style` string which is safe to bind to the `style` properties, because all of the\n * dangerous javascript and urls have been removed.\n */\nexport function sanitizeStyle(unsafeStyle) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n    }\n    if (allowSanitizationBypass(unsafeStyle, \"Style\" /* Style */)) {\n        return unsafeStyle.toString();\n    }\n    return _sanitizeStyle(renderStringify(unsafeStyle));\n}\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustUrl}.\n *\n * @param {?} unsafeUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n */\nexport function sanitizeUrl(unsafeUrl) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n    }\n    if (allowSanitizationBypass(unsafeUrl, \"Url\" /* Url */)) {\n        return unsafeUrl.toString();\n    }\n    return _sanitizeUrl(renderStringify(unsafeUrl));\n}\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {\\@link bypassSanitizationTrustResourceUrl}.\n *\n * @param {?} unsafeResourceUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n */\nexport function sanitizeResourceUrl(unsafeResourceUrl) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '';\n    }\n    if (allowSanitizationBypass(unsafeResourceUrl, \"ResourceUrl\" /* ResourceUrl */)) {\n        return unsafeResourceUrl.toString();\n    }\n    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n}\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {\\@link\n * bypassSanitizationTrustScript}.\n *\n * @param {?} unsafeScript untrusted `script`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts` have been allowed to pass.\n */\nexport function sanitizeScript(unsafeScript) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '';\n    }\n    if (allowSanitizationBypass(unsafeScript, \"Script\" /* Script */)) {\n        return unsafeScript.toString();\n    }\n    throw new Error('unsafe value used in a script context');\n}\n/**\n * Detects which sanitizer to use for URL property, based on tag name and prop name.\n *\n * The rules are based on the RESOURCE_URL context config from\n * `packages/compiler/src/schema/dom_security_schema.ts`.\n * If tag and prop names don't match Resource URL schema, use URL sanitizer.\n * @param {?} tag\n * @param {?} prop\n * @return {?}\n */\nexport function getUrlSanitizer(tag, prop) {\n    if ((prop === 'src' && (tag === 'embed' || tag === 'frame' || tag === 'iframe' ||\n        tag === 'media' || tag === 'script')) ||\n        (prop === 'href' && (tag === 'base' || tag === 'link'))) {\n        return sanitizeResourceUrl;\n    }\n    return sanitizeUrl;\n}\n/**\n * Sanitizes URL, selecting sanitizer function based on tag and property names.\n *\n * This function is used in case we can't define security context at compile time, when only prop\n * name is available. This happens when we generate host bindings for Directives/Components. The\n * host element is unknown at compile time, so we defer calculation of specific sanitizer to\n * runtime.\n *\n * @param {?} unsafeUrl untrusted `url`, typically from the user.\n * @param {?} tag target element tag name.\n * @param {?} prop name of the property that contains the value.\n * @return {?} `url` string which is safe to bind.\n */\nexport function sanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {\n    return getUrlSanitizer(tag, prop)(unsafeUrl);\n}\n/**\n * The default style sanitizer will handle sanitization for style properties by\n * sanitizing any CSS property that can include a `url` value (usually image-based properties)\n * @type {?}\n */\nexport const defaultStyleSanitizer = ((/** @type {?} */ (function (prop, value) {\n    if (value === undefined) {\n        return prop === 'background-image' || prop === 'background' || prop === 'border-image' ||\n            prop === 'filter' || prop === 'list-style' || prop === 'list-style-image';\n    }\n    return sanitizeStyle(value);\n})));\n/**\n * @param {?} name\n * @return {?}\n */\nexport function validateAgainstEventProperties(name) {\n    if (name.toLowerCase().startsWith('on')) {\n        /** @type {?} */\n        const msg = `Binding to event property '${name}' is disallowed for security reasons, ` +\n            `please use (${name.slice(2)})=...` +\n            `\\nIf '${name}' is a directive input, make sure the directive is imported by the` +\n            ` current module.`;\n        throw new Error(msg);\n    }\n}\n/**\n * @param {?} name\n * @return {?}\n */\nexport function validateAgainstEventAttributes(name) {\n    if (name.toLowerCase().startsWith('on')) {\n        /** @type {?} */\n        const msg = `Binding to event attribute '${name}' is disallowed for security reasons, ` +\n            `please use (${name.slice(2)})=...`;\n        throw new Error(msg);\n    }\n}\n/**\n * @return {?}\n */\nfunction getSanitizer() {\n    /** @type {?} */\n    const lView = getLView();\n    return lView && lView[SANITIZER];\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable, defineInjector, } from '../../di/interface/defs';\nimport { inject } from '../../di/injector_compatibility';\nimport * as r3 from '../index';\nimport * as sanitization from '../../sanitization/sanitization';\n/**\n * A mapping of the \\@angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of \\@angular/core.\n * @type {?}\n */\nexport const angularCoreEnv = {\n    'ɵdefineBase': r3.defineBase,\n    'ɵdefineComponent': r3.defineComponent,\n    'ɵdefineDirective': r3.defineDirective,\n    'defineInjectable': defineInjectable,\n    'defineInjector': defineInjector,\n    'ɵdefineNgModule': r3.defineNgModule,\n    'ɵdefinePipe': r3.definePipe,\n    'ɵdirectiveInject': r3.directiveInject,\n    'ɵgetFactoryOf': r3.getFactoryOf,\n    'ɵgetInheritedFactory': r3.getInheritedFactory,\n    'inject': inject,\n    'ɵinjectAttribute': r3.injectAttribute,\n    'ɵtemplateRefExtractor': r3.templateRefExtractor,\n    'ɵNgOnChangesFeature': r3.NgOnChangesFeature,\n    'ɵProvidersFeature': r3.ProvidersFeature,\n    'ɵInheritDefinitionFeature': r3.InheritDefinitionFeature,\n    'ɵelementAttribute': r3.elementAttribute,\n    'ɵbind': r3.bind,\n    'ɵcontainer': r3.container,\n    'ɵnextContext': r3.nextContext,\n    'ɵcontainerRefreshStart': r3.containerRefreshStart,\n    'ɵcontainerRefreshEnd': r3.containerRefreshEnd,\n    'ɵnamespaceHTML': r3.namespaceHTML,\n    'ɵnamespaceMathML': r3.namespaceMathML,\n    'ɵnamespaceSVG': r3.namespaceSVG,\n    'ɵenableBindings': r3.enableBindings,\n    'ɵdisableBindings': r3.disableBindings,\n    'ɵallocHostVars': r3.allocHostVars,\n    'ɵelementStart': r3.elementStart,\n    'ɵelementEnd': r3.elementEnd,\n    'ɵelement': r3.element,\n    'ɵelementContainerStart': r3.elementContainerStart,\n    'ɵelementContainerEnd': r3.elementContainerEnd,\n    'ɵpureFunction0': r3.pureFunction0,\n    'ɵpureFunction1': r3.pureFunction1,\n    'ɵpureFunction2': r3.pureFunction2,\n    'ɵpureFunction3': r3.pureFunction3,\n    'ɵpureFunction4': r3.pureFunction4,\n    'ɵpureFunction5': r3.pureFunction5,\n    'ɵpureFunction6': r3.pureFunction6,\n    'ɵpureFunction7': r3.pureFunction7,\n    'ɵpureFunction8': r3.pureFunction8,\n    'ɵpureFunctionV': r3.pureFunctionV,\n    'ɵgetCurrentView': r3.getCurrentView,\n    'ɵrestoreView': r3.restoreView,\n    'ɵinterpolation1': r3.interpolation1,\n    'ɵinterpolation2': r3.interpolation2,\n    'ɵinterpolation3': r3.interpolation3,\n    'ɵinterpolation4': r3.interpolation4,\n    'ɵinterpolation5': r3.interpolation5,\n    'ɵinterpolation6': r3.interpolation6,\n    'ɵinterpolation7': r3.interpolation7,\n    'ɵinterpolation8': r3.interpolation8,\n    'ɵinterpolationV': r3.interpolationV,\n    'ɵelementClassProp': r3.elementClassProp,\n    'ɵlistener': r3.listener,\n    'ɵload': r3.load,\n    'ɵprojection': r3.projection,\n    'ɵelementProperty': r3.elementProperty,\n    'ɵcomponentHostSyntheticProperty': r3.componentHostSyntheticProperty,\n    'ɵcomponentHostSyntheticListener': r3.componentHostSyntheticListener,\n    'ɵpipeBind1': r3.pipeBind1,\n    'ɵpipeBind2': r3.pipeBind2,\n    'ɵpipeBind3': r3.pipeBind3,\n    'ɵpipeBind4': r3.pipeBind4,\n    'ɵpipeBindV': r3.pipeBindV,\n    'ɵprojectionDef': r3.projectionDef,\n    'ɵpipe': r3.pipe,\n    'ɵqueryRefresh': r3.queryRefresh,\n    'ɵviewQuery': r3.viewQuery,\n    'ɵstaticViewQuery': r3.staticViewQuery,\n    'ɵstaticContentQuery': r3.staticContentQuery,\n    'ɵloadViewQuery': r3.loadViewQuery,\n    'ɵcontentQuery': r3.contentQuery,\n    'ɵloadContentQuery': r3.loadContentQuery,\n    'ɵreference': r3.reference,\n    'ɵelementStyling': r3.elementStyling,\n    'ɵelementHostAttrs': r3.elementHostAttrs,\n    'ɵelementStylingMap': r3.elementStylingMap,\n    'ɵelementStyleProp': r3.elementStyleProp,\n    'ɵelementStylingApply': r3.elementStylingApply,\n    'ɵflushHooksUpTo': r3.flushHooksUpTo,\n    'ɵtemplate': r3.template,\n    'ɵtext': r3.text,\n    'ɵtextBinding': r3.textBinding,\n    'ɵembeddedViewStart': r3.embeddedViewStart,\n    'ɵembeddedViewEnd': r3.embeddedViewEnd,\n    'ɵi18n': r3.i18n,\n    'ɵi18nAttributes': r3.i18nAttributes,\n    'ɵi18nExp': r3.i18nExp,\n    'ɵi18nStart': r3.i18nStart,\n    'ɵi18nEnd': r3.i18nEnd,\n    'ɵi18nApply': r3.i18nApply,\n    'ɵi18nPostprocess': r3.i18nPostprocess,\n    'ɵresolveWindow': r3.resolveWindow,\n    'ɵresolveDocument': r3.resolveDocument,\n    'ɵresolveBody': r3.resolveBody,\n    'ɵsetComponentScope': r3.setComponentScope,\n    'ɵsanitizeHtml': sanitization.sanitizeHtml,\n    'ɵsanitizeStyle': sanitization.sanitizeStyle,\n    'ɵdefaultStyleSanitizer': sanitization.defaultStyleSanitizer,\n    'ɵsanitizeResourceUrl': sanitization.sanitizeResourceUrl,\n    'ɵsanitizeScript': sanitization.sanitizeScript,\n    'ɵsanitizeUrl': sanitization.sanitizeUrl,\n    'ɵsanitizeUrlOrResourceUrl': sanitization.sanitizeUrlOrResourceUrl\n};\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef as ViewEngine_ElementRef } from '../linker/element_ref';\nimport { TemplateRef as ViewEngine_TemplateRef } from '../linker/template_ref';\nimport { createTemplateRef } from './view_engine_compatibility';\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nexport function templateRefExtractor(tNode, currentView) {\n    return createTemplateRef(ViewEngine_TemplateRef, ViewEngine_ElementRef, tNode, currentView);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld19lbmdpbmVfY29tcGF0aWJpbGl0eV9wcmVib3VuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3JlbmRlcjMvdmlld19lbmdpbmVfY29tcGF0aWJpbGl0eV9wcmVib3VuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQVNBLE9BQU8sRUFBQyxVQUFVLElBQUkscUJBQXFCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRSxPQUFPLEVBQUMsV0FBVyxJQUFJLHNCQUFzQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFJN0UsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7Ozs7Ozs7O0FBUTlELE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxLQUFZLEVBQUUsV0FBa0I7SUFDbkUsT0FBTyxpQkFBaUIsQ0FBQyxzQkFBc0IsRUFBRSxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDOUYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuXG5pbXBvcnQge0VsZW1lbnRSZWYgYXMgVmlld0VuZ2luZV9FbGVtZW50UmVmfSBmcm9tICcuLi9saW5rZXIvZWxlbWVudF9yZWYnO1xuaW1wb3J0IHtUZW1wbGF0ZVJlZiBhcyBWaWV3RW5naW5lX1RlbXBsYXRlUmVmfSBmcm9tICcuLi9saW5rZXIvdGVtcGxhdGVfcmVmJztcblxuaW1wb3J0IHtUTm9kZX0gZnJvbSAnLi9pbnRlcmZhY2VzL25vZGUnO1xuaW1wb3J0IHtMVmlld30gZnJvbSAnLi9pbnRlcmZhY2VzL3ZpZXcnO1xuaW1wb3J0IHtjcmVhdGVUZW1wbGF0ZVJlZn0gZnJvbSAnLi92aWV3X2VuZ2luZV9jb21wYXRpYmlsaXR5JztcblxuXG5cbi8qKlxuICogUmV0cmlldmVzIGBUZW1wbGF0ZVJlZmAgaW5zdGFuY2UgZnJvbSBgSW5qZWN0b3JgIHdoZW4gYSBsb2NhbCByZWZlcmVuY2UgaXMgcGxhY2VkIG9uIHRoZVxuICogYDxuZy10ZW1wbGF0ZT5gIGVsZW1lbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0ZW1wbGF0ZVJlZkV4dHJhY3Rvcih0Tm9kZTogVE5vZGUsIGN1cnJlbnRWaWV3OiBMVmlldykge1xuICByZXR1cm4gY3JlYXRlVGVtcGxhdGVSZWYoVmlld0VuZ2luZV9UZW1wbGF0ZVJlZiwgVmlld0VuZ2luZV9FbGVtZW50UmVmLCB0Tm9kZSwgY3VycmVudFZpZXcpO1xufVxuIl19","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport { providersResolver } from '../di_setup';\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ngComponentDef = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    consts: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        text(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        textBinding(0, bind(ctx.greeter.greet()));\n *      }\n *    },\n *    features: [ProvidersFeature([GreeterDE])]\n *  });\n * }\n *\n * @template T\n * @param {?} providers\n * @param {?=} viewProviders\n * @return {?}\n */\nexport function ProvidersFeature(providers, viewProviders = []) {\n    return (definition) => {\n        definition.providersResolver = (def) => providersResolver(def, providers, viewProviders);\n    };\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXJzX2ZlYXR1cmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL2ZlYXR1cmVzL3Byb3ZpZGVyc19mZWF0dXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFRQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxhQUFhLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBK0I5QyxNQUFNLFVBQVUsZ0JBQWdCLENBQUksU0FBcUIsRUFBRSxnQkFBNEIsRUFBRTtJQUN2RixPQUFPLENBQUMsVUFBMkIsRUFBRSxFQUFFO1FBQ3JDLFVBQVUsQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLEdBQW9CLEVBQUUsRUFBRSxDQUNwRCxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3ZELENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQge1Byb3ZpZGVyfSBmcm9tICcuLi8uLi9kaS9pbnRlcmZhY2UvcHJvdmlkZXInO1xuaW1wb3J0IHtwcm92aWRlcnNSZXNvbHZlcn0gZnJvbSAnLi4vZGlfc2V0dXAnO1xuaW1wb3J0IHtEaXJlY3RpdmVEZWZ9IGZyb20gJy4uL2ludGVyZmFjZXMvZGVmaW5pdGlvbic7XG5cbi8qKlxuICogVGhpcyBmZWF0dXJlIHJlc29sdmVzIHRoZSBwcm92aWRlcnMgb2YgYSBkaXJlY3RpdmUgKG9yIGNvbXBvbmVudCksXG4gKiBhbmQgcHVibGlzaCB0aGVtIGludG8gdGhlIERJIHN5c3RlbSwgbWFraW5nIGl0IHZpc2libGUgdG8gb3RoZXJzIGZvciBpbmplY3Rpb24uXG4gKlxuICogRm9yIGV4YW1wbGU6XG4gKiBjbGFzcyBDb21wb25lbnRXaXRoUHJvdmlkZXJzIHtcbiAqICAgY29uc3RydWN0b3IocHJpdmF0ZSBncmVldGVyOiBHcmVldGVyREUpIHt9XG4gKlxuICogICBzdGF0aWMgbmdDb21wb25lbnREZWYgPSBkZWZpbmVDb21wb25lbnQoe1xuICogICAgIHR5cGU6IENvbXBvbmVudFdpdGhQcm92aWRlcnMsXG4gKiAgICAgc2VsZWN0b3JzOiBbWydjb21wb25lbnQtd2l0aC1wcm92aWRlcnMnXV0sXG4gKiAgICBmYWN0b3J5OiAoKSA9PiBuZXcgQ29tcG9uZW50V2l0aFByb3ZpZGVycyhkaXJlY3RpdmVJbmplY3QoR3JlZXRlckRFIGFzIGFueSkpLFxuICogICAgY29uc3RzOiAxLFxuICogICAgdmFyczogMSxcbiAqICAgIHRlbXBsYXRlOiBmdW5jdGlvbihmczogUmVuZGVyRmxhZ3MsIGN0eDogQ29tcG9uZW50V2l0aFByb3ZpZGVycykge1xuICogICAgICBpZiAoZnMgJiBSZW5kZXJGbGFncy5DcmVhdGUpIHtcbiAqICAgICAgICB0ZXh0KDApO1xuICogICAgICB9XG4gKiAgICAgIGlmIChmcyAmIFJlbmRlckZsYWdzLlVwZGF0ZSkge1xuICogICAgICAgIHRleHRCaW5kaW5nKDAsIGJpbmQoY3R4LmdyZWV0ZXIuZ3JlZXQoKSkpO1xuICogICAgICB9XG4gKiAgICB9LFxuICogICAgZmVhdHVyZXM6IFtQcm92aWRlcnNGZWF0dXJlKFtHcmVldGVyREVdKV1cbiAqICB9KTtcbiAqIH1cbiAqXG4gKiBAcGFyYW0gZGVmaW5pdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gUHJvdmlkZXJzRmVhdHVyZTxUPihwcm92aWRlcnM6IFByb3ZpZGVyW10sIHZpZXdQcm92aWRlcnM6IFByb3ZpZGVyW10gPSBbXSkge1xuICByZXR1cm4gKGRlZmluaXRpb246IERpcmVjdGl2ZURlZjxUPikgPT4ge1xuICAgIGRlZmluaXRpb24ucHJvdmlkZXJzUmVzb2x2ZXIgPSAoZGVmOiBEaXJlY3RpdmVEZWY8VD4pID0+XG4gICAgICAgIHByb3ZpZGVyc1Jlc29sdmVyKGRlZiwgcHJvdmlkZXJzLCB2aWV3UHJvdmlkZXJzKTtcbiAgfTtcbn1cbiJdfQ==","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * \\@publicApi\n * @abstract\n * @template C\n */\nexport class ComponentRef {\n}\nif (false) {\n    /**\n     * The host or anchor [element](guide/glossary#element) for this component instance.\n     * @abstract\n     * @return {?}\n     */\n    ComponentRef.prototype.location = function () { };\n    /**\n     * The [dependency injector](guide/glossary#injector) for this component instance.\n     * @abstract\n     * @return {?}\n     */\n    ComponentRef.prototype.injector = function () { };\n    /**\n     * This component instance.\n     * @abstract\n     * @return {?}\n     */\n    ComponentRef.prototype.instance = function () { };\n    /**\n     * The [host view](guide/glossary#view-tree) defined by the template\n     * for this component instance.\n     * @abstract\n     * @return {?}\n     */\n    ComponentRef.prototype.hostView = function () { };\n    /**\n     * The change detector for this component instance.\n     * @abstract\n     * @return {?}\n     */\n    ComponentRef.prototype.changeDetectorRef = function () { };\n    /**\n     * The component type.\n     * @abstract\n     * @return {?}\n     */\n    ComponentRef.prototype.componentType = function () { };\n    /**\n     * Destroys the component instance and all of the data structures associated with it.\n     * @abstract\n     * @return {?}\n     */\n    ComponentRef.prototype.destroy = function () { };\n    /**\n     * A lifecycle hook that provides additional developer-defined cleanup\n     * functionality for the component.\n     * @abstract\n     * @param {?} callback A handler function that cleans up developer-defined data\n     * associated with this component. Called when the `destroy()` method is invoked.\n     * @return {?}\n     */\n    ComponentRef.prototype.onDestroy = function (callback) { };\n}\n/**\n * \\@publicApi\n * @abstract\n * @template C\n */\nexport class ComponentFactory {\n}\nif (false) {\n    /**\n     * The component's HTML selector.\n     * @abstract\n     * @return {?}\n     */\n    ComponentFactory.prototype.selector = function () { };\n    /**\n     * The component's type\n     * @abstract\n     * @return {?}\n     */\n    ComponentFactory.prototype.componentType = function () { };\n    /**\n     * Selector for all <ng-content> elements in the component.\n     * @abstract\n     * @return {?}\n     */\n    ComponentFactory.prototype.ngContentSelectors = function () { };\n    /**\n     * The inputs of the component.\n     * @abstract\n     * @return {?}\n     */\n    ComponentFactory.prototype.inputs = function () { };\n    /**\n     * The outputs of the component.\n     * @abstract\n     * @return {?}\n     */\n    ComponentFactory.prototype.outputs = function () { };\n    /**\n     * Creates a new component.\n     * @abstract\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) { };\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50X2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saW5rZXIvY29tcG9uZW50X2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkEsTUFBTSxPQUFnQixZQUFZO0NBNENqQzs7Ozs7OztJQXhDQyxrREFBb0M7Ozs7OztJQUtwQyxrREFBa0M7Ozs7OztJQUtsQyxrREFBMkI7Ozs7Ozs7SUFNM0Isa0RBQWlDOzs7Ozs7SUFLakMsMkRBQW9EOzs7Ozs7SUFLcEQsdURBQXdDOzs7Ozs7SUFLeEMsaURBQXlCOzs7Ozs7Ozs7SUFRekIsMkRBQTZDOzs7Ozs7O0FBTS9DLE1BQU0sT0FBZ0IsZ0JBQWdCO0NBMkJyQzs7Ozs7OztJQXZCQyxzREFBZ0M7Ozs7OztJQUloQywyREFBd0M7Ozs7OztJQUl4QyxnRUFBNEM7Ozs7OztJQUk1QyxvREFBa0U7Ozs7OztJQUlsRSxxREFBbUU7Ozs7Ozs7Ozs7SUFJbkUsNEdBRWtEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0NoYW5nZURldGVjdG9yUmVmfSBmcm9tICcuLi9jaGFuZ2VfZGV0ZWN0aW9uL2NoYW5nZV9kZXRlY3Rpb24nO1xuaW1wb3J0IHtJbmplY3Rvcn0gZnJvbSAnLi4vZGkvaW5qZWN0b3InO1xuaW1wb3J0IHtUeXBlfSBmcm9tICcuLi9pbnRlcmZhY2UvdHlwZSc7XG5cbmltcG9ydCB7RWxlbWVudFJlZn0gZnJvbSAnLi9lbGVtZW50X3JlZic7XG5pbXBvcnQge05nTW9kdWxlUmVmfSBmcm9tICcuL25nX21vZHVsZV9mYWN0b3J5JztcbmltcG9ydCB7Vmlld1JlZn0gZnJvbSAnLi92aWV3X3JlZic7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGNvbXBvbmVudCBjcmVhdGVkIGJ5IGEgYENvbXBvbmVudEZhY3RvcnlgLlxuICogUHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBjb21wb25lbnQgaW5zdGFuY2UgYW5kIHJlbGF0ZWQgb2JqZWN0cyxcbiAqIGFuZCBwcm92aWRlcyB0aGUgbWVhbnMgb2YgZGVzdHJveWluZyB0aGUgaW5zdGFuY2UuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29tcG9uZW50UmVmPEM+IHtcbiAgLyoqXG4gICAqIFRoZSBob3N0IG9yIGFuY2hvciBbZWxlbWVudF0oZ3VpZGUvZ2xvc3NhcnkjZWxlbWVudCkgZm9yIHRoaXMgY29tcG9uZW50IGluc3RhbmNlLlxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0IGxvY2F0aW9uKCk6IEVsZW1lbnRSZWY7XG5cbiAgLyoqXG4gICAqIFRoZSBbZGVwZW5kZW5jeSBpbmplY3Rvcl0oZ3VpZGUvZ2xvc3NhcnkjaW5qZWN0b3IpIGZvciB0aGlzIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAgICovXG4gIGFic3RyYWN0IGdldCBpbmplY3RvcigpOiBJbmplY3RvcjtcblxuICAvKipcbiAgICogVGhpcyBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAqL1xuICBhYnN0cmFjdCBnZXQgaW5zdGFuY2UoKTogQztcblxuICAvKipcbiAgICogVGhlIFtob3N0IHZpZXddKGd1aWRlL2dsb3NzYXJ5I3ZpZXctdHJlZSkgZGVmaW5lZCBieSB0aGUgdGVtcGxhdGVcbiAgICogZm9yIHRoaXMgY29tcG9uZW50IGluc3RhbmNlLlxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0IGhvc3RWaWV3KCk6IFZpZXdSZWY7XG5cbiAgLyoqXG4gICAqIFRoZSBjaGFuZ2UgZGV0ZWN0b3IgZm9yIHRoaXMgY29tcG9uZW50IGluc3RhbmNlLlxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0IGNoYW5nZURldGVjdG9yUmVmKCk6IENoYW5nZURldGVjdG9yUmVmO1xuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHR5cGUuXG4gICAqL1xuICBhYnN0cmFjdCBnZXQgY29tcG9uZW50VHlwZSgpOiBUeXBlPGFueT47XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBjb21wb25lbnQgaW5zdGFuY2UgYW5kIGFsbCBvZiB0aGUgZGF0YSBzdHJ1Y3R1cmVzIGFzc29jaWF0ZWQgd2l0aCBpdC5cbiAgICovXG4gIGFic3RyYWN0IGRlc3Ryb3koKTogdm9pZDtcblxuICAvKipcbiAgICogQSBsaWZlY3ljbGUgaG9vayB0aGF0IHByb3ZpZGVzIGFkZGl0aW9uYWwgZGV2ZWxvcGVyLWRlZmluZWQgY2xlYW51cFxuICAgKiBmdW5jdGlvbmFsaXR5IGZvciB0aGUgY29tcG9uZW50LlxuICAgKiBAcGFyYW0gY2FsbGJhY2sgQSBoYW5kbGVyIGZ1bmN0aW9uIHRoYXQgY2xlYW5zIHVwIGRldmVsb3Blci1kZWZpbmVkIGRhdGFcbiAgICogYXNzb2NpYXRlZCB3aXRoIHRoaXMgY29tcG9uZW50LiBDYWxsZWQgd2hlbiB0aGUgYGRlc3Ryb3koKWAgbWV0aG9kIGlzIGludm9rZWQuXG4gICAqL1xuICBhYnN0cmFjdCBvbkRlc3Ryb3koY2FsbGJhY2s6IEZ1bmN0aW9uKTogdm9pZDtcbn1cblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb21wb25lbnRGYWN0b3J5PEM+IHtcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQncyBIVE1MIHNlbGVjdG9yLlxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0IHNlbGVjdG9yKCk6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQncyB0eXBlXG4gICAqL1xuICBhYnN0cmFjdCBnZXQgY29tcG9uZW50VHlwZSgpOiBUeXBlPGFueT47XG4gIC8qKlxuICAgKiBTZWxlY3RvciBmb3IgYWxsIDxuZy1jb250ZW50PiBlbGVtZW50cyBpbiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0IG5nQ29udGVudFNlbGVjdG9ycygpOiBzdHJpbmdbXTtcbiAgLyoqXG4gICAqIFRoZSBpbnB1dHMgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGFic3RyYWN0IGdldCBpbnB1dHMoKToge3Byb3BOYW1lOiBzdHJpbmcsIHRlbXBsYXRlTmFtZTogc3RyaW5nfVtdO1xuICAvKipcbiAgICogVGhlIG91dHB1dHMgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGFic3RyYWN0IGdldCBvdXRwdXRzKCk6IHtwcm9wTmFtZTogc3RyaW5nLCB0ZW1wbGF0ZU5hbWU6IHN0cmluZ31bXTtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgY29tcG9uZW50LlxuICAgKi9cbiAgYWJzdHJhY3QgY3JlYXRlKFxuICAgICAgaW5qZWN0b3I6IEluamVjdG9yLCBwcm9qZWN0YWJsZU5vZGVzPzogYW55W11bXSwgcm9vdFNlbGVjdG9yT3JOb2RlPzogc3RyaW5nfGFueSxcbiAgICAgIG5nTW9kdWxlPzogTmdNb2R1bGVSZWY8YW55Pik6IENvbXBvbmVudFJlZjxDPjtcbn1cbiJdfQ==","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util/stringify';\nimport { ComponentFactory } from './component_factory';\n/**\n * @param {?} component\n * @return {?}\n */\nexport function noComponentFactoryError(component) {\n    /** @type {?} */\n    const error = Error(`No component factory found for ${stringify(component)}. Did you add it to @NgModule.entryComponents?`);\n    ((/** @type {?} */ (error)))[ERROR_COMPONENT] = component;\n    return error;\n}\n/** @type {?} */\nconst ERROR_COMPONENT = 'ngComponent';\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getComponent(error) {\n    return ((/** @type {?} */ (error)))[ERROR_COMPONENT];\n}\nclass _NullComponentFactoryResolver {\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    resolveComponentFactory(component) {\n        throw noComponentFactoryError(component);\n    }\n}\n/**\n * \\@publicApi\n * @abstract\n */\nexport class ComponentFactoryResolver {\n}\nComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\nif (false) {\n    /** @type {?} */\n    ComponentFactoryResolver.NULL;\n    /**\n     * @abstract\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };\n}\nexport class CodegenComponentFactoryResolver {\n    /**\n     * @param {?} factories\n     * @param {?} _parent\n     * @param {?} _ngModule\n     */\n    constructor(factories, _parent, _ngModule) {\n        this._parent = _parent;\n        this._ngModule = _ngModule;\n        this._factories = new Map();\n        for (let i = 0; i < factories.length; i++) {\n            /** @type {?} */\n            const factory = factories[i];\n            this._factories.set(factory.componentType, factory);\n        }\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    resolveComponentFactory(component) {\n        /** @type {?} */\n        let factory = this._factories.get(component);\n        if (!factory && this._parent) {\n            factory = this._parent.resolveComponentFactory(component);\n        }\n        if (!factory) {\n            throw noComponentFactoryError(component);\n        }\n        return new ComponentFactoryBoundToModule(factory, this._ngModule);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    CodegenComponentFactoryResolver.prototype._factories;\n    /**\n     * @type {?}\n     * @private\n     */\n    CodegenComponentFactoryResolver.prototype._parent;\n    /**\n     * @type {?}\n     * @private\n     */\n    CodegenComponentFactoryResolver.prototype._ngModule;\n}\n/**\n * @template C\n */\nexport class ComponentFactoryBoundToModule extends ComponentFactory {\n    /**\n     * @param {?} factory\n     * @param {?} ngModule\n     */\n    constructor(factory, ngModule) {\n        super();\n        this.factory = factory;\n        this.ngModule = ngModule;\n        this.selector = factory.selector;\n        this.componentType = factory.componentType;\n        this.ngContentSelectors = factory.ngContentSelectors;\n        this.inputs = factory.inputs;\n        this.outputs = factory.outputs;\n    }\n    /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    create(injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n    }\n}\nif (false) {\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.selector;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.componentType;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.ngContentSelectors;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.inputs;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.outputs;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentFactoryBoundToModule.prototype.factory;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentFactoryBoundToModule.prototype.ngModule;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50X2ZhY3RvcnlfcmVzb2x2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saW5rZXIvY29tcG9uZW50X2ZhY3RvcnlfcmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFVQSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFFNUMsT0FBTyxFQUFDLGdCQUFnQixFQUFlLE1BQU0scUJBQXFCLENBQUM7Ozs7O0FBR25FLE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxTQUFtQjs7VUFDbkQsS0FBSyxHQUFHLEtBQUssQ0FDZixrQ0FBa0MsU0FBUyxDQUFDLFNBQVMsQ0FBQyxnREFBZ0QsQ0FBQztJQUMzRyxDQUFDLG1CQUFBLEtBQUssRUFBTyxDQUFDLENBQUMsZUFBZSxDQUFDLEdBQUcsU0FBUyxDQUFDO0lBQzVDLE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQzs7TUFFSyxlQUFlLEdBQUcsYUFBYTs7Ozs7QUFFckMsTUFBTSxVQUFVLFlBQVksQ0FBQyxLQUFZO0lBQ3ZDLE9BQU8sQ0FBQyxtQkFBQSxLQUFLLEVBQU8sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFHRCxNQUFNLDZCQUE2Qjs7Ozs7O0lBQ2pDLHVCQUF1QixDQUFJLFNBQW9DO1FBQzdELE1BQU0sdUJBQXVCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDM0MsQ0FBQztDQUNGOzs7OztBQUtELE1BQU0sT0FBZ0Isd0JBQXdCOztBQUNyQyw2QkFBSSxHQUE2QixJQUFJLDZCQUE2QixFQUFFLENBQUM7OztJQUE1RSw4QkFBNEU7Ozs7Ozs7SUFDNUUsc0ZBQTZFOztBQUcvRSxNQUFNLE9BQU8sK0JBQStCOzs7Ozs7SUFHMUMsWUFDSSxTQUFrQyxFQUFVLE9BQWlDLEVBQ3JFLFNBQTJCO1FBRFMsWUFBTyxHQUFQLE9BQU8sQ0FBMEI7UUFDckUsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFKL0IsZUFBVSxHQUFHLElBQUksR0FBRyxFQUE4QixDQUFDO1FBS3pELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFOztrQkFDbkMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDNUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUNyRDtJQUNILENBQUM7Ozs7OztJQUVELHVCQUF1QixDQUFJLFNBQW9DOztZQUN6RCxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDO1FBQzVDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUM1QixPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUMzRDtRQUNELElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDWixNQUFNLHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzFDO1FBQ0QsT0FBTyxJQUFJLDZCQUE2QixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDcEUsQ0FBQztDQUNGOzs7Ozs7SUFyQkMscURBQTJEOzs7OztJQUduQixrREFBeUM7Ozs7O0lBQzdFLG9EQUFtQzs7Ozs7QUFtQnpDLE1BQU0sT0FBTyw2QkFBaUMsU0FBUSxnQkFBbUI7Ozs7O0lBT3ZFLFlBQW9CLE9BQTRCLEVBQVUsUUFBMEI7UUFDbEYsS0FBSyxFQUFFLENBQUM7UUFEVSxZQUFPLEdBQVAsT0FBTyxDQUFxQjtRQUFVLGFBQVEsR0FBUixRQUFRLENBQWtCO1FBRWxGLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUNqQyxJQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDM0MsSUFBSSxDQUFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztRQUNyRCxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO0lBQ2pDLENBQUM7Ozs7Ozs7O0lBRUQsTUFBTSxDQUNGLFFBQWtCLEVBQUUsZ0JBQTBCLEVBQUUsa0JBQStCLEVBQy9FLFFBQTJCO1FBQzdCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQ3RCLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxrQkFBa0IsRUFBRSxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7Q0FDRjs7O0lBckJDLGlEQUEwQjs7SUFDMUIsc0RBQWtDOztJQUNsQywyREFBc0M7O0lBQ3RDLCtDQUE0RDs7SUFDNUQsZ0RBQTZEOzs7OztJQUVqRCxnREFBb0M7Ozs7O0lBQUUsaURBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0luamVjdG9yfSBmcm9tICcuLi9kaS9pbmplY3Rvcic7XG5pbXBvcnQge1R5cGV9IGZyb20gJy4uL2ludGVyZmFjZS90eXBlJztcbmltcG9ydCB7c3RyaW5naWZ5fSBmcm9tICcuLi91dGlsL3N0cmluZ2lmeSc7XG5cbmltcG9ydCB7Q29tcG9uZW50RmFjdG9yeSwgQ29tcG9uZW50UmVmfSBmcm9tICcuL2NvbXBvbmVudF9mYWN0b3J5JztcbmltcG9ydCB7TmdNb2R1bGVSZWZ9IGZyb20gJy4vbmdfbW9kdWxlX2ZhY3RvcnknO1xuXG5leHBvcnQgZnVuY3Rpb24gbm9Db21wb25lbnRGYWN0b3J5RXJyb3IoY29tcG9uZW50OiBGdW5jdGlvbikge1xuICBjb25zdCBlcnJvciA9IEVycm9yKFxuICAgICAgYE5vIGNvbXBvbmVudCBmYWN0b3J5IGZvdW5kIGZvciAke3N0cmluZ2lmeShjb21wb25lbnQpfS4gRGlkIHlvdSBhZGQgaXQgdG8gQE5nTW9kdWxlLmVudHJ5Q29tcG9uZW50cz9gKTtcbiAgKGVycm9yIGFzIGFueSlbRVJST1JfQ09NUE9ORU5UXSA9IGNvbXBvbmVudDtcbiAgcmV0dXJuIGVycm9yO1xufVxuXG5jb25zdCBFUlJPUl9DT01QT05FTlQgPSAnbmdDb21wb25lbnQnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29tcG9uZW50KGVycm9yOiBFcnJvcik6IFR5cGU8YW55PiB7XG4gIHJldHVybiAoZXJyb3IgYXMgYW55KVtFUlJPUl9DT01QT05FTlRdO1xufVxuXG5cbmNsYXNzIF9OdWxsQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIGltcGxlbWVudHMgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIHtcbiAgcmVzb2x2ZUNvbXBvbmVudEZhY3Rvcnk8VD4oY29tcG9uZW50OiB7bmV3ICguLi5hcmdzOiBhbnlbXSk6IFR9KTogQ29tcG9uZW50RmFjdG9yeTxUPiB7XG4gICAgdGhyb3cgbm9Db21wb25lbnRGYWN0b3J5RXJyb3IoY29tcG9uZW50KTtcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciB7XG4gIHN0YXRpYyBOVUxMOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgPSBuZXcgX051bGxDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIoKTtcbiAgYWJzdHJhY3QgcmVzb2x2ZUNvbXBvbmVudEZhY3Rvcnk8VD4oY29tcG9uZW50OiBUeXBlPFQ+KTogQ29tcG9uZW50RmFjdG9yeTxUPjtcbn1cblxuZXhwb3J0IGNsYXNzIENvZGVnZW5Db21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgaW1wbGVtZW50cyBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIge1xuICBwcml2YXRlIF9mYWN0b3JpZXMgPSBuZXcgTWFwPGFueSwgQ29tcG9uZW50RmFjdG9yeTxhbnk+PigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgZmFjdG9yaWVzOiBDb21wb25lbnRGYWN0b3J5PGFueT5bXSwgcHJpdmF0ZSBfcGFyZW50OiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgICBwcml2YXRlIF9uZ01vZHVsZTogTmdNb2R1bGVSZWY8YW55Pikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmFjdG9yaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBmYWN0b3J5ID0gZmFjdG9yaWVzW2ldO1xuICAgICAgdGhpcy5fZmFjdG9yaWVzLnNldChmYWN0b3J5LmNvbXBvbmVudFR5cGUsIGZhY3RvcnkpO1xuICAgIH1cbiAgfVxuXG4gIHJlc29sdmVDb21wb25lbnRGYWN0b3J5PFQ+KGNvbXBvbmVudDoge25ldyAoLi4uYXJnczogYW55W10pOiBUfSk6IENvbXBvbmVudEZhY3Rvcnk8VD4ge1xuICAgIGxldCBmYWN0b3J5ID0gdGhpcy5fZmFjdG9yaWVzLmdldChjb21wb25lbnQpO1xuICAgIGlmICghZmFjdG9yeSAmJiB0aGlzLl9wYXJlbnQpIHtcbiAgICAgIGZhY3RvcnkgPSB0aGlzLl9wYXJlbnQucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoY29tcG9uZW50KTtcbiAgICB9XG4gICAgaWYgKCFmYWN0b3J5KSB7XG4gICAgICB0aHJvdyBub0NvbXBvbmVudEZhY3RvcnlFcnJvcihjb21wb25lbnQpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IENvbXBvbmVudEZhY3RvcnlCb3VuZFRvTW9kdWxlKGZhY3RvcnksIHRoaXMuX25nTW9kdWxlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29tcG9uZW50RmFjdG9yeUJvdW5kVG9Nb2R1bGU8Qz4gZXh0ZW5kcyBDb21wb25lbnRGYWN0b3J5PEM+IHtcbiAgcmVhZG9ubHkgc2VsZWN0b3I6IHN0cmluZztcbiAgcmVhZG9ubHkgY29tcG9uZW50VHlwZTogVHlwZTxhbnk+O1xuICByZWFkb25seSBuZ0NvbnRlbnRTZWxlY3RvcnM6IHN0cmluZ1tdO1xuICByZWFkb25seSBpbnB1dHM6IHtwcm9wTmFtZTogc3RyaW5nLCB0ZW1wbGF0ZU5hbWU6IHN0cmluZ31bXTtcbiAgcmVhZG9ubHkgb3V0cHV0czoge3Byb3BOYW1lOiBzdHJpbmcsIHRlbXBsYXRlTmFtZTogc3RyaW5nfVtdO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZmFjdG9yeTogQ29tcG9uZW50RmFjdG9yeTxDPiwgcHJpdmF0ZSBuZ01vZHVsZTogTmdNb2R1bGVSZWY8YW55Pikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zZWxlY3RvciA9IGZhY3Rvcnkuc2VsZWN0b3I7XG4gICAgdGhpcy5jb21wb25lbnRUeXBlID0gZmFjdG9yeS5jb21wb25lbnRUeXBlO1xuICAgIHRoaXMubmdDb250ZW50U2VsZWN0b3JzID0gZmFjdG9yeS5uZ0NvbnRlbnRTZWxlY3RvcnM7XG4gICAgdGhpcy5pbnB1dHMgPSBmYWN0b3J5LmlucHV0cztcbiAgICB0aGlzLm91dHB1dHMgPSBmYWN0b3J5Lm91dHB1dHM7XG4gIH1cblxuICBjcmVhdGUoXG4gICAgICBpbmplY3RvcjogSW5qZWN0b3IsIHByb2plY3RhYmxlTm9kZXM/OiBhbnlbXVtdLCByb290U2VsZWN0b3JPck5vZGU/OiBzdHJpbmd8YW55LFxuICAgICAgbmdNb2R1bGU/OiBOZ01vZHVsZVJlZjxhbnk+KTogQ29tcG9uZW50UmVmPEM+IHtcbiAgICByZXR1cm4gdGhpcy5mYWN0b3J5LmNyZWF0ZShcbiAgICAgICAgaW5qZWN0b3IsIHByb2plY3RhYmxlTm9kZXMsIHJvb3RTZWxlY3Rvck9yTm9kZSwgbmdNb2R1bGUgfHwgdGhpcy5uZ01vZHVsZSk7XG4gIH1cbn1cbiJdfQ==","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\nimport { injectRenderer2 as render3InjectRenderer2 } from '../render3/view_engine_compatibility';\nimport { noop } from '../util/noop';\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n * \\@publicApi\n */\nexport class RenderComponentType {\n    /**\n     * @param {?} id\n     * @param {?} templateUrl\n     * @param {?} slotCount\n     * @param {?} encapsulation\n     * @param {?} styles\n     * @param {?} animations\n     */\n    constructor(id, templateUrl, slotCount, encapsulation, styles, animations) {\n        this.id = id;\n        this.templateUrl = templateUrl;\n        this.slotCount = slotCount;\n        this.encapsulation = encapsulation;\n        this.styles = styles;\n        this.animations = animations;\n    }\n}\nif (false) {\n    /** @type {?} */\n    RenderComponentType.prototype.id;\n    /** @type {?} */\n    RenderComponentType.prototype.templateUrl;\n    /** @type {?} */\n    RenderComponentType.prototype.slotCount;\n    /** @type {?} */\n    RenderComponentType.prototype.encapsulation;\n    /** @type {?} */\n    RenderComponentType.prototype.styles;\n    /** @type {?} */\n    RenderComponentType.prototype.animations;\n}\n/**\n * @deprecated Debug info is handled internally in the view engine now.\n * @abstract\n */\nexport class RenderDebugInfo {\n}\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.injector = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.component = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.providerTokens = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.references = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.context = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.source = function () { };\n}\n/**\n * @deprecated Use the `Renderer2` instead.\n * @record\n */\nexport function DirectRenderer() { }\nif (false) {\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DirectRenderer.prototype.remove = function (node) { };\n    /**\n     * @param {?} node\n     * @param {?} parent\n     * @return {?}\n     */\n    DirectRenderer.prototype.appendChild = function (node, parent) { };\n    /**\n     * @param {?} node\n     * @param {?} refNode\n     * @return {?}\n     */\n    DirectRenderer.prototype.insertBefore = function (node, refNode) { };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DirectRenderer.prototype.nextSibling = function (node) { };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DirectRenderer.prototype.parentElement = function (node) { };\n}\n/**\n * @deprecated Use the `Renderer2` instead.\n * \\@publicApi\n * @abstract\n */\nexport class Renderer {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} selectorOrNode\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} name\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} hostElement\n     * @return {?}\n     */\n    Renderer.prototype.createViewRoot = function (hostElement) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} value\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createText = function (parentElement, value, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    Renderer.prototype.projectNodes = function (parentElement, nodes) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };\n    /**\n     * @abstract\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    Renderer.prototype.detachView = function (viewRootNodes) { };\n    /**\n     * @abstract\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    Renderer.prototype.listen = function (renderElement, name, callback) { };\n    /**\n     * @abstract\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    Renderer.prototype.listenGlobal = function (target, name, callback) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} attributeName\n     * @param {?=} attributeValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };\n    /**\n     * Used only in debug mode to serialize property changes to dom nodes as attributes.\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?=} args\n     * @return {?}\n     */\n    Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };\n    /**\n     * @abstract\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    Renderer.prototype.setText = function (renderNode, text) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} startingStyles\n     * @param {?} keyframes\n     * @param {?} duration\n     * @param {?} delay\n     * @param {?} easing\n     * @param {?=} previousPlayers\n     * @return {?}\n     */\n    Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };\n}\n/** @type {?} */\nexport const Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * \\@publicApi\n * @abstract\n */\nexport class RootRenderer {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} componentType\n     * @return {?}\n     */\n    RootRenderer.prototype.renderComponent = function (componentType) { };\n}\n/**\n * Used by `RendererFactory2` to associate custom rendering data and styles\n * with a rendering implementation.\n * \\@publicApi\n * @record\n */\nexport function RendererType2() { }\nif (false) {\n    /**\n     * A unique identifying string for the new renderer, used when creating\n     * unique styles for encapsulation.\n     * @type {?}\n     */\n    RendererType2.prototype.id;\n    /**\n     * The view encapsulation type, which determines how styles are applied to\n     * DOM elements. One of\n     * - `Emulated` (default): Emulate native scoping of styles.\n     * - `Native`: Use the native encapsulation mechanism of the renderer.\n     * - `ShadowDom`: Use modern [Shadow\n     * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * create a ShadowRoot for component's host element.\n     * - `None`: Do not provide any template or style encapsulation.\n     * @type {?}\n     */\n    RendererType2.prototype.encapsulation;\n    /**\n     * Defines CSS styles to be stored on a renderer instance.\n     * @type {?}\n     */\n    RendererType2.prototype.styles;\n    /**\n     * Defines arbitrary developer-defined data to be stored on a renderer instance.\n     * This is useful for renderers that delegate to other renderers.\n     * @type {?}\n     */\n    RendererType2.prototype.data;\n}\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * \\@publicApi\n * @abstract\n */\nexport class RendererFactory2 {\n}\nif (false) {\n    /**\n     * Creates and initializes a custom renderer for a host DOM element.\n     * @abstract\n     * @param {?} hostElement The element to render.\n     * @param {?} type The base class to implement.\n     * @return {?} The new custom renderer instance.\n     */\n    RendererFactory2.prototype.createRenderer = function (hostElement, type) { };\n    /**\n     * A callback invoked when rendering has begun.\n     * @abstract\n     * @return {?}\n     */\n    RendererFactory2.prototype.begin = function () { };\n    /**\n     * A callback invoked when rendering has completed.\n     * @abstract\n     * @return {?}\n     */\n    RendererFactory2.prototype.end = function () { };\n    /**\n     * Use with animations test-only mode. Notifies the test when rendering has completed.\n     * @abstract\n     * @return {?} The asynchronous result of the developer-defined function.\n     */\n    RendererFactory2.prototype.whenRenderingDone = function () { };\n}\n/** @enum {number} */\nconst RendererStyleFlags2 = {\n    /**\n     * Marks a style as important.\n     */\n    Important: 1,\n    /**\n     * Marks a style as using dash case naming (this-is-dash-case).\n     */\n    DashCase: 2,\n};\nexport { RendererStyleFlags2 };\nRendererStyleFlags2[RendererStyleFlags2.Important] = 'Important';\nRendererStyleFlags2[RendererStyleFlags2.DashCase] = 'DashCase';\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * \\@publicApi\n * @abstract\n */\nexport class Renderer2 {\n}\n/**\n * \\@internal\n * @nocollapse\n */\nRenderer2.__NG_ELEMENT_ID__ = () => SWITCH_RENDERER2_FACTORY();\nif (false) {\n    /**\n     * \\@internal\n     * @nocollapse\n     * @type {?}\n     */\n    Renderer2.__NG_ELEMENT_ID__;\n    /**\n     * If null or undefined, the view engine won't call it.\n     * This is used as a performance optimization for production mode.\n     * @type {?}\n     */\n    Renderer2.prototype.destroyNode;\n    /**\n     * Use to store arbitrary developer-defined data on a renderer instance,\n     * as an object containing key-value pairs.\n     * This is useful for renderers that delegate to other renderers.\n     * @abstract\n     * @return {?}\n     */\n    Renderer2.prototype.data = function () { };\n    /**\n     * Implement this callback to destroy the renderer or the host element.\n     * @abstract\n     * @return {?}\n     */\n    Renderer2.prototype.destroy = function () { };\n    /**\n     * Implement this callback to create an instance of the host element.\n     * @abstract\n     * @param {?} name An identifying name for the new element, unique within the namespace.\n     * @param {?=} namespace The namespace for the new element.\n     * @return {?} The new element.\n     */\n    Renderer2.prototype.createElement = function (name, namespace) { };\n    /**\n     * Implement this callback to add a comment to the DOM of the host element.\n     * @abstract\n     * @param {?} value The comment text.\n     * @return {?} The modified element.\n     */\n    Renderer2.prototype.createComment = function (value) { };\n    /**\n     * Implement this callback to add text to the DOM of the host element.\n     * @abstract\n     * @param {?} value The text string.\n     * @return {?} The modified element.\n     */\n    Renderer2.prototype.createText = function (value) { };\n    /**\n     * Appends a child to a given parent node in the host element DOM.\n     * @abstract\n     * @param {?} parent The parent node.\n     * @param {?} newChild The new child node.\n     * @return {?}\n     */\n    Renderer2.prototype.appendChild = function (parent, newChild) { };\n    /**\n     * Implement this callback to insert a child node at a given position in a parent node\n     * in the host element DOM.\n     * @abstract\n     * @param {?} parent The parent node.\n     * @param {?} newChild The new child nodes.\n     * @param {?} refChild The existing child node that should precede the new node.\n     * @return {?}\n     */\n    Renderer2.prototype.insertBefore = function (parent, newChild, refChild) { };\n    /**\n     * Implement this callback to remove a child node from the host element's DOM.\n     * @abstract\n     * @param {?} parent The parent node.\n     * @param {?} oldChild The child node to remove.\n     * @param {?=} isHostElement Optionally signal to the renderer whether this element is a host element\n     * or not\n     * @return {?}\n     */\n    Renderer2.prototype.removeChild = function (parent, oldChild, isHostElement) { };\n    /**\n     * Implement this callback to prepare an element to be bootstrapped\n     * as a root element, and return the element instance.\n     * @abstract\n     * @param {?} selectorOrNode The DOM element.\n     * @param {?=} preserveContent Whether the contents of the root element\n     * should be preserved, or cleared upon bootstrap (default behavior).\n     * Use with `ViewEncapsulation.ShadowDom` to allow simple native\n     * content projection via `<slot>` elements.\n     * @return {?} The root element.\n     */\n    Renderer2.prototype.selectRootElement = function (selectorOrNode, preserveContent) { };\n    /**\n     * Implement this callback to get the parent of a given node\n     * in the host element's DOM.\n     * @abstract\n     * @param {?} node The child node to query.\n     * @return {?} The parent node, or null if there is no parent.\n     * For WebWorkers, always returns true.\n     * This is because the check is synchronous,\n     * and the caller can't rely on checking for null.\n     */\n    Renderer2.prototype.parentNode = function (node) { };\n    /**\n     * Implement this callback to get the next sibling node of a given node\n     * in the host element's DOM.\n     * @abstract\n     * @param {?} node\n     * @return {?} The sibling node, or null if there is no sibling.\n     * For WebWorkers, always returns a value.\n     * This is because the check is synchronous,\n     * and the caller can't rely on checking for null.\n     */\n    Renderer2.prototype.nextSibling = function (node) { };\n    /**\n     * Implement this callback to set an attribute value for an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The attribute name.\n     * @param {?} value The new value.\n     * @param {?=} namespace The namespace.\n     * @return {?}\n     */\n    Renderer2.prototype.setAttribute = function (el, name, value, namespace) { };\n    /**\n     * Implement this callback to remove an attribute from an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The attribute name.\n     * @param {?=} namespace The namespace.\n     * @return {?}\n     */\n    Renderer2.prototype.removeAttribute = function (el, name, namespace) { };\n    /**\n     * Implement this callback to add a class to an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The class name.\n     * @return {?}\n     */\n    Renderer2.prototype.addClass = function (el, name) { };\n    /**\n     * Implement this callback to remove a class from an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The class name.\n     * @return {?}\n     */\n    Renderer2.prototype.removeClass = function (el, name) { };\n    /**\n     * Implement this callback to set a CSS style for an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} style The name of the style.\n     * @param {?} value The new value.\n     * @param {?=} flags Flags for style variations. No flags are set by default.\n     * @return {?}\n     */\n    Renderer2.prototype.setStyle = function (el, style, value, flags) { };\n    /**\n     * Implement this callback to remove the value from a CSS style for an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} style The name of the style.\n     * @param {?=} flags Flags for style variations to remove, if set. ???\n     * @return {?}\n     */\n    Renderer2.prototype.removeStyle = function (el, style, flags) { };\n    /**\n     * Implement this callback to set the value of a property of an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The property name.\n     * @param {?} value The new value.\n     * @return {?}\n     */\n    Renderer2.prototype.setProperty = function (el, name, value) { };\n    /**\n     * Implement this callback to set the value of a node in the host element.\n     * @abstract\n     * @param {?} node The node.\n     * @param {?} value The new value.\n     * @return {?}\n     */\n    Renderer2.prototype.setValue = function (node, value) { };\n    /**\n     * Implement this callback to start an event listener.\n     * @abstract\n     * @param {?} target The context in which to listen for events. Can be\n     * the entire window or document, the body of the document, or a specific\n     * DOM element.\n     * @param {?} eventName The event to listen for.\n     * @param {?} callback A handler function to invoke when the event occurs.\n     * @return {?} An \"unlisten\" function for disposing of this handler.\n     */\n    Renderer2.prototype.listen = function (target, eventName, callback) { };\n}\n/** @type {?} */\nexport const SWITCH_RENDERER2_FACTORY__POST_R3__ = render3InjectRenderer2;\n/** @type {?} */\nconst SWITCH_RENDERER2_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_RENDERER2_FACTORY = SWITCH_RENDERER2_FACTORY__POST_R3__;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9tbnQvZi9naXQvaXZ5LWNvZGUtc2l6ZS9ub2RlX21vZHVsZXMvQGFuZ3VsYXIvY29yZS9lc20yMDE1L3NyYy9yZW5kZXIvYXBpLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lDQXdtQmlDLG1DQUFrQyIsImZpbGUiOiIvbW50L2YvZ2l0L2l2eS1jb2RlLXNpemUvbm9kZV9tb2R1bGVzL0Bhbmd1bGFyL2NvcmUvZXNtMjAxNS9zcmMvcmVuZGVyL2FwaS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsZXh0cmFSZXF1aXJlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnLi4vZGkvaW5qZWN0aW9uX3Rva2VuJztcbmltcG9ydCB7IGluamVjdFJlbmRlcmVyMiBhcyByZW5kZXIzSW5qZWN0UmVuZGVyZXIyIH0gZnJvbSAnLi4vcmVuZGVyMy92aWV3X2VuZ2luZV9jb21wYXRpYmlsaXR5JztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuLi91dGlsL25vb3AnO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgYFJlbmRlcmVyVHlwZTJgIChhbmQgYFJlbmRlcmVyMmApIGluc3RlYWQuXG4gKiBcXEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNsYXNzIFJlbmRlckNvbXBvbmVudFR5cGUge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gaWRcbiAgICAgKiBAcGFyYW0gez99IHRlbXBsYXRlVXJsXG4gICAgICogQHBhcmFtIHs/fSBzbG90Q291bnRcbiAgICAgKiBAcGFyYW0gez99IGVuY2Fwc3VsYXRpb25cbiAgICAgKiBAcGFyYW0gez99IHN0eWxlc1xuICAgICAqIEBwYXJhbSB7P30gYW5pbWF0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGlkLCB0ZW1wbGF0ZVVybCwgc2xvdENvdW50LCBlbmNhcHN1bGF0aW9uLCBzdHlsZXMsIGFuaW1hdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnRlbXBsYXRlVXJsID0gdGVtcGxhdGVVcmw7XG4gICAgICAgIHRoaXMuc2xvdENvdW50ID0gc2xvdENvdW50O1xuICAgICAgICB0aGlzLmVuY2Fwc3VsYXRpb24gPSBlbmNhcHN1bGF0aW9uO1xuICAgICAgICB0aGlzLnN0eWxlcyA9IHN0eWxlcztcbiAgICAgICAgdGhpcy5hbmltYXRpb25zID0gYW5pbWF0aW9ucztcbiAgICB9XG59XG5pZiAoZmFsc2UpIHtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgUmVuZGVyQ29tcG9uZW50VHlwZS5wcm90b3R5cGUuaWQ7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIFJlbmRlckNvbXBvbmVudFR5cGUucHJvdG90eXBlLnRlbXBsYXRlVXJsO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBSZW5kZXJDb21wb25lbnRUeXBlLnByb3RvdHlwZS5zbG90Q291bnQ7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIFJlbmRlckNvbXBvbmVudFR5cGUucHJvdG90eXBlLmVuY2Fwc3VsYXRpb247XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIFJlbmRlckNvbXBvbmVudFR5cGUucHJvdG90eXBlLnN0eWxlcztcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgUmVuZGVyQ29tcG9uZW50VHlwZS5wcm90b3R5cGUuYW5pbWF0aW9ucztcbn1cbi8qKlxuICogQGRlcHJlY2F0ZWQgRGVidWcgaW5mbyBpcyBoYW5kbGVkIGludGVybmFsbHkgaW4gdGhlIHZpZXcgZW5naW5lIG5vdy5cbiAqIEBhYnN0cmFjdFxuICovXG5leHBvcnQgY2xhc3MgUmVuZGVyRGVidWdJbmZvIHtcbn1cbmlmIChmYWxzZSkge1xuICAgIC8qKlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyRGVidWdJbmZvLnByb3RvdHlwZS5pbmplY3RvciA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAvKipcbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlckRlYnVnSW5mby5wcm90b3R5cGUuY29tcG9uZW50ID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIC8qKlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyRGVidWdJbmZvLnByb3RvdHlwZS5wcm92aWRlclRva2VucyA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAvKipcbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlckRlYnVnSW5mby5wcm90b3R5cGUucmVmZXJlbmNlcyA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAvKipcbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlckRlYnVnSW5mby5wcm90b3R5cGUuY29udGV4dCA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAvKipcbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlckRlYnVnSW5mby5wcm90b3R5cGUuc291cmNlID0gZnVuY3Rpb24gKCkgeyB9O1xufVxuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgdGhlIGBSZW5kZXJlcjJgIGluc3RlYWQuXG4gKiBAcmVjb3JkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBEaXJlY3RSZW5kZXJlcigpIHsgfVxuaWYgKGZhbHNlKSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBub2RlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEaXJlY3RSZW5kZXJlci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKG5vZGUpIHsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5vZGVcbiAgICAgKiBAcGFyYW0gez99IHBhcmVudFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGlyZWN0UmVuZGVyZXIucHJvdG90eXBlLmFwcGVuZENoaWxkID0gZnVuY3Rpb24gKG5vZGUsIHBhcmVudCkgeyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbm9kZVxuICAgICAqIEBwYXJhbSB7P30gcmVmTm9kZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGlyZWN0UmVuZGVyZXIucHJvdG90eXBlLmluc2VydEJlZm9yZSA9IGZ1bmN0aW9uIChub2RlLCByZWZOb2RlKSB7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBub2RlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEaXJlY3RSZW5kZXJlci5wcm90b3R5cGUubmV4dFNpYmxpbmcgPSBmdW5jdGlvbiAobm9kZSkgeyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbm9kZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGlyZWN0UmVuZGVyZXIucHJvdG90eXBlLnBhcmVudEVsZW1lbnQgPSBmdW5jdGlvbiAobm9kZSkgeyB9O1xufVxuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgdGhlIGBSZW5kZXJlcjJgIGluc3RlYWQuXG4gKiBcXEBwdWJsaWNBcGlcbiAqIEBhYnN0cmFjdFxuICovXG5leHBvcnQgY2xhc3MgUmVuZGVyZXIge1xufVxuaWYgKGZhbHNlKSB7XG4gICAgLyoqXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQHBhcmFtIHs/fSBzZWxlY3Rvck9yTm9kZVxuICAgICAqIEBwYXJhbSB7Pz19IGRlYnVnSW5mb1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXIucHJvdG90eXBlLnNlbGVjdFJvb3RFbGVtZW50ID0gZnVuY3Rpb24gKHNlbGVjdG9yT3JOb2RlLCBkZWJ1Z0luZm8pIHsgfTtcbiAgICAvKipcbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcGFyYW0gez99IHBhcmVudEVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcGFyYW0gez89fSBkZWJ1Z0luZm9cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKHBhcmVudEVsZW1lbnQsIG5hbWUsIGRlYnVnSW5mbykgeyB9O1xuICAgIC8qKlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqIEBwYXJhbSB7P30gaG9zdEVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVWaWV3Um9vdCA9IGZ1bmN0aW9uIChob3N0RWxlbWVudCkgeyB9O1xuICAgIC8qKlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqIEBwYXJhbSB7P30gcGFyZW50RWxlbWVudFxuICAgICAqIEBwYXJhbSB7Pz19IGRlYnVnSW5mb1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZVRlbXBsYXRlQW5jaG9yID0gZnVuY3Rpb24gKHBhcmVudEVsZW1lbnQsIGRlYnVnSW5mbykgeyB9O1xuICAgIC8qKlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqIEBwYXJhbSB7P30gcGFyZW50RWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcGFyYW0gez89fSBkZWJ1Z0luZm9cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVUZXh0ID0gZnVuY3Rpb24gKHBhcmVudEVsZW1lbnQsIHZhbHVlLCBkZWJ1Z0luZm8pIHsgfTtcbiAgICAvKipcbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcGFyYW0gez99IHBhcmVudEVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IG5vZGVzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlci5wcm90b3R5cGUucHJvamVjdE5vZGVzID0gZnVuY3Rpb24gKHBhcmVudEVsZW1lbnQsIG5vZGVzKSB7IH07XG4gICAgLyoqXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQHBhcmFtIHs/fSBub2RlXG4gICAgICogQHBhcmFtIHs/fSB2aWV3Um9vdE5vZGVzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlci5wcm90b3R5cGUuYXR0YWNoVmlld0FmdGVyID0gZnVuY3Rpb24gKG5vZGUsIHZpZXdSb290Tm9kZXMpIHsgfTtcbiAgICAvKipcbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcGFyYW0gez99IHZpZXdSb290Tm9kZXNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5kZXRhY2hWaWV3ID0gZnVuY3Rpb24gKHZpZXdSb290Tm9kZXMpIHsgfTtcbiAgICAvKipcbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcGFyYW0gez99IGhvc3RFbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSB2aWV3QWxsTm9kZXNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5kZXN0cm95VmlldyA9IGZ1bmN0aW9uIChob3N0RWxlbWVudCwgdmlld0FsbE5vZGVzKSB7IH07XG4gICAgLyoqXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQHBhcmFtIHs/fSByZW5kZXJFbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHBhcmFtIHs/fSBjYWxsYmFja1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXIucHJvdG90eXBlLmxpc3RlbiA9IGZ1bmN0aW9uIChyZW5kZXJFbGVtZW50LCBuYW1lLCBjYWxsYmFjaykgeyB9O1xuICAgIC8qKlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqIEBwYXJhbSB7P30gdGFyZ2V0XG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHBhcmFtIHs/fSBjYWxsYmFja1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXIucHJvdG90eXBlLmxpc3Rlbkdsb2JhbCA9IGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUsIGNhbGxiYWNrKSB7IH07XG4gICAgLyoqXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQHBhcmFtIHs/fSByZW5kZXJFbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBwcm9wZXJ0eU5hbWVcbiAgICAgKiBAcGFyYW0gez99IHByb3BlcnR5VmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5zZXRFbGVtZW50UHJvcGVydHkgPSBmdW5jdGlvbiAocmVuZGVyRWxlbWVudCwgcHJvcGVydHlOYW1lLCBwcm9wZXJ0eVZhbHVlKSB7IH07XG4gICAgLyoqXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQHBhcmFtIHs/fSByZW5kZXJFbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBhdHRyaWJ1dGVOYW1lXG4gICAgICogQHBhcmFtIHs/PX0gYXR0cmlidXRlVmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5zZXRFbGVtZW50QXR0cmlidXRlID0gZnVuY3Rpb24gKHJlbmRlckVsZW1lbnQsIGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVZhbHVlKSB7IH07XG4gICAgLyoqXG4gICAgICogVXNlZCBvbmx5IGluIGRlYnVnIG1vZGUgdG8gc2VyaWFsaXplIHByb3BlcnR5IGNoYW5nZXMgdG8gZG9tIG5vZGVzIGFzIGF0dHJpYnV0ZXMuXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQHBhcmFtIHs/fSByZW5kZXJFbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBwcm9wZXJ0eU5hbWVcbiAgICAgKiBAcGFyYW0gez99IHByb3BlcnR5VmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5zZXRCaW5kaW5nRGVidWdJbmZvID0gZnVuY3Rpb24gKHJlbmRlckVsZW1lbnQsIHByb3BlcnR5TmFtZSwgcHJvcGVydHlWYWx1ZSkgeyB9O1xuICAgIC8qKlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqIEBwYXJhbSB7P30gcmVuZGVyRWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gY2xhc3NOYW1lXG4gICAgICogQHBhcmFtIHs/fSBpc0FkZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXIucHJvdG90eXBlLnNldEVsZW1lbnRDbGFzcyA9IGZ1bmN0aW9uIChyZW5kZXJFbGVtZW50LCBjbGFzc05hbWUsIGlzQWRkKSB7IH07XG4gICAgLyoqXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQHBhcmFtIHs/fSByZW5kZXJFbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBzdHlsZU5hbWVcbiAgICAgKiBAcGFyYW0gez89fSBzdHlsZVZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlci5wcm90b3R5cGUuc2V0RWxlbWVudFN0eWxlID0gZnVuY3Rpb24gKHJlbmRlckVsZW1lbnQsIHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSkgeyB9O1xuICAgIC8qKlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqIEBwYXJhbSB7P30gcmVuZGVyRWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gbWV0aG9kTmFtZVxuICAgICAqIEBwYXJhbSB7Pz19IGFyZ3NcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5pbnZva2VFbGVtZW50TWV0aG9kID0gZnVuY3Rpb24gKHJlbmRlckVsZW1lbnQsIG1ldGhvZE5hbWUsIGFyZ3MpIHsgfTtcbiAgICAvKipcbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcGFyYW0gez99IHJlbmRlck5vZGVcbiAgICAgKiBAcGFyYW0gez99IHRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5zZXRUZXh0ID0gZnVuY3Rpb24gKHJlbmRlck5vZGUsIHRleHQpIHsgfTtcbiAgICAvKipcbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHN0YXJ0aW5nU3R5bGVzXG4gICAgICogQHBhcmFtIHs/fSBrZXlmcmFtZXNcbiAgICAgKiBAcGFyYW0gez99IGR1cmF0aW9uXG4gICAgICogQHBhcmFtIHs/fSBkZWxheVxuICAgICAqIEBwYXJhbSB7P30gZWFzaW5nXG4gICAgICogQHBhcmFtIHs/PX0gcHJldmlvdXNQbGF5ZXJzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlci5wcm90b3R5cGUuYW5pbWF0ZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBzdGFydGluZ1N0eWxlcywga2V5ZnJhbWVzLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgcHJldmlvdXNQbGF5ZXJzKSB7IH07XG59XG4vKiogQHR5cGUgez99ICovXG5leHBvcnQgY29uc3QgUmVuZGVyZXIySW50ZXJjZXB0b3IgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ1JlbmRlcmVyMkludGVyY2VwdG9yJyk7XG4vKipcbiAqIEluamVjdGFibGUgc2VydmljZSB0aGF0IHByb3ZpZGVzIGEgbG93LWxldmVsIGludGVyZmFjZSBmb3IgbW9kaWZ5aW5nIHRoZSBVSS5cbiAqXG4gKiBVc2UgdGhpcyBzZXJ2aWNlIHRvIGJ5cGFzcyBBbmd1bGFyJ3MgdGVtcGxhdGluZyBhbmQgbWFrZSBjdXN0b20gVUkgY2hhbmdlcyB0aGF0IGNhbid0IGJlXG4gKiBleHByZXNzZWQgZGVjbGFyYXRpdmVseS4gRm9yIGV4YW1wbGUgaWYgeW91IG5lZWQgdG8gc2V0IGEgcHJvcGVydHkgb3IgYW4gYXR0cmlidXRlIHdob3NlIG5hbWUgaXNcbiAqIG5vdCBzdGF0aWNhbGx5IGtub3duLCB1c2Uge1xcQGxpbmsgUmVuZGVyZXIjc2V0RWxlbWVudFByb3BlcnR5IHNldEVsZW1lbnRQcm9wZXJ0eX0gb3JcbiAqIHtcXEBsaW5rIFJlbmRlcmVyI3NldEVsZW1lbnRBdHRyaWJ1dGUgc2V0RWxlbWVudEF0dHJpYnV0ZX0gcmVzcGVjdGl2ZWx5LlxuICpcbiAqIElmIHlvdSBhcmUgaW1wbGVtZW50aW5nIGEgY3VzdG9tIHJlbmRlcmVyLCB5b3UgbXVzdCBpbXBsZW1lbnQgdGhpcyBpbnRlcmZhY2UuXG4gKlxuICogVGhlIGRlZmF1bHQgUmVuZGVyZXIgaW1wbGVtZW50YXRpb24gaXMgYERvbVJlbmRlcmVyYC4gQWxzbyBhdmFpbGFibGUgaXMgYFdlYldvcmtlclJlbmRlcmVyYC5cbiAqXG4gKiBAZGVwcmVjYXRlZCBVc2UgYFJlbmRlcmVyRmFjdG9yeTJgIGluc3RlYWQuXG4gKiBcXEBwdWJsaWNBcGlcbiAqIEBhYnN0cmFjdFxuICovXG5leHBvcnQgY2xhc3MgUm9vdFJlbmRlcmVyIHtcbn1cbmlmIChmYWxzZSkge1xuICAgIC8qKlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqIEBwYXJhbSB7P30gY29tcG9uZW50VHlwZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUm9vdFJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXJDb21wb25lbnQgPSBmdW5jdGlvbiAoY29tcG9uZW50VHlwZSkgeyB9O1xufVxuLyoqXG4gKiBVc2VkIGJ5IGBSZW5kZXJlckZhY3RvcnkyYCB0byBhc3NvY2lhdGUgY3VzdG9tIHJlbmRlcmluZyBkYXRhIGFuZCBzdHlsZXNcbiAqIHdpdGggYSByZW5kZXJpbmcgaW1wbGVtZW50YXRpb24uXG4gKiBcXEBwdWJsaWNBcGlcbiAqIEByZWNvcmRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFJlbmRlcmVyVHlwZTIoKSB7IH1cbmlmIChmYWxzZSkge1xuICAgIC8qKlxuICAgICAqIEEgdW5pcXVlIGlkZW50aWZ5aW5nIHN0cmluZyBmb3IgdGhlIG5ldyByZW5kZXJlciwgdXNlZCB3aGVuIGNyZWF0aW5nXG4gICAgICogdW5pcXVlIHN0eWxlcyBmb3IgZW5jYXBzdWxhdGlvbi5cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlclR5cGUyLnByb3RvdHlwZS5pZDtcbiAgICAvKipcbiAgICAgKiBUaGUgdmlldyBlbmNhcHN1bGF0aW9uIHR5cGUsIHdoaWNoIGRldGVybWluZXMgaG93IHN0eWxlcyBhcmUgYXBwbGllZCB0b1xuICAgICAqIERPTSBlbGVtZW50cy4gT25lIG9mXG4gICAgICogLSBgRW11bGF0ZWRgIChkZWZhdWx0KTogRW11bGF0ZSBuYXRpdmUgc2NvcGluZyBvZiBzdHlsZXMuXG4gICAgICogLSBgTmF0aXZlYDogVXNlIHRoZSBuYXRpdmUgZW5jYXBzdWxhdGlvbiBtZWNoYW5pc20gb2YgdGhlIHJlbmRlcmVyLlxuICAgICAqIC0gYFNoYWRvd0RvbWA6IFVzZSBtb2Rlcm4gW1NoYWRvd1xuICAgICAqIERPTV0oaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmNvbXBvbmVudHMvc3BlYy9zaGFkb3cvKSBhbmRcbiAgICAgKiBjcmVhdGUgYSBTaGFkb3dSb290IGZvciBjb21wb25lbnQncyBob3N0IGVsZW1lbnQuXG4gICAgICogLSBgTm9uZWA6IERvIG5vdCBwcm92aWRlIGFueSB0ZW1wbGF0ZSBvciBzdHlsZSBlbmNhcHN1bGF0aW9uLlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyVHlwZTIucHJvdG90eXBlLmVuY2Fwc3VsYXRpb247XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBDU1Mgc3R5bGVzIHRvIGJlIHN0b3JlZCBvbiBhIHJlbmRlcmVyIGluc3RhbmNlLlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyVHlwZTIucHJvdG90eXBlLnN0eWxlcztcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIGFyYml0cmFyeSBkZXZlbG9wZXItZGVmaW5lZCBkYXRhIHRvIGJlIHN0b3JlZCBvbiBhIHJlbmRlcmVyIGluc3RhbmNlLlxuICAgICAqIFRoaXMgaXMgdXNlZnVsIGZvciByZW5kZXJlcnMgdGhhdCBkZWxlZ2F0ZSB0byBvdGhlciByZW5kZXJlcnMuXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgUmVuZGVyZXJUeXBlMi5wcm90b3R5cGUuZGF0YTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYSBjdXN0b20gcmVuZGVyZXIgdGhhdCBpbXBsZW1lbnRzIHRoZSBgUmVuZGVyZXIyYCBiYXNlIGNsYXNzLlxuICpcbiAqIFxcQHB1YmxpY0FwaVxuICogQGFic3RyYWN0XG4gKi9cbmV4cG9ydCBjbGFzcyBSZW5kZXJlckZhY3RvcnkyIHtcbn1cbmlmIChmYWxzZSkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGEgY3VzdG9tIHJlbmRlcmVyIGZvciBhIGhvc3QgRE9NIGVsZW1lbnQuXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQHBhcmFtIHs/fSBob3N0RWxlbWVudCBUaGUgZWxlbWVudCB0byByZW5kZXIuXG4gICAgICogQHBhcmFtIHs/fSB0eXBlIFRoZSBiYXNlIGNsYXNzIHRvIGltcGxlbWVudC5cbiAgICAgKiBAcmV0dXJuIHs/fSBUaGUgbmV3IGN1c3RvbSByZW5kZXJlciBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBSZW5kZXJlckZhY3RvcnkyLnByb3RvdHlwZS5jcmVhdGVSZW5kZXJlciA9IGZ1bmN0aW9uIChob3N0RWxlbWVudCwgdHlwZSkgeyB9O1xuICAgIC8qKlxuICAgICAqIEEgY2FsbGJhY2sgaW52b2tlZCB3aGVuIHJlbmRlcmluZyBoYXMgYmVndW4uXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlckZhY3RvcnkyLnByb3RvdHlwZS5iZWdpbiA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAvKipcbiAgICAgKiBBIGNhbGxiYWNrIGludm9rZWQgd2hlbiByZW5kZXJpbmcgaGFzIGNvbXBsZXRlZC5cbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyRmFjdG9yeTIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAvKipcbiAgICAgKiBVc2Ugd2l0aCBhbmltYXRpb25zIHRlc3Qtb25seSBtb2RlLiBOb3RpZmllcyB0aGUgdGVzdCB3aGVuIHJlbmRlcmluZyBoYXMgY29tcGxldGVkLlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqIEByZXR1cm4gez99IFRoZSBhc3luY2hyb25vdXMgcmVzdWx0IG9mIHRoZSBkZXZlbG9wZXItZGVmaW5lZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBSZW5kZXJlckZhY3RvcnkyLnByb3RvdHlwZS53aGVuUmVuZGVyaW5nRG9uZSA9IGZ1bmN0aW9uICgpIHsgfTtcbn1cbi8qKiBAZW51bSB7bnVtYmVyfSAqL1xuY29uc3QgUmVuZGVyZXJTdHlsZUZsYWdzMiA9IHtcbiAgICAvKipcbiAgICAgKiBNYXJrcyBhIHN0eWxlIGFzIGltcG9ydGFudC5cbiAgICAgKi9cbiAgICBJbXBvcnRhbnQ6IDEsXG4gICAgLyoqXG4gICAgICogTWFya3MgYSBzdHlsZSBhcyB1c2luZyBkYXNoIGNhc2UgbmFtaW5nICh0aGlzLWlzLWRhc2gtY2FzZSkuXG4gICAgICovXG4gICAgRGFzaENhc2U6IDIsXG59O1xuZXhwb3J0IHsgUmVuZGVyZXJTdHlsZUZsYWdzMiB9O1xuUmVuZGVyZXJTdHlsZUZsYWdzMltSZW5kZXJlclN0eWxlRmxhZ3MyLkltcG9ydGFudF0gPSAnSW1wb3J0YW50JztcblJlbmRlcmVyU3R5bGVGbGFnczJbUmVuZGVyZXJTdHlsZUZsYWdzMi5EYXNoQ2FzZV0gPSAnRGFzaENhc2UnO1xuLyoqXG4gKiBFeHRlbmQgdGhpcyBiYXNlIGNsYXNzIHRvIGltcGxlbWVudCBjdXN0b20gcmVuZGVyaW5nLiBCeSBkZWZhdWx0LCBBbmd1bGFyXG4gKiByZW5kZXJzIGEgdGVtcGxhdGUgaW50byBET00uIFlvdSBjYW4gdXNlIGN1c3RvbSByZW5kZXJpbmcgdG8gaW50ZXJjZXB0XG4gKiByZW5kZXJpbmcgY2FsbHMsIG9yIHRvIHJlbmRlciB0byBzb21ldGhpbmcgb3RoZXIgdGhhbiBET00uXG4gKlxuICogQ3JlYXRlIHlvdXIgY3VzdG9tIHJlbmRlcmVyIHVzaW5nIGBSZW5kZXJlckZhY3RvcnkyYC5cbiAqXG4gKiBVc2UgYSBjdXN0b20gcmVuZGVyZXIgdG8gYnlwYXNzIEFuZ3VsYXIncyB0ZW1wbGF0aW5nIGFuZFxuICogbWFrZSBjdXN0b20gVUkgY2hhbmdlcyB0aGF0IGNhbid0IGJlIGV4cHJlc3NlZCBkZWNsYXJhdGl2ZWx5LlxuICogRm9yIGV4YW1wbGUgaWYgeW91IG5lZWQgdG8gc2V0IGEgcHJvcGVydHkgb3IgYW4gYXR0cmlidXRlIHdob3NlIG5hbWUgaXNcbiAqIG5vdCBzdGF0aWNhbGx5IGtub3duLCB1c2UgdGhlIGBzZXRQcm9wZXJ0eSgpYCBvclxuICogYHNldEF0dHJpYnV0ZSgpYCBtZXRob2QuXG4gKlxuICogXFxAcHVibGljQXBpXG4gKiBAYWJzdHJhY3RcbiAqL1xuZXhwb3J0IGNsYXNzIFJlbmRlcmVyMiB7XG59XG4vKipcbiAqIFxcQGludGVybmFsXG4gKiBAbm9jb2xsYXBzZVxuICovXG5SZW5kZXJlcjIuX19OR19FTEVNRU5UX0lEX18gPSAoKSA9PiBTV0lUQ0hfUkVOREVSRVIyX0ZBQ1RPUlkoKTtcbmlmIChmYWxzZSkge1xuICAgIC8qKlxuICAgICAqIFxcQGludGVybmFsXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlcjIuX19OR19FTEVNRU5UX0lEX187XG4gICAgLyoqXG4gICAgICogSWYgbnVsbCBvciB1bmRlZmluZWQsIHRoZSB2aWV3IGVuZ2luZSB3b24ndCBjYWxsIGl0LlxuICAgICAqIFRoaXMgaXMgdXNlZCBhcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiBmb3IgcHJvZHVjdGlvbiBtb2RlLlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyMi5wcm90b3R5cGUuZGVzdHJveU5vZGU7XG4gICAgLyoqXG4gICAgICogVXNlIHRvIHN0b3JlIGFyYml0cmFyeSBkZXZlbG9wZXItZGVmaW5lZCBkYXRhIG9uIGEgcmVuZGVyZXIgaW5zdGFuY2UsXG4gICAgICogYXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIFRoaXMgaXMgdXNlZnVsIGZvciByZW5kZXJlcnMgdGhhdCBkZWxlZ2F0ZSB0byBvdGhlciByZW5kZXJlcnMuXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlcjIucHJvdG90eXBlLmRhdGEgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgLyoqXG4gICAgICogSW1wbGVtZW50IHRoaXMgY2FsbGJhY2sgdG8gZGVzdHJveSB0aGUgcmVuZGVyZXIgb3IgdGhlIGhvc3QgZWxlbWVudC5cbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyMi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAvKipcbiAgICAgKiBJbXBsZW1lbnQgdGhpcyBjYWxsYmFjayB0byBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhlIGhvc3QgZWxlbWVudC5cbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcGFyYW0gez99IG5hbWUgQW4gaWRlbnRpZnlpbmcgbmFtZSBmb3IgdGhlIG5ldyBlbGVtZW50LCB1bmlxdWUgd2l0aGluIHRoZSBuYW1lc3BhY2UuXG4gICAgICogQHBhcmFtIHs/PX0gbmFtZXNwYWNlIFRoZSBuYW1lc3BhY2UgZm9yIHRoZSBuZXcgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJuIHs/fSBUaGUgbmV3IGVsZW1lbnQuXG4gICAgICovXG4gICAgUmVuZGVyZXIyLnByb3RvdHlwZS5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKG5hbWUsIG5hbWVzcGFjZSkgeyB9O1xuICAgIC8qKlxuICAgICAqIEltcGxlbWVudCB0aGlzIGNhbGxiYWNrIHRvIGFkZCBhIGNvbW1lbnQgdG8gdGhlIERPTSBvZiB0aGUgaG9zdCBlbGVtZW50LlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqIEBwYXJhbSB7P30gdmFsdWUgVGhlIGNvbW1lbnQgdGV4dC5cbiAgICAgKiBAcmV0dXJuIHs/fSBUaGUgbW9kaWZpZWQgZWxlbWVudC5cbiAgICAgKi9cbiAgICBSZW5kZXJlcjIucHJvdG90eXBlLmNyZWF0ZUNvbW1lbnQgPSBmdW5jdGlvbiAodmFsdWUpIHsgfTtcbiAgICAvKipcbiAgICAgKiBJbXBsZW1lbnQgdGhpcyBjYWxsYmFjayB0byBhZGQgdGV4dCB0byB0aGUgRE9NIG9mIHRoZSBob3N0IGVsZW1lbnQuXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZSBUaGUgdGV4dCBzdHJpbmcuXG4gICAgICogQHJldHVybiB7P30gVGhlIG1vZGlmaWVkIGVsZW1lbnQuXG4gICAgICovXG4gICAgUmVuZGVyZXIyLnByb3RvdHlwZS5jcmVhdGVUZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7IH07XG4gICAgLyoqXG4gICAgICogQXBwZW5kcyBhIGNoaWxkIHRvIGEgZ2l2ZW4gcGFyZW50IG5vZGUgaW4gdGhlIGhvc3QgZWxlbWVudCBET00uXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQHBhcmFtIHs/fSBwYXJlbnQgVGhlIHBhcmVudCBub2RlLlxuICAgICAqIEBwYXJhbSB7P30gbmV3Q2hpbGQgVGhlIG5ldyBjaGlsZCBub2RlLlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXIyLnByb3RvdHlwZS5hcHBlbmRDaGlsZCA9IGZ1bmN0aW9uIChwYXJlbnQsIG5ld0NoaWxkKSB7IH07XG4gICAgLyoqXG4gICAgICogSW1wbGVtZW50IHRoaXMgY2FsbGJhY2sgdG8gaW5zZXJ0IGEgY2hpbGQgbm9kZSBhdCBhIGdpdmVuIHBvc2l0aW9uIGluIGEgcGFyZW50IG5vZGVcbiAgICAgKiBpbiB0aGUgaG9zdCBlbGVtZW50IERPTS5cbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcGFyYW0gez99IHBhcmVudCBUaGUgcGFyZW50IG5vZGUuXG4gICAgICogQHBhcmFtIHs/fSBuZXdDaGlsZCBUaGUgbmV3IGNoaWxkIG5vZGVzLlxuICAgICAqIEBwYXJhbSB7P30gcmVmQ2hpbGQgVGhlIGV4aXN0aW5nIGNoaWxkIG5vZGUgdGhhdCBzaG91bGQgcHJlY2VkZSB0aGUgbmV3IG5vZGUuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlcjIucHJvdG90eXBlLmluc2VydEJlZm9yZSA9IGZ1bmN0aW9uIChwYXJlbnQsIG5ld0NoaWxkLCByZWZDaGlsZCkgeyB9O1xuICAgIC8qKlxuICAgICAqIEltcGxlbWVudCB0aGlzIGNhbGxiYWNrIHRvIHJlbW92ZSBhIGNoaWxkIG5vZGUgZnJvbSB0aGUgaG9zdCBlbGVtZW50J3MgRE9NLlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqIEBwYXJhbSB7P30gcGFyZW50IFRoZSBwYXJlbnQgbm9kZS5cbiAgICAgKiBAcGFyYW0gez99IG9sZENoaWxkIFRoZSBjaGlsZCBub2RlIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0gez89fSBpc0hvc3RFbGVtZW50IE9wdGlvbmFsbHkgc2lnbmFsIHRvIHRoZSByZW5kZXJlciB3aGV0aGVyIHRoaXMgZWxlbWVudCBpcyBhIGhvc3QgZWxlbWVudFxuICAgICAqIG9yIG5vdFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXIyLnByb3RvdHlwZS5yZW1vdmVDaGlsZCA9IGZ1bmN0aW9uIChwYXJlbnQsIG9sZENoaWxkLCBpc0hvc3RFbGVtZW50KSB7IH07XG4gICAgLyoqXG4gICAgICogSW1wbGVtZW50IHRoaXMgY2FsbGJhY2sgdG8gcHJlcGFyZSBhbiBlbGVtZW50IHRvIGJlIGJvb3RzdHJhcHBlZFxuICAgICAqIGFzIGEgcm9vdCBlbGVtZW50LCBhbmQgcmV0dXJuIHRoZSBlbGVtZW50IGluc3RhbmNlLlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqIEBwYXJhbSB7P30gc2VsZWN0b3JPck5vZGUgVGhlIERPTSBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7Pz19IHByZXNlcnZlQ29udGVudCBXaGV0aGVyIHRoZSBjb250ZW50cyBvZiB0aGUgcm9vdCBlbGVtZW50XG4gICAgICogc2hvdWxkIGJlIHByZXNlcnZlZCwgb3IgY2xlYXJlZCB1cG9uIGJvb3RzdHJhcCAoZGVmYXVsdCBiZWhhdmlvcikuXG4gICAgICogVXNlIHdpdGggYFZpZXdFbmNhcHN1bGF0aW9uLlNoYWRvd0RvbWAgdG8gYWxsb3cgc2ltcGxlIG5hdGl2ZVxuICAgICAqIGNvbnRlbnQgcHJvamVjdGlvbiB2aWEgYDxzbG90PmAgZWxlbWVudHMuXG4gICAgICogQHJldHVybiB7P30gVGhlIHJvb3QgZWxlbWVudC5cbiAgICAgKi9cbiAgICBSZW5kZXJlcjIucHJvdG90eXBlLnNlbGVjdFJvb3RFbGVtZW50ID0gZnVuY3Rpb24gKHNlbGVjdG9yT3JOb2RlLCBwcmVzZXJ2ZUNvbnRlbnQpIHsgfTtcbiAgICAvKipcbiAgICAgKiBJbXBsZW1lbnQgdGhpcyBjYWxsYmFjayB0byBnZXQgdGhlIHBhcmVudCBvZiBhIGdpdmVuIG5vZGVcbiAgICAgKiBpbiB0aGUgaG9zdCBlbGVtZW50J3MgRE9NLlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqIEBwYXJhbSB7P30gbm9kZSBUaGUgY2hpbGQgbm9kZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJuIHs/fSBUaGUgcGFyZW50IG5vZGUsIG9yIG51bGwgaWYgdGhlcmUgaXMgbm8gcGFyZW50LlxuICAgICAqIEZvciBXZWJXb3JrZXJzLCBhbHdheXMgcmV0dXJucyB0cnVlLlxuICAgICAqIFRoaXMgaXMgYmVjYXVzZSB0aGUgY2hlY2sgaXMgc3luY2hyb25vdXMsXG4gICAgICogYW5kIHRoZSBjYWxsZXIgY2FuJ3QgcmVseSBvbiBjaGVja2luZyBmb3IgbnVsbC5cbiAgICAgKi9cbiAgICBSZW5kZXJlcjIucHJvdG90eXBlLnBhcmVudE5vZGUgPSBmdW5jdGlvbiAobm9kZSkgeyB9O1xuICAgIC8qKlxuICAgICAqIEltcGxlbWVudCB0aGlzIGNhbGxiYWNrIHRvIGdldCB0aGUgbmV4dCBzaWJsaW5nIG5vZGUgb2YgYSBnaXZlbiBub2RlXG4gICAgICogaW4gdGhlIGhvc3QgZWxlbWVudCdzIERPTS5cbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcGFyYW0gez99IG5vZGVcbiAgICAgKiBAcmV0dXJuIHs/fSBUaGUgc2libGluZyBub2RlLCBvciBudWxsIGlmIHRoZXJlIGlzIG5vIHNpYmxpbmcuXG4gICAgICogRm9yIFdlYldvcmtlcnMsIGFsd2F5cyByZXR1cm5zIGEgdmFsdWUuXG4gICAgICogVGhpcyBpcyBiZWNhdXNlIHRoZSBjaGVjayBpcyBzeW5jaHJvbm91cyxcbiAgICAgKiBhbmQgdGhlIGNhbGxlciBjYW4ndCByZWx5IG9uIGNoZWNraW5nIGZvciBudWxsLlxuICAgICAqL1xuICAgIFJlbmRlcmVyMi5wcm90b3R5cGUubmV4dFNpYmxpbmcgPSBmdW5jdGlvbiAobm9kZSkgeyB9O1xuICAgIC8qKlxuICAgICAqIEltcGxlbWVudCB0aGlzIGNhbGxiYWNrIHRvIHNldCBhbiBhdHRyaWJ1dGUgdmFsdWUgZm9yIGFuIGVsZW1lbnQgaW4gdGhlIERPTS5cbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcGFyYW0gez99IGVsIFRoZSBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7P30gbmFtZSBUaGUgYXR0cmlidXRlIG5hbWUuXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZSBUaGUgbmV3IHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Pz19IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlLlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXIyLnByb3RvdHlwZS5zZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbHVlLCBuYW1lc3BhY2UpIHsgfTtcbiAgICAvKipcbiAgICAgKiBJbXBsZW1lbnQgdGhpcyBjYWxsYmFjayB0byByZW1vdmUgYW4gYXR0cmlidXRlIGZyb20gYW4gZWxlbWVudCBpbiB0aGUgRE9NLlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqIEBwYXJhbSB7P30gZWwgVGhlIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHs/fSBuYW1lIFRoZSBhdHRyaWJ1dGUgbmFtZS5cbiAgICAgKiBAcGFyYW0gez89fSBuYW1lc3BhY2UgVGhlIG5hbWVzcGFjZS5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyMi5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlID0gZnVuY3Rpb24gKGVsLCBuYW1lLCBuYW1lc3BhY2UpIHsgfTtcbiAgICAvKipcbiAgICAgKiBJbXBsZW1lbnQgdGhpcyBjYWxsYmFjayB0byBhZGQgYSBjbGFzcyB0byBhbiBlbGVtZW50IGluIHRoZSBET00uXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQHBhcmFtIHs/fSBlbCBUaGUgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gez99IG5hbWUgVGhlIGNsYXNzIG5hbWUuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlcjIucHJvdG90eXBlLmFkZENsYXNzID0gZnVuY3Rpb24gKGVsLCBuYW1lKSB7IH07XG4gICAgLyoqXG4gICAgICogSW1wbGVtZW50IHRoaXMgY2FsbGJhY2sgdG8gcmVtb3ZlIGEgY2xhc3MgZnJvbSBhbiBlbGVtZW50IGluIHRoZSBET00uXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQHBhcmFtIHs/fSBlbCBUaGUgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gez99IG5hbWUgVGhlIGNsYXNzIG5hbWUuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlcjIucHJvdG90eXBlLnJlbW92ZUNsYXNzID0gZnVuY3Rpb24gKGVsLCBuYW1lKSB7IH07XG4gICAgLyoqXG4gICAgICogSW1wbGVtZW50IHRoaXMgY2FsbGJhY2sgdG8gc2V0IGEgQ1NTIHN0eWxlIGZvciBhbiBlbGVtZW50IGluIHRoZSBET00uXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQHBhcmFtIHs/fSBlbCBUaGUgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gez99IHN0eWxlIFRoZSBuYW1lIG9mIHRoZSBzdHlsZS5cbiAgICAgKiBAcGFyYW0gez99IHZhbHVlIFRoZSBuZXcgdmFsdWUuXG4gICAgICogQHBhcmFtIHs/PX0gZmxhZ3MgRmxhZ3MgZm9yIHN0eWxlIHZhcmlhdGlvbnMuIE5vIGZsYWdzIGFyZSBzZXQgYnkgZGVmYXVsdC5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyMi5wcm90b3R5cGUuc2V0U3R5bGUgPSBmdW5jdGlvbiAoZWwsIHN0eWxlLCB2YWx1ZSwgZmxhZ3MpIHsgfTtcbiAgICAvKipcbiAgICAgKiBJbXBsZW1lbnQgdGhpcyBjYWxsYmFjayB0byByZW1vdmUgdGhlIHZhbHVlIGZyb20gYSBDU1Mgc3R5bGUgZm9yIGFuIGVsZW1lbnQgaW4gdGhlIERPTS5cbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcGFyYW0gez99IGVsIFRoZSBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7P30gc3R5bGUgVGhlIG5hbWUgb2YgdGhlIHN0eWxlLlxuICAgICAqIEBwYXJhbSB7Pz19IGZsYWdzIEZsYWdzIGZvciBzdHlsZSB2YXJpYXRpb25zIHRvIHJlbW92ZSwgaWYgc2V0LiA/Pz9cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyMi5wcm90b3R5cGUucmVtb3ZlU3R5bGUgPSBmdW5jdGlvbiAoZWwsIHN0eWxlLCBmbGFncykgeyB9O1xuICAgIC8qKlxuICAgICAqIEltcGxlbWVudCB0aGlzIGNhbGxiYWNrIHRvIHNldCB0aGUgdmFsdWUgb2YgYSBwcm9wZXJ0eSBvZiBhbiBlbGVtZW50IGluIHRoZSBET00uXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQHBhcmFtIHs/fSBlbCBUaGUgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gez99IG5hbWUgVGhlIHByb3BlcnR5IG5hbWUuXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZSBUaGUgbmV3IHZhbHVlLlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXIyLnByb3RvdHlwZS5zZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChlbCwgbmFtZSwgdmFsdWUpIHsgfTtcbiAgICAvKipcbiAgICAgKiBJbXBsZW1lbnQgdGhpcyBjYWxsYmFjayB0byBzZXQgdGhlIHZhbHVlIG9mIGEgbm9kZSBpbiB0aGUgaG9zdCBlbGVtZW50LlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqIEBwYXJhbSB7P30gbm9kZSBUaGUgbm9kZS5cbiAgICAgKiBAcGFyYW0gez99IHZhbHVlIFRoZSBuZXcgdmFsdWUuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlcjIucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gKG5vZGUsIHZhbHVlKSB7IH07XG4gICAgLyoqXG4gICAgICogSW1wbGVtZW50IHRoaXMgY2FsbGJhY2sgdG8gc3RhcnQgYW4gZXZlbnQgbGlzdGVuZXIuXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQHBhcmFtIHs/fSB0YXJnZXQgVGhlIGNvbnRleHQgaW4gd2hpY2ggdG8gbGlzdGVuIGZvciBldmVudHMuIENhbiBiZVxuICAgICAqIHRoZSBlbnRpcmUgd2luZG93IG9yIGRvY3VtZW50LCB0aGUgYm9keSBvZiB0aGUgZG9jdW1lbnQsIG9yIGEgc3BlY2lmaWNcbiAgICAgKiBET00gZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gez99IGV2ZW50TmFtZSBUaGUgZXZlbnQgdG8gbGlzdGVuIGZvci5cbiAgICAgKiBAcGFyYW0gez99IGNhbGxiYWNrIEEgaGFuZGxlciBmdW5jdGlvbiB0byBpbnZva2Ugd2hlbiB0aGUgZXZlbnQgb2NjdXJzLlxuICAgICAqIEByZXR1cm4gez99IEFuIFwidW5saXN0ZW5cIiBmdW5jdGlvbiBmb3IgZGlzcG9zaW5nIG9mIHRoaXMgaGFuZGxlci5cbiAgICAgKi9cbiAgICBSZW5kZXJlcjIucHJvdG90eXBlLmxpc3RlbiA9IGZ1bmN0aW9uICh0YXJnZXQsIGV2ZW50TmFtZSwgY2FsbGJhY2spIHsgfTtcbn1cbi8qKiBAdHlwZSB7P30gKi9cbmV4cG9ydCBjb25zdCBTV0lUQ0hfUkVOREVSRVIyX0ZBQ1RPUllfX1BPU1RfUjNfXyA9IHJlbmRlcjNJbmplY3RSZW5kZXJlcjI7XG4vKiogQHR5cGUgez99ICovXG5jb25zdCBTV0lUQ0hfUkVOREVSRVIyX0ZBQ1RPUllfX1BSRV9SM19fID0gbm9vcDtcbi8qKiBAdHlwZSB7P30gKi9cbmNvbnN0IFNXSVRDSF9SRU5ERVJFUjJfRkFDVE9SWSA9IFNXSVRDSF9SRU5ERVJFUjJfRkFDVE9SWV9fUFJFX1IzX187XG4iXX0=","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description Represents the version of Angular\n *\n * \\@publicApi\n */\nexport class Version {\n    /**\n     * @param {?} full\n     */\n    constructor(full) {\n        this.full = full;\n        this.major = full.split('.')[0];\n        this.minor = full.split('.')[1];\n        this.patch = full.split('.').slice(2).join('.');\n    }\n}\nif (false) {\n    /** @type {?} */\n    Version.prototype.major;\n    /** @type {?} */\n    Version.prototype.minor;\n    /** @type {?} */\n    Version.prototype.patch;\n    /** @type {?} */\n    Version.prototype.full;\n}\n/**\n * \\@publicApi\n * @type {?}\n */\nexport const VERSION = new Version('8.0.0-beta.7');\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3ZlcnNpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQWFBLE1BQU0sT0FBTyxPQUFPOzs7O0lBS2xCLFlBQW1CLElBQVk7UUFBWixTQUFJLEdBQUosSUFBSSxDQUFRO1FBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEQsQ0FBQztDQUNGOzs7SUFUQyx3QkFBOEI7O0lBQzlCLHdCQUE4Qjs7SUFDOUIsd0JBQThCOztJQUVsQix1QkFBbUI7Ozs7OztBQVVqQyxNQUFNLE9BQU8sT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLG1CQUFtQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBSZXByZXNlbnRzIHRoZSB2ZXJzaW9uIG9mIEFuZ3VsYXJcbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjbGFzcyBWZXJzaW9uIHtcbiAgcHVibGljIHJlYWRvbmx5IG1ham9yOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSBtaW5vcjogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgcGF0Y2g6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZnVsbDogc3RyaW5nKSB7XG4gICAgdGhpcy5tYWpvciA9IGZ1bGwuc3BsaXQoJy4nKVswXTtcbiAgICB0aGlzLm1pbm9yID0gZnVsbC5zcGxpdCgnLicpWzFdO1xuICAgIHRoaXMucGF0Y2ggPSBmdWxsLnNwbGl0KCcuJykuc2xpY2UoMikuam9pbignLicpO1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgY29uc3QgVkVSU0lPTiA9IG5ldyBWZXJzaW9uKCcwLjAuMC1QTEFDRUhPTERFUicpO1xuIl19","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectChangeDetectorRef as render3InjectChangeDetectorRef } from '../render3/view_engine_compatibility';\n/**\n * Base class for Angular Views, provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be rerendered.\n *\n * \\@usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n * region=\"mark-for-check\"></code-example>\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n *\n * \\@publicApi\n * @abstract\n */\nexport class ChangeDetectorRef {\n}\n/**\n * \\@internal\n * @nocollapse\n */\nChangeDetectorRef.__NG_ELEMENT_ID__ = () => SWITCH_CHANGE_DETECTOR_REF_FACTORY();\nif (false) {\n    /**\n     * \\@internal\n     * @nocollapse\n     * @type {?}\n     */\n    ChangeDetectorRef.__NG_ELEMENT_ID__;\n    /**\n     * When a view uses the {\\@link ChangeDetectionStrategy#OnPush OnPush} (checkOnce)\n     * change detection strategy, explicitly marks the view as changed so that\n     * it can be checked again.\n     *\n     * Components are normally marked as dirty (in need of rerendering) when inputs\n     * have changed or events have fired in the view. Call this method to ensure that\n     * a component is checked even if these triggers have not occured.\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.markForCheck = function () { };\n    /**\n     * Detaches this view from the change-detection tree.\n     * A detached view is  not checked until it is reattached.\n     * Use in combination with `detectChanges()` to implement local change detection checks.\n     *\n     * Detached views are not checked during change detection runs until they are\n     * re-attached, even if they are marked as dirty.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.detach = function () { };\n    /**\n     * Checks this view and its children. Use in combination with {\\@link ChangeDetectorRef#detach\n     * detach}\n     * to implement local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.detectChanges = function () { };\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * Use in development mode to verify that running change detection doesn't introduce\n     * other changes.\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.checkNoChanges = function () { };\n    /**\n     * Re-attaches the previously detached view to the change detection tree.\n     * Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.reattach = function () { };\n}\n/** @type {?} */\nexport const SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = render3InjectChangeDetectorRef;\n/** @type {?} */\nconst SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__ = (...args) => { };\nconst ɵ0 = SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__;\n/** @type {?} */\nconst SWITCH_CHANGE_DETECTOR_REF_FACTORY = SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__;\nexport { ɵ0 };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectViewContainerRef as render3InjectViewContainerRef } from '../render3/view_engine_compatibility';\nimport { noop } from '../util/noop';\nimport { ElementRef } from './element_ref';\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-tree).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n * \\@publicApi\n * @abstract\n */\nexport class ViewContainerRef {\n}\n/**\n * \\@internal\n * @nocollapse\n */\nViewContainerRef.__NG_ELEMENT_ID__ = () => SWITCH_VIEW_CONTAINER_REF_FACTORY(ViewContainerRef, ElementRef);\nif (false) {\n    /**\n     * \\@internal\n     * @nocollapse\n     * @type {?}\n     */\n    ViewContainerRef.__NG_ELEMENT_ID__;\n    /**\n     * Anchor element that specifies the location of this container in the containing view.\n     * Each view container can have only one anchor element, and each anchor element\n     * can have only a single view container.\n     *\n     * Root elements of views attached to this container become siblings of the anchor element in\n     * the rendered view.\n     *\n     * Access the `ViewContainerRef` of an element by placing a `Directive` injected\n     * with `ViewContainerRef` on the element, or use a `ViewChild` query.\n     *\n     * <!-- TODO: rename to anchorElement -->\n     * @abstract\n     * @return {?}\n     */\n    ViewContainerRef.prototype.element = function () { };\n    /**\n     * The [dependency injector](guide/glossary#injector) for this view container.\n     * @abstract\n     * @return {?}\n     */\n    ViewContainerRef.prototype.injector = function () { };\n    /**\n     * @deprecated No replacement\n     * @abstract\n     * @return {?}\n     */\n    ViewContainerRef.prototype.parentInjector = function () { };\n    /**\n     * Destroys all views in this container.\n     * @abstract\n     * @return {?}\n     */\n    ViewContainerRef.prototype.clear = function () { };\n    /**\n     * Retrieves a view from this container.\n     * @abstract\n     * @param {?} index The 0-based index of the view to retrieve.\n     * @return {?} The `ViewRef` instance, or null if the index is out of range.\n     */\n    ViewContainerRef.prototype.get = function (index) { };\n    /**\n     * Reports how many views are currently attached to this container.\n     * @abstract\n     * @return {?} The number of views.\n     */\n    ViewContainerRef.prototype.length = function () { };\n    /**\n     * Instantiates an embedded view and inserts it\n     * into this container.\n     * @abstract\n     * @template C\n     * @param {?} templateRef The HTML template that defines the view.\n     * @param {?=} context\n     * @param {?=} index The 0-based index at which to insert the new view into this container.\n     * If not specified, appends the new view as the last entry.\n     *\n     * @return {?} The `ViewRef` instance for the newly created view.\n     */\n    ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) { };\n    /**\n     * Instantiates a single component and inserts its host view into this container.\n     *\n     * @abstract\n     * @template C\n     * @param {?} componentFactory The factory to use.\n     * @param {?=} index The index at which to insert the new component's host view into this container.\n     * If not specified, appends the new view as the last entry.\n     * @param {?=} injector The injector to use as the parent for the new component.\n     * @param {?=} projectableNodes\n     * @param {?=} ngModule\n     *\n     * @return {?} The new component instance, containing the host view.\n     *\n     */\n    ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModule) { };\n    /**\n     * Inserts a view into this container.\n     * @abstract\n     * @param {?} viewRef The view to insert.\n     * @param {?=} index The 0-based index at which to insert the view.\n     * If not specified, appends the new view as the last entry.\n     * @return {?} The inserted `ViewRef` instance.\n     *\n     */\n    ViewContainerRef.prototype.insert = function (viewRef, index) { };\n    /**\n     * Moves a view to a new location in this container.\n     * @abstract\n     * @param {?} viewRef The view to move.\n     * @param {?} currentIndex\n     * @return {?} The moved `ViewRef` instance.\n     */\n    ViewContainerRef.prototype.move = function (viewRef, currentIndex) { };\n    /**\n     * Returns the index of a view within the current container.\n     * @abstract\n     * @param {?} viewRef The view to query.\n     * @return {?} The 0-based index of the view's position in this container,\n     * or `-1` if this container doesn't contain the view.\n     */\n    ViewContainerRef.prototype.indexOf = function (viewRef) { };\n    /**\n     * Destroys a view attached to this container\n     * @abstract\n     * @param {?=} index The 0-based index of the view to destroy.\n     * If not specified, the last view in the container is removed.\n     * @return {?}\n     */\n    ViewContainerRef.prototype.remove = function (index) { };\n    /**\n     * Detaches a view from this container without destroying it.\n     * Use along with `insert()` to move a view within the current container.\n     * @abstract\n     * @param {?=} index The 0-based index of the view to detach.\n     * If not specified, the last view in the container is detached.\n     * @return {?}\n     */\n    ViewContainerRef.prototype.detach = function (index) { };\n}\n/** @type {?} */\nexport const SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = render3InjectViewContainerRef;\n/** @type {?} */\nconst SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_VIEW_CONTAINER_REF_FACTORY = SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { WrappedValue, devModeEqual } from '../change_detection/change_detection';\nimport { SOURCE } from '../di/injector';\nimport { ViewEncapsulation } from '../metadata/view';\nimport { looseIdentical } from '../util/comparison';\nimport { stringify } from '../util/stringify';\nimport { expressionChangedAfterItHasBeenCheckedError } from './errors';\nimport { Services, asElementData, asTextData } from './types';\n/** @type {?} */\nexport const NOOP = () => { };\n/** @type {?} */\nconst _tokenKeyCache = new Map();\n/**\n * @param {?} token\n * @return {?}\n */\nexport function tokenKey(token) {\n    /** @type {?} */\n    let key = _tokenKeyCache.get(token);\n    if (!key) {\n        key = stringify(token) + '_' + _tokenKeyCache.size;\n        _tokenKeyCache.set(token, key);\n    }\n    return key;\n}\n/**\n * @param {?} view\n * @param {?} nodeIdx\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function unwrapValue(view, nodeIdx, bindingIdx, value) {\n    if (WrappedValue.isWrapped(value)) {\n        value = WrappedValue.unwrap(value);\n        /** @type {?} */\n        const globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\n        /** @type {?} */\n        const oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);\n        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\n    }\n    return value;\n}\n/** @type {?} */\nconst UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\n/** @type {?} */\nconst EMPTY_RENDERER_TYPE_ID = '$$empty';\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\n/**\n * @param {?} values\n * @return {?}\n */\nexport function createRendererType2(values) {\n    return {\n        id: UNDEFINED_RENDERER_TYPE_ID,\n        styles: values.styles,\n        encapsulation: values.encapsulation,\n        data: values.data\n    };\n}\n/** @type {?} */\nlet _renderCompCount = 0;\n/**\n * @param {?=} type\n * @return {?}\n */\nexport function resolveRendererType2(type) {\n    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\n        // first time we see this RendererType2. Initialize it...\n        /** @type {?} */\n        const isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||\n            type.styles.length || Object.keys(type.data).length);\n        if (isFilled) {\n            type.id = `c${_renderCompCount++}`;\n        }\n        else {\n            type.id = EMPTY_RENDERER_TYPE_ID;\n        }\n    }\n    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\n        type = null;\n    }\n    return type || null;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkBinding(view, def, bindingIdx, value) {\n    /** @type {?} */\n    const oldValues = view.oldValues;\n    if ((view.state & 2 /* FirstCheck */) ||\n        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkAndUpdateBinding(view, def, bindingIdx, value) {\n    if (checkBinding(view, def, bindingIdx, value)) {\n        view.oldValues[def.bindingIndex + bindingIdx] = value;\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkBindingNoChanges(view, def, bindingIdx, value) {\n    /** @type {?} */\n    const oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {\n        /** @type {?} */\n        const bindingName = def.bindings[bindingIdx].name;\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), `${bindingName}: ${oldValue}`, `${bindingName}: ${value}`, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function markParentViewsForCheck(view) {\n    /** @type {?} */\n    let currView = view;\n    while (currView) {\n        if (currView.def.flags & 2 /* OnPush */) {\n            currView.state |= 8 /* ChecksEnabled */;\n        }\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} endView\n * @return {?}\n */\nexport function markParentViewsForCheckProjectedViews(view, endView) {\n    /** @type {?} */\n    let currView = view;\n    while (currView && currView !== endView) {\n        currView.state |= 64 /* CheckProjectedViews */;\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nexport function dispatchEvent(view, nodeIndex, eventName, event) {\n    try {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[nodeIndex];\n        /** @type {?} */\n        const startView = nodeDef.flags & 33554432 /* ComponentView */ ?\n            asElementData(view, nodeIndex).componentView :\n            view;\n        markParentViewsForCheck(startView);\n        return Services.handleEvent(view, nodeIndex, eventName, event);\n    }\n    catch (e) {\n        // Attention: Don't rethrow, as it would cancel Observable subscriptions!\n        view.root.errorHandler.handleError(e);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function declaredViewContainer(view) {\n    if (view.parent) {\n        /** @type {?} */\n        const parentView = view.parent;\n        return asElementData(parentView, (/** @type {?} */ (view.parentNodeDef)).nodeIndex);\n    }\n    return null;\n}\n/**\n * for component views, this is the host element.\n * for embedded views, this is the index of the parent node\n * that contains the view container.\n * @param {?} view\n * @return {?}\n */\nexport function viewParentEl(view) {\n    /** @type {?} */\n    const parentView = view.parent;\n    if (parentView) {\n        return (/** @type {?} */ (view.parentNodeDef)).parent;\n    }\n    else {\n        return null;\n    }\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function renderNode(view, def) {\n    switch (def.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return asElementData(view, def.nodeIndex).renderElement;\n        case 2 /* TypeText */:\n            return asTextData(view, def.nodeIndex).renderText;\n    }\n}\n/**\n * @param {?} target\n * @param {?} name\n * @return {?}\n */\nexport function elementEventFullName(target, name) {\n    return target ? `${target}:${name}` : name;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function isComponentView(view) {\n    return !!view.parent && !!((/** @type {?} */ (view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function isEmbeddedView(view) {\n    return !!view.parent && !((/** @type {?} */ (view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} queryId\n * @return {?}\n */\nexport function filterQueryId(queryId) {\n    return 1 << (queryId % 32);\n}\n/**\n * @param {?} matchedQueriesDsl\n * @return {?}\n */\nexport function splitMatchedQueriesDsl(matchedQueriesDsl) {\n    /** @type {?} */\n    const matchedQueries = {};\n    /** @type {?} */\n    let matchedQueryIds = 0;\n    /** @type {?} */\n    const references = {};\n    if (matchedQueriesDsl) {\n        matchedQueriesDsl.forEach(([queryId, valueType]) => {\n            if (typeof queryId === 'number') {\n                matchedQueries[queryId] = valueType;\n                matchedQueryIds |= filterQueryId(queryId);\n            }\n            else {\n                references[queryId] = valueType;\n            }\n        });\n    }\n    return { matchedQueries, references, matchedQueryIds };\n}\n/**\n * @param {?} deps\n * @param {?=} sourceName\n * @return {?}\n */\nexport function splitDepsDsl(deps, sourceName) {\n    return deps.map(value => {\n        /** @type {?} */\n        let token;\n        /** @type {?} */\n        let flags;\n        if (Array.isArray(value)) {\n            [flags, token] = value;\n        }\n        else {\n            flags = 0 /* None */;\n            token = value;\n        }\n        if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {\n            Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });\n        }\n        return { flags, token, tokenKey: tokenKey(token) };\n    });\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function getParentRenderElement(view, renderHost, def) {\n    /** @type {?} */\n    let renderParent = def.renderParent;\n    if (renderParent) {\n        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||\n            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||\n            ((/** @type {?} */ (renderParent.element)).componentRendererType &&\n                (/** @type {?} */ ((/** @type {?} */ (renderParent.element)).componentRendererType)).encapsulation ===\n                    ViewEncapsulation.Native)) {\n            // only children of non components, or children of components with native encapsulation should\n            // be attached.\n            return asElementData(view, (/** @type {?} */ (def.renderParent)).nodeIndex).renderElement;\n        }\n    }\n    else {\n        return renderHost;\n    }\n}\n/** @type {?} */\nconst DEFINITION_CACHE = new WeakMap();\n/**\n * @template D\n * @param {?} factory\n * @return {?}\n */\nexport function resolveDefinition(factory) {\n    /** @type {?} */\n    let value = (/** @type {?} */ ((/** @type {?} */ (DEFINITION_CACHE.get(factory)))));\n    if (!value) {\n        value = factory(() => NOOP);\n        value.factory = factory;\n        DEFINITION_CACHE.set(factory, value);\n    }\n    return value;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function rootRenderNodes(view) {\n    /** @type {?} */\n    const renderNodes = [];\n    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);\n    return renderNodes;\n}\n/** @enum {number} */\nconst RenderNodeAction = {\n    Collect: 0, AppendChild: 1, InsertBefore: 2, RemoveChild: 3,\n};\nexport { RenderNodeAction };\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\n    // We need to re-compute the parent node in case the nodes have been moved around manually\n    if (action === 3 /* RemoveChild */) {\n        parentNode = view.renderer.parentNode(renderNode(view, (/** @type {?} */ (view.def.lastRenderRootNode))));\n    }\n    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\n}\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\n    for (let i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {\n            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n}\n/**\n * @param {?} view\n * @param {?} ngContentIndex\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\n    /** @type {?} */\n    let compView = view;\n    while (compView && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    /** @type {?} */\n    const hostView = (/** @type {?} */ (compView)).parent;\n    /** @type {?} */\n    const hostElDef = viewParentEl((/** @type {?} */ (compView)));\n    /** @type {?} */\n    const startIndex = (/** @type {?} */ (hostElDef)).nodeIndex + 1;\n    /** @type {?} */\n    const endIndex = (/** @type {?} */ (hostElDef)).nodeIndex + (/** @type {?} */ (hostElDef)).childCount;\n    for (let i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        const nodeDef = (/** @type {?} */ (hostView)).def.nodes[i];\n        if (nodeDef.ngContentIndex === ngContentIndex) {\n            visitRenderNode((/** @type {?} */ (hostView)), nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n    if (!(/** @type {?} */ (hostView)).parent) {\n        // a root view\n        /** @type {?} */\n        const projectedNodes = view.root.projectableNodes[ngContentIndex];\n        if (projectedNodes) {\n            for (let i = 0; i < projectedNodes.length; i++) {\n                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\n    if (nodeDef.flags & 8 /* TypeNgContent */) {\n        visitProjectedRenderNodes(view, (/** @type {?} */ (nodeDef.ngContent)).index, action, parentNode, nextSibling, target);\n    }\n    else {\n        /** @type {?} */\n        const rn = renderNode(view, nodeDef);\n        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&\n            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {\n            // Note: we might need to do both actions.\n            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {\n                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n            }\n            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {\n                /** @type {?} */\n                const compView = asElementData(view, nodeDef.nodeIndex).componentView;\n                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\n            }\n        }\n        else {\n            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n        }\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            /** @type {?} */\n            const embeddedViews = (/** @type {?} */ (asElementData(view, nodeDef.nodeIndex).viewContainer))._embeddedViews;\n            for (let k = 0; k < embeddedViews.length; k++) {\n                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\n            }\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && !(/** @type {?} */ (nodeDef.element)).name) {\n            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\n    /** @type {?} */\n    const renderer = view.renderer;\n    switch (action) {\n        case 1 /* AppendChild */:\n            renderer.appendChild(parentNode, renderNode);\n            break;\n        case 2 /* InsertBefore */:\n            renderer.insertBefore(parentNode, renderNode, nextSibling);\n            break;\n        case 3 /* RemoveChild */:\n            renderer.removeChild(parentNode, renderNode);\n            break;\n        case 0 /* Collect */:\n            (/** @type {?} */ (target)).push(renderNode);\n            break;\n    }\n}\n/** @type {?} */\nconst NS_PREFIX_RE = /^:([^:]+):(.+)$/;\n/**\n * @param {?} name\n * @return {?}\n */\nexport function splitNamespace(name) {\n    if (name[0] === ':') {\n        /** @type {?} */\n        const match = (/** @type {?} */ (name.match(NS_PREFIX_RE)));\n        return [match[1], match[2]];\n    }\n    return ['', name];\n}\n/**\n * @param {?} bindings\n * @return {?}\n */\nexport function calcBindingFlags(bindings) {\n    /** @type {?} */\n    let flags = 0;\n    for (let i = 0; i < bindings.length; i++) {\n        flags |= bindings[i].flags;\n    }\n    return flags;\n}\n/**\n * @param {?} valueCount\n * @param {?} constAndInterp\n * @return {?}\n */\nexport function interpolate(valueCount, constAndInterp) {\n    /** @type {?} */\n    let result = '';\n    for (let i = 0; i < valueCount * 2; i = i + 2) {\n        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n    }\n    return result + constAndInterp[valueCount * 2];\n}\n/**\n * @param {?} valueCount\n * @param {?} c0\n * @param {?} a1\n * @param {?} c1\n * @param {?=} a2\n * @param {?=} c2\n * @param {?=} a3\n * @param {?=} c3\n * @param {?=} a4\n * @param {?=} c4\n * @param {?=} a5\n * @param {?=} c5\n * @param {?=} a6\n * @param {?=} c6\n * @param {?=} a7\n * @param {?=} c7\n * @param {?=} a8\n * @param {?=} c8\n * @param {?=} a9\n * @param {?=} c9\n * @return {?}\n */\nexport function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n    switch (valueCount) {\n        case 1:\n            return c0 + _toStringWithNull(a1) + c1;\n        case 2:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n        case 3:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3;\n        case 4:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4;\n        case 5:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n        case 6:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n        case 7:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7;\n        case 8:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n        case 9:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n        default:\n            throw new Error(`Does not support more than 9 expressions`);\n    }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction _toStringWithNull(v) {\n    return v != null ? v.toString() : '';\n}\n/** @type {?} */\nexport const EMPTY_ARRAY = [];\n/** @type {?} */\nexport const EMPTY_MAP = {};\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { resolveForwardRef } from '../di/forward_ref';\nimport { INJECTOR, Injector } from '../di/injector';\nimport { setCurrentInjector } from '../di/injector_compatibility';\nimport { getInjectableDef } from '../di/interface/defs';\nimport { APP_ROOT } from '../di/scope';\nimport { NgModuleRef } from '../linker/ng_module_factory';\nimport { stringify } from '../util/stringify';\nimport { splitDepsDsl, tokenKey } from './util';\n/** @type {?} */\nconst UNDEFINED_VALUE = new Object();\n/** @type {?} */\nconst InjectorRefTokenKey = tokenKey(Injector);\n/** @type {?} */\nconst INJECTORRefTokenKey = tokenKey(INJECTOR);\n/** @type {?} */\nconst NgModuleRefTokenKey = tokenKey(NgModuleRef);\n/**\n * @param {?} flags\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nexport function moduleProvideDef(flags, token, value, deps) {\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    /** @type {?} */\n    const depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the module definition\n        index: -1,\n        deps: depDefs, flags, token, value\n    };\n}\n/**\n * @param {?} providers\n * @return {?}\n */\nexport function moduleDef(providers) {\n    /** @type {?} */\n    const providersByKey = {};\n    /** @type {?} */\n    const modules = [];\n    /** @type {?} */\n    let isRoot = false;\n    for (let i = 0; i < providers.length; i++) {\n        /** @type {?} */\n        const provider = providers[i];\n        if (provider.token === APP_ROOT && provider.value === true) {\n            isRoot = true;\n        }\n        if (provider.flags & 1073741824 /* TypeNgModule */) {\n            modules.push(provider.token);\n        }\n        provider.index = i;\n        providersByKey[tokenKey(provider.token)] = provider;\n    }\n    return {\n        // Will be filled later...\n        factory: null,\n        providersByKey,\n        providers,\n        modules,\n        isRoot,\n    };\n}\n/**\n * @param {?} data\n * @return {?}\n */\nexport function initNgModule(data) {\n    /** @type {?} */\n    const def = data._def;\n    /** @type {?} */\n    const providers = data._providers = new Array(def.providers.length);\n    for (let i = 0; i < def.providers.length; i++) {\n        /** @type {?} */\n        const provDef = def.providers[i];\n        if (!(provDef.flags & 4096 /* LazyProvider */)) {\n            // Make sure the provider has not been already initialized outside this loop.\n            if (providers[i] === undefined) {\n                providers[i] = _createProviderInstance(data, provDef);\n            }\n        }\n    }\n}\n/**\n * @param {?} data\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nexport function resolveNgModuleDep(data, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\n    /** @type {?} */\n    const former = setCurrentInjector(data);\n    try {\n        if (depDef.flags & 8 /* Value */) {\n            return depDef.token;\n        }\n        if (depDef.flags & 2 /* Optional */) {\n            notFoundValue = null;\n        }\n        if (depDef.flags & 1 /* SkipSelf */) {\n            return data._parent.get(depDef.token, notFoundValue);\n        }\n        /** @type {?} */\n        const tokenKey = depDef.tokenKey;\n        switch (tokenKey) {\n            case InjectorRefTokenKey:\n            case INJECTORRefTokenKey:\n            case NgModuleRefTokenKey:\n                return data;\n        }\n        /** @type {?} */\n        const providerDef = data._def.providersByKey[tokenKey];\n        /** @type {?} */\n        let injectableDef;\n        if (providerDef) {\n            /** @type {?} */\n            let providerInstance = data._providers[providerDef.index];\n            if (providerInstance === undefined) {\n                providerInstance = data._providers[providerDef.index] =\n                    _createProviderInstance(data, providerDef);\n            }\n            return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\n        }\n        else if ((injectableDef = getInjectableDef(depDef.token)) && targetsModule(data, injectableDef)) {\n            /** @type {?} */\n            const index = data._providers.length;\n            data._def.providersByKey[depDef.tokenKey] = {\n                flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,\n                value: injectableDef.factory,\n                deps: [], index,\n                token: depDef.token,\n            };\n            data._providers[index] = UNDEFINED_VALUE;\n            return (data._providers[index] =\n                _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]));\n        }\n        else if (depDef.flags & 4 /* Self */) {\n            return notFoundValue;\n        }\n        return data._parent.get(depDef.token, notFoundValue);\n    }\n    finally {\n        setCurrentInjector(former);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} scope\n * @return {?}\n */\nfunction moduleTransitivelyPresent(ngModule, scope) {\n    return ngModule._def.modules.indexOf(scope) > -1;\n}\n/**\n * @param {?} ngModule\n * @param {?} def\n * @return {?}\n */\nfunction targetsModule(ngModule, def) {\n    return def.providedIn != null && (moduleTransitivelyPresent(ngModule, def.providedIn) ||\n        def.providedIn === 'root' && ngModule._def.isRoot);\n}\n/**\n * @param {?} ngModule\n * @param {?} providerDef\n * @return {?}\n */\nfunction _createProviderInstance(ngModule, providerDef) {\n    /** @type {?} */\n    let injectable;\n    switch (providerDef.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 1024 /* TypeFactoryProvider */:\n            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 2048 /* TypeUseExistingProvider */:\n            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\n            break;\n        case 256 /* TypeValueProvider */:\n            injectable = providerDef.value;\n            break;\n    }\n    // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be\n    // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be\n    // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already\n    // set (ngOnDestroy was detected statically).\n    if (injectable !== UNDEFINED_VALUE && injectable !== null && typeof injectable === 'object' &&\n        !(providerDef.flags & 131072 /* OnDestroy */) && typeof injectable.ngOnDestroy === 'function') {\n        providerDef.flags |= 131072 /* OnDestroy */;\n    }\n    return injectable === undefined ? UNDEFINED_VALUE : injectable;\n}\n/**\n * @param {?} ngModule\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction _createClass(ngModule, ctor, deps) {\n    /** @type {?} */\n    const len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            /** @type {?} */\n            const depValues = new Array(len);\n            for (let i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return new ctor(...depValues);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction _callFactory(ngModule, factory, deps) {\n    /** @type {?} */\n    const len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            /** @type {?} */\n            const depValues = Array(len);\n            for (let i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return factory(...depValues);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} lifecycles\n * @return {?}\n */\nexport function callNgModuleLifecycle(ngModule, lifecycles) {\n    /** @type {?} */\n    const def = ngModule._def;\n    /** @type {?} */\n    const destroyed = new Set();\n    for (let i = 0; i < def.providers.length; i++) {\n        /** @type {?} */\n        const provDef = def.providers[i];\n        if (provDef.flags & 131072 /* OnDestroy */) {\n            /** @type {?} */\n            const instance = ngModule._providers[i];\n            if (instance && instance !== UNDEFINED_VALUE) {\n                /** @type {?} */\n                const onDestroy = instance.ngOnDestroy;\n                if (typeof onDestroy === 'function' && !destroyed.has(instance)) {\n                    onDestroy.apply(instance);\n                    destroyed.add(instance);\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdfbW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvdmlldy9uZ19tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsUUFBUSxFQUFFLFFBQVEsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ2xELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQ2hFLE9BQU8sRUFBZ0IsZ0JBQWdCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNyRSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ3JDLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFHNUMsT0FBTyxFQUFDLFlBQVksRUFBRSxRQUFRLEVBQUMsTUFBTSxRQUFRLENBQUM7O01BRXhDLGVBQWUsR0FBRyxJQUFJLE1BQU0sRUFBRTs7TUFFOUIsbUJBQW1CLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQzs7TUFDeEMsbUJBQW1CLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQzs7TUFDeEMsbUJBQW1CLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQzs7Ozs7Ozs7QUFFakQsTUFBTSxVQUFVLGdCQUFnQixDQUM1QixLQUFnQixFQUFFLEtBQVUsRUFBRSxLQUFVLEVBQ3hDLElBQStCO0lBQ2pDLHdEQUF3RDtJQUN4RCx5REFBeUQ7SUFDekQsOEJBQThCO0lBQzlCLEtBQUssR0FBRyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7VUFDM0IsT0FBTyxHQUFHLFlBQVksQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BELE9BQU87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ICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge3Jlc29sdmVGb3J3YXJkUmVmfSBmcm9tICcuLi9kaS9mb3J3YXJkX3JlZic7XG5pbXBvcnQge0lOSkVDVE9SLCBJbmplY3Rvcn0gZnJvbSAnLi4vZGkvaW5qZWN0b3InO1xuaW1wb3J0IHtzZXRDdXJyZW50SW5qZWN0b3J9IGZyb20gJy4uL2RpL2luamVjdG9yX2NvbXBhdGliaWxpdHknO1xuaW1wb3J0IHtJbmplY3RhYmxlRGVmLCBnZXRJbmplY3RhYmxlRGVmfSBmcm9tICcuLi9kaS9pbnRlcmZhY2UvZGVmcyc7XG5pbXBvcnQge0FQUF9ST09UfSBmcm9tICcuLi9kaS9zY29wZSc7XG5pbXBvcnQge05nTW9kdWxlUmVmfSBmcm9tICcuLi9saW5rZXIvbmdfbW9kdWxlX2ZhY3RvcnknO1xuaW1wb3J0IHtzdHJpbmdpZnl9IGZyb20gJy4uL3V0aWwvc3RyaW5naWZ5JztcblxuaW1wb3J0IHtEZXBEZWYsIERlcEZsYWdzLCBOZ01vZHVsZURhdGEsIE5nTW9kdWxlRGVmaW5pdGlvbiwgTmdNb2R1bGVQcm92aWRlckRlZiwgTm9kZUZsYWdzfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7c3BsaXREZXBzRHNsLCB0b2tlbktleX0gZnJvbSAnLi91dGlsJztcblxuY29uc3QgVU5ERUZJTkVEX1ZBTFVFID0gbmV3IE9iamVjdCgpO1xuXG5jb25zdCBJbmplY3RvclJlZlRva2VuS2V5ID0gdG9rZW5LZXkoSW5qZWN0b3IpO1xuY29uc3QgSU5KRUNUT1JSZWZUb2tlbktleSA9IHRva2VuS2V5KElOSkVDVE9SKTtcbmNvbnN0IE5nTW9kdWxlUmVmVG9rZW5LZXkgPSB0b2tlbktleShOZ01vZHVsZVJlZik7XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2R1bGVQcm92aWRlRGVmKFxuICAgIGZsYWdzOiBOb2RlRmxhZ3MsIHRva2VuOiBhbnksIHZhbHVlOiBhbnksXG4gICAgZGVwczogKFtEZXBGbGFncywgYW55XSB8IGFueSlbXSk6IE5nTW9kdWxlUHJvdmlkZXJEZWYge1xuICAvLyBOZWVkIHRvIHJlc29sdmUgZm9yd2FyZFJlZnMgYXMgZS5nLiBmb3IgYHVzZVZhbHVlYCB3ZVxuICAvLyBsb3dlcmVkIHRoZSBleHByZXNzaW9uIGFuZCB0aGVuIHN0b3BwZWQgZXZhbHVhdGluZyBpdCxcbiAgLy8gaS5lLiBhbHNvIGRpZG4ndCB1bndyYXAgaXQuXG4gIHZhbHVlID0gcmVzb2x2ZUZvcndhcmRSZWYodmFsdWUpO1xuICBjb25zdCBkZXBEZWZzID0gc3BsaXREZXBzRHNsKGRlcHMsIHN0cmluZ2lmeSh0b2tlbikpO1xuICByZXR1cm4ge1xuICAgIC8vIHdpbGwgYmV0IHNldCBieSB0aGUgbW9kdWxlIGRlZmluaXRpb25cbiAgICBpbmRleDogLTEsXG4gICAgZGVwczogZGVwRGVmcywgZmxhZ3MsIHRva2VuLCB2YWx1ZVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9kdWxlRGVmKHByb3ZpZGVyczogTmdNb2R1bGVQcm92aWRlckRlZltdKTogTmdNb2R1bGVEZWZpbml0aW9uIHtcbiAgY29uc3QgcHJvdmlkZXJzQnlLZXk6IHtba2V5OiBzdHJpbmddOiBOZ01vZHVsZVByb3ZpZGVyRGVmfSA9IHt9O1xuICBjb25zdCBtb2R1bGVzID0gW107XG4gIGxldCBpc1Jvb3Q6IGJvb2xlYW4gPSBmYWxzZTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm92aWRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwcm92aWRlciA9IHByb3ZpZGVyc1tpXTtcbiAgICBpZiAocHJvdmlkZXIudG9rZW4gPT09IEFQUF9ST09UICYmIHByb3ZpZGVyLnZhbHVlID09PSB0cnVlKSB7XG4gICAgICBpc1Jvb3QgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAocHJvdmlkZXIuZmxhZ3MgJiBOb2RlRmxhZ3MuVHlwZU5nTW9kdWxlKSB7XG4gICAgICBtb2R1bGVzLnB1c2gocHJvdmlkZXIudG9rZW4pO1xuICAgIH1cbiAgICBwcm92aWRlci5pbmRleCA9IGk7XG4gICAgcHJvdmlkZXJzQnlLZXlbdG9rZW5LZXkocHJvdmlkZXIudG9rZW4pXSA9IHByb3ZpZGVyO1xuICB9XG4gIHJldHVybiB7XG4gICAgLy8gV2lsbCBiZSBmaWxsZWQgbGF0ZXIuLi5cbiAgICBmYWN0b3J5OiBudWxsLFxuICAgIHByb3ZpZGVyc0J5S2V5LFxuICAgIHByb3ZpZGVycyxcbiAgICBtb2R1bGVzLFxuICAgIGlzUm9vdCxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXROZ01vZHVsZShkYXRhOiBOZ01vZHVsZURhdGEpIHtcbiAgY29uc3QgZGVmID0gZGF0YS5fZGVmO1xuICBjb25zdCBwcm92aWRlcnMgPSBkYXRhLl9wcm92aWRlcnMgPSBuZXcgQXJyYXkoZGVmLnByb3ZpZGVycy5sZW5ndGgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGRlZi5wcm92aWRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwcm92RGVmID0gZGVmLnByb3ZpZGVyc1tpXTtcbiAgICBpZiAoIShwcm92RGVmLmZsYWdzICYgTm9kZUZsYWdzLkxhenlQcm92aWRlcikpIHtcbiAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgcHJvdmlkZXIgaGFzIG5vdCBiZWVuIGFscmVhZHkgaW5pdGlhbGl6ZWQgb3V0c2lkZSB0aGlzIGxvb3AuXG4gICAgICBpZiAocHJvdmlkZXJzW2ldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJvdmlkZXJzW2ldID0gX2NyZWF0ZVByb3ZpZGVySW5zdGFuY2UoZGF0YSwgcHJvdkRlZik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlTmdNb2R1bGVEZXAoXG4gICAgZGF0YTogTmdNb2R1bGVEYXRhLCBkZXBEZWY6IERlcERlZiwgbm90Rm91bmRWYWx1ZTogYW55ID0gSW5qZWN0b3IuVEhST1dfSUZfTk9UX0ZPVU5EKTogYW55IHtcbiAgY29uc3QgZm9ybWVyID0gc2V0Q3VycmVudEluamVjdG9yKGRhdGEpO1xuICB0cnkge1xuICAgIGlmIChkZXBEZWYuZmxhZ3MgJiBEZXBGbGFncy5WYWx1ZSkge1xuICAgICAgcmV0dXJuIGRlcERlZi50b2tlbjtcbiAgICB9XG4gICAgaWYgKGRlcERlZi5mbGFncyAmIERlcEZsYWdzLk9wdGlvbmFsKSB7XG4gICAgICBub3RGb3VuZFZhbHVlID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGRlcERlZi5mbGFncyAmIERlcEZsYWdzLlNraXBTZWxmKSB7XG4gICAgICByZXR1cm4gZGF0YS5fcGFyZW50LmdldChkZXBEZWYudG9rZW4sIG5vdEZvdW5kVmFsdWUpO1xuICAgIH1cbiAgICBjb25zdCB0b2tlbktleSA9IGRlcERlZi50b2tlbktleTtcbiAgICBzd2l0Y2ggKHRva2VuS2V5KSB7XG4gICAgICBjYXNlIEluamVjdG9yUmVmVG9rZW5LZXk6XG4gICAgICBjYXNlIElOSkVDVE9SUmVmVG9rZW5LZXk6XG4gICAgICBjYXNlIE5nTW9kdWxlUmVmVG9rZW5LZXk6XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBjb25zdCBwcm92aWRlckRlZiA9IGRhdGEuX2RlZi5wcm92aWRlcnNCeUtleVt0b2tlbktleV07XG4gICAgbGV0IGluamVjdGFibGVEZWY6IEluamVjdGFibGVEZWY8YW55PnxudWxsO1xuICAgIGlmIChwcm92aWRlckRlZikge1xuICAgICAgbGV0IHByb3ZpZGVySW5zdGFuY2UgPSBkYXRhLl9wcm92aWRlcnNbcHJvdmlkZXJEZWYuaW5kZXhdO1xuICAgICAgaWYgKHByb3ZpZGVySW5zdGFuY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwcm92aWRlckluc3RhbmNlID0gZGF0YS5fcHJvdmlkZXJzW3Byb3ZpZGVyRGVmLmluZGV4XSA9XG4gICAgICAgICAgICBfY3JlYXRlUHJvdmlkZXJJbnN0YW5jZShkYXRhLCBwcm92aWRlckRlZik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvdmlkZXJJbnN0YW5jZSA9PT0gVU5ERUZJTkVEX1ZBTFVFID8gdW5kZWZpbmVkIDogcHJvdmlkZXJJbnN0YW5jZTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgICAoaW5qZWN0YWJsZURlZiA9IGdldEluamVjdGFibGVEZWYoZGVwRGVmLnRva2VuKSkgJiYgdGFyZ2V0c01vZHVsZShkYXRhLCBpbmplY3RhYmxlRGVmKSkge1xuICAgICAgY29uc3QgaW5kZXggPSBkYXRhLl9wcm92aWRlcnMubGVuZ3RoO1xuICAgICAgZGF0YS5fZGVmLnByb3ZpZGVyc0J5S2V5W2RlcERlZi50b2tlbktleV0gPSB7XG4gICAgICAgIGZsYWdzOiBOb2RlRmxhZ3MuVHlwZUZhY3RvcnlQcm92aWRlciB8IE5vZGVGbGFncy5MYXp5UHJvdmlkZXIsXG4gICAgICAgIHZhbHVlOiBpbmplY3RhYmxlRGVmLmZhY3RvcnksXG4gICAgICAgIGRlcHM6IFtdLCBpbmRleCxcbiAgICAgICAgdG9rZW46IGRlcERlZi50b2tlbixcbiAgICAgIH07XG4gICAgICBkYXRhLl9wcm92aWRlcnNbaW5kZXhdID0gVU5ERUZJTkVEX1ZBTFVFO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgICBkYXRhLl9wcm92aWRlcnNbaW5kZXhdID1cbiAgICAgICAgICAgICAgX2NyZWF0ZVByb3ZpZGVySW5zdGFuY2UoZGF0YSwgZGF0YS5fZGVmLnByb3ZpZGVyc0J5S2V5W2RlcERlZi50b2tlbktleV0pKTtcbiAgICB9IGVsc2UgaWYgKGRlcERlZi5mbGFncyAmIERlcEZsYWdzLlNlbGYpIHtcbiAgICAgIHJldHVybiBub3RGb3VuZFZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YS5fcGFyZW50LmdldChkZXBEZWYudG9rZW4sIG5vdEZvdW5kVmFsdWUpO1xuICB9IGZpbmFsbHkge1xuICAgIHNldEN1cnJlbnRJbmplY3Rvcihmb3JtZXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1vZHVsZVRyYW5zaXRpdmVseVByZXNlbnQobmdNb2R1bGU6IE5nTW9kdWxlRGF0YSwgc2NvcGU6IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gbmdNb2R1bGUuX2RlZi5tb2R1bGVzLmluZGV4T2Yoc2NvcGUpID4gLTE7XG59XG5cbmZ1bmN0aW9uIHRhcmdldHNNb2R1bGUobmdNb2R1bGU6IE5nTW9kdWxlRGF0YSwgZGVmOiBJbmplY3RhYmxlRGVmPGFueT4pOiBib29sZWFuIHtcbiAgcmV0dXJuIGRlZi5wcm92aWRlZEluICE9IG51bGwgJiYgKG1vZHVsZVRyYW5zaXRpdmVseVByZXNlbnQobmdNb2R1bGUsIGRlZi5wcm92aWRlZEluKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmLnByb3ZpZGVkSW4gPT09ICdyb290JyAmJiBuZ01vZHVsZS5fZGVmLmlzUm9vdCk7XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVQcm92aWRlckluc3RhbmNlKG5nTW9kdWxlOiBOZ01vZHVsZURhdGEsIHByb3ZpZGVyRGVmOiBOZ01vZHVsZVByb3ZpZGVyRGVmKTogYW55IHtcbiAgbGV0IGluamVjdGFibGU6IGFueTtcbiAgc3dpdGNoIChwcm92aWRlckRlZi5mbGFncyAmIE5vZGVGbGFncy5UeXBlcykge1xuICAgIGNhc2UgTm9kZUZsYWdzLlR5cGVDbGFzc1Byb3ZpZGVyOlxuICAgICAgaW5qZWN0YWJsZSA9IF9jcmVhdGVDbGFzcyhuZ01vZHVsZSwgcHJvdmlkZXJEZWYudmFsdWUsIHByb3ZpZGVyRGVmLmRlcHMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBOb2RlRmxhZ3MuVHlwZUZhY3RvcnlQcm92aWRlcjpcbiAgICAgIGluamVjdGFibGUgPSBfY2FsbEZhY3RvcnkobmdNb2R1bGUsIHByb3ZpZGVyRGVmLnZhbHVlLCBwcm92aWRlckRlZi5kZXBzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgTm9kZUZsYWdzLlR5cGVVc2VFeGlzdGluZ1Byb3ZpZGVyOlxuICAgICAgaW5qZWN0YWJsZSA9IHJlc29sdmVOZ01vZHVsZURlcChuZ01vZHVsZSwgcHJvdmlkZXJEZWYuZGVwc1swXSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIE5vZGVGbGFncy5UeXBlVmFsdWVQcm92aWRlcjpcbiAgICAgIGluamVjdGFibGUgPSBwcm92aWRlckRlZi52YWx1ZTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgLy8gVGhlIHJlYWQgb2YgYG5nT25EZXN0cm95YCBoZXJlIGlzIHNsaWdodGx5IGV4cGVuc2l2ZSBhcyBpdCdzIG1lZ2Ftb3JwaGljLCBzbyBpdCBzaG91bGQgYmVcbiAgLy8gYXZvaWRlZCBpZiBwb3NzaWJsZS4gVGhlIHNlcXVlbmNlIG9mIGNoZWNrcyBoZXJlIGRldGVybWluZXMgd2hldGhlciBuZ09uRGVzdHJveSBuZWVkcyB0byBiZVxuICAvLyBjaGVja2VkLiBJdCBtaWdodCBub3QgaWYgdGhlIGBpbmplY3RhYmxlYCBpc24ndCBhbiBvYmplY3Qgb3IgaWYgTm9kZUZsYWdzLk9uRGVzdHJveSBpcyBhbHJlYWR5XG4gIC8vIHNldCAobmdPbkRlc3Ryb3kgd2FzIGRldGVjdGVkIHN0YXRpY2FsbHkpLlxuICBpZiAoaW5qZWN0YWJsZSAhPT0gVU5ERUZJTkVEX1ZBTFVFICYmIGluamVjdGFibGUgIT09IG51bGwgJiYgdHlwZW9mIGluamVjdGFibGUgPT09ICdvYmplY3QnICYmXG4gICAgICAhKHByb3ZpZGVyRGVmLmZsYWdzICYgTm9kZUZsYWdzLk9uRGVzdHJveSkgJiYgdHlwZW9mIGluamVjdGFibGUubmdPbkRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHtcbiAgICBwcm92aWRlckRlZi5mbGFncyB8PSBOb2RlRmxhZ3MuT25EZXN0cm95O1xuICB9XG4gIHJldHVybiBpbmplY3RhYmxlID09PSB1bmRlZmluZWQgPyBVTkRFRklORURfVkFMVUUgOiBpbmplY3RhYmxlO1xufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MobmdNb2R1bGU6IE5nTW9kdWxlRGF0YSwgY3RvcjogYW55LCBkZXBzOiBEZXBEZWZbXSk6IGFueSB7XG4gIGNvbnN0IGxlbiA9IGRlcHMubGVuZ3RoO1xuICBzd2l0Y2ggKGxlbikge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiBuZXcgY3RvcigpO1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiBuZXcgY3RvcihyZXNvbHZlTmdNb2R1bGVEZXAobmdNb2R1bGUsIGRlcHNbMF0pKTtcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gbmV3IGN0b3IocmVzb2x2ZU5nTW9kdWxlRGVwKG5nTW9kdWxlLCBkZXBzWzBdKSwgcmVzb2x2ZU5nTW9kdWxlRGVwKG5nTW9kdWxlLCBkZXBzWzFdKSk7XG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuIG5ldyBjdG9yKFxuICAgICAgICAgIHJlc29sdmVOZ01vZHVsZURlcChuZ01vZHVsZSwgZGVwc1swXSksIHJlc29sdmVOZ01vZHVsZURlcChuZ01vZHVsZSwgZGVwc1sxXSksXG4gICAgICAgICAgcmVzb2x2ZU5nTW9kdWxlRGVwKG5nTW9kdWxlLCBkZXBzWzJdKSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIGNvbnN0IGRlcFZhbHVlcyA9IG5ldyBBcnJheShsZW4pO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBkZXBWYWx1ZXNbaV0gPSByZXNvbHZlTmdNb2R1bGVEZXAobmdNb2R1bGUsIGRlcHNbaV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBjdG9yKC4uLmRlcFZhbHVlcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NhbGxGYWN0b3J5KG5nTW9kdWxlOiBOZ01vZHVsZURhdGEsIGZhY3Rvcnk6IGFueSwgZGVwczogRGVwRGVmW10pOiBhbnkge1xuICBjb25zdCBsZW4gPSBkZXBzLmxlbmd0aDtcbiAgc3dpdGNoIChsZW4pIHtcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4gZmFjdG9yeSgpO1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiBmYWN0b3J5KHJlc29sdmVOZ01vZHVsZURlcChuZ01vZHVsZSwgZGVwc1swXSkpO1xuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiBmYWN0b3J5KHJlc29sdmVOZ01vZHVsZURlcChuZ01vZHVsZSwgZGVwc1swXSksIHJlc29sdmVOZ01vZHVsZURlcChuZ01vZHVsZSwgZGVwc1sxXSkpO1xuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiBmYWN0b3J5KFxuICAgICAgICAgIHJlc29sdmVOZ01vZHVsZURlcChuZ01vZHVsZSwgZGVwc1swXSksIHJlc29sdmVOZ01vZHVsZURlcChuZ01vZHVsZSwgZGVwc1sxXSksXG4gICAgICAgICAgcmVzb2x2ZU5nTW9kdWxlRGVwKG5nTW9kdWxlLCBkZXBzWzJdKSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIGNvbnN0IGRlcFZhbHVlcyA9IEFycmF5KGxlbik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGRlcFZhbHVlc1tpXSA9IHJlc29sdmVOZ01vZHVsZURlcChuZ01vZHVsZSwgZGVwc1tpXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFjdG9yeSguLi5kZXBWYWx1ZXMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxsTmdNb2R1bGVMaWZlY3ljbGUobmdNb2R1bGU6IE5nTW9kdWxlRGF0YSwgbGlmZWN5Y2xlczogTm9kZUZsYWdzKSB7XG4gIGNvbnN0IGRlZiA9IG5nTW9kdWxlLl9kZWY7XG4gIGNvbnN0IGRlc3Ryb3llZCA9IG5ldyBTZXQ8YW55PigpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGRlZi5wcm92aWRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwcm92RGVmID0gZGVmLnByb3ZpZGVyc1tpXTtcbiAgICBpZiAocHJvdkRlZi5mbGFncyAmIE5vZGVGbGFncy5PbkRlc3Ryb3kpIHtcbiAgICAgIGNvbnN0IGluc3RhbmNlID0gbmdNb2R1bGUuX3Byb3ZpZGVyc1tpXTtcbiAgICAgIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZSAhPT0gVU5ERUZJTkVEX1ZBTFVFKSB7XG4gICAgICAgIGNvbnN0IG9uRGVzdHJveTogRnVuY3Rpb258dW5kZWZpbmVkID0gaW5zdGFuY2UubmdPbkRlc3Ryb3k7XG4gICAgICAgIGlmICh0eXBlb2Ygb25EZXN0cm95ID09PSAnZnVuY3Rpb24nICYmICFkZXN0cm95ZWQuaGFzKGluc3RhbmNlKSkge1xuICAgICAgICAgIG9uRGVzdHJveS5hcHBseShpbnN0YW5jZSk7XG4gICAgICAgICAgZGVzdHJveWVkLmFkZChpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, SimpleChange, WrappedValue } from '../change_detection/change_detection';\nimport { INJECTOR, Injector, resolveForwardRef } from '../di';\nimport { ElementRef } from '../linker/element_ref';\nimport { TemplateRef } from '../linker/template_ref';\nimport { ViewContainerRef } from '../linker/view_container_ref';\nimport { Renderer as RendererV1, Renderer2 } from '../render/api';\nimport { isObservable } from '../util/lang';\nimport { stringify } from '../util/stringify';\nimport { createChangeDetectorRef, createInjector, createRendererV1 } from './refs';\nimport { Services, asElementData, asProviderData, shouldCallLifecycleInitHook } from './types';\nimport { calcBindingFlags, checkBinding, dispatchEvent, isComponentView, splitDepsDsl, splitMatchedQueriesDsl, tokenKey, viewParentEl } from './util';\n/** @type {?} */\nconst RendererV1TokenKey = tokenKey(RendererV1);\n/** @type {?} */\nconst Renderer2TokenKey = tokenKey(Renderer2);\n/** @type {?} */\nconst ElementRefTokenKey = tokenKey(ElementRef);\n/** @type {?} */\nconst ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\n/** @type {?} */\nconst TemplateRefTokenKey = tokenKey(TemplateRef);\n/** @type {?} */\nconst ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\n/** @type {?} */\nconst InjectorRefTokenKey = tokenKey(Injector);\n/** @type {?} */\nconst INJECTORRefTokenKey = tokenKey(INJECTOR);\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} childCount\n * @param {?} ctor\n * @param {?} deps\n * @param {?=} props\n * @param {?=} outputs\n * @return {?}\n */\nexport function directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\n    /** @type {?} */\n    const bindings = [];\n    if (props) {\n        for (let prop in props) {\n            const [bindingIndex, nonMinifiedName] = props[prop];\n            bindings[bindingIndex] = {\n                flags: 8 /* TypeProperty */,\n                name: prop, nonMinifiedName,\n                ns: null,\n                securityContext: null,\n                suffix: null\n            };\n        }\n    }\n    /** @type {?} */\n    const outputDefs = [];\n    if (outputs) {\n        for (let propName in outputs) {\n            outputDefs.push({ type: 1 /* DirectiveOutput */, propName, target: null, eventName: outputs[propName] });\n        }\n    }\n    flags |= 16384 /* TypeDirective */;\n    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\n}\n/**\n * @param {?} flags\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nexport function pipeDef(flags, ctor, deps) {\n    flags |= 16 /* TypePipe */;\n    return _def(-1, flags, null, 0, ctor, ctor, deps);\n}\n/**\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nexport function providerDef(flags, matchedQueries, token, value, deps) {\n    return _def(-1, flags, matchedQueries, 0, token, value, deps);\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} childCount\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @param {?=} bindings\n * @param {?=} outputs\n * @return {?}\n */\nexport function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\n    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);\n    if (!outputs) {\n        outputs = [];\n    }\n    if (!bindings) {\n        bindings = [];\n    }\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    /** @type {?} */\n    const depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex,\n        flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries, matchedQueryIds, references,\n        ngContentIndex: -1, childCount, bindings,\n        bindingFlags: calcBindingFlags(bindings), outputs,\n        element: null,\n        provider: { token, value, deps: depDefs },\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createProviderInstance(view, def) {\n    return _createProviderInstance(view, def);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createPipeInstance(view, def) {\n    // deps are looked up from component.\n    /** @type {?} */\n    let compView = view;\n    while (compView.parent && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    // pipes can see the private services of the component\n    /** @type {?} */\n    const allowPrivateServices = true;\n    // pipes are always eager and classes!\n    return createClass((/** @type {?} */ (compView.parent)), (/** @type {?} */ (viewParentEl(compView))), allowPrivateServices, (/** @type {?} */ (def.provider)).value, (/** @type {?} */ (def.provider)).deps);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createDirectiveInstance(view, def) {\n    // components can see other private services, other directives can't.\n    /** @type {?} */\n    const allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\n    // directives are always eager and classes!\n    /** @type {?} */\n    const instance = createClass(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (def.provider)).value, (/** @type {?} */ (def.provider)).deps);\n    if (def.outputs.length) {\n        for (let i = 0; i < def.outputs.length; i++) {\n            /** @type {?} */\n            const output = def.outputs[i];\n            /** @type {?} */\n            const outputObservable = instance[(/** @type {?} */ (output.propName))];\n            if (isObservable(outputObservable)) {\n                /** @type {?} */\n                const subscription = outputObservable.subscribe(eventHandlerClosure(view, (/** @type {?} */ (def.parent)).nodeIndex, output.eventName));\n                (/** @type {?} */ (view.disposables))[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n            }\n            else {\n                throw new Error(`@Output ${output.propName} not initialized in '${instance.constructor.name}'.`);\n            }\n        }\n    }\n    return instance;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction eventHandlerClosure(view, index, eventName) {\n    return (event) => dispatchEvent(view, index, eventName, event);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const providerData = asProviderData(view, def.nodeIndex);\n    /** @type {?} */\n    const directive = providerData.instance;\n    /** @type {?} */\n    let changed = false;\n    /** @type {?} */\n    let changes = (/** @type {?} */ (undefined));\n    /** @type {?} */\n    const bindLen = def.bindings.length;\n    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 0, v0, changes);\n    }\n    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 1, v1, changes);\n    }\n    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 2, v2, changes);\n    }\n    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 3, v3, changes);\n    }\n    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 4, v4, changes);\n    }\n    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 5, v5, changes);\n    }\n    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 6, v6, changes);\n    }\n    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 7, v7, changes);\n    }\n    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 8, v8, changes);\n    }\n    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 9, v9, changes);\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateDirectiveDynamic(view, def, values) {\n    /** @type {?} */\n    const providerData = asProviderData(view, def.nodeIndex);\n    /** @type {?} */\n    const directive = providerData.instance;\n    /** @type {?} */\n    let changed = false;\n    /** @type {?} */\n    let changes = (/** @type {?} */ (undefined));\n    for (let i = 0; i < values.length; i++) {\n        if (checkBinding(view, def, i, values[i])) {\n            changed = true;\n            changes = updateProp(view, providerData, def, i, values[i], changes);\n        }\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction _createProviderInstance(view, def) {\n    // private services can see other private services\n    /** @type {?} */\n    const allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\n    /** @type {?} */\n    const providerDef = def.provider;\n    switch (def.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            return createClass(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (providerDef)).value, (/** @type {?} */ (providerDef)).deps);\n        case 1024 /* TypeFactoryProvider */:\n            return callFactory(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (providerDef)).value, (/** @type {?} */ (providerDef)).deps);\n        case 2048 /* TypeUseExistingProvider */:\n            return resolveDep(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (providerDef)).deps[0]);\n        case 256 /* TypeValueProvider */:\n            return (/** @type {?} */ (providerDef)).value;\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction createClass(view, elDef, allowPrivateServices, ctor, deps) {\n    /** @type {?} */\n    const len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            /** @type {?} */\n            const depValues = new Array(len);\n            for (let i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return new ctor(...depValues);\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction callFactory(view, elDef, allowPrivateServices, factory, deps) {\n    /** @type {?} */\n    const len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            /** @type {?} */\n            const depValues = Array(len);\n            for (let i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return factory(...depValues);\n    }\n}\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\n/** @type {?} */\nexport const NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nexport function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\n    if (depDef.flags & 8 /* Value */) {\n        return depDef.token;\n    }\n    /** @type {?} */\n    const startView = view;\n    if (depDef.flags & 2 /* Optional */) {\n        notFoundValue = null;\n    }\n    /** @type {?} */\n    const tokenKey = depDef.tokenKey;\n    if (tokenKey === ChangeDetectorRefTokenKey) {\n        // directives on the same element as a component should be able to control the change detector\n        // of that component as well.\n        allowPrivateServices = !!(elDef && (/** @type {?} */ (elDef.element)).componentView);\n    }\n    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {\n        allowPrivateServices = false;\n        elDef = (/** @type {?} */ (elDef.parent));\n    }\n    /** @type {?} */\n    let searchView = view;\n    while (searchView) {\n        if (elDef) {\n            switch (tokenKey) {\n                case RendererV1TokenKey: {\n                    /** @type {?} */\n                    const compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createRendererV1(compView);\n                }\n                case Renderer2TokenKey: {\n                    /** @type {?} */\n                    const compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return compView.renderer;\n                }\n                case ElementRefTokenKey:\n                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);\n                case ViewContainerRefTokenKey:\n                    return asElementData(searchView, elDef.nodeIndex).viewContainer;\n                case TemplateRefTokenKey: {\n                    if ((/** @type {?} */ (elDef.element)).template) {\n                        return asElementData(searchView, elDef.nodeIndex).template;\n                    }\n                    break;\n                }\n                case ChangeDetectorRefTokenKey: {\n                    /** @type {?} */\n                    let cdView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createChangeDetectorRef(cdView);\n                }\n                case InjectorRefTokenKey:\n                case INJECTORRefTokenKey:\n                    return createInjector(searchView, elDef);\n                default:\n                    /** @type {?} */\n                    const providerDef = (/** @type {?} */ ((allowPrivateServices ? (/** @type {?} */ (elDef.element)).allProviders :\n                        (/** @type {?} */ (elDef.element)).publicProviders)))[tokenKey];\n                    if (providerDef) {\n                        /** @type {?} */\n                        let providerData = asProviderData(searchView, providerDef.nodeIndex);\n                        if (!providerData) {\n                            providerData = { instance: _createProviderInstance(searchView, providerDef) };\n                            searchView.nodes[providerDef.nodeIndex] = (/** @type {?} */ (providerData));\n                        }\n                        return providerData.instance;\n                    }\n            }\n        }\n        allowPrivateServices = isComponentView(searchView);\n        elDef = (/** @type {?} */ (viewParentEl(searchView)));\n        searchView = (/** @type {?} */ (searchView.parent));\n        if (depDef.flags & 4 /* Self */) {\n            searchView = null;\n        }\n    }\n    /** @type {?} */\n    const value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n        // Return the value from the root element injector when\n        // - it provides it\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        // - the module injector should not be checked\n        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        return value;\n    }\n    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @return {?}\n */\nfunction findCompView(view, elDef, allowPrivateServices) {\n    /** @type {?} */\n    let compView;\n    if (allowPrivateServices) {\n        compView = asElementData(view, elDef.nodeIndex).componentView;\n    }\n    else {\n        compView = view;\n        while (compView.parent && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n    }\n    return compView;\n}\n/**\n * @param {?} view\n * @param {?} providerData\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @param {?} changes\n * @return {?}\n */\nfunction updateProp(view, providerData, def, bindingIdx, value, changes) {\n    if (def.flags & 32768 /* Component */) {\n        /** @type {?} */\n        const compView = asElementData(view, (/** @type {?} */ (def.parent)).nodeIndex).componentView;\n        if (compView.def.flags & 2 /* OnPush */) {\n            compView.state |= 8 /* ChecksEnabled */;\n        }\n    }\n    /** @type {?} */\n    const binding = def.bindings[bindingIdx];\n    /** @type {?} */\n    const propName = (/** @type {?} */ (binding.name));\n    // Note: This is still safe with Closure Compiler as\n    // the user passed in the property name as an object has to `providerDef`,\n    // so Closure Compiler will have renamed the property correctly already.\n    providerData.instance[propName] = value;\n    if (def.flags & 524288 /* OnChanges */) {\n        changes = changes || {};\n        /** @type {?} */\n        const oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);\n        /** @type {?} */\n        const binding = def.bindings[bindingIdx];\n        changes[(/** @type {?} */ (binding.nonMinifiedName))] =\n            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\n    }\n    view.oldValues[def.bindingIndex + bindingIdx] = value;\n    return changes;\n}\n// This function calls the ngAfterContentCheck, ngAfterContentInit,\n// ngAfterViewCheck, and ngAfterViewInit lifecycle hooks (depending on the node\n// flags in lifecycle). Unlike ngDoCheck, ngOnChanges and ngOnInit, which are\n// called during a pre-order traversal of the view tree (that is calling the\n// parent hooks before the child hooks) these events are sent in using a\n// post-order traversal of the tree (children before parents). This changes the\n// meaning of initIndex in the view state. For ngOnInit, initIndex tracks the\n// expected nodeIndex which a ngOnInit should be called. When sending\n// ngAfterContentInit and ngAfterViewInit it is the expected count of\n// ngAfterContentInit or ngAfterViewInit methods that have been called. This\n// ensure that despite being called recursively or after picking up after an\n// exception, the ngAfterContentInit or ngAfterViewInit will be called on the\n// correct nodes. Consider for example, the following (where E is an element\n// and D is a directive)\n//  Tree:       pre-order index  post-order index\n//    E1        0                6\n//      E2      1                1\n//       D3     2                0\n//      E4      3                5\n//       E5     4                4\n//        E6    5                2\n//        E7    6                3\n// As can be seen, the post-order index has an unclear relationship to the\n// pre-order index (postOrderIndex === preOrderIndex - parentCount +\n// childCount). Since number of calls to ngAfterContentInit and ngAfterViewInit\n// are stable (will be the same for the same view regardless of exceptions or\n// recursion) we just need to count them which will roughly correspond to the\n// post-order index (it skips elements and directives that do not have\n// lifecycle hooks).\n//\n// For example, if an exception is raised in the E6.onAfterViewInit() the\n// initIndex is left at 3 (by shouldCallLifecycleInitHook() which set it to\n// initIndex + 1). When checkAndUpdateView() is called again D3, E2 and E6 will\n// not have their ngAfterViewInit() called but, starting with E7, the rest of\n// the view will begin getting ngAfterViewInit() called until a check and\n// pass is complete.\n//\n// This algorthim also handles recursion. Consider if E4's ngAfterViewInit()\n// indirectly calls E1's ChangeDetectorRef.detectChanges(). The expected\n// initIndex is set to 6, the recusive checkAndUpdateView() starts walk again.\n// D3, E2, E6, E7, E5 and E4 are skipped, ngAfterViewInit() is called on E1.\n// When the recursion returns the initIndex will be 7 so E1 is skipped as it\n// has already been called in the recursively called checkAnUpdateView().\n/**\n * @param {?} view\n * @param {?} lifecycles\n * @return {?}\n */\nexport function callLifecycleHooksChildrenFirst(view, lifecycles) {\n    if (!(view.def.nodeFlags & lifecycles)) {\n        return;\n    }\n    /** @type {?} */\n    const nodes = view.def.nodes;\n    /** @type {?} */\n    let initIndex = 0;\n    for (let i = 0; i < nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = nodes[i];\n        /** @type {?} */\n        let parent = nodeDef.parent;\n        if (!parent && nodeDef.flags & lifecycles) {\n            // matching root node (e.g. a pipe)\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        if ((nodeDef.childFlags & lifecycles) === 0) {\n            // no child matches one of the lifecycles\n            i += nodeDef.childCount;\n        }\n        while (parent && (parent.flags & 1 /* TypeElement */) &&\n            i === parent.nodeIndex + parent.childCount) {\n            // last child of an element\n            if (parent.directChildFlags & lifecycles) {\n                initIndex = callElementProvidersLifecycles(view, parent, lifecycles, initIndex);\n            }\n            parent = parent.parent;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {\n    for (let i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & lifecycles) {\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        // only visit direct children\n        i += nodeDef.childCount;\n    }\n    return initIndex;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callProviderLifecycles(view, index, lifecycles, initIndex) {\n    /** @type {?} */\n    const providerData = asProviderData(view, index);\n    if (!providerData) {\n        return;\n    }\n    /** @type {?} */\n    const provider = providerData.instance;\n    if (!provider) {\n        return;\n    }\n    Services.setCurrentNode(view, index);\n    if (lifecycles & 1048576 /* AfterContentInit */ &&\n        shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {\n        provider.ngAfterContentInit();\n    }\n    if (lifecycles & 2097152 /* AfterContentChecked */) {\n        provider.ngAfterContentChecked();\n    }\n    if (lifecycles & 4194304 /* AfterViewInit */ &&\n        shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {\n        provider.ngAfterViewInit();\n    }\n    if (lifecycles & 8388608 /* AfterViewChecked */) {\n        provider.ngAfterViewChecked();\n    }\n    if (lifecycles & 131072 /* OnDestroy */) {\n        provider.ngOnDestroy();\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertComponentType } from './assert';\nimport { getComponentDef } from './definition';\nimport { diPublicInInjector, getOrCreateNodeInjectorForNode } from './di';\nimport { registerPostOrderHooks, registerPreOrderHooks } from './hooks';\nimport { CLEAN_PROMISE, addToViewTree, createLView, createNodeAtIndex, createTView, getOrCreateTView, initNodeFlags, instantiateRootComponent, invokeHostBindingsInCreationMode, locateHostElement, queueComponentIndexForCheck, refreshDescendantViews } from './instructions';\nimport { domRendererFactory3 } from './interfaces/renderer';\nimport { CONTEXT, FLAGS, HEADER_OFFSET, HOST, RENDERER, TVIEW } from './interfaces/view';\nimport { applyOnCreateInstructions } from './node_util';\nimport { enterView, getPreviousOrParentTNode, leaveView, resetComponentState } from './state';\nimport { renderInitialClasses, renderInitialStyles } from './styling/class_and_style_bindings';\nimport { publishDefaultGlobalUtils } from './util/global_utils';\nimport { defaultScheduler, renderStringify } from './util/misc_utils';\nimport { getRootContext } from './util/view_traversal_utils';\nimport { readPatchedLView, resetPreOrderHookFlags } from './util/view_utils';\n/**\n * Options that control how the component should be bootstrapped.\n * @record\n */\nexport function CreateComponentOptions() { }\nif (false) {\n    /**\n     * Which renderer factory to use.\n     * @type {?|undefined}\n     */\n    CreateComponentOptions.prototype.rendererFactory;\n    /**\n     * A custom sanitizer instance\n     * @type {?|undefined}\n     */\n    CreateComponentOptions.prototype.sanitizer;\n    /**\n     * A custom animation player handler\n     * @type {?|undefined}\n     */\n    CreateComponentOptions.prototype.playerHandler;\n    /**\n     * Host element on which the component will be bootstrapped. If not specified,\n     * the component definition's `tag` is used to query the existing DOM for the\n     * element to bootstrap.\n     * @type {?|undefined}\n     */\n    CreateComponentOptions.prototype.host;\n    /**\n     * Module injector for the component. If unspecified, the injector will be NULL_INJECTOR.\n     * @type {?|undefined}\n     */\n    CreateComponentOptions.prototype.injector;\n    /**\n     * List of features to be applied to the created component. Features are simply\n     * functions that decorate a component with a certain behavior.\n     *\n     * Typically, the features in this list are features that cannot be added to the\n     * other features list in the component definition because they rely on other factors.\n     *\n     * Example: `RootLifecycleHooks` is a function that adds lifecycle hook capabilities\n     * to root components in a tree-shakable way. It cannot be added to the component\n     * features list because there's no way of knowing when the component will be used as\n     * a root component.\n     * @type {?|undefined}\n     */\n    CreateComponentOptions.prototype.hostFeatures;\n    /**\n     * A function which is used to schedule change detection work in the future.\n     *\n     * When marking components as dirty, it is necessary to schedule the work of\n     * change detection in the future. This is done to coalesce multiple\n     * {\\@link markDirty} calls into a single changed detection processing.\n     *\n     * The default value of the scheduler is the `requestAnimationFrame` function.\n     *\n     * It is also useful to override this function for testing purposes.\n     * @type {?|undefined}\n     */\n    CreateComponentOptions.prototype.scheduler;\n}\n// TODO: A hack to not pull in the NullInjector from @angular/core.\n/** @type {?} */\nexport const NULL_INJECTOR = {\n    get: (token, notFoundValue) => {\n        throw new Error('NullInjector: Not found: ' + renderStringify(token));\n    }\n};\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {\\@link ViewContainer#createComponent}.\n *\n * @template T\n * @param {?} componentType Component to bootstrap\n * @param {?=} opts\n * @return {?}\n */\nexport function renderComponent(componentType /* Type as workaround for: Microsoft/TypeScript/issues/4881 */, opts = {}) {\n    ngDevMode && publishDefaultGlobalUtils();\n    ngDevMode && assertComponentType(componentType);\n    /** @type {?} */\n    const rendererFactory = opts.rendererFactory || domRendererFactory3;\n    /** @type {?} */\n    const sanitizer = opts.sanitizer || null;\n    /** @type {?} */\n    const componentDef = (/** @type {?} */ (getComponentDef(componentType)));\n    if (componentDef.type != componentType)\n        componentDef.type = componentType;\n    // The first index of the first selector is the tag name.\n    /** @type {?} */\n    const componentTag = (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (componentDef.selectors))[0]))[0]));\n    /** @type {?} */\n    const hostRNode = locateHostElement(rendererFactory, opts.host || componentTag);\n    /** @type {?} */\n    const rootFlags = componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :\n        16 /* CheckAlways */ | 512 /* IsRoot */;\n    /** @type {?} */\n    const rootContext = createRootContext(opts.scheduler, opts.playerHandler);\n    /** @type {?} */\n    const renderer = rendererFactory.createRenderer(hostRNode, componentDef);\n    /** @type {?} */\n    const rootView = createLView(null, createTView(-1, null, 1, 0, null, null, null, null), rootContext, rootFlags, null, null, rendererFactory, renderer, undefined, opts.injector || null);\n    /** @type {?} */\n    const oldView = enterView(rootView, null);\n    /** @type {?} */\n    let component;\n    try {\n        if (rendererFactory.begin)\n            rendererFactory.begin();\n        /** @type {?} */\n        const componentView = createRootComponentView(hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);\n        component = createRootComponent(componentView, componentDef, rootView, rootContext, opts.hostFeatures || null);\n        addToViewTree(rootView, componentView);\n        refreshDescendantViews(rootView); // creation mode pass\n        rootView[FLAGS] &= ~4 /* CreationMode */;\n        resetPreOrderHookFlags(rootView);\n        refreshDescendantViews(rootView); // update mode pass\n    }\n    finally {\n        leaveView(oldView);\n        if (rendererFactory.end)\n            rendererFactory.end();\n    }\n    return component;\n}\n/**\n * Creates the root component view and the root component node.\n *\n * @param {?} rNode Render host element.\n * @param {?} def ComponentDef\n * @param {?} rootView The parent view where the host node is stored\n * @param {?} rendererFactory\n * @param {?} renderer The current renderer\n * @param {?=} sanitizer The sanitizer, if provided\n *\n * @return {?} Component view created\n */\nexport function createRootComponentView(rNode, def, rootView, rendererFactory, renderer, sanitizer) {\n    resetComponentState();\n    /** @type {?} */\n    const tView = rootView[TVIEW];\n    /** @type {?} */\n    const tNode = createNodeAtIndex(0, 3 /* Element */, rNode, null, null);\n    /** @type {?} */\n    const componentView = createLView(rootView, getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas), null, def.onPush ? 64 /* Dirty */ : 16 /* CheckAlways */, rootView[HEADER_OFFSET], tNode, rendererFactory, renderer, sanitizer);\n    if (tView.firstTemplatePass) {\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), rootView, def.type);\n        tNode.flags = 1 /* isComponent */;\n        initNodeFlags(tNode, rootView.length, 1);\n        queueComponentIndexForCheck(tNode);\n    }\n    // Store component view at node index, with node as the HOST\n    return rootView[HEADER_OFFSET] = componentView;\n}\n/**\n * Creates a root component and sets it up with features and host bindings. Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n * @template T\n * @param {?} componentView\n * @param {?} componentDef\n * @param {?} rootView\n * @param {?} rootContext\n * @param {?} hostFeatures\n * @return {?}\n */\nexport function createRootComponent(componentView, componentDef, rootView, rootContext, hostFeatures) {\n    /** @type {?} */\n    const tView = rootView[TVIEW];\n    // Create directive instance with factory() and store at next index in viewData\n    /** @type {?} */\n    const component = instantiateRootComponent(tView, rootView, componentDef);\n    rootContext.components.push(component);\n    componentView[CONTEXT] = component;\n    hostFeatures && hostFeatures.forEach((feature) => feature(component, componentDef));\n    /** @type {?} */\n    const rootTNode = getPreviousOrParentTNode();\n    if (tView.firstTemplatePass && componentDef.hostBindings) {\n        /** @type {?} */\n        const expando = (/** @type {?} */ (tView.expandoInstructions));\n        invokeHostBindingsInCreationMode(componentDef, expando, component, rootTNode, tView.firstTemplatePass);\n        rootTNode.onElementCreationFns && applyOnCreateInstructions(rootTNode);\n    }\n    if (rootTNode.stylingTemplate) {\n        /** @type {?} */\n        const native = (/** @type {?} */ ((/** @type {?} */ (componentView[HOST]))));\n        renderInitialClasses(native, rootTNode.stylingTemplate, componentView[RENDERER]);\n        renderInitialStyles(native, rootTNode.stylingTemplate, componentView[RENDERER]);\n    }\n    return component;\n}\n/**\n * @param {?=} scheduler\n * @param {?=} playerHandler\n * @return {?}\n */\nexport function createRootContext(scheduler, playerHandler) {\n    return {\n        components: [],\n        scheduler: scheduler || defaultScheduler,\n        clean: CLEAN_PROMISE,\n        playerHandler: playerHandler || null,\n        flags: 0 /* Empty */\n    };\n}\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n * ```\n * @param {?} component\n * @param {?} def\n * @return {?}\n */\nexport function LifecycleHooksFeature(component, def) {\n    /** @type {?} */\n    const rootTView = (/** @type {?} */ (readPatchedLView(component)))[TVIEW];\n    /** @type {?} */\n    const dirIndex = rootTView.data.length - 1;\n    registerPreOrderHooks(dirIndex, def, rootTView, -1, -1, -1);\n    // TODO(misko): replace `as TNode` with createTNode call. (needs refactoring to lose dep on\n    // LNode).\n    registerPostOrderHooks(rootTView, (/** @type {?} */ ({ directiveStart: dirIndex, directiveEnd: dirIndex + 1 })));\n}\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param {?} component Component to wait upon\n * @return {?} Promise which resolves when the component is rendered.\n */\nexport function whenRendered(component) {\n    return getRootContext(component).clean;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\nimport { inject } from '../di/injector_compatibility';\nimport { ComponentFactory as viewEngine_ComponentFactory, ComponentRef as viewEngine_ComponentRef } from '../linker/component_factory';\nimport { ComponentFactoryResolver as viewEngine_ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { ElementRef as viewEngine_ElementRef } from '../linker/element_ref';\nimport { RendererFactory2 } from '../render/api';\nimport { Sanitizer } from '../sanitization/security';\nimport { assertDefined } from '../util/assert';\nimport { VERSION } from '../version';\nimport { NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR } from '../view/provider';\nimport { assertComponentType } from './assert';\nimport { LifecycleHooksFeature, createRootComponent, createRootComponentView, createRootContext } from './component';\nimport { getComponentDef } from './definition';\nimport { NodeInjector } from './di';\nimport { addToViewTree, assignTViewNodeToLView, createLView, createTView, elementCreate, locateHostElement, refreshDescendantViews } from './instructions';\nimport { domRendererFactory3, isProceduralRenderer } from './interfaces/renderer';\nimport { TVIEW } from './interfaces/view';\nimport { enterView, leaveView } from './state';\nimport { defaultScheduler } from './util/misc_utils';\nimport { getTNode } from './util/view_utils';\nimport { createElementRef } from './view_engine_compatibility';\nimport { RootViewRef } from './view_ref';\nexport class ComponentFactoryResolver extends viewEngine_ComponentFactoryResolver {\n    /**\n     * @param {?=} ngModule The NgModuleRef to which all resolved factories are bound.\n     */\n    constructor(ngModule) {\n        super();\n        this.ngModule = ngModule;\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    resolveComponentFactory(component) {\n        ngDevMode && assertComponentType(component);\n        /** @type {?} */\n        const componentDef = (/** @type {?} */ (getComponentDef(component)));\n        return new ComponentFactory(componentDef, this.ngModule);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentFactoryResolver.prototype.ngModule;\n}\n/**\n * @param {?} map\n * @return {?}\n */\nfunction toRefArray(map) {\n    /** @type {?} */\n    const array = [];\n    for (let nonMinified in map) {\n        if (map.hasOwnProperty(nonMinified)) {\n            /** @type {?} */\n            const minified = map[nonMinified];\n            array.push({ propName: minified, templateName: nonMinified });\n        }\n    }\n    return array;\n}\n/**\n * Default {\\@link RootContext} for all components rendered with {\\@link renderComponent}.\n * @type {?}\n */\nexport const ROOT_CONTEXT = new InjectionToken('ROOT_CONTEXT_TOKEN', { providedIn: 'root', factory: () => createRootContext(inject(SCHEDULER)) });\n/**\n * A change detection scheduler token for {\\@link RootContext}. This token is the default value used\n * for the default `RootContext` found in the {\\@link ROOT_CONTEXT} token.\n * @type {?}\n */\nexport const SCHEDULER = new InjectionToken('SCHEDULER_TOKEN', {\n    providedIn: 'root',\n    factory: () => defaultScheduler,\n});\n/**\n * @param {?} rootViewInjector\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction createChainedInjector(rootViewInjector, moduleInjector) {\n    return {\n        get: (token, notFoundValue, flags) => {\n            /** @type {?} */\n            const value = rootViewInjector.get(token, (/** @type {?} */ (NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)), flags);\n            if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n                notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n                // Return the value from the root element injector when\n                // - it provides it\n                //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                // - the module injector should not be checked\n                //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                return value;\n            }\n            return moduleInjector.get(token, notFoundValue, flags);\n        }\n    };\n}\n/**\n * Render3 implementation of {\\@link viewEngine_ComponentFactory}.\n * @template T\n */\nexport class ComponentFactory extends viewEngine_ComponentFactory {\n    /**\n     * @param {?} componentDef The component definition.\n     * @param {?=} ngModule The NgModuleRef to which the factory is bound.\n     */\n    constructor(componentDef, ngModule) {\n        super();\n        this.componentDef = componentDef;\n        this.ngModule = ngModule;\n        this.componentType = componentDef.type;\n        this.selector = (/** @type {?} */ (componentDef.selectors[0][0]));\n        // The component definition does not include the wildcard ('*') selector in its list.\n        // It is implicitly expected as the first item in the projectable nodes array.\n        this.ngContentSelectors =\n            componentDef.ngContentSelectors ? ['*', ...componentDef.ngContentSelectors] : [];\n        this.isBoundToModule = !!ngModule;\n    }\n    /**\n     * @return {?}\n     */\n    get inputs() {\n        return toRefArray(this.componentDef.inputs);\n    }\n    /**\n     * @return {?}\n     */\n    get outputs() {\n        return toRefArray(this.componentDef.outputs);\n    }\n    /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    create(injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        /** @type {?} */\n        const isInternalRootView = rootSelectorOrNode === undefined;\n        ngModule = ngModule || this.ngModule;\n        /** @type {?} */\n        const rootViewInjector = ngModule ? createChainedInjector(injector, ngModule.injector) : injector;\n        /** @type {?} */\n        const rendererFactory = (/** @type {?} */ (rootViewInjector.get(RendererFactory2, domRendererFactory3)));\n        /** @type {?} */\n        const sanitizer = rootViewInjector.get(Sanitizer, null);\n        /** @type {?} */\n        const hostRNode = isInternalRootView ?\n            elementCreate(this.selector, rendererFactory.createRenderer(null, this.componentDef)) :\n            locateHostElement(rendererFactory, rootSelectorOrNode);\n        /** @type {?} */\n        const rootFlags = this.componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :\n            16 /* CheckAlways */ | 512 /* IsRoot */;\n        /** @type {?} */\n        const rootContext = !isInternalRootView ? rootViewInjector.get(ROOT_CONTEXT) : createRootContext();\n        /** @type {?} */\n        const renderer = rendererFactory.createRenderer(hostRNode, this.componentDef);\n        if (rootSelectorOrNode && hostRNode) {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            isProceduralRenderer(renderer) ?\n                renderer.setAttribute(hostRNode, 'ng-version', VERSION.full) :\n                hostRNode.setAttribute('ng-version', VERSION.full);\n        }\n        // Create the root view. Uses empty TView and ContentTemplate.\n        /** @type {?} */\n        const rootLView = createLView(null, createTView(-1, null, 1, 0, null, null, null, null), rootContext, rootFlags, null, null, rendererFactory, renderer, sanitizer, rootViewInjector);\n        // rootView is the parent when bootstrapping\n        /** @type {?} */\n        const oldLView = enterView(rootLView, null);\n        /** @type {?} */\n        let component;\n        /** @type {?} */\n        let tElementNode;\n        try {\n            /** @type {?} */\n            const componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, renderer);\n            tElementNode = (/** @type {?} */ (getTNode(0, rootLView)));\n            if (projectableNodes) {\n                // projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n                // case). Here we do normalize passed data structure to be an array of arrays to avoid\n                // complex checks down the line.\n                tElementNode.projection =\n                    projectableNodes.map((nodesforSlot) => { return Array.from(nodesforSlot); });\n            }\n            // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n            // executed here?\n            // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n            component = createRootComponent(componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);\n            addToViewTree(rootLView, componentView);\n            refreshDescendantViews(rootLView);\n        }\n        finally {\n            leaveView(oldLView);\n        }\n        /** @type {?} */\n        const componentRef = new ComponentRef(this.componentType, component, createElementRef(viewEngine_ElementRef, tElementNode, rootLView), rootLView, tElementNode);\n        if (isInternalRootView) {\n            // The host element of the internal root view is attached to the component's host view node\n            (/** @type {?} */ (componentRef.hostView._tViewNode)).child = tElementNode;\n        }\n        return componentRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    ComponentFactory.prototype.selector;\n    /** @type {?} */\n    ComponentFactory.prototype.componentType;\n    /** @type {?} */\n    ComponentFactory.prototype.ngContentSelectors;\n    /** @type {?} */\n    ComponentFactory.prototype.isBoundToModule;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentFactory.prototype.componentDef;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentFactory.prototype.ngModule;\n}\n/** @type {?} */\nconst componentFactoryResolver = new ComponentFactoryResolver();\n/**\n * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the\n * ComponentFactoryResolver\n * already exists, retrieves the existing ComponentFactoryResolver.\n *\n * @return {?} The ComponentFactoryResolver instance to use\n */\nexport function injectComponentFactoryResolver() {\n    return componentFactoryResolver;\n}\n/**\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n * method.\n *\n * @template T\n */\nexport class ComponentRef extends viewEngine_ComponentRef {\n    /**\n     * @param {?} componentType\n     * @param {?} instance\n     * @param {?} location\n     * @param {?} _rootLView\n     * @param {?} _tNode\n     */\n    constructor(componentType, instance, location, _rootLView, _tNode) {\n        super();\n        this.location = location;\n        this._rootLView = _rootLView;\n        this._tNode = _tNode;\n        this.destroyCbs = [];\n        this.instance = instance;\n        this.hostView = this.changeDetectorRef = new RootViewRef(_rootLView);\n        this.hostView._tViewNode = assignTViewNodeToLView(_rootLView[TVIEW], null, -1, _rootLView);\n        this.componentType = componentType;\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return new NodeInjector(this._tNode, this._rootLView); }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        (/** @type {?} */ (this.destroyCbs)).forEach(fn => fn());\n        this.destroyCbs = null;\n        !this.hostView.destroyed && this.hostView.destroy();\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        (/** @type {?} */ (this.destroyCbs)).push(callback);\n    }\n}\nif (false) {\n    /** @type {?} */\n    ComponentRef.prototype.destroyCbs;\n    /** @type {?} */\n    ComponentRef.prototype.instance;\n    /** @type {?} */\n    ComponentRef.prototype.hostView;\n    /** @type {?} */\n    ComponentRef.prototype.changeDetectorRef;\n    /** @type {?} */\n    ComponentRef.prototype.componentType;\n    /** @type {?} */\n    ComponentRef.prototype.location;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentRef.prototype._rootLView;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentRef.prototype._tNode;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModuleFactory as R3NgModuleFactory } from '../render3/ng_module_ref';\nimport { stringify } from '../util/stringify';\n/**\n * Used to load ng module factories.\n *\n * \\@publicApi\n * @abstract\n */\nexport class NgModuleFactoryLoader {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} path\n     * @return {?}\n     */\n    NgModuleFactoryLoader.prototype.load = function (path) { };\n}\n/**\n * Map of module-id to the corresponding NgModule.\n * - In pre Ivy we track NgModuleFactory,\n * - In post Ivy we track the NgModuleType\n * @type {?}\n */\nconst modules = new Map();\n/**\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n * \\@publicApi\n * @param {?} id\n * @param {?} factory\n * @return {?}\n */\nexport function registerModuleFactory(id, factory) {\n    /** @type {?} */\n    const existing = (/** @type {?} */ (modules.get(id)));\n    assertSameOrNotExisting(id, existing && existing.moduleType, factory.moduleType);\n    modules.set(id, factory);\n}\n/**\n * @param {?} id\n * @param {?} type\n * @param {?} incoming\n * @return {?}\n */\nfunction assertSameOrNotExisting(id, type, incoming) {\n    if (type && type !== incoming) {\n        throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);\n    }\n}\n/**\n * @param {?} id\n * @param {?} ngModuleType\n * @return {?}\n */\nexport function registerNgModuleType(id, ngModuleType) {\n    /** @type {?} */\n    const existing = (/** @type {?} */ (modules.get(id)));\n    assertSameOrNotExisting(id, existing, ngModuleType);\n    modules.set(id, ngModuleType);\n}\n/**\n * @return {?}\n */\nexport function clearModulesForTest() {\n    modules.clear();\n}\n/**\n * @param {?} id\n * @return {?}\n */\nexport function getModuleFactory__PRE_R3__(id) {\n    /** @type {?} */\n    const factory = (/** @type {?} */ (modules.get(id)));\n    if (!factory)\n        throw noModuleError(id);\n    return factory;\n}\n/**\n * @param {?} id\n * @return {?}\n */\nexport function getModuleFactory__POST_R3__(id) {\n    /** @type {?} */\n    const type = (/** @type {?} */ (modules.get(id)));\n    if (!type)\n        throw noModuleError(id);\n    return new R3NgModuleFactory(type);\n}\n/**\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n * cannot be found.\n * \\@publicApi\n * @type {?}\n */\nexport const getModuleFactory = getModuleFactory__POST_R3__;\n/**\n * @param {?} id\n * @return {?}\n */\nfunction noModuleError(id) {\n    return new Error(`No module with ID ${id} loaded`);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9tbnQvZi9naXQvaXZ5LWNvZGUtc2l6ZS9ub2RlX21vZHVsZXMvQGFuZ3VsYXIvY29yZS9lc20yMDE1L3NyYy9saW5rZXIvbmdfbW9kdWxlX2ZhY3RvcnlfbG9hZGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dDQTBHZ0MsMkJBQTBCIiwiZmlsZSI6Ii9tbnQvZi9naXQvaXZ5LWNvZGUtc2l6ZS9ub2RlX21vZHVsZXMvQGFuZ3VsYXIvY29yZS9lc20yMDE1L3NyYy9saW5rZXIvbmdfbW9kdWxlX2ZhY3RvcnlfbG9hZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxleHRyYVJlcXVpcmUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgTmdNb2R1bGVGYWN0b3J5IGFzIFIzTmdNb2R1bGVGYWN0b3J5IH0gZnJvbSAnLi4vcmVuZGVyMy9uZ19tb2R1bGVfcmVmJztcbmltcG9ydCB7IHN0cmluZ2lmeSB9IGZyb20gJy4uL3V0aWwvc3RyaW5naWZ5Jztcbi8qKlxuICogVXNlZCB0byBsb2FkIG5nIG1vZHVsZSBmYWN0b3JpZXMuXG4gKlxuICogXFxAcHVibGljQXBpXG4gKiBAYWJzdHJhY3RcbiAqL1xuZXhwb3J0IGNsYXNzIE5nTW9kdWxlRmFjdG9yeUxvYWRlciB7XG59XG5pZiAoZmFsc2UpIHtcbiAgICAvKipcbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcGFyYW0gez99IHBhdGhcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIE5nTW9kdWxlRmFjdG9yeUxvYWRlci5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uIChwYXRoKSB7IH07XG59XG4vKipcbiAqIE1hcCBvZiBtb2R1bGUtaWQgdG8gdGhlIGNvcnJlc3BvbmRpbmcgTmdNb2R1bGUuXG4gKiAtIEluIHByZSBJdnkgd2UgdHJhY2sgTmdNb2R1bGVGYWN0b3J5LFxuICogLSBJbiBwb3N0IEl2eSB3ZSB0cmFjayB0aGUgTmdNb2R1bGVUeXBlXG4gKiBAdHlwZSB7P31cbiAqL1xuY29uc3QgbW9kdWxlcyA9IG5ldyBNYXAoKTtcbi8qKlxuICogUmVnaXN0ZXJzIGEgbG9hZGVkIG1vZHVsZS4gU2hvdWxkIG9ubHkgYmUgY2FsbGVkIGZyb20gZ2VuZXJhdGVkIE5nTW9kdWxlRmFjdG9yeSBjb2RlLlxuICogXFxAcHVibGljQXBpXG4gKiBAcGFyYW0gez99IGlkXG4gKiBAcGFyYW0gez99IGZhY3RvcnlcbiAqIEByZXR1cm4gez99XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlck1vZHVsZUZhY3RvcnkoaWQsIGZhY3RvcnkpIHtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgY29uc3QgZXhpc3RpbmcgPSAoLyoqIEB0eXBlIHs/fSAqLyAobW9kdWxlcy5nZXQoaWQpKSk7XG4gICAgYXNzZXJ0U2FtZU9yTm90RXhpc3RpbmcoaWQsIGV4aXN0aW5nICYmIGV4aXN0aW5nLm1vZHVsZVR5cGUsIGZhY3RvcnkubW9kdWxlVHlwZSk7XG4gICAgbW9kdWxlcy5zZXQoaWQsIGZhY3RvcnkpO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IGlkXG4gKiBAcGFyYW0gez99IHR5cGVcbiAqIEBwYXJhbSB7P30gaW5jb21pbmdcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGFzc2VydFNhbWVPck5vdEV4aXN0aW5nKGlkLCB0eXBlLCBpbmNvbWluZykge1xuICAgIGlmICh0eXBlICYmIHR5cGUgIT09IGluY29taW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRHVwbGljYXRlIG1vZHVsZSByZWdpc3RlcmVkIGZvciAke2lkfSAtICR7c3RyaW5naWZ5KHR5cGUpfSB2cyAke3N0cmluZ2lmeSh0eXBlLm5hbWUpfWApO1xuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSBpZFxuICogQHBhcmFtIHs/fSBuZ01vZHVsZVR5cGVcbiAqIEByZXR1cm4gez99XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlck5nTW9kdWxlVHlwZShpZCwgbmdNb2R1bGVUeXBlKSB7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIGNvbnN0IGV4aXN0aW5nID0gKC8qKiBAdHlwZSB7P30gKi8gKG1vZHVsZXMuZ2V0KGlkKSkpO1xuICAgIGFzc2VydFNhbWVPck5vdEV4aXN0aW5nKGlkLCBleGlzdGluZywgbmdNb2R1bGVUeXBlKTtcbiAgICBtb2R1bGVzLnNldChpZCwgbmdNb2R1bGVUeXBlKTtcbn1cbi8qKlxuICogQHJldHVybiB7P31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyTW9kdWxlc0ZvclRlc3QoKSB7XG4gICAgbW9kdWxlcy5jbGVhcigpO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IGlkXG4gKiBAcmV0dXJuIHs/fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9kdWxlRmFjdG9yeV9fUFJFX1IzX18oaWQpIHtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgY29uc3QgZmFjdG9yeSA9ICgvKiogQHR5cGUgez99ICovIChtb2R1bGVzLmdldChpZCkpKTtcbiAgICBpZiAoIWZhY3RvcnkpXG4gICAgICAgIHRocm93IG5vTW9kdWxlRXJyb3IoaWQpO1xuICAgIHJldHVybiBmYWN0b3J5O1xufVxuLyoqXG4gKiBAcGFyYW0gez99IGlkXG4gKiBAcmV0dXJuIHs/fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9kdWxlRmFjdG9yeV9fUE9TVF9SM19fKGlkKSB7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIGNvbnN0IHR5cGUgPSAoLyoqIEB0eXBlIHs/fSAqLyAobW9kdWxlcy5nZXQoaWQpKSk7XG4gICAgaWYgKCF0eXBlKVxuICAgICAgICB0aHJvdyBub01vZHVsZUVycm9yKGlkKTtcbiAgICByZXR1cm4gbmV3IFIzTmdNb2R1bGVGYWN0b3J5KHR5cGUpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBOZ01vZHVsZUZhY3Rvcnkgd2l0aCB0aGUgZ2l2ZW4gaWQsIGlmIGl0IGV4aXN0cyBhbmQgaGFzIGJlZW4gbG9hZGVkLlxuICogRmFjdG9yaWVzIGZvciBtb2R1bGVzIHRoYXQgZG8gbm90IHNwZWNpZnkgYW4gYGlkYCBjYW5ub3QgYmUgcmV0cmlldmVkLiBUaHJvd3MgaWYgdGhlIG1vZHVsZVxuICogY2Fubm90IGJlIGZvdW5kLlxuICogXFxAcHVibGljQXBpXG4gKiBAdHlwZSB7P31cbiAqL1xuZXhwb3J0IGNvbnN0IGdldE1vZHVsZUZhY3RvcnkgPSBnZXRNb2R1bGVGYWN0b3J5X19QUkVfUjNfXztcbi8qKlxuICogQHBhcmFtIHs/fSBpZFxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gbm9Nb2R1bGVFcnJvcihpZCkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoYE5vIG1vZHVsZSB3aXRoIElEICR7aWR9IGxvYWRlZGApO1xufVxuIl19","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getCompilerFacade } from '../../compiler/compiler_facade';\nimport { resolveForwardRef } from '../../di/forward_ref';\nimport { NG_INJECTOR_DEF } from '../../di/interface/defs';\nimport { reflectDependencies } from '../../di/jit/util';\nimport { registerNgModuleType } from '../../linker/ng_module_factory_loader';\nimport { assertDefined } from '../../util/assert';\nimport { getComponentDef, getDirectiveDef, getNgModuleDef, getPipeDef } from '../definition';\nimport { NG_COMPONENT_DEF, NG_DIRECTIVE_DEF, NG_MODULE_DEF, NG_PIPE_DEF } from '../fields';\nimport { renderStringify } from '../util/misc_utils';\nimport { angularCoreEnv } from './environment';\n/** @type {?} */\nconst EMPTY_ARRAY = [];\n/**\n * @record\n */\nfunction ModuleQueueItem() { }\nif (false) {\n    /** @type {?} */\n    ModuleQueueItem.prototype.moduleType;\n    /** @type {?} */\n    ModuleQueueItem.prototype.ngModule;\n}\n/** @type {?} */\nconst moduleQueue = [];\n/**\n * Enqueues moduleDef to be checked later to see if scope can be set on its\n * component declarations.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nfunction enqueueModuleForDelayedScoping(moduleType, ngModule) {\n    moduleQueue.push({ moduleType, ngModule });\n}\n/** @type {?} */\nlet flushingModuleQueue = false;\n/**\n * Loops over queued module definitions, if a given module definition has all of its\n * declarations resolved, it dequeues that module definition and sets the scope on\n * its declarations.\n * @return {?}\n */\nexport function flushModuleScopingQueueAsMuchAsPossible() {\n    if (!flushingModuleQueue) {\n        flushingModuleQueue = true;\n        try {\n            for (let i = moduleQueue.length - 1; i >= 0; i--) {\n                const { moduleType, ngModule } = moduleQueue[i];\n                if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\n                    // dequeue\n                    moduleQueue.splice(i, 1);\n                    setScopeOnDeclaredComponents(moduleType, ngModule);\n                }\n            }\n        }\n        finally {\n            flushingModuleQueue = false;\n        }\n    }\n}\n/**\n * Returns truthy if a declaration has resolved. If the declaration happens to be\n * an array of declarations, it will recurse to check each declaration in that array\n * (which may also be arrays).\n * @param {?} declaration\n * @return {?}\n */\nfunction isResolvedDeclaration(declaration) {\n    if (Array.isArray(declaration)) {\n        return declaration.every(isResolvedDeclaration);\n    }\n    return !!resolveForwardRef(declaration);\n}\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `\\@NgModule` decorator.\n * @param {?} moduleType\n * @param {?=} ngModule\n * @return {?}\n */\nexport function compileNgModule(moduleType, ngModule = {}) {\n    compileNgModuleDefs((/** @type {?} */ (moduleType)), ngModule);\n    // Because we don't know if all declarations have resolved yet at the moment the\n    // NgModule decorator is executing, we're enqueueing the setting of module scope\n    // on its declarations to be run at a later time when all declarations for the module,\n    // including forward refs, have resolved.\n    enqueueModuleForDelayedScoping(moduleType, ngModule);\n}\n/**\n * Compiles and adds the `ngModuleDef` and `ngInjectorDef` properties to the module class.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nexport function compileNgModuleDefs(moduleType, ngModule) {\n    ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n    ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n    /** @type {?} */\n    const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\n    /** @type {?} */\n    /** @nocollapse */ let ngModuleDef = null;\n    Object.defineProperty(moduleType, NG_MODULE_DEF, {\n        configurable: true,\n        get: () => {\n            if (ngModuleDef === null) {\n                ngModuleDef = getCompilerFacade().compileNgModule(angularCoreEnv, `ng://${moduleType.name}/ngModuleDef.js`, {\n                    type: moduleType,\n                    bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY, resolveForwardRef),\n                    declarations: declarations.map(resolveForwardRef),\n                    imports: flatten(ngModule.imports || EMPTY_ARRAY, resolveForwardRef)\n                        .map(expandModuleWithProviders),\n                    exports: flatten(ngModule.exports || EMPTY_ARRAY, resolveForwardRef)\n                        .map(expandModuleWithProviders),\n                    emitInline: true,\n                    schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,\n                });\n            }\n            return ngModuleDef;\n        }\n    });\n    if (ngModule.id) {\n        registerNgModuleType(ngModule.id, moduleType);\n    }\n    /** @type {?} */\n    /** @nocollapse */ let ngInjectorDef = null;\n    Object.defineProperty(moduleType, NG_INJECTOR_DEF, {\n        get: () => {\n            if (ngInjectorDef === null) {\n                ngDevMode && verifySemanticsOfNgModuleDef((/** @type {?} */ ((/** @type {?} */ (moduleType)))));\n                /** @type {?} */\n                const meta = {\n                    name: moduleType.name,\n                    type: moduleType,\n                    deps: reflectDependencies(moduleType),\n                    providers: ngModule.providers || EMPTY_ARRAY,\n                    imports: [\n                        (ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef),\n                        (ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef),\n                    ],\n                };\n                ngInjectorDef = getCompilerFacade().compileInjector(angularCoreEnv, `ng://${moduleType.name}/ngInjectorDef.js`, meta);\n            }\n            return ngInjectorDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * @param {?} moduleType\n * @return {?}\n */\nfunction verifySemanticsOfNgModuleDef(moduleType) {\n    if (verifiedNgModule.get(moduleType))\n        return;\n    verifiedNgModule.set(moduleType, true);\n    moduleType = resolveForwardRef(moduleType);\n    /** @type {?} */\n    /** @nocollapse */ const ngModuleDef = getNgModuleDef(moduleType, true);\n    /** @type {?} */\n    const errors = [];\n    ngModuleDef.declarations.forEach(verifyDeclarationsHaveDefinitions);\n    /** @type {?} */\n    const combinedDeclarations = [\n        ...ngModuleDef.declarations.map(resolveForwardRef),\n        ...flatten(ngModuleDef.imports.map(computeCombinedExports), resolveForwardRef),\n    ];\n    ngModuleDef.exports.forEach(verifyExportsAreDeclaredOrReExported);\n    ngModuleDef.declarations.forEach(verifyDeclarationIsUnique);\n    ngModuleDef.declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);\n    /** @type {?} */\n    const ngModule = getAnnotation(moduleType, 'NgModule');\n    if (ngModule) {\n        ngModule.imports &&\n            flatten(ngModule.imports, unwrapModuleWithProvidersImports)\n                .forEach(verifySemanticsOfNgModuleDef);\n        ngModule.bootstrap && ngModule.bootstrap.forEach(verifyCorrectBootstrapType);\n        ngModule.bootstrap && ngModule.bootstrap.forEach(verifyComponentIsPartOfNgModule);\n        ngModule.entryComponents && ngModule.entryComponents.forEach(verifyComponentIsPartOfNgModule);\n    }\n    // Throw Error if any errors were detected.\n    if (errors.length) {\n        throw new Error(errors.join('\\n'));\n    }\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyDeclarationsHaveDefinitions(type) {\n        type = resolveForwardRef(type);\n        /** @type {?} */\n        const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);\n        if (!def) {\n            errors.push(`Unexpected value '${renderStringify(type)}' declared by the module '${renderStringify(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyExportsAreDeclaredOrReExported(type) {\n        type = resolveForwardRef(type);\n        /** @type {?} */\n        const kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' ||\n            getPipeDef(type) && 'pipe';\n        if (kind) {\n            // only checked if we are declared as Component, Directive, or Pipe\n            // Modules don't need to be declared or imported.\n            if (combinedDeclarations.lastIndexOf(type) === -1) {\n                // We are exporting something which we don't explicitly declare or import.\n                errors.push(`Can't export ${kind} ${renderStringify(type)} from ${renderStringify(moduleType)} as it was neither declared nor imported!`);\n            }\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyDeclarationIsUnique(type) {\n        type = resolveForwardRef(type);\n        /** @type {?} */\n        const existingModule = ownerNgModule.get(type);\n        if (existingModule && existingModule !== moduleType) {\n            /** @type {?} */\n            const modules = [existingModule, moduleType].map(renderStringify).sort();\n            errors.push(`Type ${renderStringify(type)} is part of the declarations of 2 modules: ${modules[0]} and ${modules[1]}! ` +\n                `Please consider moving ${renderStringify(type)} to a higher module that imports ${modules[0]} and ${modules[1]}. ` +\n                `You can also create a new NgModule that exports and includes ${renderStringify(type)} then import that NgModule in ${modules[0]} and ${modules[1]}.`);\n        }\n        else {\n            // Mark type as having owner.\n            ownerNgModule.set(type, moduleType);\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyComponentIsPartOfNgModule(type) {\n        type = resolveForwardRef(type);\n        /** @type {?} */\n        const existingModule = ownerNgModule.get(type);\n        if (!existingModule) {\n            errors.push(`Component ${renderStringify(type)} is not part of any NgModule or the module has not been imported into your module.`);\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyCorrectBootstrapType(type) {\n        type = resolveForwardRef(type);\n        if (!getComponentDef(type)) {\n            errors.push(`${renderStringify(type)} cannot be used as an entry component.`);\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyComponentEntryComponentsIsPartOfNgModule(type) {\n        type = resolveForwardRef(type);\n        if (getComponentDef(type)) {\n            // We know we are component\n            /** @type {?} */\n            const component = getAnnotation(type, 'Component');\n            if (component && component.entryComponents) {\n                component.entryComponents.forEach(verifyComponentIsPartOfNgModule);\n            }\n        }\n    }\n}\n/**\n * @param {?} typeOrWithProviders\n * @return {?}\n */\nfunction unwrapModuleWithProvidersImports(typeOrWithProviders) {\n    typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\n    return ((/** @type {?} */ (typeOrWithProviders))).ngModule || typeOrWithProviders;\n}\n/**\n * @template T\n * @param {?} type\n * @param {?} name\n * @return {?}\n */\nfunction getAnnotation(type, name) {\n    /** @type {?} */\n    let annotation = null;\n    collect(type.__annotations__);\n    collect(type.decorators);\n    return annotation;\n    /**\n     * @param {?} annotations\n     * @return {?}\n     */\n    function collect(annotations) {\n        if (annotations) {\n            annotations.forEach(readAnnotation);\n        }\n    }\n    /**\n     * @param {?} decorator\n     * @return {?}\n     */\n    function readAnnotation(decorator) {\n        if (!annotation) {\n            /** @type {?} */\n            const proto = Object.getPrototypeOf(decorator);\n            if (proto.ngMetadataName == name) {\n                annotation = (/** @type {?} */ (decorator));\n            }\n            else if (decorator.type) {\n                /** @type {?} */\n                const proto = Object.getPrototypeOf(decorator.type);\n                if (proto.ngMetadataName == name) {\n                    annotation = decorator.args[0];\n                }\n            }\n        }\n    }\n}\n/**\n * Keep track of compiled components. This is needed because in tests we often want to compile the\n * same component with more than one NgModule. This would cause an error unless we reset which\n * NgModule the component belongs to. We keep the list of compiled components here so that the\n * TestBed can reset it later.\n * @type {?}\n */\nlet ownerNgModule = new Map();\n/** @type {?} */\nlet verifiedNgModule = new Map();\n/**\n * @return {?}\n */\nexport function resetCompiledComponents() {\n    ownerNgModule = new Map();\n    verifiedNgModule = new Map();\n    moduleQueue.length = 0;\n}\n/**\n * Computes the combined declarations of explicit declarations, as well as declarations inherited\n * by\n * traversing the exports of imported modules.\n * @param {?} type\n * @return {?}\n */\nfunction computeCombinedExports(type) {\n    type = resolveForwardRef(type);\n    /** @type {?} */\n    /** @nocollapse */ const ngModuleDef = getNgModuleDef(type, true);\n    return [...flatten(ngModuleDef.exports.map((type) => {\n            /** @type {?} */\n            /** @nocollapse */ const ngModuleDef = getNgModuleDef(type);\n            if (ngModuleDef) {\n                verifySemanticsOfNgModuleDef((/** @type {?} */ ((/** @type {?} */ (type)))));\n                return computeCombinedExports(type);\n            }\n            else {\n                return type;\n            }\n        }))];\n}\n/**\n * Some declared components may be compiled asynchronously, and thus may not have their\n * ngComponentDef set yet. If this is the case, then a reference to the module is written into\n * the `ngSelectorScope` property of the declared type.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nfunction setScopeOnDeclaredComponents(moduleType, ngModule) {\n    /** @type {?} */\n    const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\n    /** @type {?} */\n    const transitiveScopes = transitiveScopesFor(moduleType);\n    declarations.forEach(declaration => {\n        if (declaration.hasOwnProperty(NG_COMPONENT_DEF)) {\n            // An `ngComponentDef` field exists - go ahead and patch the component directly.\n            /** @type {?} */\n            const component = (/** @type {?} */ (declaration));\n            /** @type {?} */\n            const componentDef = (/** @type {?} */ (getComponentDef(component)));\n            patchComponentDefWithScope(componentDef, transitiveScopes);\n        }\n        else if (!declaration.hasOwnProperty(NG_DIRECTIVE_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n            // Set `ngSelectorScope` for future reference when the component compilation finishes.\n            ((/** @type {?} */ (declaration))).ngSelectorScope = moduleType;\n        }\n    });\n}\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n * @template C\n * @param {?} componentDef\n * @param {?} transitiveScopes\n * @return {?}\n */\nexport function patchComponentDefWithScope(componentDef, transitiveScopes) {\n    componentDef.directiveDefs = () => Array.from(transitiveScopes.compilation.directives)\n        .map(dir => dir.hasOwnProperty(NG_COMPONENT_DEF) ? (/** @type {?} */ (getComponentDef(dir))) :\n        (/** @type {?} */ (getDirectiveDef(dir))))\n        .filter(def => !!def);\n    componentDef.pipeDefs = () => Array.from(transitiveScopes.compilation.pipes).map(pipe => (/** @type {?} */ (getPipeDef(pipe))));\n    componentDef.schemas = transitiveScopes.schemas;\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. It can be called\n * on modules with components that have not fully compiled yet, but the result should not be used\n * until they have.\n * @template T\n * @param {?} moduleType\n * @param {?=} processNgModuleFn\n * @return {?}\n */\nexport function transitiveScopesFor(moduleType, processNgModuleFn) {\n    if (!isNgModule(moduleType)) {\n        throw new Error(`${moduleType.name} does not have an ngModuleDef`);\n    }\n    /** @type {?} */\n    const def = (/** @type {?} */ (getNgModuleDef(moduleType)));\n    if (def.transitiveCompileScopes !== null) {\n        return def.transitiveCompileScopes;\n    }\n    /** @type {?} */\n    const scopes = {\n        schemas: def.schemas || null,\n        compilation: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n        exported: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n    };\n    def.declarations.forEach(declared => {\n        /** @type {?} */\n        const declaredWithDefs = (/** @type {?} */ (declared));\n        if (getPipeDef(declaredWithDefs)) {\n            scopes.compilation.pipes.add(declared);\n        }\n        else {\n            // Either declared has an ngComponentDef or ngDirectiveDef, or it's a component which hasn't\n            // had its template compiled yet. In either case, it gets added to the compilation's\n            // directives.\n            scopes.compilation.directives.add(declared);\n        }\n    });\n    def.imports.forEach((imported) => {\n        /** @type {?} */\n        const importedType = (/** @type {?} */ (imported));\n        if (!isNgModule(importedType)) {\n            throw new Error(`Importing ${importedType.name} which does not have an ngModuleDef`);\n        }\n        if (processNgModuleFn) {\n            processNgModuleFn((/** @type {?} */ (importedType)));\n        }\n        // When this module imports another, the imported module's exported directives and pipes are\n        // added to the compilation scope of this module.\n        /** @type {?} */\n        const importedScope = transitiveScopesFor(importedType, processNgModuleFn);\n        importedScope.exported.directives.forEach(entry => scopes.compilation.directives.add(entry));\n        importedScope.exported.pipes.forEach(entry => scopes.compilation.pipes.add(entry));\n    });\n    def.exports.forEach((exported) => {\n        /** @type {?} */\n        const exportedType = (/** @type {?} */ (exported));\n        // Either the type is a module, a pipe, or a component/directive (which may not have an\n        // ngComponentDef as it might be compiled asynchronously).\n        if (isNgModule(exportedType)) {\n            // When this module exports another, the exported module's exported directives and pipes are\n            // added to both the compilation and exported scopes of this module.\n            /** @type {?} */\n            const exportedScope = transitiveScopesFor(exportedType, processNgModuleFn);\n            exportedScope.exported.directives.forEach(entry => {\n                scopes.compilation.directives.add(entry);\n                scopes.exported.directives.add(entry);\n            });\n            exportedScope.exported.pipes.forEach(entry => {\n                scopes.compilation.pipes.add(entry);\n                scopes.exported.pipes.add(entry);\n            });\n        }\n        else if (getPipeDef(exportedType)) {\n            scopes.exported.pipes.add(exportedType);\n        }\n        else {\n            scopes.exported.directives.add(exportedType);\n        }\n    });\n    def.transitiveCompileScopes = scopes;\n    return scopes;\n}\n/**\n * @template T\n * @param {?} values\n * @param {?=} mapFn\n * @return {?}\n */\nfunction flatten(values, mapFn) {\n    /** @type {?} */\n    const out = [];\n    values.forEach(value => {\n        if (Array.isArray(value)) {\n            out.push(...flatten(value, mapFn));\n        }\n        else {\n            out.push(mapFn ? mapFn(value) : value);\n        }\n    });\n    return out;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction expandModuleWithProviders(value) {\n    if (isModuleWithProviders(value)) {\n        return value.ngModule;\n    }\n    return value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isModuleWithProviders(value) {\n    return ((/** @type {?} */ (value))).ngModule !== undefined;\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction isNgModule(value) {\n    return !!getNgModuleDef(value);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getCompilerFacade } from '../../compiler/compiler_facade';\nimport { resolveForwardRef } from '../../di/forward_ref';\nimport { getReflect, reflectDependencies } from '../../di/jit/util';\nimport { componentNeedsResolution, maybeQueueResolutionOfComponentResources } from '../../metadata/resource_loading';\nimport { ViewEncapsulation } from '../../metadata/view';\nimport { EMPTY_ARRAY, EMPTY_OBJ } from '../empty';\nimport { NG_COMPONENT_DEF, NG_DIRECTIVE_DEF } from '../fields';\nimport { renderStringify } from '../util/misc_utils';\nimport { angularCoreEnv } from './environment';\nimport { flushModuleScopingQueueAsMuchAsPossible, patchComponentDefWithScope, transitiveScopesFor } from './module';\n/**\n * Compile an Angular component according to its decorator metadata, and patch the resulting\n * ngComponentDef onto the component type.\n *\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n * will enqueue resource resolution into a global queue and will fail to return the `ngComponentDef`\n * until the global queue has been resolved with a call to `resolveComponentResources`.\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nexport function compileComponent(type, metadata) {\n    /** @type {?} */\n    /** @nocollapse */ let ngComponentDef = null;\n    // Metadata may have resources which need to be resolved.\n    maybeQueueResolutionOfComponentResources(metadata);\n    Object.defineProperty(type, NG_COMPONENT_DEF, {\n        get: () => {\n            /** @type {?} */\n            const compiler = getCompilerFacade();\n            if (ngComponentDef === null) {\n                if (componentNeedsResolution(metadata)) {\n                    /** @type {?} */\n                    const error = [`Component '${renderStringify(type)}' is not resolved:`];\n                    if (metadata.templateUrl) {\n                        error.push(` - templateUrl: ${renderStringify(metadata.templateUrl)}`);\n                    }\n                    if (metadata.styleUrls && metadata.styleUrls.length) {\n                        error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);\n                    }\n                    error.push(`Did you run and wait for 'resolveComponentResources()'?`);\n                    throw new Error(error.join('\\n'));\n                }\n                /** @type {?} */\n                const templateUrl = metadata.templateUrl || `ng:///${renderStringify(type)}/template.html`;\n                /** @type {?} */\n                const meta = Object.assign({}, directiveMetadata(type, metadata), { typeSourceSpan: compiler.createParseSourceSpan('Component', renderStringify(type), templateUrl), template: metadata.template || '', preserveWhitespaces: metadata.preserveWhitespaces || false, styles: metadata.styles || EMPTY_ARRAY, animations: metadata.animations, viewQueries: extractQueriesMetadata(type, getReflect().ownPropMetadata(type), isViewQuery), directives: [], changeDetection: metadata.changeDetection, pipes: new Map(), encapsulation: metadata.encapsulation || ViewEncapsulation.Emulated, interpolation: metadata.interpolation, viewProviders: metadata.viewProviders || null });\n                ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);\n                // When NgModule decorator executed, we enqueued the module definition such that\n                // it would only dequeue and add itself as module scope to all of its declarations,\n                // but only if  if all of its declarations had resolved. This call runs the check\n                // to see if any modules that are in the queue can be dequeued and add scope to\n                // their declarations.\n                flushModuleScopingQueueAsMuchAsPossible();\n                // If component compilation is async, then the @NgModule annotation which declares the\n                // component may execute and set an ngSelectorScope property on the component type. This\n                // allows the component to patch itself with directiveDefs from the module after it\n                // finishes compiling.\n                if (hasSelectorScope(type)) {\n                    /** @type {?} */\n                    const scopes = transitiveScopesFor(type.ngSelectorScope);\n                    patchComponentDefWithScope(ngComponentDef, scopes);\n                }\n            }\n            return ngComponentDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * @template T\n * @param {?} component\n * @return {?}\n */\nfunction hasSelectorScope(component) {\n    return ((/** @type {?} */ (component))).ngSelectorScope !== undefined;\n}\n/**\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\n * ngDirectiveDef onto the component type.\n *\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n * will resolve when compilation completes and the directive becomes usable.\n * @param {?} type\n * @param {?} directive\n * @return {?}\n */\nexport function compileDirective(type, directive) {\n    /** @type {?} */\n    /** @nocollapse */ let ngDirectiveDef = null;\n    Object.defineProperty(type, NG_DIRECTIVE_DEF, {\n        get: () => {\n            if (ngDirectiveDef === null) {\n                /** @type {?} */\n                const name = type && type.name;\n                /** @type {?} */\n                const sourceMapUrl = `ng://${name}/ngDirectiveDef.js`;\n                /** @type {?} */\n                const compiler = getCompilerFacade();\n                /** @type {?} */\n                const facade = directiveMetadata((/** @type {?} */ (type)), directive);\n                facade.typeSourceSpan =\n                    compiler.createParseSourceSpan('Directive', renderStringify(type), sourceMapUrl);\n                ngDirectiveDef = compiler.compileDirective(angularCoreEnv, sourceMapUrl, facade);\n            }\n            return ngDirectiveDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function extendsDirectlyFromObject(type) {\n    return Object.getPrototypeOf(type.prototype) === Object.prototype;\n}\n/**\n * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\n * `Component`).\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nfunction directiveMetadata(type, metadata) {\n    // Reflect inputs and outputs.\n    /** @type {?} */\n    const propMetadata = getReflect().ownPropMetadata(type);\n    return {\n        name: type.name,\n        type: type,\n        typeArgumentCount: 0,\n        selector: (/** @type {?} */ (metadata.selector)),\n        deps: reflectDependencies(type),\n        host: metadata.host || EMPTY_OBJ,\n        propMetadata: propMetadata,\n        inputs: metadata.inputs || EMPTY_ARRAY,\n        outputs: metadata.outputs || EMPTY_ARRAY,\n        queries: extractQueriesMetadata(type, propMetadata, isContentQuery),\n        lifecycle: { usesOnChanges: type.prototype.hasOwnProperty('ngOnChanges') },\n        typeSourceSpan: (/** @type {?} */ (null)),\n        usesInheritance: !extendsDirectlyFromObject(type),\n        exportAs: extractExportAs(metadata.exportAs),\n        providers: metadata.providers || null,\n    };\n}\n/**\n * @param {?} selector\n * @return {?}\n */\nfunction convertToR3QueryPredicate(selector) {\n    return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);\n}\n/**\n * @param {?} propertyName\n * @param {?} ann\n * @return {?}\n */\nexport function convertToR3QueryMetadata(propertyName, ann) {\n    return {\n        propertyName: propertyName,\n        predicate: convertToR3QueryPredicate(ann.selector),\n        descendants: ann.descendants,\n        first: ann.first,\n        read: ann.read ? ann.read : null,\n        static: !!ann.static\n    };\n}\n/**\n * @param {?} type\n * @param {?} propMetadata\n * @param {?} isQueryAnn\n * @return {?}\n */\nfunction extractQueriesMetadata(type, propMetadata, isQueryAnn) {\n    /** @type {?} */\n    const queriesMeta = [];\n    for (const field in propMetadata) {\n        if (propMetadata.hasOwnProperty(field)) {\n            /** @type {?} */\n            const annotations = propMetadata[field];\n            annotations.forEach(ann => {\n                if (isQueryAnn(ann)) {\n                    if (!ann.selector) {\n                        throw new Error(`Can't construct a query for the property \"${field}\" of ` +\n                            `\"${renderStringify(type)}\" since the query selector wasn't defined.`);\n                    }\n                    if (annotations.some(isInputAnn)) {\n                        throw new Error(`Cannot combine @Input decorators with query decorators`);\n                    }\n                    queriesMeta.push(convertToR3QueryMetadata(field, ann));\n                }\n            });\n        }\n    }\n    return queriesMeta;\n}\n/**\n * @param {?} exportAs\n * @return {?}\n */\nfunction extractExportAs(exportAs) {\n    if (exportAs === undefined) {\n        return null;\n    }\n    return exportAs.split(',').map(part => part.trim());\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isContentQuery(value) {\n    /** @type {?} */\n    const name = value.ngMetadataName;\n    return name === 'ContentChild' || name === 'ContentChildren';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isViewQuery(value) {\n    /** @type {?} */\n    const name = value.ngMetadataName;\n    return name === 'ViewChild' || name === 'ViewChildren';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isInputAnn(value) {\n    return value.ngMetadataName === 'Input';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction splitByComma(value) {\n    return value.split(',').map(piece => piece.trim());\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy } from '../change_detection/constants';\nimport { NG_BASE_DEF } from '../render3/fields';\nimport { compileComponent as render3CompileComponent, compileDirective as render3CompileDirective } from '../render3/jit/directive';\nimport { compilePipe as render3CompilePipe } from '../render3/jit/pipe';\nimport { makeDecorator, makePropDecorator } from '../util/decorators';\nimport { noop } from '../util/noop';\nimport { fillProperties } from '../util/property';\n/**\n * Type of the Directive decorator / constructor function.\n * \\@publicApi\n * @record\n */\nexport function DirectiveDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Type of the Directive metadata.\n *\n * \\@publicApi\n * @type {?}\n */\nexport const Directive = makeDecorator('Directive', (dir = {}) => dir, undefined, undefined, (type, meta) => SWITCH_COMPILE_DIRECTIVE(type, meta));\n/**\n * Component decorator interface\n *\n * \\@publicApi\n * @record\n */\nexport function ComponentDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Component decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nexport const Component = makeDecorator('Component', (c = {}) => (Object.assign({ changeDetection: ChangeDetectionStrategy.Default }, c)), Directive, undefined, (type, meta) => SWITCH_COMPILE_COMPONENT(type, meta));\n/**\n * Type of the Pipe decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nexport function PipeDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nexport const Pipe = makeDecorator('Pipe', (p) => (Object.assign({ pure: true }, p)), undefined, undefined, (type, meta) => SWITCH_COMPILE_PIPE(type, meta));\n/**\n * \\@publicApi\n * @record\n */\nexport function InputDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\n/** @type {?} */\nconst initializeBaseDef = (target) => {\n    /** @type {?} */\n    const constructor = target.constructor;\n    /** @nocollapse @type {?} */\n    const inheritedBaseDef = constructor.ngBaseDef;\n    /** @type {?} */\n    const baseDef = constructor.ngBaseDef = {\n        inputs: {},\n        outputs: {},\n        declaredInputs: {},\n    };\n    if (inheritedBaseDef) {\n        fillProperties(baseDef.inputs, inheritedBaseDef.inputs);\n        fillProperties(baseDef.outputs, inheritedBaseDef.outputs);\n        fillProperties(baseDef.declaredInputs, inheritedBaseDef.declaredInputs);\n    }\n};\nconst ɵ0 = initializeBaseDef;\n/**\n * Does the work of creating the `ngBaseDef` property for the `Input` and `Output` decorators.\n * \\@param key \"inputs\" or \"outputs\"\n * @type {?}\n */\nconst updateBaseDefFromIOProp = (getProp) => (target, name, ...args) => {\n    /** @type {?} */\n    const constructor = target.constructor;\n    if (!constructor.hasOwnProperty(NG_BASE_DEF)) {\n        initializeBaseDef(target);\n    }\n    /** @nocollapse @type {?} */\n    const baseDef = constructor.ngBaseDef;\n    /** @type {?} */\n    const defProp = getProp(baseDef);\n    defProp[name] = args[0] || name;\n};\nconst ɵ1 = updateBaseDefFromIOProp;\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nexport const Input = makePropDecorator('Input', (bindingPropertyName) => ({ bindingPropertyName }), undefined, updateBaseDefFromIOProp(baseDef => baseDef.inputs || {}));\n/**\n * Type of the Output decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nexport function OutputDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nexport const Output = makePropDecorator('Output', (bindingPropertyName) => ({ bindingPropertyName }), undefined, updateBaseDefFromIOProp(baseDef => baseDef.outputs || {}));\n/**\n * Type of the HostBinding decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nexport function HostBindingDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nexport const HostBinding = makePropDecorator('HostBinding', (hostPropertyName) => ({ hostPropertyName }));\n/**\n * Type of the HostListener decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nexport function HostListenerDecorator() { }\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Binds a CSS event to a host listener and supplies configuration metadata.\n * Angular invokes the supplied handler method when the host element emits the specified event,\n * and updates the bound element with the result.\n * If the handler method returns false, applies `preventDefault` on the bound element.\n *\n * \\@usageNotes\n *\n * The following example declares a directive\n * that attaches a click listener to a button and counts clicks.\n *\n * ```\n * \\@Directive({selector: 'button[counting]'})\n * class CountClicks {\n *   numberOfClicks = 0;\n *\n * \\@HostListener('click', ['$event.target'])\n *   onClick(btn) {\n *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n *  }\n * }\n *\n * \\@Component({\n *   selector: 'app',\n *   template: '<button counting>Increment</button>',\n * })\n * class App {}\n * ```\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nexport const HostListener = makePropDecorator('HostListener', (eventName, args) => ({ eventName, args }));\n/** @type {?} */\nexport const SWITCH_COMPILE_COMPONENT__POST_R3__ = render3CompileComponent;\n/** @type {?} */\nexport const SWITCH_COMPILE_DIRECTIVE__POST_R3__ = render3CompileDirective;\n/** @type {?} */\nexport const SWITCH_COMPILE_PIPE__POST_R3__ = render3CompilePipe;\n/** @type {?} */\nconst SWITCH_COMPILE_COMPONENT__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_COMPILE_DIRECTIVE__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_COMPILE_PIPE__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_COMPILE_COMPONENT = SWITCH_COMPILE_COMPONENT__POST_R3__;\n/** @type {?} */\nconst SWITCH_COMPILE_DIRECTIVE = SWITCH_COMPILE_DIRECTIVE__POST_R3__;\n/** @type {?} */\nconst SWITCH_COMPILE_PIPE = SWITCH_COMPILE_PIPE__POST_R3__;\nexport { ɵ0, ɵ1 };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getCompilerFacade } from '../../compiler/compiler_facade';\nimport { reflectDependencies } from '../../di/jit/util';\nimport { NG_PIPE_DEF } from '../fields';\nimport { renderStringify } from '../util/misc_utils';\nimport { angularCoreEnv } from './environment';\n/**\n * @param {?} type\n * @param {?} meta\n * @return {?}\n */\nexport function compilePipe(type, meta) {\n    /** @type {?} */\n    /** @nocollapse */ let ngPipeDef = null;\n    Object.defineProperty(type, NG_PIPE_DEF, {\n        get: () => {\n            if (ngPipeDef === null) {\n                ngPipeDef = getCompilerFacade().compilePipe(angularCoreEnv, `ng://${renderStringify(type)}/ngPipeDef.js`, {\n                    type: type,\n                    name: type.name,\n                    deps: reflectDependencies(type),\n                    pipeName: meta.name,\n                    pure: meta.pure !== undefined ? meta.pure : true\n                });\n            }\n            return ngPipeDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3JlbmRlcjMvaml0L3BpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNqRSxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUd0RCxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3RDLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUVuRCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDOzs7Ozs7QUFFN0MsTUFBTSxVQUFVLFdBQVcsQ0FBQyxJQUFlLEVBQUUsSUFBVTs7UUFDakQsU0FBUyxHQUFRLElBQUk7SUFDekIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFO1FBQ3ZDLEdBQUcsRUFBRSxHQUFHLEVBQUU7WUFDUixJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUU7Z0JBQ3RCLFNBQVMsR0FBRyxpQkFBaUIsRUFBRSxDQUFDLFdBQVcsQ0FDdkMsY0FBYyxFQUFFLFFBQVEsZUFBZSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7b0JBQzVELElBQUksRUFBRSxJQUFJO29CQUNWLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtvQkFDZixJQUFJLEVBQUUsbUJBQW1CLENBQUMsSUFBSSxDQUFDO29CQUMvQixRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUk7b0JBQ25CLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSTtpQkFDakQsQ0FBQyxDQUFDO2FBQ1I7WUFDRCxPQUFPLFNBQVMsQ0FBQztRQUNuQixDQUFDOztRQUVELFlBQVksRUFBRSxDQUFDLENBQUMsU0FBUztLQUMxQixDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge2dldENvbXBpbGVyRmFjYWRlfSBmcm9tICcuLi8uLi9jb21waWxlci9jb21waWxlcl9mYWNhZGUnO1xuaW1wb3J0IHtyZWZsZWN0RGVwZW5kZW5jaWVzfSBmcm9tICcuLi8uLi9kaS9qaXQvdXRpbCc7XG5pbXBvcnQge1R5cGV9IGZyb20gJy4uLy4uL2ludGVyZmFjZS90eXBlJztcbmltcG9ydCB7UGlwZX0gZnJvbSAnLi4vLi4vbWV0YWRhdGEvZGlyZWN0aXZlcyc7XG5pbXBvcnQge05HX1BJUEVfREVGfSBmcm9tICcuLi9maWVsZHMnO1xuaW1wb3J0IHtyZW5kZXJTdHJpbmdpZnl9IGZyb20gJy4uL3V0aWwvbWlzY191dGlscyc7XG5cbmltcG9ydCB7YW5ndWxhckNvcmVFbnZ9IGZyb20gJy4vZW52aXJvbm1lbnQnO1xuXG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZVBpcGUodHlwZTogVHlwZTxhbnk+LCBtZXRhOiBQaXBlKTogdm9pZCB7XG4gIGxldCBuZ1BpcGVEZWY6IGFueSA9IG51bGw7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0eXBlLCBOR19QSVBFX0RFRiwge1xuICAgIGdldDogKCkgPT4ge1xuICAgICAgaWYgKG5nUGlwZURlZiA9PT0gbnVsbCkge1xuICAgICAgICBuZ1BpcGVEZWYgPSBnZXRDb21waWxlckZhY2FkZSgpLmNvbXBpbGVQaXBlKFxuICAgICAgICAgICAgYW5ndWxhckNvcmVFbnYsIGBuZzovLyR7cmVuZGVyU3RyaW5naWZ5KHR5cGUpfS9uZ1BpcGVEZWYuanNgLCB7XG4gICAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICAgIG5hbWU6IHR5cGUubmFtZSxcbiAgICAgICAgICAgICAgZGVwczogcmVmbGVjdERlcGVuZGVuY2llcyh0eXBlKSxcbiAgICAgICAgICAgICAgcGlwZU5hbWU6IG1ldGEubmFtZSxcbiAgICAgICAgICAgICAgcHVyZTogbWV0YS5wdXJlICE9PSB1bmRlZmluZWQgPyBtZXRhLnB1cmUgOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZ1BpcGVEZWY7XG4gICAgfSxcbiAgICAvLyBNYWtlIHRoZSBwcm9wZXJ0eSBjb25maWd1cmFibGUgaW4gZGV2IG1vZGUgdG8gYWxsb3cgb3ZlcnJpZGluZyBpbiB0ZXN0c1xuICAgIGNvbmZpZ3VyYWJsZTogISFuZ0Rldk1vZGUsXG4gIH0pO1xufVxuIl19","import * as ɵngcc0 from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, Input, TemplateRef, ViewContainerRef, ɵstringify as stringify } from '@angular/core';\n/**\n * A structural directive that conditionally includes a template based on the value of\n * an expression coerced to Boolean.\n * When the expression evaluates to true, Angular renders the template\n * provided in a `then` clause, and when  false or null,\n * Angular renders the template provided in an optional `else` clause. The default\n * template for the `else` clause is blank.\n *\n * A [shorthand form](guide/structural-directives#the-asterisk--prefix) of the directive,\n * `*ngIf=\"condition\"`, is generally used, provided\n * as an attribute of the anchor element for the inserted template.\n * Angular expands this into a more explicit version, in which the anchor element\n * is contained in an `<ng-template>` element.\n *\n * Simple form with shorthand syntax:\n *\n * ```\n * <div *ngIf=\"condition\">Content to render when condition is true.</div>\n * ```\n *\n * Simple form with expanded syntax:\n *\n * ```\n * <ng-template [ngIf]=\"condition\"><div>Content to render when condition is\n * true.</div></ng-template>\n * ```\n *\n * Form with an \"else\" block:\n *\n * ```\n * <div *ngIf=\"condition; else elseBlock\">Content to render when condition is true.</div>\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n * ```\n *\n * Shorthand form with \"then\" and \"else\" blocks:\n *\n * ```\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n * <ng-template #thenBlock>Content to render when condition is true.</ng-template>\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n * ```\n *\n * Form with storing the value locally:\n *\n * ```\n * <div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\n * <ng-template #elseBlock>Content to render when value is null.</ng-template>\n * ```\n *\n * \\@usageNotes\n *\n * The `*ngIf` directive is most commonly used to conditionally show an inline template,\n * as seen in the following  example.\n * The default `else` template is blank.\n *\n * {\\@example common/ngIf/ts/module.ts region='NgIfSimple'}\n *\n * ### Showing an alternative template using `else`\n *\n * To display a template when `expression` evaluates to false, use an `else` template\n * binding as shown in the following example.\n * The `else` binding points to an `<ng-template>`  element labeled `#elseBlock`.\n * The template can be defined anywhere in the component view, but is typically placed right after\n * `ngIf` for readability.\n *\n * {\\@example common/ngIf/ts/module.ts region='NgIfElse'}\n *\n * ### Using an external `then` template\n *\n * In the previous example, the then-clause template is specified inline, as the content of the\n * tag that contains the `ngIf` directive. You can also specify a template that is defined\n * externally, by referencing a labeled `<ng-template>` element. When you do this, you can\n * change which template to use at runtime, as shown in the following example.\n *\n * {\\@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n *\n * ### Storing a conditional result in a variable\n *\n * You might want to show a set of properties from the same object. If you are waiting\n * for asynchronous data, the object can be undefined.\n * In this case, you can use `ngIf` and store the result of the condition in a local\n * variable as shown in the the following example.\n *\n * {\\@example common/ngIf/ts/module.ts region='NgIfAs'}\n *\n * This code uses only one `AsyncPipe`, so only one subscription is created.\n * The conditional statement stores the result of `userStream|async` in the local variable `user`.\n * You can then bind the local `user` repeatedly.\n *\n * The conditional displays the data only if `userStream` returns a value,\n * so you don't need to use the\n * [safe-navigation-operator](guide/template-syntax#safe-navigation-operator) (`?.`)\n * to guard against null values when accessing properties.\n * You can display an alternative template while waiting for the data.\n *\n * ### Shorthand syntax\n *\n * The shorthand syntax `*ngIf` expands into two separate template specifications\n * for the \"then\" and \"else\" clauses. For example, consider the following shorthand statement,\n * that is meant to show a loading page while waiting for data to be loaded.\n *\n * ```\n * <div class=\"hero-list\" *ngIf=\"heroes else loading\">\n *  ...\n * </div>\n *\n * <ng-template #loading>\n *  <div>Loading...</div>\n * </ng-template>\n * ```\n *\n * You can see that the \"else\" clause references the `<ng-template>`\n * with the `#loading` label, and the template for the \"then\" clause\n * is provided as the content of the anchor element.\n *\n * However, when Angular expands the shorthand syntax, it creates\n * another `<ng-template>` tag, with `ngIf` and `ngIfElse` directives.\n * The anchor element containing the template for the \"then\" clause becomes\n * the content of this unlabeled `<ng-template>` tag.\n *\n * ```\n * <ng-template [ngIf]=\"hero-list\" [ngIfElse]=\"loading\">\n *  <div class=\"hero-list\">\n *   ...\n *  </div>\n * </ng-template>\n *\n * <ng-template #loading>\n *  <div>Loading...</div>\n * </ng-template>\n * ```\n *\n * The presence of the implicit template object has implications for the nesting of\n * structural directives. For more on this subject, see\n * [Structural Directives](https://angular.io/guide/structural-directives#one-per-element).\n *\n * \\@ngModule CommonModule\n * \\@publicApi\n */\nexport class NgIf {\n    /**\n     * @param {?} _viewContainer\n     * @param {?} templateRef\n     */\n    constructor(_viewContainer, templateRef) {\n        this._viewContainer = _viewContainer;\n        this._context = new NgIfContext();\n        this._thenTemplateRef = null;\n        this._elseTemplateRef = null;\n        this._thenViewRef = null;\n        this._elseViewRef = null;\n        this._thenTemplateRef = templateRef;\n    }\n    /**\n     * The Boolean expression to evaluate as the condition for showing a template.\n     * @param {?} condition\n     * @return {?}\n     */\n    set ngIf(condition) {\n        this._context.$implicit = this._context.ngIf = condition;\n        this._updateView();\n    }\n    /**\n     * A template to show if the condition expression evaluates to true.\n     * @param {?} templateRef\n     * @return {?}\n     */\n    set ngIfThen(templateRef) {\n        assertTemplate('ngIfThen', templateRef);\n        this._thenTemplateRef = templateRef;\n        this._thenViewRef = null; // clear previous view if any.\n        this._updateView();\n    }\n    /**\n     * A template to show if the condition expression evaluates to false.\n     * @param {?} templateRef\n     * @return {?}\n     */\n    set ngIfElse(templateRef) {\n        assertTemplate('ngIfElse', templateRef);\n        this._elseTemplateRef = templateRef;\n        this._elseViewRef = null; // clear previous view if any.\n        this._updateView();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateView() {\n        if (this._context.$implicit) {\n            if (!this._thenViewRef) {\n                this._viewContainer.clear();\n                this._elseViewRef = null;\n                if (this._thenTemplateRef) {\n                    this._thenViewRef =\n                        this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n                }\n            }\n        }\n        else {\n            if (!this._elseViewRef) {\n                this._viewContainer.clear();\n                this._thenViewRef = null;\n                if (this._elseTemplateRef) {\n                    this._elseViewRef =\n                        this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\n                }\n            }\n        }\n    }\n    /**\n     * Assert the correct type of the expression bound to the `ngIf` input within the template.\n     *\n     * The presence of this method is a signal to the Ivy template type check compiler that when the\n     * `NgIf` structural directive renders its template, the type of the expression bound to `ngIf`\n     * should be narrowed in some way. For `NgIf`, it is narrowed to be non-null, which allows the\n     * strictNullChecks feature of TypeScript to work with `NgIf`.\n     * @template E\n     * @param {?} dir\n     * @param {?} expr\n     * @return {?}\n     */\n    static ngTemplateGuard_ngIf(dir, expr) { return true; }\n}\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgIf, [{\n        type: Directive,\n        args: [{ selector: '[ngIf]' }]\n    }], function () { return [{ type: ViewContainerRef }, { type: TemplateRef }]; }, { constructor: [], _viewContainer: [], _context: [], _thenTemplateRef: [], _elseTemplateRef: [], _thenViewRef: [], _elseViewRef: [], ngIf: [{\n            type: Input\n        }], ngIfThen: [{\n            type: Input\n        }], ngIfElse: [{\n            type: Input\n        }], _updateView: [] });\nNgIf.ngDirectiveDef = ɵngcc0.ɵdefineDirective({ type: NgIf, selectors: [[\"\", \"ngIf\", \"\"]], factory: function NgIf_Factory(t) { return new (t || NgIf)(ɵngcc0.ɵdirectiveInject(ViewContainerRef), ɵngcc0.ɵdirectiveInject(TemplateRef)); }, inputs: { ngIf: \"ngIf\", ngIfThen: \"ngIfThen\", ngIfElse: \"ngIfElse\" } });\n/** @nocollapse */\nNgIf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef }\n];\nNgIf.propDecorators = {\n    ngIf: [{ type: Input }],\n    ngIfThen: [{ type: Input }],\n    ngIfElse: [{ type: Input }]\n};\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    NgIf.ngIfUseIfTypeGuard;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgIf.prototype._context;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgIf.prototype._thenTemplateRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgIf.prototype._elseTemplateRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgIf.prototype._thenViewRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgIf.prototype._elseViewRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgIf.prototype._viewContainer;\n}\n/**\n * \\@publicApi\n */\nexport class NgIfContext {\n    constructor() {\n        this.$implicit = null;\n        this.ngIf = null;\n    }\n}\nif (false) {\n    /** @type {?} */\n    NgIfContext.prototype.$implicit;\n    /** @type {?} */\n    NgIfContext.prototype.ngIf;\n}\n/**\n * @param {?} property\n * @param {?} templateRef\n * @return {?}\n */\nfunction assertTemplate(property, templateRef) {\n    /** @type {?} */\n    const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);\n    if (!isTemplateRefOrNull) {\n        throw new Error(`${property} must be a TemplateRef, but received '${stringify(templateRef)}'.`);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import { Component, ɵrenderComponent as renderComponent, ChangeDetectorRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst _c0 = [3, \"ngIf\"];\nconst _c1 = [3, \"click\"];\nfunction HelloWorld_div_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵelementStart(0, \"div\");\n    i0.ɵtext(1, \"toto je div\");\n    i0.ɵelementEnd();\n} }\nexport class HelloWorld {\n    constructor(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        this.name = 'World!';\n        this.cond = true;\n    }\n    invalidateVisuals() {\n        this._changeDetector.detectChanges();\n    }\n}\nHelloWorld.ngComponentDef = i0.ɵdefineComponent({ type: HelloWorld, selectors: [[\"hello-world\"]], factory: function HelloWorld_Factory(t) { return new (t || HelloWorld)(i0.ɵdirectiveInject(i0.ChangeDetectorRef)); }, consts: 5, vars: 2, template: function HelloWorld_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵtemplate(0, HelloWorld_div_0_Template, 2, 0, \"div\", _c0);\n        i0.ɵelementStart(1, \"button\", _c1);\n        i0.ɵlistener(\"click\", function HelloWorld_Template_button_click_1_listener($event) { ctx.cond = !ctx.cond; return ctx.invalidateVisuals(); });\n        i0.ɵtext(2, \"click\");\n        i0.ɵelementEnd();\n        i0.ɵelementStart(3, \"h3\");\n        i0.ɵtext(4);\n        i0.ɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵelementProperty(0, \"ngIf\", i0.ɵbind(ctx.cond));\n        i0.ɵflushHooksUpTo(4);\n        i0.ɵtextBinding(4, i0.ɵinterpolation1(\"Hello \", ctx.name, \"\"));\n    } }, directives: [i1.NgIf], encapsulation: 2 });\n/*@__PURE__*/ i0.ɵsetClassMetadata(HelloWorld, [{\n        type: Component,\n        args: [{\n                selector: 'hello-world',\n                template: `\n    <div *ngIf=\"cond\">toto je div</div>\n    <button (click)=\"cond = !cond;invalidateVisuals();\">click</button>\n    <h3>Hello {{name}}</h3>\n  `\n            }]\n    }], function () { return [{ type: i0.ChangeDetectorRef }]; }, null);\nrenderComponent(HelloWorld);\n"],"sourceRoot":""}